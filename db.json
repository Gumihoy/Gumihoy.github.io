{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-spfk/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/css/default.css","path":"css/default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/css/loading-style.css","path":"css/loading-style.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/css/showshare.css","path":"css/showshare.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/alipay.png","path":"img/alipay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/instagram.png","path":"img/instagram.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/qq.png","path":"img/qq.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/segmentfault.png","path":"img/segmentfault.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/weixin.png","path":"img/weixin.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/TweenMax.js","path":"js/TweenMax.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/pace.js","path":"js/pace.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-25.jpg","path":"background/bg-25.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/alipayimg.jpg","path":"img/alipayimg.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/head.jpg","path":"img/head.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/embed.js","path":"js/embed.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-109.jpg","path":"background/bg-109.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-17.jpg","path":"background/bg-17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-26.jpg","path":"background/bg-26.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-27.jpg","path":"background/bg-27.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg.jpg","path":"background/bg.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/blueimp-md5/md5.min.js","path":"js/blueimp-md5/md5.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/gitalk/gitalk.css","path":"js/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/wechatimg.jpg","path":"img/wechatimg.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-15.jpg","path":"background/bg-15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-20.jpg","path":"background/bg-20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-23.jpg","path":"background/bg-23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-14.jpg","path":"background/bg-14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/gitalk/gitalk.min.js","path":"js/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/imgshare.css","path":"static/api/css/imgshare.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/like.css","path":"static/api/css/like.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/select_share.css","path":"static/api/css/select_share.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_popup.css","path":"static/api/css/share_popup.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_16.css","path":"static/api/css/share_style0_16.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_24.css","path":"static/api/css/share_style0_24.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_32.css","path":"static/api/css/share_style0_32.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_16.css","path":"static/api/css/share_style1_16.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_24.css","path":"static/api/css/share_style1_24.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_32.css","path":"static/api/css/share_style1_32.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2.css","path":"static/api/css/share_style2.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_16.css","path":"static/api/css/share_style2_16.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_24.css","path":"static/api/css/share_style2_24.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_32.css","path":"static/api/css/share_style2_32.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style4.css","path":"static/api/css/share_style4.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/slide_share.css","path":"static/api/css/slide_share.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/weixin_popup.css","path":"static/api/css/weixin_popup.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share.js","path":"static/api/js/share.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-22.jpg","path":"background/bg-22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l8.gif","path":"static/api/img/share/l8.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/data.js","path":"static/api/js/trans/data.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/logger.js","path":"static/api/js/trans/logger.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-18.jpg","path":"background/bg-18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-21.jpg","path":"background/bg-21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-24.jpg","path":"background/bg-24.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_16.png","path":"static/api/img/share/icons_0_16.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_32.png","path":"static/api/img/share/icons_0_32.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_16.png","path":"static/api/img/share/icons_1_16.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_24.png","path":"static/api/img/share/icons_1_24.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_24.png","path":"static/api/img/share/icons_0_24.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_32.png","path":"static/api/img/share/icons_1_32.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l0.gif","path":"static/api/img/share/l0.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l1.gif","path":"static/api/img/share/l1.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l2.gif","path":"static/api/img/share/l2.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l3.gif","path":"static/api/img/share/l3.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l4.gif","path":"static/api/img/share/l4.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l5.gif","path":"static/api/img/share/l5.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l6.gif","path":"static/api/img/share/l6.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l7.gif","path":"static/api/img/share/l7.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/pop_c.gif","path":"static/api/img/share/pop_c.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r0.gif","path":"static/api/img/share/r0.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_16.png","path":"static/api/img/share/icons_2_16.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r1.gif","path":"static/api/img/share/r1.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r2.gif","path":"static/api/img/share/r2.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r3.gif","path":"static/api/img/share/r3.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r4.gif","path":"static/api/img/share/r4.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r5.gif","path":"static/api/img/share/r5.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r6.gif","path":"static/api/img/share/r6.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_24.png","path":"static/api/img/share/icons_2_24.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r7.gif","path":"static/api/img/share/r7.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_32.png","path":"static/api/img/share/icons_2_32.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r8.gif","path":"static/api/img/share/r8.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/sc.png","path":"static/api/img/share/sc.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/selectshare_close.png","path":"static/api/img/share/selectshare_close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/share-search-icon.png","path":"static/api/img/share/share-search-icon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/base/class.js","path":"static/api/js/base/class.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/animate.js","path":"static/api/js/component/animate.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/anticheat.js","path":"static/api/js/component/anticheat.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/partners.js","path":"static/api/js/component/partners.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/comm_tools.js","path":"static/api/js/component/comm_tools.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_base.js","path":"static/api/js/component/pop_base.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_dialog.js","path":"static/api/js/component/pop_dialog.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_popup.js","path":"static/api/js/component/pop_popup.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_popup_slide.js","path":"static/api/js/component/pop_popup_slide.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/qrcode.js","path":"static/api/js/component/qrcode.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/conf/const.js","path":"static/api/js/conf/const.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/conf/define.js","path":"static/api/js/conf/define.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/api_base.js","path":"static/api/js/share/api_base.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/combine_api.js","path":"static/api/js/share/combine_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/image_api.js","path":"static/api/js/share/image_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/likeshare.js","path":"static/api/js/share/likeshare.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/like_api.js","path":"static/api/js/share/like_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/share_api.js","path":"static/api/js/share/share_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/slide_api.js","path":"static/api/js/share/slide_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/select_api.js","path":"static/api/js/share/select_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans.js","path":"static/api/js/trans/trans.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_bdxc.js","path":"static/api/js/trans/trans_bdxc.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_bdysc.js","path":"static/api/js/trans/trans_bdysc.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_weixin.js","path":"static/api/js/trans/trans_weixin.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/start/router.js","path":"static/api/js/start/router.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/image_view.js","path":"static/api/js/view/image_view.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/like_view.js","path":"static/api/js/view/like_view.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/select_view.js","path":"static/api/js/view/select_view.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/share_view.js","path":"static/api/js/view/share_view.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/slide_view.js","path":"static/api/js/view/slide_view.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/view_base.js","path":"static/api/js/view/view_base.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-12.jpg","path":"background/bg-12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-111.jpg","path":"background/bg-111.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-16.jpg","path":"background/bg-16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-19.jpg","path":"background/bg-19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/base/tangram.js","path":"static/api/js/base/tangram.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-13.jpg","path":"background/bg-13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-112.jpg","path":"background/bg-112.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-spfk/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1575476849035},{"_id":"themes/hexo-theme-spfk/README.md","hash":"8d4612f17d274fe2f69712540ffaf0d1ff9c14f7","modified":1575476849035},{"_id":"themes/hexo-theme-spfk/_config.yml","hash":"a84552df92ec3a7ba3208d9cfbd3f9c1338c5840","modified":1575476849035},{"_id":"source/404/index.md","hash":"eed726178733e2ff858d435d866cf21f7442cb42","modified":1572678738083},{"_id":"source/about/index.md","hash":"15813636fc0fa56c43626f223171dd984b7b4157","modified":1572678738128},{"_id":"source/categories/index.md","hash":"152a0c964c8176980d3eea2ed00adfd17d3866ca","modified":1572678738129},{"_id":"source/_posts/01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的.md","hash":"b7f6642b2b3225cf8db07c939170a15c733fb2fc","modified":1572678738083},{"_id":"source/_posts/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的.md","hash":"64a4cbf3d56d226e9ca72a9e30d8d22eb79a4741","modified":1572678738083},{"_id":"source/_posts/03-MySQL实战45讲-事务隔离：为什么你改了我还看不见.md","hash":"5d718edfc4d9446d4e3bd074d51d0560509cd9a3","modified":1572678738089},{"_id":"source/_posts/04-MySQL实战45讲-深入浅出索引（上）.md","hash":"6d3a368ec8b92686aebcced9c5e63fd702655d68","modified":1572678738089},{"_id":"source/_posts/05-MySQL实战45讲-深入浅出索引（下）.md","hash":"ec83ee57477b2f7ba1b78d82a9a2329fa15c2543","modified":1572678738089},{"_id":"source/_posts/06-MySQL实战45讲-全局锁和表锁：给表加个字段怎么有这么多阻碍.md","hash":"9ce4d9d9ce1535059a2d3f78da89504a3e318391","modified":1572678738090},{"_id":"source/_posts/07-MySQL实战45讲-行锁功过：怎么减少行锁对性能的影响.md","hash":"2b572c136f63dfa8eaafc270da7ba36faf203df6","modified":1572678738090},{"_id":"source/_posts/08-MySQL实战45讲-事务到底是隔离的还是不隔离的.md","hash":"9fbcb9688e607b4a5c39e6e065c0aa265adacd02","modified":1572678738090},{"_id":"source/_posts/09-MySQL实战45讲-普通索引和唯一索引，应该怎么选择.md","hash":"8964e49a31ed95e1125ac4aa8c1e269fb8561a7b","modified":1572678738090},{"_id":"source/_posts/C4.5算法.md","hash":"e4e9675e2cc4e062749d4ce36e337138fbd067d2","modified":1572678738090},{"_id":"source/_posts/CART算法.md","hash":"6e194acc88d7eb4d5fa3d073eb77f633c0fea7ce","modified":1572678738090},{"_id":"source/_posts/EM算法.md","hash":"0e3be9178c8a5c46004c9b0dc2dfb822eb77ef64","modified":1572678738091},{"_id":"source/_posts/Elasticsearch安装.md","hash":"d5da06eccd1fe787bbff45ae4d9e6e75f803d28e","modified":1572678738091},{"_id":"source/_posts/Github搭建Hexo.md","hash":"9fddd9ce7ebb20c1a232b02277a7fc0de60c2423","modified":1572678738091},{"_id":"source/_posts/Homebrew总结.md","hash":"0b67a1b149577b45efe08876e57a0c22d2b08137","modified":1572678738094},{"_id":"source/_posts/ID3算法.md","hash":"3ec2ab79f6b247bce42141a7b96bf8fb06cd35d2","modified":1572678738094},{"_id":"source/_posts/Java-Agent详解.md","hash":"36e7fac410fcf04da90f29c3091d9e48c70d7257","modified":1572678738094},{"_id":"source/_posts/Java使用Redis.md","hash":"8a68400b0e51278f303391368a71e6c39c60d26c","modified":1572678738096},{"_id":"source/_posts/Java常见问题总结.md","hash":"3edae2fb08e67ceba4a748945deba02f3cf0142f","modified":1572678738096},{"_id":"source/_posts/Joda-Time总结.md","hash":"584548f59083ea66787a00f090f9d424bceb4059","modified":1572678738097},{"_id":"source/_posts/Kafka安装.md","hash":"ba99f7deeb3c2d046cdf1a5be7fa20a82d9dcb44","modified":1572678738097},{"_id":"source/_posts/K近邻算法.md","hash":"5f21ce8f0e761580b7ab2d0ac55db0294ae4e7ad","modified":1572678738097},{"_id":"source/_posts/LaTeX教程.md","hash":"b5e902b5513d20a6a7d50898930a11ed1c233e7d","modified":1572678738097},{"_id":"source/_posts/Mac-使用rz、sz-远程上传、下载文件.md","hash":"99965617f96a399f76d2b2ff732ab204b7ae6138","modified":1572678738097},{"_id":"source/_posts/Mac安装Git.md","hash":"df4ab8d51f42367242cbc84f777f96011219be64","modified":1572678738106},{"_id":"source/_posts/Markdown教程.md","hash":"7ccc6fc1710eed55f1aae769e18eaf632d494064","modified":1572678738106},{"_id":"source/_posts/MongoDB安装.md","hash":"893e4a5df66eb280b3e9b0f33f324acfa06b4426","modified":1572678738106},{"_id":"source/_posts/MongoDB教程.md","hash":"8b74f98dec137ce71e2d4c021d1f69c48d826903","modified":1572678738107},{"_id":"source/_posts/MongoDB设计与实现.md","hash":"5909a41af11edd4cd5312dad76156fcd717d23a9","modified":1572678738107},{"_id":"source/_posts/MySQL实战45讲.md","hash":"12faac062b86dffaf177acd6122b83bcd4ff72a1","modified":1572678738107},{"_id":"source/_posts/MySQL汇总.md","hash":"a99f1ed3a30c530da2afc019827f500b36b0ddc5","modified":1572678738108},{"_id":"source/_posts/MySQL索引.md","hash":"63b63ded716a6b32d07fb04998fc538f874b0c93","modified":1572678738108},{"_id":"source/_posts/MySQL锁.md","hash":"af41826a4a11f687565d18c63ffe431dbc38eee4","modified":1572678738108},{"_id":"source/_posts/Oracle转EDB总结.md","hash":"e3b6334cea88b6afe62c06f58f8536e02b72b188","modified":1572678738108},{"_id":"source/_posts/Oracle转MySQL总结.md","hash":"f5e29b89b34b69e324887328148d2b13492ba823","modified":1572678738108},{"_id":"source/_posts/Oracle转Postgresql总结.md","hash":"6b7aed1e59d676795de14d7cec152047bd47bec6","modified":1572678738108},{"_id":"source/_posts/PyTorch教程.md","hash":"9f4f2a6fc09c4eb348f0b8223dbe97efed309410","modified":1572678738108},{"_id":"source/_posts/Redis安装.md","hash":"2b9769f82b5130749cb1c6b37a4d1919e0566efc","modified":1572678738108},{"_id":"source/_posts/Redis开发规范.md","hash":"1fbeb74ab3db0e77cb344d7a86fcf899ea628750","modified":1572678738109},{"_id":"source/_posts/Redis教程.md","hash":"0fc27adfe430032f530a9522b74cee00aec5ecfb","modified":1572678738109},{"_id":"source/_posts/Redis设计与实现.md","hash":"140f630555c340565a28f9e5c689fac5b2dc7697","modified":1572678738109},{"_id":"source/_posts/SQL词法分析器问题总结.md","hash":"2d3cfb7c2837f0aee1f4fae2e71dc8d01d517294","modified":1572678738113},{"_id":"source/_posts/SQL运算符优先级.md","hash":"cb06ced00f67a3e718d3c90986e71780f7e0733e","modified":1572678738113},{"_id":"source/_posts/SpringBoot应用启动原理分析.md","hash":"022bd8d9dfd47704aeb58737233e02f4762d8b91","modified":1572678738113},{"_id":"source/_posts/SpringBoot集成Elasticsearch.md","hash":"89bbffe2a6be7e185983042a5325981f717652b8","modified":1572678738113},{"_id":"source/_posts/ZooKeeper安装.md","hash":"a6daca353985f6649e1ebc5ac39dff29893191f4","modified":1572678738114},{"_id":"source/_posts/iterm2总结.md","hash":"c4514954efe78afabbb83d2ffcd2e3daa64186ab","modified":1572678738114},{"_id":"source/_posts/python教程.md","hash":"21942f98c3fb26920a40432eabe9d5dd2a137aa1","modified":1572678738118},{"_id":"source/_posts/tensorflow教程.md","hash":"2090c9ad20da908da7230c7e86823b24b708f468","modified":1572678738118},{"_id":"source/_posts/thrift教程.md","hash":"7872d491d0cb1b60213de99b05cbb67502ec23b4","modified":1572678738121},{"_id":"source/_posts/中文分词.md","hash":"c5931cc730178997df282e70ab13c32fb9d05c3e","modified":1572678738122},{"_id":"source/_posts/交叉熵.md","hash":"bdea1b1376eadaee7f22922616fe34addbd61c01","modified":1572678738122},{"_id":"source/_posts/人工神经网络.md","hash":"f2bdae9dc528124772b02f6eac08d5b3b2f8a6c7","modified":1572678738122},{"_id":"source/_posts/信息熵.md","hash":"96e0e5033216f1dd893fbe9b012ccc1814522494","modified":1572678738123},{"_id":"source/_posts/创建SecureRandom过慢问题.md","hash":"971d0938120afe3eb81ae2c2f126fb76f4e7172f","modified":1572678738123},{"_id":"source/_posts/前馈神经网络.md","hash":"40704bee80490350647940731aa0fd5a050718d4","modified":1572678738124},{"_id":"source/_posts/半朴素贝叶斯算法.md","hash":"1ffaf798d128513beb3bbe3ab78f2721b91c8d2c","modified":1572678738124},{"_id":"source/_posts/协方差.md","hash":"075c96bb6309bf88577d4e55c2b18dacb9aa7ae0","modified":1572678738124},{"_id":"source/_posts/卷积神经网络.md","hash":"9b939ca9802bb917b9cd7948abefcdc2646c647a","modified":1572678738124},{"_id":"source/_posts/哈希-Hash-函数汇总.md","hash":"0d29c1ec268aee79a65c6215c4317bbf1ed47dd5","modified":1572678738124},{"_id":"source/_posts/微积分.md","hash":"4ecb8fc37b652bc75907a815f4789d3fed4cd76f","modified":1572678738125},{"_id":"source/_posts/感知机算法.md","hash":"43b4dce53a14d4e84e98cb7a39e8b7e3dbe138db","modified":1572678738125},{"_id":"source/_posts/排序算法汇总.md","hash":"b5526509fb3b58a03a192c14da8d7864322abcac","modified":1572678738125},{"_id":"source/_posts/支持向量机.md","hash":"578b0f9d68a12802552d4b616355e2c9734a9ffd","modified":1572678738125},{"_id":"source/_posts/方差.md","hash":"f1f02aa7a315bf9ecb3d46632595aa9ff6d0154f","modified":1572678738125},{"_id":"source/_posts/期望值.md","hash":"12e5440608ccde1b600c83fa9e1b328ee9790e74","modified":1572678738126},{"_id":"source/_posts/朴素贝叶斯算法.md","hash":"f8fd73cdd78acfc9415810d7c0ef9a4cd87b6d6c","modified":1572678738126},{"_id":"source/_posts/机器学习.md","hash":"1d80b885d1db0e2c0bdc46a95037477c9d6ab77e","modified":1572678738126},{"_id":"source/_posts/条件熵.md","hash":"e820e8ae22437c17510c0769c0e0b43b9670aac1","modified":1572678738126},{"_id":"source/_posts/极限.md","hash":"fc0a4d1eb19aebf724a90055316c505ead7364d0","modified":1572678738126},{"_id":"source/_posts/查看class文件的jdk编译版本.md","hash":"d8e354464b9e8ff46b81a895577d6c4a9340cb13","modified":1572678738127},{"_id":"source/_posts/标准差.md","hash":"de104901bfadd73ac4f71a4a4183653905bfa69e","modified":1572678738127},{"_id":"source/_posts/编译器-vs-解释器：编译器和解释器之间的区别.md","hash":"7087cf12ec05e8b28ee000452a148b03c95bb4c7","modified":1572678738127},{"_id":"source/_posts/设计模式总结.md","hash":"08d31bf72ce709a9de23484b0bbf849cbc481a69","modified":1572678738127},{"_id":"source/_posts/调用链上下文跨线程传递.md","hash":"65026f5a3365dfc37265bbc03dc75aab31012584","modified":1572678738127},{"_id":"source/_posts/贝叶斯网算法.md","hash":"a8fdb243d95b64748b2c17f4426a85bd66f1785e","modified":1572678738128},{"_id":"source/_posts/负载均衡算法.md","hash":"210842a111cef2790c971afe6b9cdf9bc5034ac5","modified":1572678738128},{"_id":"source/_posts/递归神经网络.md","hash":"0ff095d524b16da99eaae211ce1b855b46e56355","modified":1572678738128},{"_id":"source/tags/index.md","hash":"c3a61fb0da4ed45c25bda6d022d9c04b58855c81","modified":1572678738129},{"_id":"themes/hexo-theme-spfk/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1575476849029},{"_id":"themes/hexo-theme-spfk/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1575475488694},{"_id":"themes/hexo-theme-spfk/.git/config","hash":"cadc5f13baeec4b6f15d0da847f275fefafd0ad4","modified":1575476849030},{"_id":"themes/hexo-theme-spfk/.git/index","hash":"844867baa684fb4f1217cf3689a7ab7b5ab72b80","modified":1575476849188},{"_id":"themes/hexo-theme-spfk/.git/packed-refs","hash":"53503903b1e2f56639923616be8e51e5ccbf7aa0","modified":1575476849027},{"_id":"themes/hexo-theme-spfk/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1575476849035},{"_id":"themes/hexo-theme-spfk/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1575476849036},{"_id":"themes/hexo-theme-spfk/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1575476849036},{"_id":"themes/hexo-theme-spfk/languages/es.yml","hash":"1f9e9c0084e972c8e40045da963ec4904ac79327","modified":1575476849036},{"_id":"themes/hexo-theme-spfk/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1575476849036},{"_id":"themes/hexo-theme-spfk/languages/pt-BR","hash":"922b6d836cc690742b2d55a725e3886c5d0cbb75","modified":1575476849036},{"_id":"themes/hexo-theme-spfk/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1575476849036},{"_id":"themes/hexo-theme-spfk/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1575476849036},{"_id":"themes/hexo-theme-spfk/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1575476849036},{"_id":"themes/hexo-theme-spfk/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1575476849036},{"_id":"themes/hexo-theme-spfk/languages/zh.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1575476849037},{"_id":"themes/hexo-theme-spfk/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1575476849045},{"_id":"themes/hexo-theme-spfk/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1575476849045},{"_id":"themes/hexo-theme-spfk/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1575476849045},{"_id":"themes/hexo-theme-spfk/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1575476849045},{"_id":"themes/hexo-theme-spfk/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1575476849046},{"_id":"themes/hexo-theme-spfk/layout/plugins.swig","hash":"f809b5e62e968a80921c56e5d7658325b48b7263","modified":1575476849046},{"_id":"themes/hexo-theme-spfk/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1575476849046},{"_id":"themes/hexo-theme-spfk/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1575476849046},{"_id":"themes/hexo-theme-spfk/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1575476849047},{"_id":"themes/hexo-theme-spfk/source/css/default.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575476849139},{"_id":"source/_posts/Redis设计与实现/graphviz-167adfc2e52e078d4c0e3c8a9eddec54551602fb.png","hash":"8bfd7c4e974653323164bce9b25ceae8eeec2418","modified":1572678738109},{"_id":"source/_posts/Redis设计与实现/graphviz-72760f6945c3742eca0df91a91cc379168eda82d.png","hash":"8fb35d52fae7bb70ccdea766c8478a73db870ea0","modified":1572678738110},{"_id":"source/_posts/Redis设计与实现/graphviz-5f4d8b6177061ac52d0ae05ef357fceb52e9cb90.png","hash":"9589587ae012ed1578f656ca3d55548f058ca56b","modified":1572678738109},{"_id":"source/_posts/Redis设计与实现/graphviz-8fc5de396a5b52c3d0b1991a1e09558ad055dd86.png","hash":"4623c92c85483ed8e3d95a4d39365e4a6fcc2ce3","modified":1572678738110},{"_id":"source/_posts/Redis设计与实现/graphviz-acf7fe010d7b09c5d2500c72eb555863e67ad74f.png","hash":"b9289eb1d7550aa01056e1b829ad03df1c1de091","modified":1572678738110},{"_id":"source/_posts/Redis设计与实现/graphviz-bd3eecd927a4d8fc33b4a1c7f5957c52d67c5021.png","hash":"a068b49bba0ce76d72f9cb4f0de4a467cd19c2dc","modified":1572678738111},{"_id":"source/_posts/iterm2总结/logo2x.jpg","hash":"aa9f010f51a2051e84c699c46f40bc604b5ef4e2","modified":1572678738118},{"_id":"source/_posts/thrift教程/thrift-layers.png","hash":"8950d509517f7128feb0c295cbe29f2fa849e345","modified":1572678738122},{"_id":"source/_posts/人工神经网络/1543648111947.jpg","hash":"d1ae47e013dc99883394317fef4095a16310caa3","modified":1572678738123},{"_id":"themes/hexo-theme-spfk/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1575475488694},{"_id":"themes/hexo-theme-spfk/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1575475488694},{"_id":"themes/hexo-theme-spfk/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1575475488695},{"_id":"themes/hexo-theme-spfk/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1575475488695},{"_id":"themes/hexo-theme-spfk/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1575475488695},{"_id":"themes/hexo-theme-spfk/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1575475488694},{"_id":"themes/hexo-theme-spfk/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1575475488695},{"_id":"themes/hexo-theme-spfk/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1575475488695},{"_id":"themes/hexo-theme-spfk/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1575475488694},{"_id":"themes/hexo-theme-spfk/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1575475488695},{"_id":"themes/hexo-theme-spfk/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1575475488695},{"_id":"themes/hexo-theme-spfk/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1575475488694},{"_id":"themes/hexo-theme-spfk/.git/logs/HEAD","hash":"dd4eb46549557f97b93f7a3a3f7ff49f74f0533b","modified":1575476849029},{"_id":"themes/hexo-theme-spfk/layout/_partial/after-footer.ejs","hash":"d2d8fda1d50d193088dbd641c6dcc3bd2bdf0165","modified":1575476849037},{"_id":"themes/hexo-theme-spfk/layout/_partial/archive-post.ejs","hash":"c2591aa0aa37dbed603e659d777101f8cfbfff78","modified":1575476849038},{"_id":"themes/hexo-theme-spfk/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1575476849038},{"_id":"themes/hexo-theme-spfk/layout/_partial/article.ejs","hash":"2a6ce996339d24628111829ff03ab924504b6019","modified":1575476849038},{"_id":"themes/hexo-theme-spfk/layout/_partial/background.ejs","hash":"cb656037dae582272c748c68a174f2da622d5a12","modified":1575476849038},{"_id":"themes/hexo-theme-spfk/layout/_partial/bodybackground.ejs","hash":"931700a928b84577cc33dfff68a009188885f6c0","modified":1575476849038},{"_id":"themes/hexo-theme-spfk/layout/_partial/case.swig","hash":"a2a7ec0e4c203e49fd32335c60c3b9851ed6e4a5","modified":1575476849038},{"_id":"themes/hexo-theme-spfk/layout/_partial/footer.ejs","hash":"fcca1aede5a29c5c6a0617acb5b8266b525bd5f6","modified":1575476849039},{"_id":"themes/hexo-theme-spfk/layout/_partial/head.ejs","hash":"6f34f1062b8bbd46bb5216332c8110c08697c6d2","modified":1575476849039},{"_id":"themes/hexo-theme-spfk/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1575476849039},{"_id":"themes/hexo-theme-spfk/layout/_partial/hide-labels.ejs","hash":"e981795db4954ba5cc9d6844a6a2799bffdc0af3","modified":1575476849040},{"_id":"themes/hexo-theme-spfk/layout/_partial/left-col.ejs","hash":"9d9aaecfd40903be38b97c46d6b7f1ea3fd7354e","modified":1575476849040},{"_id":"themes/hexo-theme-spfk/layout/_partial/mathjax.ejs","hash":"80898c96cc126dc4f49d40820fe7fa7b1e6defe0","modified":1575476849040},{"_id":"themes/hexo-theme-spfk/layout/_partial/mobile-nav.ejs","hash":"320de58b166710d02963d80f27bcd50478841401","modified":1575476849040},{"_id":"themes/hexo-theme-spfk/layout/_partial/page.ejs","hash":"daeec8ae9ceb3cc7f26cd183979972873588f092","modified":1575476849041},{"_id":"themes/hexo-theme-spfk/layout/_partial/plugin.swig","hash":"17b6c6945e4b1b41dbb10d851f85ca10100c28ea","modified":1575476849041},{"_id":"themes/hexo-theme-spfk/layout/_partial/post-nav-button.ejs","hash":"c817bdf39f62670872aae19accea4c51f5e0bfa7","modified":1575476849041},{"_id":"themes/hexo-theme-spfk/layout/_partial/scrolling-button.ejs","hash":"b3a28974f37375796687e6100b48c3da6f662640","modified":1575476849043},{"_id":"themes/hexo-theme-spfk/layout/_partial/sidebar.swig","hash":"38bea91021bc559245ef7765a3fdd805ec9885c1","modified":1575476849044},{"_id":"themes/hexo-theme-spfk/layout/_partial/theme.swig","hash":"5a279ad8f6c6b7c104cce495faa563d8b7a7c74a","modified":1575476849044},{"_id":"themes/hexo-theme-spfk/layout/_partial/toc.ejs","hash":"84bbda825793de643d5a40190fab2160af1e75e3","modified":1575476849045},{"_id":"themes/hexo-theme-spfk/layout/_partial/work.swig","hash":"6bdb6ec45f6179875e5a33bfdc7568a3831638fd","modified":1575476849045},{"_id":"themes/hexo-theme-spfk/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1575476849133},{"_id":"themes/hexo-theme-spfk/source/css/_variables.styl","hash":"a753c14f409a294188f2e99575f2c10b82fd56a2","modified":1575476849139},{"_id":"themes/hexo-theme-spfk/source/css/loading-style.css","hash":"1f67362d809e85edc9f122db7bc3711af1ed1d8b","modified":1575476849139},{"_id":"themes/hexo-theme-spfk/source/css/style.styl","hash":"e2064d2ba11610154306730bfbac821b9633abe7","modified":1575476849140},{"_id":"themes/hexo-theme-spfk/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1575476849140},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1575476849140},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1575476849141},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1575476849141},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1575476849141},{"_id":"themes/hexo-theme-spfk/source/css/showshare.css","hash":"d5288601c95acd7fea993ac8cc3d04efcbdd1559","modified":1575476849140},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1575476849143},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1575476849144},{"_id":"themes/hexo-theme-spfk/source/img/alipay.png","hash":"6ec0c618109aac31a212d252a3b85f2975b82b3a","modified":1575476849152},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1575476849141},{"_id":"themes/hexo-theme-spfk/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1575476849154},{"_id":"themes/hexo-theme-spfk/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1575476849154},{"_id":"themes/hexo-theme-spfk/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1575476849154},{"_id":"themes/hexo-theme-spfk/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1575476849155},{"_id":"themes/hexo-theme-spfk/source/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1575476849155},{"_id":"themes/hexo-theme-spfk/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1575476849155},{"_id":"themes/hexo-theme-spfk/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1575476849155},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1575476849143},{"_id":"themes/hexo-theme-spfk/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1575476849156},{"_id":"themes/hexo-theme-spfk/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1575476849156},{"_id":"themes/hexo-theme-spfk/source/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1575476849156},{"_id":"themes/hexo-theme-spfk/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1575476849156},{"_id":"themes/hexo-theme-spfk/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1575476849157},{"_id":"themes/hexo-theme-spfk/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1575476849157},{"_id":"themes/hexo-theme-spfk/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1575476849157},{"_id":"themes/hexo-theme-spfk/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1575476849157},{"_id":"themes/hexo-theme-spfk/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1575476849157},{"_id":"themes/hexo-theme-spfk/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1575476849158},{"_id":"themes/hexo-theme-spfk/source/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1575476849158},{"_id":"themes/hexo-theme-spfk/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1575476849158},{"_id":"themes/hexo-theme-spfk/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1575476849158},{"_id":"themes/hexo-theme-spfk/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1575476849159},{"_id":"themes/hexo-theme-spfk/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1575476849160},{"_id":"themes/hexo-theme-spfk/source/img/weixin.png","hash":"92b8df9aba9169c1553c01994bf21a938fa39cb7","modified":1575476849160},{"_id":"themes/hexo-theme-spfk/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1575476849161},{"_id":"themes/hexo-theme-spfk/source/js/TweenMax.js","hash":"0ba64564a4fde4085fa3971dd53b7d64a41751e1","modified":1575476849162},{"_id":"themes/hexo-theme-spfk/source/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1575476849164},{"_id":"themes/hexo-theme-spfk/source/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1575476849167},{"_id":"themes/hexo-theme-spfk/source/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1575476849167},{"_id":"themes/hexo-theme-spfk/source/js/main.js","hash":"921b2fb56e48cce3d16ceb4a3fadf8e666c73a0a","modified":1575476849168},{"_id":"themes/hexo-theme-spfk/source/js/mobile.js","hash":"d3847e5bcaf39108931724ecb02770c62b10889f","modified":1575476849168},{"_id":"themes/hexo-theme-spfk/source/js/pc.js","hash":"ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40","modified":1575476849168},{"_id":"themes/hexo-theme-spfk/source/js/plugins.js","hash":"c1cf96b2d852b5803228a34d99014b005623bc06","modified":1575476849169},{"_id":"themes/hexo-theme-spfk/source/js/pace.js","hash":"b49c10cd65d9488f7338e3c778e55ac6628650f3","modified":1575476849168},{"_id":"source/_posts/Github搭建Hexo/1542037823098.jpg","hash":"0d8ae68183041f46cab6f094eca36bd07ebc6a33","modified":1572678738091},{"_id":"source/_posts/Mac-使用rz、sz-远程上传、下载文件/122150034707951.png","hash":"0923aa96f15dcefc305cdf3c1ce81effa35438c0","modified":1572678738098},{"_id":"themes/hexo-theme-spfk/source/background/bg-25.jpg","hash":"7a05a524b70c9acd75c3f16a3b9992e4587995bd","modified":1575476849106},{"_id":"themes/hexo-theme-spfk/source/img/alipayimg.jpg","hash":"5e580fc88085b7e34d50be3c652c3edc38c6d5df","modified":1575476849152},{"_id":"themes/hexo-theme-spfk/source/img/head.jpg","hash":"80c0999acfc1173183d3dd243b4b90d077ab97cb","modified":1575476849156},{"_id":"themes/hexo-theme-spfk/source/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1575476849163},{"_id":"themes/hexo-theme-spfk/source/js/embed.js","hash":"8d2d4a812ab639bc02fdd8749d3a39f6b9406c54","modified":1575476849164},{"_id":"source/_posts/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的/16a7950217b3f0f4ed02db5db59562a7.png","hash":"cb34bc60f583ed3d34b50574782211e0bab66919","modified":1572678738089},{"_id":"source/_posts/Github搭建Hexo/1542074055382.jpg","hash":"4e2b693b82c18acc30238548c8734bc6079846f8","modified":1572678738093},{"_id":"source/_posts/Java-Agent详解/1565786297241.jpg","hash":"f4c09845c02065bc284327eea51df400fe071ead","modified":1572678738096},{"_id":"themes/hexo-theme-spfk/.git/objects/pack/pack-91b6017ca90dcb01a2ebd6ea7f2aa21b2153f2ce.idx","hash":"ddfbabf5c27e86a0f85a31090b02d501a18873bb","modified":1575476849019},{"_id":"themes/hexo-theme-spfk/.git/refs/heads/master","hash":"3e7b0550af4db8b4fbf5ee50adcc283bda941645","modified":1575476849029},{"_id":"themes/hexo-theme-spfk/layout/_partial/analytics/baidu-analytics.ejs","hash":"b21500b87d79a0068e3ca0408b4e125e3e749d01","modified":1575476849037},{"_id":"themes/hexo-theme-spfk/layout/_partial/analytics/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1575476849037},{"_id":"themes/hexo-theme-spfk/layout/_partial/comments/disqus.ejs","hash":"7792a79ab85ef28551cc2a793735973b1d5521a7","modified":1575476849038},{"_id":"themes/hexo-theme-spfk/layout/_partial/comments/duoshuo.ejs","hash":"f6112c3f08f46dde1c0ba6a5bee8017624590e47","modified":1575476849039},{"_id":"themes/hexo-theme-spfk/layout/_partial/comments/gitalk.ejs","hash":"4aac8e4e7067fe2e07e334af5ec77f47c12fed7c","modified":1575476849039},{"_id":"themes/hexo-theme-spfk/layout/_partial/comments/gitment.ejs","hash":"a3248f670ca13c4ea1e330cf8b89152adb8b5625","modified":1575476849039},{"_id":"themes/hexo-theme-spfk/layout/_partial/comments/youyan.ejs","hash":"a6853b59ee60e775de1ed90b242084f83774d195","modified":1575476849039},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/TipTitle.ejs","hash":"65b0956edca84e0bc0eb616ec236309822d5f803","modified":1575476849041},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/article-category.ejs","hash":"819ec2e3063253be46f203ca837c44072e423bdd","modified":1575476849042},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/article-tag.ejs","hash":"9dad471e27de9e066666f3082137eccaede2e67b","modified":1575476849042},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/category.ejs","hash":"3f32f956eaa16b7fffa9cfe9cc027e7da4fb2685","modified":1575476849042},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/date.ejs","hash":"1cfcf2e06ab9b1c6dcd44f41825dfe98d400c7ea","modified":1575476849042},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/loading.ejs","hash":"52a576a8afee08d33c6f69a61c496e1820132e91","modified":1575476849043},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/nav.ejs","hash":"e170207b8976e35ce2fd0fc35dbfcbb20093ecc1","modified":1575476849043},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/swiftype.ejs","hash":"76374e601d911e1279e1944d2a6b7eb3391c7c7c","modified":1575476849043},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1575476849043},{"_id":"themes/hexo-theme-spfk/layout/_partial/share/baidu-share.ejs","hash":"993b7d231881601ba79aab1e78d75dcb271b3500","modified":1575476849044},{"_id":"themes/hexo-theme-spfk/layout/_partial/share/share.ejs","hash":"62467610ba6df9b63350d163e806be774dcf5a00","modified":1575476849044},{"_id":"themes/hexo-theme-spfk/layout/_partial/share/showshare.ejs","hash":"410b809eb6c50bacfd9e1e573f1e0251841bc79d","modified":1575476849044},{"_id":"themes/hexo-theme-spfk/source/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1575476849049},{"_id":"themes/hexo-theme-spfk/source/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1575476849055},{"_id":"themes/hexo-theme-spfk/source/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1575476849053},{"_id":"themes/hexo-theme-spfk/source/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1575476849088},{"_id":"themes/hexo-theme-spfk/source/background/bg-26.jpg","hash":"3730aa317f9d75ca327b34478cd58e72667b04e8","modified":1575476849107},{"_id":"themes/hexo-theme-spfk/source/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1575476849109},{"_id":"themes/hexo-theme-spfk/source/css/_partial/archive.styl","hash":"a8bc2e2458bcc51fa68122274a41f5e4e52a8ebd","modified":1575476849133},{"_id":"themes/hexo-theme-spfk/source/background/bg-27.jpg","hash":"ced50e6e8cad2b0db97445c4e1463d4a62540b9b","modified":1575476849108},{"_id":"themes/hexo-theme-spfk/source/css/_partial/article.styl","hash":"956eddddae0059c0abc63c5cc820b6e987a673cc","modified":1575476849133},{"_id":"themes/hexo-theme-spfk/source/css/_partial/baidushare.styl","hash":"fe36e3d8933b1b0b674aaf16e50dbf6090099912","modified":1575476849134},{"_id":"themes/hexo-theme-spfk/source/css/_partial/footer.styl","hash":"cbf916a5338e69e05d0815c53aeb818d636b6d99","modified":1575476849135},{"_id":"themes/hexo-theme-spfk/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1575476849135},{"_id":"themes/hexo-theme-spfk/source/css/_partial/highlight.styl","hash":"511a038d6353226e71a9d8396d778b4c8c19592b","modified":1575476849135},{"_id":"themes/hexo-theme-spfk/source/css/_partial/instagram.styl","hash":"db9cc156c7df27f7f54b0e7ff34b5949f55f99eb","modified":1575476849135},{"_id":"themes/hexo-theme-spfk/source/css/_partial/main.styl","hash":"6e3d15fbe2663bb6fc408df4a771925c3eac65cf","modified":1575476849136},{"_id":"themes/hexo-theme-spfk/source/css/_partial/mobile-slider.styl","hash":"3bf9f2359f68c700e21618ad6262db81038c3d96","modified":1575476849136},{"_id":"themes/hexo-theme-spfk/source/css/_partial/mobile.styl","hash":"53b1a06e08df81427505cbc76cc8eb02bea54356","modified":1575476849136},{"_id":"themes/hexo-theme-spfk/source/css/_partial/page.styl","hash":"46b9c91428c1e1f42cc8a1010f600f70fb8edc82","modified":1575476849136},{"_id":"themes/hexo-theme-spfk/source/css/_partial/plugins.styl","hash":"629ae10dfc053dbfc074966f0bf7f0115acf65e2","modified":1575476849136},{"_id":"themes/hexo-theme-spfk/source/css/_partial/reward.styl","hash":"2b705bcc1c2f8c71a979aa10851a162d1deba394","modified":1575476849137},{"_id":"themes/hexo-theme-spfk/source/css/_partial/scroll.styl","hash":"1932774d30b8706919342f9cf36ea2d99987ce14","modified":1575476849138},{"_id":"themes/hexo-theme-spfk/source/css/_partial/share.styl","hash":"2dde7c9ea40c71fce3dbd8d5e2bcc8d9682141b8","modified":1575476849138},{"_id":"themes/hexo-theme-spfk/source/css/_partial/tagcloud.styl","hash":"91e6553775ca931a1b3db1ab11c4cf227df68c21","modified":1575476849138},{"_id":"themes/hexo-theme-spfk/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1575476849138},{"_id":"themes/hexo-theme-spfk/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1575476849138},{"_id":"themes/hexo-theme-spfk/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1575476849139},{"_id":"themes/hexo-theme-spfk/source/css/pace/pace-theme-flash.css","hash":"508bce8b59a1fbc1f1443a7c4ab3b026e5517dab","modified":1575476849139},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1575476849142},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1575476849142},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1575476849142},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1575476849143},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1575476849142},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1575476849142},{"_id":"themes/hexo-theme-spfk/source/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1575476849132},{"_id":"themes/hexo-theme-spfk/source/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1575476849145},{"_id":"themes/hexo-theme-spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1575476849162},{"_id":"themes/hexo-theme-spfk/source/js/blueimp-md5/md5.min.js","hash":"9e95b3d2fad05cd68bbe721bd9fe79e524c47e71","modified":1575476849163},{"_id":"themes/hexo-theme-spfk/source/js/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1575476849165},{"_id":"themes/hexo-theme-spfk/source/js/gitment.browser.js","hash":"6154e6a3bfb402c3ecc9b7889675f1f640926b75","modified":1575476849167},{"_id":"themes/hexo-theme-spfk/source/img/wechatimg.jpg","hash":"e9698d0fba0bce97c4aa0d65539f1e285a3f8b24","modified":1575476849160},{"_id":"source/_posts/Github搭建Hexo/1542073066701.jpg","hash":"cfbdcf85e3d45f5a28bfa2293f773747d0fa9cce","modified":1572678738093},{"_id":"source/_posts/Java-Agent详解/1565784207465.jpg","hash":"1dcd897398954ff6e5bfb16138a41316b1d26194","modified":1572678738095},{"_id":"themes/hexo-theme-spfk/source/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1575476849085},{"_id":"themes/hexo-theme-spfk/source/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1575476849096},{"_id":"themes/hexo-theme-spfk/source/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1575476849102},{"_id":"themes/hexo-theme-spfk/source/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1575476849127},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1575476849146},{"_id":"themes/hexo-theme-spfk/source/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1575476849144},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1575476849146},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1575476849151},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1575476849151},{"_id":"themes/hexo-theme-spfk/source/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1575476849161},{"_id":"source/_posts/MongoDB安装/adminMongo_connections.png","hash":"275a4437131ca6c2882a039277412a47c9863c89","modified":1572678738107},{"_id":"themes/hexo-theme-spfk/.git/logs/refs/heads/master","hash":"dd4eb46549557f97b93f7a3a3f7ff49f74f0533b","modified":1575476849029},{"_id":"themes/hexo-theme-spfk/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1575476849028},{"_id":"themes/hexo-theme-spfk/source/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1575476849083},{"_id":"themes/hexo-theme-spfk/source/css/_partial/customise/blockquote.styl","hash":"83179f1d0e12b025cd433a6071b2826c2b4168cc","modified":1575476849134},{"_id":"themes/hexo-theme-spfk/source/css/_partial/customise/code-block.styl","hash":"1f05c0558b2970c369fe19bafbc8a1821c09bce0","modified":1575476849134},{"_id":"themes/hexo-theme-spfk/source/css/_partial/customise/inline-code.styl","hash":"ac2fcef8823d5566c0e27f23b2a46beecbd71c72","modified":1575476849134},{"_id":"themes/hexo-theme-spfk/source/css/_partial/post/gitment.styl","hash":"9a103392d4fd8ba0667e633fcb8b30d36d51ef65","modified":1575476849137},{"_id":"themes/hexo-theme-spfk/source/css/_partial/post/youyan.styl","hash":"ac2869e2e0fb3a1ee0df4b0c0a233a2b1923ea20","modified":1575476849137},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1575476849150},{"_id":"themes/hexo-theme-spfk/source/js/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1575476849166},{"_id":"themes/hexo-theme-spfk/source/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1575476849169},{"_id":"themes/hexo-theme-spfk/source/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1575476849169},{"_id":"themes/hexo-theme-spfk/source/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1575476849169},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1575476849170},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1575476849170},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1575476849170},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1575476849170},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1575476849170},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1575476849171},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1575476849171},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1575476849171},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1575476849171},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1575476849171},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1575476849171},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1575476849172},{"_id":"themes/hexo-theme-spfk/source/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1575476849172},{"_id":"themes/hexo-theme-spfk/source/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1575476849172},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1575476849183},{"_id":"source/_posts/iterm2总结/1543213263217.jpg","hash":"3c1533f93a2fb48141d17180684eca508311bfd5","modified":1572678738117},{"_id":"themes/hexo-theme-spfk/source/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1575476849099},{"_id":"themes/hexo-theme-spfk/source/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1575476849125},{"_id":"themes/hexo-theme-spfk/source/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1575476849129},{"_id":"themes/hexo-theme-spfk/source/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1575476849131},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575476849177},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575476849185},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575476849185},{"_id":"source/_posts/iterm2总结/1543202719106.jpg","hash":"e0cb2a3fa8643c29d72257c469fe06febacbc926","modified":1572678738115},{"_id":"themes/hexo-theme-spfk/.git/logs/refs/remotes/origin/HEAD","hash":"dd4eb46549557f97b93f7a3a3f7ff49f74f0533b","modified":1575476849028},{"_id":"themes/hexo-theme-spfk/source/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1575476849052},{"_id":"themes/hexo-theme-spfk/source/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1575476849090},{"_id":"themes/hexo-theme-spfk/source/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1575476849098},{"_id":"themes/hexo-theme-spfk/source/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1575476849105},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1575476849172},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1575476849173},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1575476849173},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1575476849174},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1575476849173},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1575476849174},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1575476849175},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1575476849175},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1575476849176},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1575476849176},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1575476849176},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1575476849176},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1575476849176},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1575476849176},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1575476849177},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1575476849177},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1575476849174},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1575476849177},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1575476849177},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1575476849177},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1575476849178},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1575476849178},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1575476849178},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1575476849175},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1575476849178},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1575476849175},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1575476849178},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1575476849178},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1575476849179},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1575476849179},{"_id":"themes/hexo-theme-spfk/source/static/api/js/base/class.js","hash":"ad1e5a3011e30b83ac8aaeabffc3311dcb151bf5","modified":1575476849179},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/animate.js","hash":"00b6f74ed82e5a21a9295dd2dc963e892734b7f6","modified":1575476849180},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1575476849180},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1575476849181},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/comm_tools.js","hash":"e651fbb1a85ab9c615ee833f4d042c203ef430bc","modified":1575476849181},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1575476849181},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1575476849181},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1575476849181},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_popup_slide.js","hash":"1119fc14abd34ffb8e1f653cd30ca26adaafa3bf","modified":1575476849182},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1575476849182},{"_id":"themes/hexo-theme-spfk/source/static/api/js/conf/const.js","hash":"e2269411b129b847eca265fbc73f0d573f2474bb","modified":1575476849182},{"_id":"themes/hexo-theme-spfk/source/static/api/js/conf/define.js","hash":"1393906ec26b7cf711c18e569a64f7d0c1951fc7","modified":1575476849182},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1575476849183},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/combine_api.js","hash":"c45d76df1707b4fd739dae7022dc4a015632a81a","modified":1575476849183},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1575476849183},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/likeshare.js","hash":"d088ffe7b6451cedf202280d16e85f75a8c3bfd3","modified":1575476849184},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/like_api.js","hash":"3526047b7f9f7446b883e2fa5ebcf143526449be","modified":1575476849184},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1575476849184},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1575476849184},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1575476849184},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans.js","hash":"2bf87aff540cba3bee6cc05a7a8e9a2bc8b5d907","modified":1575476849185},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_bdxc.js","hash":"da78025de5717315252d2d33b4252c89b891c71c","modified":1575476849185},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_bdysc.js","hash":"1be632b99fdd67ba5279aa6c56db7d528fd094c3","modified":1575476849186},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1575476849186},{"_id":"themes/hexo-theme-spfk/source/static/api/js/start/router.js","hash":"97c195ae0d30dd8c7aac55a0555f082eeed4eee0","modified":1575476849185},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1575476849186},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/like_view.js","hash":"42b51bd3ee4815b9ca8df6dacb9c81a8a34d762a","modified":1575476849186},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1575476849186},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1575476849187},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1575476849187},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1575476849187},{"_id":"themes/hexo-theme-spfk/source/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1575476849078},{"_id":"themes/hexo-theme-spfk/source/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1575476849057},{"_id":"themes/hexo-theme-spfk/source/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1575476849086},{"_id":"themes/hexo-theme-spfk/source/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1575476849092},{"_id":"themes/hexo-theme-spfk/source/background/bg-4.jpg","hash":"da47f889e02241c8b095f852fb7efd89c114599d","modified":1575476849111},{"_id":"themes/hexo-theme-spfk/source/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1575476849180},{"_id":"source/_posts/Redis设计与实现/lru_comparison.png","hash":"5ce3e2163f4e0de50186576295a08340f25374d3","modified":1572678738113},{"_id":"source/_posts/tensorflow教程/tensors_flowing.gif","hash":"868b80c0a655b6c5a8ce07b2fe622c473ef6b96a","modified":1572678738121},{"_id":"themes/hexo-theme-spfk/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1575476849154},{"_id":"themes/hexo-theme-spfk/source/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1575476849081},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1575476849149},{"_id":"themes/hexo-theme-spfk/source/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1575476849121},{"_id":"source/_posts/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的/0d2070e8f84c4801adbfa03bda1f98d9.png","hash":"0399712737ef6427d49e48d5d63dfbd23bf40e4d","modified":1572678738088},{"_id":"themes/hexo-theme-spfk/source/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1575476849094},{"_id":"source/_posts/Mac-使用rz、sz-远程上传、下载文件/x_engine_paper.pdf","hash":"772606c90a164480ee517b17d1a3cbbb513d048f","modified":1572678738105},{"_id":"themes/hexo-theme-spfk/source/background/bg-112.jpg","hash":"54d04b06878eec5d021b6f257bc44298f953a2b7","modified":1575476849073},{"_id":"themes/hexo-theme-spfk/.git/objects/pack/pack-91b6017ca90dcb01a2ebd6ea7f2aa21b2153f2ce.pack","hash":"f79dc4df764f729b75f1aade0d92047300fc07bd","modified":1575476849018},{"_id":"public/404.html","hash":"40890a4c32396a5fbedb7dc9a647a210b81073c0","modified":1575476917548},{"_id":"public/about/index.html","hash":"0a8dc2f463604dbfa1140e3650e2ccccc0c97a46","modified":1575476917548},{"_id":"public/categories/index.html","hash":"64377d77268b25eda359c763c305872fbeca9200","modified":1575476917548},{"_id":"public/tags/index.html","hash":"c1ff86655f1d50155897402f710634158a3e96e2","modified":1575476917548},{"_id":"public/9999/12/31/MySQL汇总/index.html","hash":"d4fc9da4d072ab65d736d4ac2312ecd3b30078eb","modified":1575476917549},{"_id":"public/2019/10/10/调用链上下文跨线程传递/index.html","hash":"5cfc27bc9ce9950dab73324b35aa9726eec41254","modified":1575476917554},{"_id":"public/2019/08/15/Oracle转MySQL总结/index.html","hash":"5f7211189967f621710ce2222f19a4f0b3df89c7","modified":1575476917555},{"_id":"public/2019/08/15/Oracle转Postgresql总结/index.html","hash":"6773d746fe371fc121a9de1cb27b0c9ac35a7164","modified":1575476917555},{"_id":"public/2019/08/15/Oracle转EDB总结/index.html","hash":"c366b7b5e3746b1c16bb8e4705884c47011c3e6c","modified":1575476917555},{"_id":"public/2019/08/13/Joda-Time总结/index.html","hash":"866911d14972ea9ad2663d827a9a85b5bc640c8d","modified":1575476917555},{"_id":"public/2019/08/13/Java-Agent详解/index.html","hash":"fda43cc09f0f3901c10be823e8d435e5a5ebe057","modified":1575476917555},{"_id":"public/2019/07/18/SQL词法分析器问题总结/index.html","hash":"060d724da2a9c7b12e0d80fa5aa56fcb94e9fbc1","modified":1575476917555},{"_id":"public/2019/06/21/SQL运算符优先级/index.html","hash":"60a6509616c76d1398d595e8d9d3df9519dbf2a8","modified":1575476917555},{"_id":"public/2019/06/14/哈希-Hash-函数汇总/index.html","hash":"7ab2fb1046283bffb398e20961a4212693d94e02","modified":1575476917555},{"_id":"public/2019/06/12/MySQL索引/index.html","hash":"e783478289dba91af9c9ed8bd2fa57dbbe354d8e","modified":1575476917555},{"_id":"public/2019/06/06/MySQL锁/index.html","hash":"d2b61a2a9e0bd56f6111245652ab8cc90bd21ba9","modified":1575476917555},{"_id":"public/2019/06/05/编译器-vs-解释器：编译器和解释器之间的区别/index.html","hash":"18abca598ebe50ae4ffd24a0035b38ab82028f45","modified":1575476917555},{"_id":"public/2019/06/03/MySQL实战45讲/index.html","hash":"db74cfd9d4845c869b740d76c7ba89b87ccfc91c","modified":1575476917555},{"_id":"public/2019/06/03/01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的/index.html","hash":"24502de1dbeaa116ec1bb8348314573bef460b03","modified":1575476917555},{"_id":"public/2019/06/03/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的/index.html","hash":"c26862db344e8a65a62ae6f51a946a9d28e0df8f","modified":1575476917556},{"_id":"public/2019/06/03/03-MySQL实战45讲-事务隔离：为什么你改了我还看不见/index.html","hash":"0e303094e340c9b5f44794d962e672c9777c300e","modified":1575476917556},{"_id":"public/2019/06/03/04-MySQL实战45讲-深入浅出索引（上）/index.html","hash":"27081c88d6c18451d37dd60d0f33eb0fe4ffc288","modified":1575476917556},{"_id":"public/2019/06/03/05-MySQL实战45讲-深入浅出索引（下）/index.html","hash":"8903b6b51e25f16480c04dbba7d2647d5d998208","modified":1575476917556},{"_id":"public/2019/06/03/07-MySQL实战45讲-行锁功过：怎么减少行锁对性能的影响/index.html","hash":"33dc40eb75dbf629e98b7cf6b193a964cce93cae","modified":1575476917556},{"_id":"public/2019/06/03/06-MySQL实战45讲-全局锁和表锁：给表加个字段怎么有这么多阻碍/index.html","hash":"a5bc9001ffabcf6702e0bcc8cd99ec51040cac76","modified":1575476917556},{"_id":"public/2019/06/03/08-MySQL实战45讲-事务到底是隔离的还是不隔离的/index.html","hash":"9001b883d36dc9b11a0ca0b671c0e6ee0e66c38a","modified":1575476917556},{"_id":"public/2019/06/03/09-MySQL实战45讲-普通索引和唯一索引，应该怎么选择/index.html","hash":"7b7b2dcbd808c2edb2fb942b1f8717e25f1846ff","modified":1575476917556},{"_id":"public/2019/02/27/查看class文件的jdk编译版本/index.html","hash":"9b7bc83fa0fd71d4d4f6f2a5ba7d619610458021","modified":1575476917556},{"_id":"public/2019/01/28/Java常见问题总结/index.html","hash":"d55242d63e4c4c07a63ab0de62fe4aa1e3c60964","modified":1575476917556},{"_id":"public/2019/01/17/SpringBoot集成Elasticsearch/index.html","hash":"2d7d654ca2e9d72ab008fc582e7328c0c659b670","modified":1575476917556},{"_id":"public/2019/01/15/Elasticsearch安装/index.html","hash":"cbfaf12b1a965464d5bc74e2b90abdd304d924a0","modified":1575476917556},{"_id":"public/2019/01/09/ZooKeeper安装/index.html","hash":"52086d5df3a3459b502c0cba05d803b0af49b58c","modified":1575476917556},{"_id":"public/2019/01/09/Kafka安装/index.html","hash":"3c00a85234abc88c7b6e04b862292e53fb23d863","modified":1575476917557},{"_id":"public/2019/01/02/设计模式总结/index.html","hash":"d9321538f8d19ce6df028856b9ec04a57fed1563","modified":1575476917557},{"_id":"public/2018/12/26/MongoDB设计与实现/index.html","hash":"d62eb1c139e22376f04644181884e28a87e6865b","modified":1575476917557},{"_id":"public/2018/12/26/MongoDB教程/index.html","hash":"a896d6084c4c512d2462b1a95e636b06c3c71fa4","modified":1575476917557},{"_id":"public/2018/12/26/MongoDB安装/index.html","hash":"741de220a074709e1951e6d0a3ae3eefd6175f61","modified":1575476917557},{"_id":"public/2018/12/13/创建SecureRandom过慢问题/index.html","hash":"d7946d0100f2663fea57873e86b9d198551d52d5","modified":1575476917557},{"_id":"public/2018/12/06/Redis开发规范/index.html","hash":"5f2923a070868268940c75fe23e53d1498e63902","modified":1575476917557},{"_id":"public/2018/12/06/排序算法汇总/index.html","hash":"86ff60fdc4ff92100f66e5b165971d0b72e0b153","modified":1575476917557},{"_id":"public/2018/12/06/Redis设计与实现/index.html","hash":"7a2f5f8c417399c4b03ce69a18a59bcbc29d3b4c","modified":1575476917557},{"_id":"public/2018/12/06/Java使用Redis/index.html","hash":"07d81bc38a5bc7bacaf747a602371b54bd1fbc4f","modified":1575476917557},{"_id":"public/2018/12/06/Redis安装/index.html","hash":"40fc424685af4207c4d77d8e284403a443ab7655","modified":1575476917557},{"_id":"public/2018/12/05/Redis教程/index.html","hash":"ec79cc05545d18f604b78a71e846bc2ebb9ddb02","modified":1575476917557},{"_id":"public/2018/12/03/中文分词/index.html","hash":"ae485f933a6cf7a805322973472214a230a0e5f0","modified":1575476917557},{"_id":"public/2018/12/01/递归神经网络/index.html","hash":"4680428bf4fbd3df2c43e63283a9656d3bceca53","modified":1575476917557},{"_id":"public/2018/12/01/卷积神经网络/index.html","hash":"fc4d562fbc0d33bfc75b77de170020425bec74db","modified":1575476917557},{"_id":"public/2018/12/01/前馈神经网络/index.html","hash":"452e65e5f8bc4a5a9a3bde0259f4dd73a27a3589","modified":1575476917558},{"_id":"public/2018/12/01/人工神经网络/index.html","hash":"737374c37c17953f1576421b15ee37180eb3c816","modified":1575476917558},{"_id":"public/2018/11/24/python教程/index.html","hash":"4c85bb80ec19a83acc12c2c745b606cb072b6ccd","modified":1575476917558},{"_id":"public/2018/11/23/thrift教程/index.html","hash":"c946457630615dda488a6d13f5a0e33f9a0647ec","modified":1575476917558},{"_id":"public/2018/11/23/PyTorch教程/index.html","hash":"a0aa312ba8cd8db990f9005261e47dcf097c53d3","modified":1575476917558},{"_id":"public/2018/11/22/tensorflow教程/index.html","hash":"8a8622eedf249dd78a859d05a780cafaa1d91251","modified":1575476917558},{"_id":"public/2018/11/22/感知机算法/index.html","hash":"fa50d29cb0e7eeca09a2f40be4d03685184d4e0c","modified":1575476917558},{"_id":"public/2018/11/21/机器学习/index.html","hash":"53399be6e66a22832769928cd8245eba6f364dfe","modified":1575476917558},{"_id":"public/2018/11/20/负载均衡算法/index.html","hash":"096c98a6fa5c9fb8ff01f8eb4e7ea6b48f81aa16","modified":1575476917558},{"_id":"public/2018/11/13/贝叶斯网算法/index.html","hash":"58822afae21cfc7597713d27873ec317565ec06d","modified":1575476917558},{"_id":"public/2018/11/13/半朴素贝叶斯算法/index.html","hash":"335953bbd42a1e65bbcc25b49f0c58d3a0f14544","modified":1575476917558},{"_id":"public/2018/11/13/朴素贝叶斯算法/index.html","hash":"cf6805387252aacdecc6d644e4c2682a2d154455","modified":1575476917558},{"_id":"public/2018/11/13/K近邻算法/index.html","hash":"1ad441cf000d952c646b86847838594fa237627b","modified":1575476917558},{"_id":"public/2018/11/10/C4.5算法/index.html","hash":"f73457ec86ffde3fd89abc670c75fb3c5fb5f980","modified":1575476917558},{"_id":"public/2018/11/10/ID3算法/index.html","hash":"30b6732531842ff34e0d5d3de75f1a083113d039","modified":1575476917558},{"_id":"public/2018/11/10/条件熵/index.html","hash":"114a98823c791745ff070ba2d0bd690b75cd49e6","modified":1575476917558},{"_id":"public/2018/11/10/交叉熵/index.html","hash":"e18ff33d91f3aa09c02ecb0adf6e7df5ffb28158","modified":1575476917558},{"_id":"public/2018/11/10/信息熵/index.html","hash":"9a10773d78143c6a69923b8b768e082a257cd441","modified":1575476917558},{"_id":"public/2018/11/09/EM算法/index.html","hash":"d2734c90e8d27a2af651ab01e6e63e89cf65d216","modified":1575476917559},{"_id":"public/2018/11/09/CART算法/index.html","hash":"717f323798dbf17b0b2bc220c8b9709834e3b92b","modified":1575476917559},{"_id":"public/2018/11/09/支持向量机/index.html","hash":"296920737a1c3b8a4d78be1c815d0b479255c7f5","modified":1575476917559},{"_id":"public/2017/06/01/SpringBoot应用启动原理分析/index.html","hash":"fea2eeb3d07fc4c714bfdf639eb882cd3fbe21d9","modified":1575476917559},{"_id":"public/2015/08/30/Mac-使用rz、sz-远程上传、下载文件/index.html","hash":"63a0908ae6400f6549fee3968c6639b58c700600","modified":1575476917559},{"_id":"public/2015/08/30/iterm2总结/index.html","hash":"5c3cb2b109d6778c3da20c8c55cb99b0737b986f","modified":1575476917559},{"_id":"public/2015/08/30/Homebrew总结/index.html","hash":"fcbf1145da0a5661f24b8868d708e2e30d63ef76","modified":1575476917559},{"_id":"public/2012/10/01/协方差/index.html","hash":"c57eb0e9ce460a03f382efdfa6e581a214fe53a9","modified":1575476917559},{"_id":"public/2012/10/01/标准差/index.html","hash":"91495cf4d0c960a1b9fe15872fa71bb5a9cf0f21","modified":1575476917559},{"_id":"public/2012/10/01/方差/index.html","hash":"31e7ce57fae34a791baa0899216247e04fdcf596","modified":1575476917559},{"_id":"public/2012/10/01/期望值/index.html","hash":"1cd6c37e44281048a911c7910f0c59a451ff2aca","modified":1575476917559},{"_id":"public/2012/09/02/LaTeX教程/index.html","hash":"497a6ccd23afcb8a8d4c3b09ffe14720a1cf893d","modified":1575476917559},{"_id":"public/2012/09/01/Markdown教程/index.html","hash":"09e0d312a15e06648e7f8bb7ba7ee8fd5affdb92","modified":1575476917559},{"_id":"public/2012/08/01/Mac安装Git/index.html","hash":"d68abb92e7dbb0f1639a7784b4c5fb601a220363","modified":1575476917559},{"_id":"public/2012/08/01/Github搭建Hexo/index.html","hash":"f1f605b76b27717be872c2435b60cdf8f051cbe7","modified":1575476917559},{"_id":"public/2008/09/01/微积分/index.html","hash":"20126293c7a611c9ad5cb854d465b80b9f05683b","modified":1575476917559},{"_id":"public/2008/09/01/极限/index.html","hash":"ff1f32dd4484cc2690c1bcd71c2e9670e82003d0","modified":1575476917560},{"_id":"public/archives/index.html","hash":"e99dbdc96a337af5e5e87d4fcc5e7af52ab211fe","modified":1575476917560},{"_id":"public/archives/page/2/index.html","hash":"acade89ca8a9e0b2851f3d7d9e9aba9aef2d9e14","modified":1575476917560},{"_id":"public/archives/page/3/index.html","hash":"c24b2f997e35468a609363ca49cd14a4b3b516e5","modified":1575476917560},{"_id":"public/archives/page/4/index.html","hash":"c638282e5c6a5218d02a7193c0a24c67cc39b657","modified":1575476917560},{"_id":"public/archives/page/5/index.html","hash":"d8732df6ae5da3d493d106de9dddf1fd75accf46","modified":1575476917560},{"_id":"public/archives/page/6/index.html","hash":"7166cf6894395d4091dcd87a717fa177f9547a62","modified":1575476917560},{"_id":"public/archives/page/7/index.html","hash":"de80dbce711dbcc65ed527785b8a538b491b814f","modified":1575476917560},{"_id":"public/archives/page/8/index.html","hash":"4893532f3671d39a1a07b76d791544bde11ba3a7","modified":1575476917560},{"_id":"public/archives/2008/index.html","hash":"927e389d122ca772d8ff399ed59dc97910a0e67e","modified":1575476917560},{"_id":"public/archives/2008/09/index.html","hash":"e0ef562a6aa9b810875b2038889960afa22194fd","modified":1575476917560},{"_id":"public/archives/2012/index.html","hash":"1fef623244e246ddbcd171f4d8ee5b19c627cdc8","modified":1575476917560},{"_id":"public/archives/2012/08/index.html","hash":"b8cfe31f87b0cae343938fb1ebe6ac9d7f84261b","modified":1575476917560},{"_id":"public/archives/2012/09/index.html","hash":"25c1d15954f8085851127c2398fb6393eabcb491","modified":1575476917560},{"_id":"public/archives/2012/10/index.html","hash":"a03342ac4bbfa3501da3d76b17d3d3fbcfb82bbf","modified":1575476917560},{"_id":"public/archives/2015/index.html","hash":"cc65741749370064f4e2afef7caa5858f2bc1d17","modified":1575476917560},{"_id":"public/archives/2015/08/index.html","hash":"3b184df655ef99ffa0fa6a7e1285032cc2a13c3a","modified":1575476917560},{"_id":"public/archives/2017/index.html","hash":"b46f8046aa44c3000a5455de9a2ea0bf5ff2f353","modified":1575476917560},{"_id":"public/archives/2017/06/index.html","hash":"8299e90226fec4d38458e4d0679293beb244c76d","modified":1575476917560},{"_id":"public/archives/2018/index.html","hash":"3cb9cf1449b8b0e4267e5ad7dd0f6d71759e3183","modified":1575476917560},{"_id":"public/archives/2018/page/2/index.html","hash":"710fa890132b4ca137eba446429c8be2fd74219f","modified":1575476917560},{"_id":"public/archives/2018/page/3/index.html","hash":"cf354215d8c39146c55892e61d575ef93e33fc92","modified":1575476917560},{"_id":"public/archives/2018/page/4/index.html","hash":"f6faa864a9bbf5dc7881111a92111ee754d5c405","modified":1575476917560},{"_id":"public/archives/2018/11/index.html","hash":"073fd2c283da5196b55fab31a3dc6495db3601cb","modified":1575476917561},{"_id":"public/archives/2018/11/page/2/index.html","hash":"64c6aebf7ad5fd449053f4c568f6012a98ca7335","modified":1575476917561},{"_id":"public/archives/2018/12/index.html","hash":"71c8aadbaababd69a26ae0664127574d8d67f06c","modified":1575476917561},{"_id":"public/archives/2018/12/page/2/index.html","hash":"a2b64f825203c3a92a0daed8f1d57342b667791f","modified":1575476917561},{"_id":"public/archives/2019/index.html","hash":"16bb682adae27753d69405e275bd765144eac9f2","modified":1575476917561},{"_id":"public/archives/2019/page/2/index.html","hash":"2885a0fc8c7d00edcad14f1ae748ff01e3443275","modified":1575476917561},{"_id":"public/archives/2019/page/3/index.html","hash":"d9391cd8800a98b51482300ce656090d68c34959","modified":1575476917561},{"_id":"public/archives/2019/01/index.html","hash":"9bb71a577a0fcc2fcd62288d0386ea5d92cb8d59","modified":1575476917561},{"_id":"public/archives/2019/02/index.html","hash":"fec85944fc531d56b8b896e3bbad8fd68f2b37c8","modified":1575476917561},{"_id":"public/archives/2019/06/index.html","hash":"9687fbc3eb256df88ad83b0888f87d2295f3eb00","modified":1575476917561},{"_id":"public/archives/2019/06/page/2/index.html","hash":"b95f61ada27fa817232b380f5d4f17b675f71a74","modified":1575476917561},{"_id":"public/archives/2019/07/index.html","hash":"cad5b07bffa6a6c136c4bd6e75e8965ad2629f31","modified":1575476917561},{"_id":"public/archives/2019/08/index.html","hash":"a1745f40eaa42efcf7f9bed849679e77d112da59","modified":1575476917561},{"_id":"public/archives/2019/10/index.html","hash":"a5336d455e1095d533d2d4791d408388d6194db3","modified":1575476917561},{"_id":"public/archives/9999/index.html","hash":"73269378043d6c25f4d2c97a4fd1227c55336b23","modified":1575476917561},{"_id":"public/archives/9999/12/index.html","hash":"85e947093805794ee7de988347423c9b9ffdedb0","modified":1575476917561},{"_id":"public/tags/MySQL/index.html","hash":"74c3bc5307ce0302d4a45bae56d20a0ed7cf619b","modified":1575476917561},{"_id":"public/tags/MySQL/page/2/index.html","hash":"a877ecd1693f5850be6fb9415a4f8e4c7fdf79a1","modified":1575476917561},{"_id":"public/tags/MySQL实战45讲/index.html","hash":"04d62c333a02b1d4145eeb8dafa517f351be8124","modified":1575476917561},{"_id":"public/tags/算法/index.html","hash":"9c7e8ed4816c10ef4b59fd91b5958b784f0b68ec","modified":1575476917561},{"_id":"public/tags/算法/page/2/index.html","hash":"ab638c4476e66fe809b79748ea45faa10f754838","modified":1575476917561},{"_id":"public/tags/机器学习/index.html","hash":"41f6831c62018cb9d0e1ccc98752ef28706265ff","modified":1575476917561},{"_id":"public/tags/机器学习/page/2/index.html","hash":"c371a310edeeda2ae01fab25572b1e976629b344","modified":1575476917561},{"_id":"public/tags/决策树/index.html","hash":"779bc23c300e42741c9a709ac2d246bc6f462e33","modified":1575476917561},{"_id":"public/tags/全文搜索/index.html","hash":"2f4ba345dd96d676b28888c217eafe6e6d2062a2","modified":1575476917561},{"_id":"public/tags/Elasticsearch/index.html","hash":"7dfbda103eb2c560cfa13d20f297e7e5e68b98c5","modified":1575476917562},{"_id":"public/tags/Mac/index.html","hash":"88474d743b7fb0d44c5af799a6afe078801efcec","modified":1575476917562},{"_id":"public/tags/Homebrew/index.html","hash":"a55d779981584ad17dea4a91743aa23ac420b5b9","modified":1575476917562},{"_id":"public/tags/Hexo/index.html","hash":"11b174ec636ac164cd24988d6b9f5a927ceb7387","modified":1575476917562},{"_id":"public/tags/Java/index.html","hash":"ce65371869cd390cc3e93b7d90a9d6f71e1e1072","modified":1575476917562},{"_id":"public/tags/JavaAgent/index.html","hash":"57060ffe51593c446d45dba96a60954ac4f971c5","modified":1575476917562},{"_id":"public/tags/NoSQL/index.html","hash":"56c8b374fbb4b32e5130ba523efcdf0044503ea0","modified":1575476917562},{"_id":"public/tags/Redis/index.html","hash":"6de2c788e9a8a766d10a82bc1e51bc83ff5db700","modified":1575476917562},{"_id":"public/tags/消息队列/index.html","hash":"74d33a2d694c948395be98730b3c4143c0f9edbf","modified":1575476917562},{"_id":"public/tags/Kafka/index.html","hash":"7f54c35247f13cd9da4be7e52d6c1334727973a9","modified":1575476917562},{"_id":"public/tags/监督学习/index.html","hash":"f33389a666540b455fc33b06a8052562b04ed657","modified":1575476917562},{"_id":"public/tags/KNN/index.html","hash":"d712ff4123b17494e9188210d35353c7f4742153","modified":1575476917562},{"_id":"public/tags/LaTeX/index.html","hash":"d76f9f257087b0484ba022c2132c9d5eb5649e21","modified":1575476917562},{"_id":"public/tags/公式/index.html","hash":"2b7b6ced8c7e83265e07771d5b6568a45f6b93a2","modified":1575476917562},{"_id":"public/tags/Git/index.html","hash":"46f6ed5555d2d8f199312697e14bf3334d539df1","modified":1575476917562},{"_id":"public/tags/SQL/index.html","hash":"8001750d9179bac08d064393cdcd0c065687c620","modified":1575476917562},{"_id":"public/tags/SQL转换/index.html","hash":"38596bc2fca46ceb652b1da2d6f8b4d04a5e644e","modified":1575476917562},{"_id":"public/tags/Markdown/index.html","hash":"54e4c9542a4a813b20022371b7a4006b530d6b46","modified":1575476917562},{"_id":"public/tags/深度学习/index.html","hash":"e52c283e0df305fa1d115a5a649041323bbb2902","modified":1575476917562},{"_id":"public/tags/深度学习框架/index.html","hash":"2d0bcf30e730586a7f95e72d4d1e76537487b9cc","modified":1575476917562},{"_id":"public/tags/PyTorch/index.html","hash":"af1d4113da49192204382b4f889e5d08924697b7","modified":1575476917562},{"_id":"public/tags/词法分析/index.html","hash":"9d97d3cadcfd471ee86dd70a9dd37e73d6ce00df","modified":1575476917562},{"_id":"public/tags/SpringBoot/index.html","hash":"a9c7b9d421be5e0b30677ad7f7cf32ded714e235","modified":1575476917562},{"_id":"public/tags/ZooKeeper/index.html","hash":"7be5f9c00ebf4d5dce4d3c72342a19f0927d9f91","modified":1575476917562},{"_id":"public/tags/Iterm2/index.html","hash":"7ce541388805c1b97799e3d99d2b63eb0fa219c9","modified":1575476917562},{"_id":"public/tags/Python/index.html","hash":"f2b4d228779bc36ccfa15cf50e6a6cbbb3ae081f","modified":1575476917563},{"_id":"public/tags/Tensorflow/index.html","hash":"09268400d1cb083efb9706213aabdf98b4099f43","modified":1575476917563},{"_id":"public/tags/RPC/index.html","hash":"a2c987197fc5af2c6b5149a82b35e1453b1b599f","modified":1575476917563},{"_id":"public/tags/Thrift/index.html","hash":"6fa492eeeda232b2d76cc592a736e08e5d53e88e","modified":1575476917563},{"_id":"public/tags/自然语言处理/index.html","hash":"11cfcb920e5d8ac0167e1ab2e619678725286b7c","modified":1575476917563},{"_id":"public/tags/中文分词/index.html","hash":"2a27801e9cad4255746df8910c025041913100a8","modified":1575476917563},{"_id":"public/tags/信息论/index.html","hash":"2cc150408f2258738f03158a06b43e5d0cb18bc3","modified":1575476917563},{"_id":"public/tags/信息熵/index.html","hash":"fafd758792ceb11559d89f8ab9bc57704e3f66b6","modified":1575476917563},{"_id":"public/tags/人工智能/index.html","hash":"c52732f68b05389cb1f2e3d9f27b80f94da988ba","modified":1575476917563},{"_id":"public/tags/神经网络/index.html","hash":"e88276c810e99be381f5cf777131d82ce1364864","modified":1575476917563},{"_id":"public/tags/数学/index.html","hash":"5ee0a5e82ffad3cb81130dfc85a34a0efc9fae3b","modified":1575476917563},{"_id":"public/tags/Tomcat/index.html","hash":"5ca5b136324348a3377b05635fdcc0bee86ba39b","modified":1575476917563},{"_id":"public/tags/Slow/index.html","hash":"ae1d7e14d9d02840f0a548d50d0c5dca7efd5ba5","modified":1575476917563},{"_id":"public/tags/贝叶斯/index.html","hash":"a0ae4031472c6a49aced3ae91344ead293c9cbf5","modified":1575476917563},{"_id":"public/tags/概率与统计/index.html","hash":"b337dc0b537773709ae36795f0833134bb6523da","modified":1575476917563},{"_id":"public/tags/方差/index.html","hash":"ed4315c3dfcfea965bc0a4d0b9d371471bde4fc6","modified":1575476917563},{"_id":"public/tags/前馈神经网络/index.html","hash":"f825efa01e6c8c11b1fb8d8939c66c0af3b792a6","modified":1575476917563},{"_id":"public/tags/卷积神经网络/index.html","hash":"1b77fa3caa9ebb1f0b0fa10302ed066e8503a09e","modified":1575476917563},{"_id":"public/tags/Algorithm/index.html","hash":"8db8aa03bb6323f94f41da2ba90f62a9e6e7d4eb","modified":1575476917563},{"_id":"public/tags/Hash/index.html","hash":"ac6530e9a4423dbe46c7f49ae70a876f890818d9","modified":1575476917563},{"_id":"public/tags/高等数学/index.html","hash":"7f7d3a88ddbdc3d397eff51390dd7a916bd02e76","modified":1575476917564},{"_id":"public/tags/极限/index.html","hash":"25e0f4b2233207021503e607e7f6aaa56aebce44","modified":1575476917564},{"_id":"public/tags/微积分/index.html","hash":"dd584e379c1777077266ebc139aa366f1c177d42","modified":1575476917564},{"_id":"public/tags/排序/index.html","hash":"450bccfb7bac099131cf4f93efd2d3aa0210d919","modified":1575476917564},{"_id":"public/tags/SVM/index.html","hash":"6040d620ad5527e69184ded0cdb8059d340b6dd4","modified":1575476917564},{"_id":"public/tags/期望/index.html","hash":"5eabcadb9ff6e903cc4cff7973d3168e75124cf3","modified":1575476917564},{"_id":"public/tags/编译原理/index.html","hash":"959eadfa772f0c57aae80db8cbad70b3cdee0e06","modified":1575476917564},{"_id":"public/tags/编译器/index.html","hash":"5eaaa3d4ffd4588a1261eff120ccd56a574590eb","modified":1575476917564},{"_id":"public/tags/解释器/index.html","hash":"4e9868020c89b45fe59d35769a7e0b90ca0f17e9","modified":1575476917564},{"_id":"public/tags/设计模式/index.html","hash":"367ed6c940dc19026ab0f29f6d05674f498e3a27","modified":1575476917564},{"_id":"public/tags/Trace/index.html","hash":"04116ee63400b91a036e924163bd2bd90664132a","modified":1575476917564},{"_id":"public/tags/负载均衡/index.html","hash":"955f9483fec73c2ba1b81a07a48a026df4c9e43b","modified":1575476917564},{"_id":"public/index.html","hash":"2b49355b91365333a82730e0463912c9c0a22c46","modified":1575476917564},{"_id":"public/page/2/index.html","hash":"7b948c5d888d1c8cc7f95e6c087bd60dcf3c1dfb","modified":1575476917564},{"_id":"public/page/3/index.html","hash":"eb19e607d05c2424849d71d5c053c960f3332cbe","modified":1575476917564},{"_id":"public/page/4/index.html","hash":"901043864dcf2b2921ec1b84a39a4e2069312d20","modified":1575476917565},{"_id":"public/page/5/index.html","hash":"9fb7505471fcebc9fe7f2a8669714769354a64c3","modified":1575476917565},{"_id":"public/page/6/index.html","hash":"b9f5498fc81e07dbaed4dd3e23cbe7cf8c90178a","modified":1575476917565},{"_id":"public/page/7/index.html","hash":"d6c0c26567ebd0bfc5c1acc6f5dc6c043b1c7200","modified":1575476917565},{"_id":"public/page/8/index.html","hash":"c087e15f527a9964e9f951b2a28425dcc57fd6ce","modified":1575476917565},{"_id":"public/categories/MySQL/index.html","hash":"6a4673a0ec4f9a2bba1b9a478467fbe4016eeb25","modified":1575476917565},{"_id":"public/categories/MySQL/page/2/index.html","hash":"ad5835724819d887bcb72fb006e0bbea0168f5c7","modified":1575476917565},{"_id":"public/categories/机器学习/index.html","hash":"30af8ed33c4dc0bd9869d2fb9d240c6f3cf78ec1","modified":1575476917565},{"_id":"public/categories/机器学习/page/2/index.html","hash":"cdd67049269587e741f022bfd596a48541cfc8d6","modified":1575476917565},{"_id":"public/categories/Elasticsearch/index.html","hash":"af51dbe72289e8f4490030cb685e854ce13f5461","modified":1575476917565},{"_id":"public/categories/Mac/index.html","hash":"785ed633b3dcbc03d090c33c49d1de00ec498366","modified":1575476917565},{"_id":"public/categories/Hexo/index.html","hash":"24c9b279e07759081cf00f25942a8d3228e6123f","modified":1575476917565},{"_id":"public/categories/Java/index.html","hash":"fd80036632589ca873dc5f510103e6906019dac2","modified":1575476917565},{"_id":"public/categories/Redis/index.html","hash":"7953faa0d5e5b58d55eda8bb71578352e052b5dd","modified":1575476917566},{"_id":"public/categories/Kafka/index.html","hash":"aede02ce88f4bea2d81deb0b103e8140c4cd51d9","modified":1575476917566},{"_id":"public/categories/LaTeX/index.html","hash":"40330d86a99dbf2d200b72677c17e156a4303839","modified":1575476917566},{"_id":"public/categories/Git/index.html","hash":"88653a86dd0c88c9d33b297938fea299300ebddc","modified":1575476917566},{"_id":"public/categories/Java/JavaAgent/index.html","hash":"f2faed2b747e970fff29294d89df0c3f8b945517","modified":1575476917566},{"_id":"public/categories/SQL/index.html","hash":"7f9306c1c379232dc417a21e8e20e338ce688513","modified":1575476917566},{"_id":"public/categories/SQL转换/index.html","hash":"a74cdb4cd43b513a83f562708d86dc17004bcb00","modified":1575476917566},{"_id":"public/categories/Markdown/index.html","hash":"a0cb6520bf955b2e87e651da85421cda346d5f85","modified":1575476917566},{"_id":"public/categories/PyTorch/index.html","hash":"381667d0c9cf44f18cca298da0bfb0a39190a70f","modified":1575476917566},{"_id":"public/categories/SQL/MySQL/index.html","hash":"25f4e52dcd06b520f9033a8a07f21ac20ad02cad","modified":1575476917566},{"_id":"public/categories/词法分析/index.html","hash":"e05054bf8ea06779e07f3ecf75eb56657ca2d4ba","modified":1575476917566},{"_id":"public/categories/SpringBoot/index.html","hash":"b113d8ceb2c008e0ee1a4b5d9ab05fac9c383b3d","modified":1575476917566},{"_id":"public/categories/ZooKeeper/index.html","hash":"1ea7e53733d22fe2e74de7e2c33c62e1479ccca6","modified":1575476917567},{"_id":"public/categories/Python/index.html","hash":"2bbe4d6a98735f4e142f68ad8a64cf55d865a82f","modified":1575476917567},{"_id":"public/categories/Tensorflow/index.html","hash":"990b1dc0a134ca4cfdf10c63879275d37fa97738","modified":1575476917567},{"_id":"public/categories/Thrift/index.html","hash":"989a5f07b44594c1bc1fcbe36058434308828f16","modified":1575476917567},{"_id":"public/categories/机器学习/自然语言处理/index.html","hash":"7c06c1032fdbad7ac01ccf59920615b9033c8dcd","modified":1575476917567},{"_id":"public/categories/信息论/index.html","hash":"6256c6821e2325ae53409f0a79409cb5127c46ec","modified":1575476917567},{"_id":"public/categories/神经网络/index.html","hash":"92da1b2a953a98ae2d62a38f082d8fc6e3c4290e","modified":1575476917567},{"_id":"public/categories/Tomcat/index.html","hash":"4f91d2907a192eb356df63e96bd522eecfcc0383","modified":1575476917567},{"_id":"public/categories/概率与统计/index.html","hash":"534a44b21931df852d6909c150bb6fa6fae94678","modified":1575476917567},{"_id":"public/categories/Algorithm/index.html","hash":"524e6960999a198d6b937864edfe75d7ff25761d","modified":1575476917567},{"_id":"public/categories/数学/index.html","hash":"288f864fc2ba224de0417cfd803becca24b7526f","modified":1575476917567},{"_id":"public/categories/算法/index.html","hash":"b10f44a79fcfc806828b8f74546bad91469c5bbd","modified":1575476917567},{"_id":"public/categories/编译原理/index.html","hash":"6e6f18c6b38dc5e1db88b1ed8f6a6b900df33850","modified":1575476917567},{"_id":"public/categories/设计模式/index.html","hash":"48997123f641ac4f00ffdc2c978bbc40cf8482ba","modified":1575476917567},{"_id":"public/categories/Java/Trace/index.html","hash":"a59d46361d87da1097e35529da2fcb9ff0afed1f","modified":1575476917567},{"_id":"public/categories/负载均衡/index.html","hash":"73f9d0518a4999310f56ab0016dd937dc95cafba","modified":1575476917567},{"_id":"public/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575476917567},{"_id":"public/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1575476917585},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1575476917585},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1575476917585},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1575476917585},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1575476917586},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1575476917586},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1575476917586},{"_id":"public/img/alipay.png","hash":"6ec0c618109aac31a212d252a3b85f2975b82b3a","modified":1575476917586},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1575476917586},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1575476917586},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1575476917586},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1575476917586},{"_id":"public/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1575476917586},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1575476917586},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1575476917586},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1575476917586},{"_id":"public/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1575476917586},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1575476917586},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1575476917586},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1575476917586},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1575476917586},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1575476917586},{"_id":"public/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1575476917587},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1575476917587},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1575476917587},{"_id":"public/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1575476917587},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1575476917587},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1575476917587},{"_id":"public/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1575476917587},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1575476917587},{"_id":"public/img/weixin.png","hash":"92b8df9aba9169c1553c01994bf21a938fa39cb7","modified":1575476917587},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1575476917587},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1575476917587},{"_id":"public/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1575476917587},{"_id":"public/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1575476917587},{"_id":"public/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1575476917587},{"_id":"public/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1575476917587},{"_id":"public/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1575476917587},{"_id":"public/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1575476917587},{"_id":"public/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1575476917588},{"_id":"public/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1575476917588},{"_id":"public/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1575476917588},{"_id":"public/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1575476917588},{"_id":"public/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1575476917588},{"_id":"public/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1575476917588},{"_id":"public/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1575476917588},{"_id":"public/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1575476917588},{"_id":"public/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1575476917588},{"_id":"public/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1575476917588},{"_id":"public/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1575476917588},{"_id":"public/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1575476917588},{"_id":"public/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1575476917588},{"_id":"public/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1575476917588},{"_id":"public/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1575476917588},{"_id":"public/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1575476917589},{"_id":"public/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1575476917589},{"_id":"public/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1575476917589},{"_id":"public/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1575476917589},{"_id":"public/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1575476917589},{"_id":"public/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1575476917589},{"_id":"public/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1575476917589},{"_id":"public/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1575476917589},{"_id":"public/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1575476917589},{"_id":"public/2018/11/23/thrift教程/thrift-layers.png","hash":"8950d509517f7128feb0c295cbe29f2fa849e345","modified":1575476917589},{"_id":"public/2018/12/01/人工神经网络/1543648111947.jpg","hash":"d1ae47e013dc99883394317fef4095a16310caa3","modified":1575476917589},{"_id":"public/2018/12/06/Redis设计与实现/graphviz-167adfc2e52e078d4c0e3c8a9eddec54551602fb.png","hash":"8bfd7c4e974653323164bce9b25ceae8eeec2418","modified":1575476917589},{"_id":"public/2015/08/30/iterm2总结/logo2x.jpg","hash":"aa9f010f51a2051e84c699c46f40bc604b5ef4e2","modified":1575476917589},{"_id":"public/2018/12/06/Redis设计与实现/graphviz-72760f6945c3742eca0df91a91cc379168eda82d.png","hash":"8fb35d52fae7bb70ccdea766c8478a73db870ea0","modified":1575476917589},{"_id":"public/2018/12/06/Redis设计与实现/graphviz-5f4d8b6177061ac52d0ae05ef357fceb52e9cb90.png","hash":"9589587ae012ed1578f656ca3d55548f058ca56b","modified":1575476917589},{"_id":"public/2018/12/06/Redis设计与实现/graphviz-acf7fe010d7b09c5d2500c72eb555863e67ad74f.png","hash":"b9289eb1d7550aa01056e1b829ad03df1c1de091","modified":1575476917589},{"_id":"public/2018/12/06/Redis设计与实现/graphviz-bd3eecd927a4d8fc33b4a1c7f5957c52d67c5021.png","hash":"a068b49bba0ce76d72f9cb4f0de4a467cd19c2dc","modified":1575476917589},{"_id":"public/2018/12/06/Redis设计与实现/graphviz-8fc5de396a5b52c3d0b1991a1e09558ad055dd86.png","hash":"4623c92c85483ed8e3d95a4d39365e4a6fcc2ce3","modified":1575476917590},{"_id":"public/background/bg-25.jpg","hash":"7a05a524b70c9acd75c3f16a3b9992e4587995bd","modified":1575476918341},{"_id":"public/img/alipayimg.jpg","hash":"5e580fc88085b7e34d50be3c652c3edc38c6d5df","modified":1575476918344},{"_id":"public/img/head.jpg","hash":"80c0999acfc1173183d3dd243b4b90d077ab97cb","modified":1575476918347},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1575476918347},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1575476918347},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1575476918348},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1575476918348},{"_id":"public/2015/08/30/Mac-使用rz、sz-远程上传、下载文件/122150034707951.png","hash":"0923aa96f15dcefc305cdf3c1ce81effa35438c0","modified":1575476918348},{"_id":"public/2012/08/01/Github搭建Hexo/1542037823098.jpg","hash":"0d8ae68183041f46cab6f094eca36bd07ebc6a33","modified":1575476918348},{"_id":"public/css/loading-style.css","hash":"1f67362d809e85edc9f122db7bc3711af1ed1d8b","modified":1575476918360},{"_id":"public/css/default.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575476918360},{"_id":"public/css/showshare.css","hash":"3efc4afd0d136fb5dec993e9cd9ce85b9d1cf589","modified":1575476918360},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1575476918360},{"_id":"public/js/TweenMax.js","hash":"0ba64564a4fde4085fa3971dd53b7d64a41751e1","modified":1575476918360},{"_id":"public/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1575476918360},{"_id":"public/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1575476918360},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1575476918360},{"_id":"public/js/main.js","hash":"921b2fb56e48cce3d16ceb4a3fadf8e666c73a0a","modified":1575476918361},{"_id":"public/js/mobile.js","hash":"d3847e5bcaf39108931724ecb02770c62b10889f","modified":1575476918361},{"_id":"public/js/pc.js","hash":"ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40","modified":1575476918361},{"_id":"public/js/plugins.js","hash":"c1cf96b2d852b5803228a34d99014b005623bc06","modified":1575476918361},{"_id":"public/css/pace/pace-theme-flash.css","hash":"508bce8b59a1fbc1f1443a7c4ab3b026e5517dab","modified":1575476918361},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1575476918361},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1575476918361},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1575476918361},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1575476918361},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1575476918361},{"_id":"public/js/blueimp-md5/md5.min.js","hash":"9e95b3d2fad05cd68bbe721bd9fe79e524c47e71","modified":1575476918361},{"_id":"public/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1575476918361},{"_id":"public/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1575476918361},{"_id":"public/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1575476918361},{"_id":"public/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1575476918361},{"_id":"public/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1575476918361},{"_id":"public/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1575476918361},{"_id":"public/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1575476918361},{"_id":"public/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1575476918362},{"_id":"public/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1575476918362},{"_id":"public/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1575476918362},{"_id":"public/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1575476918362},{"_id":"public/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1575476918362},{"_id":"public/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1575476918362},{"_id":"public/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1575476918362},{"_id":"public/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1575476918362},{"_id":"public/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1575476918362},{"_id":"public/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1575476918362},{"_id":"public/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1575476918362},{"_id":"public/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575476918362},{"_id":"public/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575476918362},{"_id":"public/static/api/js/base/class.js","hash":"ad1e5a3011e30b83ac8aaeabffc3311dcb151bf5","modified":1575476918362},{"_id":"public/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1575476918362},{"_id":"public/static/api/js/component/animate.js","hash":"00b6f74ed82e5a21a9295dd2dc963e892734b7f6","modified":1575476918362},{"_id":"public/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1575476918362},{"_id":"public/static/api/js/component/comm_tools.js","hash":"e651fbb1a85ab9c615ee833f4d042c203ef430bc","modified":1575476918362},{"_id":"public/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1575476918362},{"_id":"public/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1575476918362},{"_id":"public/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1575476918362},{"_id":"public/static/api/js/component/pop_popup_slide.js","hash":"1119fc14abd34ffb8e1f653cd30ca26adaafa3bf","modified":1575476918363},{"_id":"public/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1575476918363},{"_id":"public/static/api/js/conf/const.js","hash":"e2269411b129b847eca265fbc73f0d573f2474bb","modified":1575476918363},{"_id":"public/static/api/js/conf/define.js","hash":"1393906ec26b7cf711c18e569a64f7d0c1951fc7","modified":1575476918363},{"_id":"public/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1575476918363},{"_id":"public/static/api/js/share/combine_api.js","hash":"c45d76df1707b4fd739dae7022dc4a015632a81a","modified":1575476918363},{"_id":"public/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1575476918363},{"_id":"public/static/api/js/share/likeshare.js","hash":"d088ffe7b6451cedf202280d16e85f75a8c3bfd3","modified":1575476918363},{"_id":"public/static/api/js/share/like_api.js","hash":"3526047b7f9f7446b883e2fa5ebcf143526449be","modified":1575476918363},{"_id":"public/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1575476918363},{"_id":"public/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1575476918363},{"_id":"public/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1575476918363},{"_id":"public/static/api/js/trans/trans.js","hash":"2bf87aff540cba3bee6cc05a7a8e9a2bc8b5d907","modified":1575476918363},{"_id":"public/static/api/js/trans/trans_bdxc.js","hash":"da78025de5717315252d2d33b4252c89b891c71c","modified":1575476918364},{"_id":"public/static/api/js/trans/trans_bdysc.js","hash":"1be632b99fdd67ba5279aa6c56db7d528fd094c3","modified":1575476918364},{"_id":"public/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1575476918364},{"_id":"public/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1575476918364},{"_id":"public/static/api/js/view/like_view.js","hash":"42b51bd3ee4815b9ca8df6dacb9c81a8a34d762a","modified":1575476918364},{"_id":"public/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1575476918364},{"_id":"public/static/api/js/start/router.js","hash":"97c195ae0d30dd8c7aac55a0555f082eeed4eee0","modified":1575476918364},{"_id":"public/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1575476918364},{"_id":"public/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1575476918364},{"_id":"public/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1575476918364},{"_id":"public/css/style.css","hash":"68bba750efe4fab050081d65cb84a7e443006e93","modified":1575476918364},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1575476918364},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1575476918364},{"_id":"public/js/pace.js","hash":"b49c10cd65d9488f7338e3c778e55ac6628650f3","modified":1575476918364},{"_id":"public/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1575476918364},{"_id":"public/js/embed.js","hash":"8d2d4a812ab639bc02fdd8749d3a39f6b9406c54","modified":1575476918364},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1575476918364},{"_id":"public/js/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1575476918365},{"_id":"public/js/gitment.browser.js","hash":"6154e6a3bfb402c3ecc9b7889675f1f640926b75","modified":1575476918365},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1575476918365},{"_id":"public/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1575476918365},{"_id":"public/js/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1575476918365},{"_id":"public/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1575476918365},{"_id":"public/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1575476918365},{"_id":"public/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1575476918366},{"_id":"public/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1575476918366},{"_id":"public/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1575476918366},{"_id":"public/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1575476918366},{"_id":"public/background/bg-26.jpg","hash":"3730aa317f9d75ca327b34478cd58e72667b04e8","modified":1575476918366},{"_id":"public/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1575476918367},{"_id":"public/background/bg-27.jpg","hash":"ced50e6e8cad2b0db97445c4e1463d4a62540b9b","modified":1575476918367},{"_id":"public/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1575476918367},{"_id":"public/img/wechatimg.jpg","hash":"e9698d0fba0bce97c4aa0d65539f1e285a3f8b24","modified":1575476918367},{"_id":"public/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1575476918367},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1575476918367},{"_id":"public/2019/06/03/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的/16a7950217b3f0f4ed02db5db59562a7.png","hash":"cb34bc60f583ed3d34b50574782211e0bab66919","modified":1575476918368},{"_id":"public/2019/08/13/Java-Agent详解/1565786297241.jpg","hash":"f4c09845c02065bc284327eea51df400fe071ead","modified":1575476918368},{"_id":"public/2012/08/01/Github搭建Hexo/1542074055382.jpg","hash":"4e2b693b82c18acc30238548c8734bc6079846f8","modified":1575476918368},{"_id":"public/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1575476918385},{"_id":"public/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1575476918385},{"_id":"public/2012/08/01/Github搭建Hexo/1542073066701.jpg","hash":"cfbdcf85e3d45f5a28bfa2293f773747d0fa9cce","modified":1575476918385},{"_id":"public/2019/08/13/Java-Agent详解/1565784207465.jpg","hash":"1dcd897398954ff6e5bfb16138a41316b1d26194","modified":1575476918386},{"_id":"public/2018/12/26/MongoDB安装/adminMongo_connections.png","hash":"275a4437131ca6c2882a039277412a47c9863c89","modified":1575476918386},{"_id":"public/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1575476918393},{"_id":"public/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1575476918393},{"_id":"public/2015/08/30/iterm2总结/1543213263217.jpg","hash":"3c1533f93a2fb48141d17180684eca508311bfd5","modified":1575476918394},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1575476918400},{"_id":"public/2015/08/30/iterm2总结/1543202719106.jpg","hash":"e0cb2a3fa8643c29d72257c469fe06febacbc926","modified":1575476918400},{"_id":"public/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1575476918406},{"_id":"public/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1575476918406},{"_id":"public/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1575476918406},{"_id":"public/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1575476918407},{"_id":"public/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1575476918407},{"_id":"public/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1575476918408},{"_id":"public/background/bg-4.jpg","hash":"da47f889e02241c8b095f852fb7efd89c114599d","modified":1575476918408},{"_id":"public/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1575476918418},{"_id":"public/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1575476918418},{"_id":"public/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1575476918418},{"_id":"public/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1575476918419},{"_id":"public/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1575476918419},{"_id":"public/2018/11/22/tensorflow教程/tensors_flowing.gif","hash":"868b80c0a655b6c5a8ce07b2fe622c473ef6b96a","modified":1575476918419},{"_id":"public/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1575476918466},{"_id":"public/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1575476918466},{"_id":"public/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1575476918472},{"_id":"public/2018/12/06/Redis设计与实现/lru_comparison.png","hash":"5ce3e2163f4e0de50186576295a08340f25374d3","modified":1575476918472},{"_id":"public/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1575476918476},{"_id":"public/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1575476918476},{"_id":"public/2019/06/03/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的/0d2070e8f84c4801adbfa03bda1f98d9.png","hash":"0399712737ef6427d49e48d5d63dfbd23bf40e4d","modified":1575476918479},{"_id":"public/2015/08/30/Mac-使用rz、sz-远程上传、下载文件/x_engine_paper.pdf","hash":"772606c90a164480ee517b17d1a3cbbb513d048f","modified":1575476918584},{"_id":"public/background/bg-112.jpg","hash":"54d04b06878eec5d021b6f257bc44298f953a2b7","modified":1575476918589}],"Category":[{"name":"MySQL","_id":"ck3ri9y440004t6s6o3qvopyy"},{"name":"机器学习","_id":"ck3ri9y4v000wt6s6yf0pjyap"},{"name":"Elasticsearch","_id":"ck3ri9y56001lt6s6mdh6x87v"},{"name":"Mac","_id":"ck3ri9y59001ut6s62cjetxg6"},{"name":"Hexo","_id":"ck3ri9y5c0021t6s64qxievsz"},{"name":"Java","_id":"ck3ri9y5f0028t6s6lupa2ctt"},{"name":"Redis","_id":"ck3ri9y5j002ht6s6ndg6b0hv"},{"name":"Kafka","_id":"ck3ri9y5p002tt6s6zthmnotu"},{"name":"LaTeX","_id":"ck3ri9y5t0032t6s65tffp5lx"},{"name":"Git","_id":"ck3ri9y5v003bt6s6qlr1isgt"},{"name":"JavaAgent","parent":"ck3ri9y5f0028t6s6lupa2ctt","_id":"ck3ri9y5z003kt6s6q4wkvt02"},{"name":"SQL","_id":"ck3ri9y61003qt6s6bxc3giv8"},{"name":"SQL转换","_id":"ck3ri9y65003yt6s6bqdjvhs5"},{"name":"Markdown","_id":"ck3ri9y680044t6s60lqvlieh"},{"name":"PyTorch","_id":"ck3ri9y6i004qt6s6825550z5"},{"name":"MySQL","parent":"ck3ri9y61003qt6s6bxc3giv8","_id":"ck3ri9y6m004xt6s61s1t2eof"},{"name":"词法分析","_id":"ck3ri9y6p0054t6s68wj7uof9"},{"name":"SpringBoot","_id":"ck3ri9y6r005at6s689l9mtfh"},{"name":"ZooKeeper","_id":"ck3ri9y6v005jt6s6nyg2mk8e"},{"name":"Python","_id":"ck3ri9y6z005pt6s6bdkgask6"},{"name":"Tensorflow","_id":"ck3ri9y72005xt6s6q6g95f2w"},{"name":"Thrift","_id":"ck3ri9y750064t6s6fhwkzxgj"},{"name":"自然语言处理","parent":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y7b006bt6s6l17fck9r"},{"name":"信息论","_id":"ck3ri9y7e006jt6s6px8eea1q"},{"name":"神经网络","_id":"ck3ri9y7g006qt6s6c0vip8mt"},{"name":"Tomcat","_id":"ck3ri9y7l0073t6s6j8mxihwe"},{"name":"概率与统计","_id":"ck3ri9y7o007gt6s6s8o6a085"},{"name":"Algorithm","_id":"ck3ri9y7p007nt6s6az03gwam"},{"name":"数学","_id":"ck3ri9y7q007tt6s6zokmvgek"},{"name":"算法","_id":"ck3ri9y7q007xt6s6qw51ikb6"},{"name":"编译原理","_id":"ck3ri9y7v008it6s6lq22wxwn"},{"name":"设计模式","_id":"ck3ri9y7w008ot6s6qfugzxmj"},{"name":"Trace","parent":"ck3ri9y5f0028t6s6lupa2ctt","_id":"ck3ri9y7x008ut6s6vfthq1ja"},{"name":"负载均衡","_id":"ck3ri9y7y008yt6s6os1rdjg5"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","comments":0,"fancybox":false,"noDate":"true","_content":"\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"https//music.163.com/outchain/player?type=0&id=993980219&auto=1&height=430\"></iframe>\n</div>","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\nfancybox: false\nnoDate: \"true\"\n---\n\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"https//music.163.com/outchain/player?type=0&id=993980219&auto=1&height=430\"></iframe>\n</div>","date":"2019-12-04T14:59:22.784Z","updated":"2019-11-02T07:12:18.083Z","path":"/404.html","layout":"page","_id":"ck3ri9y3x0000t6s65wij4u5h","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"https//music.163.com/outchain/player?type=0&id=993980219&auto=1&height=430\"></iframe>\n</div>","site":{"data":{}},"excerpt":"","more":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"https//music.163.com/outchain/player?type=0&id=993980219&auto=1&height=430\"></iframe>\n</div>"},{"title":"about","_content":"\n\n## 个人简介\n一个计算机专业出身的IT男\n我非常喜欢程序员这份工作，\b同时酷爱数学\n对机器学习、模式识别等人工智能方向\b感兴趣\n\n## 本博客的目的\n好记忆不如烂笔头，记录一些自己学的知识、遇到的问题和解决方案的经验；如果对你有些帮助也是我的荣幸。\n\n## 技术方向\n主修java, 分布式、高并发架构，略懂python\nRPC: thrift、dubbo\n数据库方向: mysql、oracle、ppas、pg\n缓存方面: redis、memcached\n消息队列: rabbitmq、kafka\n服务器: nginx、tomcat、jetty\n\n## 个人兴趣\n运动：乒乓球，游泳\n读书：计算机相关、科幻、天文、小说等书籍","source":"about/index.md","raw":"---\ntitle: about\n---\n\n\n## 个人简介\n一个计算机专业出身的IT男\n我非常喜欢程序员这份工作，\b同时酷爱数学\n对机器学习、模式识别等人工智能方向\b感兴趣\n\n## 本博客的目的\n好记忆不如烂笔头，记录一些自己学的知识、遇到的问题和解决方案的经验；如果对你有些帮助也是我的荣幸。\n\n## 技术方向\n主修java, 分布式、高并发架构，略懂python\nRPC: thrift、dubbo\n数据库方向: mysql、oracle、ppas、pg\n缓存方面: redis、memcached\n消息队列: rabbitmq、kafka\n服务器: nginx、tomcat、jetty\n\n## 个人兴趣\n运动：乒乓球，游泳\n读书：计算机相关、科幻、天文、小说等书籍","date":"2019-12-04T14:59:22.783Z","updated":"2019-11-02T07:12:18.128Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck3ri9y420002t6s61xs01ix6","content":"<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>一个计算机专业出身的IT男\n我非常喜欢程序员这份工作，\b同时酷爱数学\n对机器学习、模式识别等人工智能方向\b感兴趣</p>\n<h2 id=\"本博客的目的\"><a href=\"#本博客的目的\" class=\"headerlink\" title=\"本博客的目的\"></a>本博客的目的</h2><p>好记忆不如烂笔头，记录一些自己学的知识、遇到的问题和解决方案的经验；如果对你有些帮助也是我的荣幸。</p>\n<h2 id=\"技术方向\"><a href=\"#技术方向\" class=\"headerlink\" title=\"技术方向\"></a>技术方向</h2><p>主修java, 分布式、高并发架构，略懂python\nRPC: thrift、dubbo\n数据库方向: mysql、oracle、ppas、pg\n缓存方面: redis、memcached\n消息队列: rabbitmq、kafka\n服务器: nginx、tomcat、jetty</p>\n<h2 id=\"个人兴趣\"><a href=\"#个人兴趣\" class=\"headerlink\" title=\"个人兴趣\"></a>个人兴趣</h2><p>运动：乒乓球，游泳\n读书：计算机相关、科幻、天文、小说等书籍</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>一个计算机专业出身的IT男\n我非常喜欢程序员这份工作，\b同时酷爱数学\n对机器学习、模式识别等人工智能方向\b感兴趣</p>\n<h2 id=\"本博客的目的\"><a href=\"#本博客的目的\" class=\"headerlink\" title=\"本博客的目的\"></a>本博客的目的</h2><p>好记忆不如烂笔头，记录一些自己学的知识、遇到的问题和解决方案的经验；如果对你有些帮助也是我的荣幸。</p>\n<h2 id=\"技术方向\"><a href=\"#技术方向\" class=\"headerlink\" title=\"技术方向\"></a>技术方向</h2><p>主修java, 分布式、高并发架构，略懂python\nRPC: thrift、dubbo\n数据库方向: mysql、oracle、ppas、pg\n缓存方面: redis、memcached\n消息队列: rabbitmq、kafka\n服务器: nginx、tomcat、jetty</p>\n<h2 id=\"个人兴趣\"><a href=\"#个人兴趣\" class=\"headerlink\" title=\"个人兴趣\"></a>个人兴趣</h2><p>运动：乒乓球，游泳\n读书：计算机相关、科幻、天文、小说等书籍</p>\n"},{"title":"文章分类","date":"2018-11-08T16:00:00.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-11-09\ntype: categories\nlayout: categories\n---\n","updated":"2019-11-02T07:12:18.129Z","path":"categories/index.html","comments":1,"_id":"ck3ri9y460006t6s6rnfsu25c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章标签","date":"2018-11-09T01:57:37.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: 文章标签\ndate: 2018-11-09 09:57:37\n---\n","updated":"2019-11-02T07:12:18.129Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck3ri9y480008t6s6hz3qen53","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"01 | 基础架构：一条SQL查询语句是如何执行的","date":"2019-06-02T16:00:00.000Z","_content":"\n\n这是专栏的第一篇文章，我想来跟你聊聊 MySQL 的基础架构。我们经常说，看一个事儿千万不要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。同样，对于 MySQL 的学习也是这样。平时我们使用数据库，看到的通常都是一个整体。比如，你有个最简单的表，表里只有一个 `ID` 字段，在执行下面这个查询语句时：\n\n```\nmysql> select * from T where ID=10；\n```\n\n我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在 MySQL 内部的执行过程。\n\n<!-- more -->\n\n所以今天我想和你一起把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。这样当我们碰到 MySQL 的一些异常或者问题时，就能够直戳本质，更为快速地定位并解决问题。\n\n下面我给出的是 MySQL 的基本架构示意图，从中你可以清楚地看到 SQL 语句在 MySQL 的各个功能模块中的执行过程。\n\n\n\n\n","source":"_posts/01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的.md","raw":"---\ntitle: 01 | 基础架构：一条SQL查询语句是如何执行的\ndate: 2019-06-03\ncategories: \n    - MySQL\ntags:\n    - MySQL\n    - MySQL实战45讲\n---\n\n\n这是专栏的第一篇文章，我想来跟你聊聊 MySQL 的基础架构。我们经常说，看一个事儿千万不要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。同样，对于 MySQL 的学习也是这样。平时我们使用数据库，看到的通常都是一个整体。比如，你有个最简单的表，表里只有一个 `ID` 字段，在执行下面这个查询语句时：\n\n```\nmysql> select * from T where ID=10；\n```\n\n我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在 MySQL 内部的执行过程。\n\n<!-- more -->\n\n所以今天我想和你一起把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。这样当我们碰到 MySQL 的一些异常或者问题时，就能够直戳本质，更为快速地定位并解决问题。\n\n下面我给出的是 MySQL 的基本架构示意图，从中你可以清楚地看到 SQL 语句在 MySQL 的各个功能模块中的执行过程。\n\n\n\n\n","slug":"01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的","published":1,"updated":"2019-11-02T07:12:18.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y3z0001t6s68ks3sqeq","content":"<p>这是专栏的第一篇文章，我想来跟你聊聊 MySQL 的基础架构。我们经常说，看一个事儿千万不要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。同样，对于 MySQL 的学习也是这样。平时我们使用数据库，看到的通常都是一个整体。比如，你有个最简单的表，表里只有一个 <code>ID</code> 字段，在执行下面这个查询语句时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from T where ID=10；</span><br></pre></td></tr></table></figure>\n<p>我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在 MySQL 内部的执行过程。</p>\n<a id=\"more\"></a>\n<p>所以今天我想和你一起把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。这样当我们碰到 MySQL 的一些异常或者问题时，就能够直戳本质，更为快速地定位并解决问题。</p>\n<p>下面我给出的是 MySQL 的基本架构示意图，从中你可以清楚地看到 SQL 语句在 MySQL 的各个功能模块中的执行过程。</p>\n","site":{"data":{}},"excerpt":"<p>这是专栏的第一篇文章，我想来跟你聊聊 MySQL 的基础架构。我们经常说，看一个事儿千万不要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。同样，对于 MySQL 的学习也是这样。平时我们使用数据库，看到的通常都是一个整体。比如，你有个最简单的表，表里只有一个 <code>ID</code> 字段，在执行下面这个查询语句时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from T where ID=10；</span><br></pre></td></tr></table></figure>\n<p>我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在 MySQL 内部的执行过程。</p>","more":"<p>所以今天我想和你一起把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。这样当我们碰到 MySQL 的一些异常或者问题时，就能够直戳本质，更为快速地定位并解决问题。</p>\n<p>下面我给出的是 MySQL 的基本架构示意图，从中你可以清楚地看到 SQL 语句在 MySQL 的各个功能模块中的执行过程。</p>"},{"title":"02 | 日志系统：一条SQL更新语句是如何执行的","date":"2019-06-02T16:00:00.000Z","_content":"\n\n## 日志\n\n前面我们系统了解了一个查询语句的执行流程，并介绍了执行过程中涉及的处理模块。相信你还记得，一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。\n\n那么，一条更新语句的执行流程又是怎样的呢？之前你可能经常听 DBA 同事说，MySQL 可以恢复到半个月内任意一秒的状态，惊叹的同时，你是不是心中也会不免会好奇，这是怎样做到的呢？\n\n我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键 `ID` 和一个整型字段 `c`：\n\n```\nmysql> create table T(ID int primary key, c int);\n```\n\n<!-- more -->\n\n如果要将 `ID=2` 这一行的值加 1，SQL 语句就会这么写：\n```\nmysql> update T set c=c+1 where ID=2;\n```\n\n\n\n前面我有跟你介绍过 SQL 语句基本的执行链路，这里我再把那张图拿过来，你也可以先简单看看这个图回顾下。首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。\n\n![MySQL 的逻辑架构图](0d2070e8f84c4801adbfa03bda1f98d9.png)\n\n你执行语句前要先连接数据库，这是连接器的工作。\n\n\n前面我们说过，在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。\n\n\n接下来，分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用 ID 这个索引。然后，执行器负责具体执行，找到这一行，然后更新。\n\n\n\n与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）。如果接触 MySQL，那这两个词肯定是绕不过的，我后面的内容里也会不断地和你强调。不过话说回来，redo log 和 binlog 在设计上有很多有意思的地方，这些设计思路也可以用到你自己的程序里。\n\n\n\n## 日志\n\n### 重要的日志模块：redo log\n\n不知道你还记不记得《孔乙己》这篇文章，酒店掌柜有一个粉板，专门用来记录客人的赊账记录。如果赊账的人不多，那么他可以把顾客名和账目写在板上。但如果赊账的人多了，粉板总会有记不下的时候，这个时候掌柜一定还有一个专门记录赊账的账本。\n\n\n如果有人要赊账或者还账的话，掌柜一般有两种做法：\n- 直接把账本翻出来，把这次赊的账加上去或者扣除掉；\n- 先在粉板上记下这次的账，等打烊以后再把账本翻出来核算；\n\n\n\n在生意红火柜台很忙时，掌柜一定会选择后者，因为前者操作实在是太麻烦了。首先，你得找到这个人的赊账总额那条记录。你想想，密密麻麻几十页，掌柜要找到那个名字，可能还得带上老花镜慢慢找，找到之后再拿出算盘计算，最后再将结果写回到账本上。\n\n\n这整个过程想想都麻烦。相比之下，还是先在粉板上记一下方便。你想想，如果掌柜没有粉板的帮助，每次记账都得翻账本，效率是不是低得让人难以忍受？\n\n\n同样，在 MySQL 里也有这个问题，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。为了解决这个问题，MySQL 的设计者就用了类似酒店掌柜粉板的思路来提升更新效率。\n\n\n而粉板和账本配合的整个过程，其实就是 MySQL 里经常说到的 `WAL` 技术，`WAL` 的全称是 `Write-Ahead Logging`，它的关键点就是先写日志，再写磁盘，也就是先写粉板，等不忙的时候再写账本。\n\n\n\n具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 `redo log`（粉板）里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。\n\n\n\n如果今天赊账的不多，掌柜可以等打烊后再整理。但如果某天赊账的特别多，粉板写满了，又怎么办呢？这个时候掌柜只好放下手中的活儿，把粉板中的一部分赊账记录更新到账本中，然后把这些记录从粉板上擦掉，为记新账腾出空间。\n\n\n\n与此类似，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件（innodb_log_files_in_group＝4，innodb_log_file_size＝4294967296），每个文件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。\n\n\n![](16a7950217b3f0f4ed02db5db59562a7.png)\n\n\n`write pos` 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。\n`checkpoint` 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。\n\n\n\n`write pos` 和 `checkpoint` 之间的是\"粉板\"上还空着的部分，可以用来记录新的操作。如果 `write pos` 追上 `checkpoint`，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 `checkpoint` 推进一下。\n\n\n\n有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为`crash-safe`。\n\n\n\n要理解 `crash-safe` 这个概念，可以想想我们前面赊账记录的例子。只要赊账记录记在了粉板上或写在了账本上，之后即使掌柜忘记了，比如突然停业几天，恢复生意后依然可以通过账本和粉板上的数据明确赊账账目。\n\n\n<br/>\n### 重要的日志模块：binlog\n\n前面我们讲过，MySQL 整体来看，其实就有两块：一块是 Server 层，它主要做的是 MySQL 功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的粉板 redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。\n\n\n\n我想你肯定会问，为什么会有两份日志呢？\n\n\n因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。\n\n\n\n这两种日志有以下三点不同:\n1. `redo log` 是 `InnoDB` 引擎特有的；`binlog` 是 `MySQL Server`层实现的，所有引擎都可以使用\n2. `redo log` 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如\"给 `ID=2` 这一行的 `c` 字段加 1\"\n3. `redo log` 是循环写的，空间固定会用完；`binlog` 是可以追加写入的。“追加写”是指 `binlog` 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。\n\n\n\n有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。\n\n\n\n执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。\n\n\n\n执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据；\n\n执行器调用引擎接口写入这行新数据；\n\n引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态；\n\n引擎告知执行器执行完成了，随时可以提交事务；\n\n执行器生成这个操作的 binlog，并把 binlog 写入磁盘；\n\n执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成；\n\n\n\n这里我给出这个 update 语句的执行流程图，图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。\n\n\n\n\n\nupdate 语句执行流程\n\n\n\n你可能注意到了，最后三步看上去有点“绕”，将 redo log 的写入拆成了两个步骤：prepare 和 commit，这就是\"两阶段提交\"。\n\n\n<br/>\n### 两阶段提交\n\n为什么必须有“两阶段提交”呢？这是为了让两份日志之间的逻辑一致。要说明这个问题，我们得从文章开头的那个问题说起：怎样让数据库恢复到半个月内任意一秒的状态？\n\n\n前面我们说过了，`binlog` 会记录所有的逻辑操作，并且是采用`追加写`的形式。如果你的 DBA 承诺说半个月内可以恢复，那么备份系统中一定会保存最近半个月的所有 binlog，同时系统会定期做整库备份。这里的“定期”取决于系统的重要性，可以是一天一备，也可以是一周一备。\n\n\n当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数据，那你可以这么做：\n\n\n首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库；\n\n然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到中午误删表之前的那个时刻。\n\n这样你的临时库就跟误删之前的线上库一样了，然后你可以把表数据从临时库取出来，按需要恢复到线上库去。\n\n\n\n好了，说完了数据恢复过程，我们回来说说，为什么日志需要`两阶段提交`。这里不妨用反证法来进行解释。\n\n\n由于 `redo log` 和 `binlog` 是两个独立的逻辑，如果不用两阶段提交，要么就是先写完 redo log 再写 binlog，或者采用反过来的顺序。我们看看这两种方式会有什么问题。\n\n\n仍然用前面的 update 语句来做例子。假设当前 ID=2 的行，字段 c 的值是 0，再假设执行 update 语句过程中在写完第一个日志后，第二个日志还没有写完期间发生了 crash，会出现什么情况呢？\n\n1. 先写 `redo log` 后写 `binlog`。假设在 `redo log` 写完，`binlog` 还没有写完的时候，MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。\n但是由于 `binlog` 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不同。\n\n2. 先写 `binlog` 后写 `redo log`。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同。\n\n\n\n可以看到，如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。\n\n\n\n你可能会说，这个概率是不是很低，平时也没有什么动不动就需要恢复临时库的场景呀？\n\n\n\n其实不是的，不只是误操作后需要用这个过程来恢复数据。当你需要扩容的时候，也就是需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上应用 binlog 来实现的，这个“不一致”就会导致你的线上出现主从数据库不一致的情况。\n\n\n\n简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。\n\n\n\n小结\n\n今天，我介绍了 MySQL 里面最重要的两个日志，即物理日志 redo log 和逻辑日志 binlog。\n\n\n\nredo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。\n\n\n\nsync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。\n\n\n\n我还跟你介绍了与 MySQL 日志系统密切相关的“两阶段提交”。两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案，即使你不做数据库内核开发，日常开发中也有可能会用到。\n\n\n\n文章的最后，我给你留一个思考题吧。前面我说到定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢？或者说，它影响了这个数据库系统的哪个指标？\n\n\n\n备份时间周期的长短，理解需要考虑\n\n业务实际的数据存量，如果大到一天没有办法备份完成，只能一周一次，甚至更长\n\n业务数据的增量，如果增量非常大，如果一周备份一次，增量备份的考验会比较大，极大的概率会出现增量备份失败问题，另外恢复时长和成功率也比较困难\n\n业务比较重要并且对恢复时间的忍受程度低，并且历史上多次出现类似数据回滚的需求，而且增量还不小优先一天一备份，相反业务实际不重要，出问题后可以容忍一定的不可用，而且增量还不多，出于成本考虑可以用一周一备份\n\n备份文件的恢复效率很高的话，大多业务增量一周的恢复时长还是可以保证的，这时候就是提供SLA让业务决策了\n\n综合数据存量、增量、备份成本、恢复效率、业务SLA选择，我理解就有答案了！\n\n\n\n精彩评语：\n\n两阶段提交遇到Mysqld crash\n1. prepare阶段 \n2. 写binlog \n3. commit\n\n当在2之前崩溃时\n重启恢复：后发现没有commit，回滚。\n备份恢复：没有binlog\n当在3之前崩溃\n重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。\n备份：有binlog.\n\n知识点\n\nredo是物理的，binlog是逻辑的；现在由于redo是属于InnoDB引擎，所以必须要有binlog，因为你可以使用别的引擎\n\n保证数据库的一致性，必须要保证2份日志一致，使用的2阶段式提交；其实感觉像事务，不是成功就是失败，不能让中间环节出现，也就是一个成功，一个失败\n\n如果有一天mysql只有InnoDB引擎了，有redo来实现复制，那么感觉oracle的DG就诞生了，物理的速度也将远超逻辑的，毕竟只记录了改动向量\n\nbinlog几大模式，一般采用row，因为遇到时间，从库可能会出现不一致的情况，但是row更新前后都有，会导致日志变大\n\n最后2个落盘参数，保证事务成功，日志必须落盘，这样，数据库crash后，就不会丢失某个事务的数据了","source":"_posts/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的.md","raw":"---\ntitle: 02 | 日志系统：一条SQL更新语句是如何执行的\ndate: 2019-06-03\ncategories: \n    - MySQL\ntags:\n    - MySQL\n    - MySQL实战45讲\n---\n\n\n## 日志\n\n前面我们系统了解了一个查询语句的执行流程，并介绍了执行过程中涉及的处理模块。相信你还记得，一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。\n\n那么，一条更新语句的执行流程又是怎样的呢？之前你可能经常听 DBA 同事说，MySQL 可以恢复到半个月内任意一秒的状态，惊叹的同时，你是不是心中也会不免会好奇，这是怎样做到的呢？\n\n我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键 `ID` 和一个整型字段 `c`：\n\n```\nmysql> create table T(ID int primary key, c int);\n```\n\n<!-- more -->\n\n如果要将 `ID=2` 这一行的值加 1，SQL 语句就会这么写：\n```\nmysql> update T set c=c+1 where ID=2;\n```\n\n\n\n前面我有跟你介绍过 SQL 语句基本的执行链路，这里我再把那张图拿过来，你也可以先简单看看这个图回顾下。首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。\n\n![MySQL 的逻辑架构图](0d2070e8f84c4801adbfa03bda1f98d9.png)\n\n你执行语句前要先连接数据库，这是连接器的工作。\n\n\n前面我们说过，在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。\n\n\n接下来，分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用 ID 这个索引。然后，执行器负责具体执行，找到这一行，然后更新。\n\n\n\n与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）。如果接触 MySQL，那这两个词肯定是绕不过的，我后面的内容里也会不断地和你强调。不过话说回来，redo log 和 binlog 在设计上有很多有意思的地方，这些设计思路也可以用到你自己的程序里。\n\n\n\n## 日志\n\n### 重要的日志模块：redo log\n\n不知道你还记不记得《孔乙己》这篇文章，酒店掌柜有一个粉板，专门用来记录客人的赊账记录。如果赊账的人不多，那么他可以把顾客名和账目写在板上。但如果赊账的人多了，粉板总会有记不下的时候，这个时候掌柜一定还有一个专门记录赊账的账本。\n\n\n如果有人要赊账或者还账的话，掌柜一般有两种做法：\n- 直接把账本翻出来，把这次赊的账加上去或者扣除掉；\n- 先在粉板上记下这次的账，等打烊以后再把账本翻出来核算；\n\n\n\n在生意红火柜台很忙时，掌柜一定会选择后者，因为前者操作实在是太麻烦了。首先，你得找到这个人的赊账总额那条记录。你想想，密密麻麻几十页，掌柜要找到那个名字，可能还得带上老花镜慢慢找，找到之后再拿出算盘计算，最后再将结果写回到账本上。\n\n\n这整个过程想想都麻烦。相比之下，还是先在粉板上记一下方便。你想想，如果掌柜没有粉板的帮助，每次记账都得翻账本，效率是不是低得让人难以忍受？\n\n\n同样，在 MySQL 里也有这个问题，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。为了解决这个问题，MySQL 的设计者就用了类似酒店掌柜粉板的思路来提升更新效率。\n\n\n而粉板和账本配合的整个过程，其实就是 MySQL 里经常说到的 `WAL` 技术，`WAL` 的全称是 `Write-Ahead Logging`，它的关键点就是先写日志，再写磁盘，也就是先写粉板，等不忙的时候再写账本。\n\n\n\n具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 `redo log`（粉板）里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。\n\n\n\n如果今天赊账的不多，掌柜可以等打烊后再整理。但如果某天赊账的特别多，粉板写满了，又怎么办呢？这个时候掌柜只好放下手中的活儿，把粉板中的一部分赊账记录更新到账本中，然后把这些记录从粉板上擦掉，为记新账腾出空间。\n\n\n\n与此类似，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件（innodb_log_files_in_group＝4，innodb_log_file_size＝4294967296），每个文件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。\n\n\n![](16a7950217b3f0f4ed02db5db59562a7.png)\n\n\n`write pos` 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。\n`checkpoint` 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。\n\n\n\n`write pos` 和 `checkpoint` 之间的是\"粉板\"上还空着的部分，可以用来记录新的操作。如果 `write pos` 追上 `checkpoint`，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 `checkpoint` 推进一下。\n\n\n\n有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为`crash-safe`。\n\n\n\n要理解 `crash-safe` 这个概念，可以想想我们前面赊账记录的例子。只要赊账记录记在了粉板上或写在了账本上，之后即使掌柜忘记了，比如突然停业几天，恢复生意后依然可以通过账本和粉板上的数据明确赊账账目。\n\n\n<br/>\n### 重要的日志模块：binlog\n\n前面我们讲过，MySQL 整体来看，其实就有两块：一块是 Server 层，它主要做的是 MySQL 功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的粉板 redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。\n\n\n\n我想你肯定会问，为什么会有两份日志呢？\n\n\n因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。\n\n\n\n这两种日志有以下三点不同:\n1. `redo log` 是 `InnoDB` 引擎特有的；`binlog` 是 `MySQL Server`层实现的，所有引擎都可以使用\n2. `redo log` 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如\"给 `ID=2` 这一行的 `c` 字段加 1\"\n3. `redo log` 是循环写的，空间固定会用完；`binlog` 是可以追加写入的。“追加写”是指 `binlog` 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。\n\n\n\n有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。\n\n\n\n执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。\n\n\n\n执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据；\n\n执行器调用引擎接口写入这行新数据；\n\n引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态；\n\n引擎告知执行器执行完成了，随时可以提交事务；\n\n执行器生成这个操作的 binlog，并把 binlog 写入磁盘；\n\n执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成；\n\n\n\n这里我给出这个 update 语句的执行流程图，图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。\n\n\n\n\n\nupdate 语句执行流程\n\n\n\n你可能注意到了，最后三步看上去有点“绕”，将 redo log 的写入拆成了两个步骤：prepare 和 commit，这就是\"两阶段提交\"。\n\n\n<br/>\n### 两阶段提交\n\n为什么必须有“两阶段提交”呢？这是为了让两份日志之间的逻辑一致。要说明这个问题，我们得从文章开头的那个问题说起：怎样让数据库恢复到半个月内任意一秒的状态？\n\n\n前面我们说过了，`binlog` 会记录所有的逻辑操作，并且是采用`追加写`的形式。如果你的 DBA 承诺说半个月内可以恢复，那么备份系统中一定会保存最近半个月的所有 binlog，同时系统会定期做整库备份。这里的“定期”取决于系统的重要性，可以是一天一备，也可以是一周一备。\n\n\n当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数据，那你可以这么做：\n\n\n首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库；\n\n然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到中午误删表之前的那个时刻。\n\n这样你的临时库就跟误删之前的线上库一样了，然后你可以把表数据从临时库取出来，按需要恢复到线上库去。\n\n\n\n好了，说完了数据恢复过程，我们回来说说，为什么日志需要`两阶段提交`。这里不妨用反证法来进行解释。\n\n\n由于 `redo log` 和 `binlog` 是两个独立的逻辑，如果不用两阶段提交，要么就是先写完 redo log 再写 binlog，或者采用反过来的顺序。我们看看这两种方式会有什么问题。\n\n\n仍然用前面的 update 语句来做例子。假设当前 ID=2 的行，字段 c 的值是 0，再假设执行 update 语句过程中在写完第一个日志后，第二个日志还没有写完期间发生了 crash，会出现什么情况呢？\n\n1. 先写 `redo log` 后写 `binlog`。假设在 `redo log` 写完，`binlog` 还没有写完的时候，MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。\n但是由于 `binlog` 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不同。\n\n2. 先写 `binlog` 后写 `redo log`。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同。\n\n\n\n可以看到，如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。\n\n\n\n你可能会说，这个概率是不是很低，平时也没有什么动不动就需要恢复临时库的场景呀？\n\n\n\n其实不是的，不只是误操作后需要用这个过程来恢复数据。当你需要扩容的时候，也就是需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上应用 binlog 来实现的，这个“不一致”就会导致你的线上出现主从数据库不一致的情况。\n\n\n\n简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。\n\n\n\n小结\n\n今天，我介绍了 MySQL 里面最重要的两个日志，即物理日志 redo log 和逻辑日志 binlog。\n\n\n\nredo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。\n\n\n\nsync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。\n\n\n\n我还跟你介绍了与 MySQL 日志系统密切相关的“两阶段提交”。两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案，即使你不做数据库内核开发，日常开发中也有可能会用到。\n\n\n\n文章的最后，我给你留一个思考题吧。前面我说到定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢？或者说，它影响了这个数据库系统的哪个指标？\n\n\n\n备份时间周期的长短，理解需要考虑\n\n业务实际的数据存量，如果大到一天没有办法备份完成，只能一周一次，甚至更长\n\n业务数据的增量，如果增量非常大，如果一周备份一次，增量备份的考验会比较大，极大的概率会出现增量备份失败问题，另外恢复时长和成功率也比较困难\n\n业务比较重要并且对恢复时间的忍受程度低，并且历史上多次出现类似数据回滚的需求，而且增量还不小优先一天一备份，相反业务实际不重要，出问题后可以容忍一定的不可用，而且增量还不多，出于成本考虑可以用一周一备份\n\n备份文件的恢复效率很高的话，大多业务增量一周的恢复时长还是可以保证的，这时候就是提供SLA让业务决策了\n\n综合数据存量、增量、备份成本、恢复效率、业务SLA选择，我理解就有答案了！\n\n\n\n精彩评语：\n\n两阶段提交遇到Mysqld crash\n1. prepare阶段 \n2. 写binlog \n3. commit\n\n当在2之前崩溃时\n重启恢复：后发现没有commit，回滚。\n备份恢复：没有binlog\n当在3之前崩溃\n重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。\n备份：有binlog.\n\n知识点\n\nredo是物理的，binlog是逻辑的；现在由于redo是属于InnoDB引擎，所以必须要有binlog，因为你可以使用别的引擎\n\n保证数据库的一致性，必须要保证2份日志一致，使用的2阶段式提交；其实感觉像事务，不是成功就是失败，不能让中间环节出现，也就是一个成功，一个失败\n\n如果有一天mysql只有InnoDB引擎了，有redo来实现复制，那么感觉oracle的DG就诞生了，物理的速度也将远超逻辑的，毕竟只记录了改动向量\n\nbinlog几大模式，一般采用row，因为遇到时间，从库可能会出现不一致的情况，但是row更新前后都有，会导致日志变大\n\n最后2个落盘参数，保证事务成功，日志必须落盘，这样，数据库crash后，就不会丢失某个事务的数据了","slug":"02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的","published":1,"updated":"2019-11-02T07:12:18.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y420003t6s6whhmpoai","content":"<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><p>前面我们系统了解了一个查询语句的执行流程，并介绍了执行过程中涉及的处理模块。相信你还记得，一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。</p>\n<p>那么，一条更新语句的执行流程又是怎样的呢？之前你可能经常听 DBA 同事说，MySQL 可以恢复到半个月内任意一秒的状态，惊叹的同时，你是不是心中也会不免会好奇，这是怎样做到的呢？</p>\n<p>我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键 <code>ID</code> 和一个整型字段 <code>c</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table T(ID int primary key, c int);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>如果要将 <code>ID=2</code> 这一行的值加 1，SQL 语句就会这么写：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; update T set c=c+1 where ID=2;</span><br></pre></td></tr></table></figure></p>\n<p>前面我有跟你介绍过 SQL 语句基本的执行链路，这里我再把那张图拿过来，你也可以先简单看看这个图回顾下。首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。</p>\n<p><img src=\"0d2070e8f84c4801adbfa03bda1f98d9.png\" alt=\"MySQL 的逻辑架构图\"></p>\n<p>你执行语句前要先连接数据库，这是连接器的工作。</p>\n<p>前面我们说过，在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。</p>\n<p>接下来，分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用 ID 这个索引。然后，执行器负责具体执行，找到这一行，然后更新。</p>\n<p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）。如果接触 MySQL，那这两个词肯定是绕不过的，我后面的内容里也会不断地和你强调。不过话说回来，redo log 和 binlog 在设计上有很多有意思的地方，这些设计思路也可以用到你自己的程序里。</p>\n<h2 id=\"日志-1\"><a href=\"#日志-1\" class=\"headerlink\" title=\"日志\"></a>日志</h2><h3 id=\"重要的日志模块：redo-log\"><a href=\"#重要的日志模块：redo-log\" class=\"headerlink\" title=\"重要的日志模块：redo log\"></a>重要的日志模块：redo log</h3><p>不知道你还记不记得《孔乙己》这篇文章，酒店掌柜有一个粉板，专门用来记录客人的赊账记录。如果赊账的人不多，那么他可以把顾客名和账目写在板上。但如果赊账的人多了，粉板总会有记不下的时候，这个时候掌柜一定还有一个专门记录赊账的账本。</p>\n<p>如果有人要赊账或者还账的话，掌柜一般有两种做法：</p>\n<ul>\n<li>直接把账本翻出来，把这次赊的账加上去或者扣除掉；</li>\n<li>先在粉板上记下这次的账，等打烊以后再把账本翻出来核算；</li>\n</ul>\n<p>在生意红火柜台很忙时，掌柜一定会选择后者，因为前者操作实在是太麻烦了。首先，你得找到这个人的赊账总额那条记录。你想想，密密麻麻几十页，掌柜要找到那个名字，可能还得带上老花镜慢慢找，找到之后再拿出算盘计算，最后再将结果写回到账本上。</p>\n<p>这整个过程想想都麻烦。相比之下，还是先在粉板上记一下方便。你想想，如果掌柜没有粉板的帮助，每次记账都得翻账本，效率是不是低得让人难以忍受？</p>\n<p>同样，在 MySQL 里也有这个问题，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。为了解决这个问题，MySQL 的设计者就用了类似酒店掌柜粉板的思路来提升更新效率。</p>\n<p>而粉板和账本配合的整个过程，其实就是 MySQL 里经常说到的 <code>WAL</code> 技术，<code>WAL</code> 的全称是 <code>Write-Ahead Logging</code>，它的关键点就是先写日志，再写磁盘，也就是先写粉板，等不忙的时候再写账本。</p>\n<p>具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 <code>redo log</code>（粉板）里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。</p>\n<p>如果今天赊账的不多，掌柜可以等打烊后再整理。但如果某天赊账的特别多，粉板写满了，又怎么办呢？这个时候掌柜只好放下手中的活儿，把粉板中的一部分赊账记录更新到账本中，然后把这些记录从粉板上擦掉，为记新账腾出空间。</p>\n<p>与此类似，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件（innodb_log_files_in_group＝4，innodb_log_file_size＝4294967296），每个文件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。</p>\n<p><img src=\"16a7950217b3f0f4ed02db5db59562a7.png\" alt></p>\n<p><code>write pos</code> 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。\n<code>checkpoint</code> 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p>\n<p><code>write pos</code> 和 <code>checkpoint</code> 之间的是”粉板”上还空着的部分，可以用来记录新的操作。如果 <code>write pos</code> 追上 <code>checkpoint</code>，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 <code>checkpoint</code> 推进一下。</p>\n<p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为<code>crash-safe</code>。</p>\n<p>要理解 <code>crash-safe</code> 这个概念，可以想想我们前面赊账记录的例子。只要赊账记录记在了粉板上或写在了账本上，之后即使掌柜忘记了，比如突然停业几天，恢复生意后依然可以通过账本和粉板上的数据明确赊账账目。</p>\n<p><br></p>\n<h3 id=\"重要的日志模块：binlog\"><a href=\"#重要的日志模块：binlog\" class=\"headerlink\" title=\"重要的日志模块：binlog\"></a>重要的日志模块：binlog</h3><p>前面我们讲过，MySQL 整体来看，其实就有两块：一块是 Server 层，它主要做的是 MySQL 功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的粉板 redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。</p>\n<p>我想你肯定会问，为什么会有两份日志呢？</p>\n<p>因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。</p>\n<p>这两种日志有以下三点不同:</p>\n<ol>\n<li><code>redo log</code> 是 <code>InnoDB</code> 引擎特有的；<code>binlog</code> 是 <code>MySQL Server</code>层实现的，所有引擎都可以使用</li>\n<li><code>redo log</code> 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如”给 <code>ID=2</code> 这一行的 <code>c</code> 字段加 1”</li>\n<li><code>redo log</code> 是循环写的，空间固定会用完；<code>binlog</code> 是可以追加写入的。“追加写”是指 <code>binlog</code> 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li>\n</ol>\n<p>有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。</p>\n<p>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</p>\n<p>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据；</p>\n<p>执行器调用引擎接口写入这行新数据；</p>\n<p>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态；</p>\n<p>引擎告知执行器执行完成了，随时可以提交事务；</p>\n<p>执行器生成这个操作的 binlog，并把 binlog 写入磁盘；</p>\n<p>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成；</p>\n<p>这里我给出这个 update 语句的执行流程图，图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。</p>\n<p>update 语句执行流程</p>\n<p>你可能注意到了，最后三步看上去有点“绕”，将 redo log 的写入拆成了两个步骤：prepare 和 commit，这就是”两阶段提交”。</p>\n<p><br></p>\n<h3 id=\"两阶段提交\"><a href=\"#两阶段提交\" class=\"headerlink\" title=\"两阶段提交\"></a>两阶段提交</h3><p>为什么必须有“两阶段提交”呢？这是为了让两份日志之间的逻辑一致。要说明这个问题，我们得从文章开头的那个问题说起：怎样让数据库恢复到半个月内任意一秒的状态？</p>\n<p>前面我们说过了，<code>binlog</code> 会记录所有的逻辑操作，并且是采用<code>追加写</code>的形式。如果你的 DBA 承诺说半个月内可以恢复，那么备份系统中一定会保存最近半个月的所有 binlog，同时系统会定期做整库备份。这里的“定期”取决于系统的重要性，可以是一天一备，也可以是一周一备。</p>\n<p>当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数据，那你可以这么做：</p>\n<p>首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库；</p>\n<p>然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到中午误删表之前的那个时刻。</p>\n<p>这样你的临时库就跟误删之前的线上库一样了，然后你可以把表数据从临时库取出来，按需要恢复到线上库去。</p>\n<p>好了，说完了数据恢复过程，我们回来说说，为什么日志需要<code>两阶段提交</code>。这里不妨用反证法来进行解释。</p>\n<p>由于 <code>redo log</code> 和 <code>binlog</code> 是两个独立的逻辑，如果不用两阶段提交，要么就是先写完 redo log 再写 binlog，或者采用反过来的顺序。我们看看这两种方式会有什么问题。</p>\n<p>仍然用前面的 update 语句来做例子。假设当前 ID=2 的行，字段 c 的值是 0，再假设执行 update 语句过程中在写完第一个日志后，第二个日志还没有写完期间发生了 crash，会出现什么情况呢？</p>\n<ol>\n<li><p>先写 <code>redo log</code> 后写 <code>binlog</code>。假设在 <code>redo log</code> 写完，<code>binlog</code> 还没有写完的时候，MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。\n但是由于 <code>binlog</code> 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不同。</p>\n</li>\n<li><p>先写 <code>binlog</code> 后写 <code>redo log</code>。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同。</p>\n</li>\n</ol>\n<p>可以看到，如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。</p>\n<p>你可能会说，这个概率是不是很低，平时也没有什么动不动就需要恢复临时库的场景呀？</p>\n<p>其实不是的，不只是误操作后需要用这个过程来恢复数据。当你需要扩容的时候，也就是需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上应用 binlog 来实现的，这个“不一致”就会导致你的线上出现主从数据库不一致的情况。</p>\n<p>简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p>\n<p>小结</p>\n<p>今天，我介绍了 MySQL 里面最重要的两个日志，即物理日志 redo log 和逻辑日志 binlog。</p>\n<p>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</p>\n<p>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p>\n<p>我还跟你介绍了与 MySQL 日志系统密切相关的“两阶段提交”。两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案，即使你不做数据库内核开发，日常开发中也有可能会用到。</p>\n<p>文章的最后，我给你留一个思考题吧。前面我说到定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢？或者说，它影响了这个数据库系统的哪个指标？</p>\n<p>备份时间周期的长短，理解需要考虑</p>\n<p>业务实际的数据存量，如果大到一天没有办法备份完成，只能一周一次，甚至更长</p>\n<p>业务数据的增量，如果增量非常大，如果一周备份一次，增量备份的考验会比较大，极大的概率会出现增量备份失败问题，另外恢复时长和成功率也比较困难</p>\n<p>业务比较重要并且对恢复时间的忍受程度低，并且历史上多次出现类似数据回滚的需求，而且增量还不小优先一天一备份，相反业务实际不重要，出问题后可以容忍一定的不可用，而且增量还不多，出于成本考虑可以用一周一备份</p>\n<p>备份文件的恢复效率很高的话，大多业务增量一周的恢复时长还是可以保证的，这时候就是提供SLA让业务决策了</p>\n<p>综合数据存量、增量、备份成本、恢复效率、业务SLA选择，我理解就有答案了！</p>\n<p>精彩评语：</p>\n<p>两阶段提交遇到Mysqld crash</p>\n<ol>\n<li>prepare阶段 </li>\n<li>写binlog </li>\n<li>commit</li>\n</ol>\n<p>当在2之前崩溃时\n重启恢复：后发现没有commit，回滚。\n备份恢复：没有binlog\n当在3之前崩溃\n重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。\n备份：有binlog.</p>\n<p>知识点</p>\n<p>redo是物理的，binlog是逻辑的；现在由于redo是属于InnoDB引擎，所以必须要有binlog，因为你可以使用别的引擎</p>\n<p>保证数据库的一致性，必须要保证2份日志一致，使用的2阶段式提交；其实感觉像事务，不是成功就是失败，不能让中间环节出现，也就是一个成功，一个失败</p>\n<p>如果有一天mysql只有InnoDB引擎了，有redo来实现复制，那么感觉oracle的DG就诞生了，物理的速度也将远超逻辑的，毕竟只记录了改动向量</p>\n<p>binlog几大模式，一般采用row，因为遇到时间，从库可能会出现不一致的情况，但是row更新前后都有，会导致日志变大</p>\n<p>最后2个落盘参数，保证事务成功，日志必须落盘，这样，数据库crash后，就不会丢失某个事务的数据了</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><p>前面我们系统了解了一个查询语句的执行流程，并介绍了执行过程中涉及的处理模块。相信你还记得，一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。</p>\n<p>那么，一条更新语句的执行流程又是怎样的呢？之前你可能经常听 DBA 同事说，MySQL 可以恢复到半个月内任意一秒的状态，惊叹的同时，你是不是心中也会不免会好奇，这是怎样做到的呢？</p>\n<p>我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键 <code>ID</code> 和一个整型字段 <code>c</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table T(ID int primary key, c int);</span><br></pre></td></tr></table></figure>","more":"<p>如果要将 <code>ID=2</code> 这一行的值加 1，SQL 语句就会这么写：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; update T set c=c+1 where ID=2;</span><br></pre></td></tr></table></figure></p>\n<p>前面我有跟你介绍过 SQL 语句基本的执行链路，这里我再把那张图拿过来，你也可以先简单看看这个图回顾下。首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。</p>\n<p><img src=\"0d2070e8f84c4801adbfa03bda1f98d9.png\" alt=\"MySQL 的逻辑架构图\"></p>\n<p>你执行语句前要先连接数据库，这是连接器的工作。</p>\n<p>前面我们说过，在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。</p>\n<p>接下来，分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用 ID 这个索引。然后，执行器负责具体执行，找到这一行，然后更新。</p>\n<p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）。如果接触 MySQL，那这两个词肯定是绕不过的，我后面的内容里也会不断地和你强调。不过话说回来，redo log 和 binlog 在设计上有很多有意思的地方，这些设计思路也可以用到你自己的程序里。</p>\n<h2 id=\"日志-1\"><a href=\"#日志-1\" class=\"headerlink\" title=\"日志\"></a>日志</h2><h3 id=\"重要的日志模块：redo-log\"><a href=\"#重要的日志模块：redo-log\" class=\"headerlink\" title=\"重要的日志模块：redo log\"></a>重要的日志模块：redo log</h3><p>不知道你还记不记得《孔乙己》这篇文章，酒店掌柜有一个粉板，专门用来记录客人的赊账记录。如果赊账的人不多，那么他可以把顾客名和账目写在板上。但如果赊账的人多了，粉板总会有记不下的时候，这个时候掌柜一定还有一个专门记录赊账的账本。</p>\n<p>如果有人要赊账或者还账的话，掌柜一般有两种做法：</p>\n<ul>\n<li>直接把账本翻出来，把这次赊的账加上去或者扣除掉；</li>\n<li>先在粉板上记下这次的账，等打烊以后再把账本翻出来核算；</li>\n</ul>\n<p>在生意红火柜台很忙时，掌柜一定会选择后者，因为前者操作实在是太麻烦了。首先，你得找到这个人的赊账总额那条记录。你想想，密密麻麻几十页，掌柜要找到那个名字，可能还得带上老花镜慢慢找，找到之后再拿出算盘计算，最后再将结果写回到账本上。</p>\n<p>这整个过程想想都麻烦。相比之下，还是先在粉板上记一下方便。你想想，如果掌柜没有粉板的帮助，每次记账都得翻账本，效率是不是低得让人难以忍受？</p>\n<p>同样，在 MySQL 里也有这个问题，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。为了解决这个问题，MySQL 的设计者就用了类似酒店掌柜粉板的思路来提升更新效率。</p>\n<p>而粉板和账本配合的整个过程，其实就是 MySQL 里经常说到的 <code>WAL</code> 技术，<code>WAL</code> 的全称是 <code>Write-Ahead Logging</code>，它的关键点就是先写日志，再写磁盘，也就是先写粉板，等不忙的时候再写账本。</p>\n<p>具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 <code>redo log</code>（粉板）里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。</p>\n<p>如果今天赊账的不多，掌柜可以等打烊后再整理。但如果某天赊账的特别多，粉板写满了，又怎么办呢？这个时候掌柜只好放下手中的活儿，把粉板中的一部分赊账记录更新到账本中，然后把这些记录从粉板上擦掉，为记新账腾出空间。</p>\n<p>与此类似，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件（innodb_log_files_in_group＝4，innodb_log_file_size＝4294967296），每个文件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。</p>\n<p><img src=\"16a7950217b3f0f4ed02db5db59562a7.png\" alt></p>\n<p><code>write pos</code> 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。\n<code>checkpoint</code> 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p>\n<p><code>write pos</code> 和 <code>checkpoint</code> 之间的是”粉板”上还空着的部分，可以用来记录新的操作。如果 <code>write pos</code> 追上 <code>checkpoint</code>，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 <code>checkpoint</code> 推进一下。</p>\n<p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为<code>crash-safe</code>。</p>\n<p>要理解 <code>crash-safe</code> 这个概念，可以想想我们前面赊账记录的例子。只要赊账记录记在了粉板上或写在了账本上，之后即使掌柜忘记了，比如突然停业几天，恢复生意后依然可以通过账本和粉板上的数据明确赊账账目。</p>\n<p><br></p>\n<h3 id=\"重要的日志模块：binlog\"><a href=\"#重要的日志模块：binlog\" class=\"headerlink\" title=\"重要的日志模块：binlog\"></a>重要的日志模块：binlog</h3><p>前面我们讲过，MySQL 整体来看，其实就有两块：一块是 Server 层，它主要做的是 MySQL 功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的粉板 redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。</p>\n<p>我想你肯定会问，为什么会有两份日志呢？</p>\n<p>因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。</p>\n<p>这两种日志有以下三点不同:</p>\n<ol>\n<li><code>redo log</code> 是 <code>InnoDB</code> 引擎特有的；<code>binlog</code> 是 <code>MySQL Server</code>层实现的，所有引擎都可以使用</li>\n<li><code>redo log</code> 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如”给 <code>ID=2</code> 这一行的 <code>c</code> 字段加 1”</li>\n<li><code>redo log</code> 是循环写的，空间固定会用完；<code>binlog</code> 是可以追加写入的。“追加写”是指 <code>binlog</code> 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li>\n</ol>\n<p>有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。</p>\n<p>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</p>\n<p>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据；</p>\n<p>执行器调用引擎接口写入这行新数据；</p>\n<p>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态；</p>\n<p>引擎告知执行器执行完成了，随时可以提交事务；</p>\n<p>执行器生成这个操作的 binlog，并把 binlog 写入磁盘；</p>\n<p>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成；</p>\n<p>这里我给出这个 update 语句的执行流程图，图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。</p>\n<p>update 语句执行流程</p>\n<p>你可能注意到了，最后三步看上去有点“绕”，将 redo log 的写入拆成了两个步骤：prepare 和 commit，这就是”两阶段提交”。</p>\n<p><br></p>\n<h3 id=\"两阶段提交\"><a href=\"#两阶段提交\" class=\"headerlink\" title=\"两阶段提交\"></a>两阶段提交</h3><p>为什么必须有“两阶段提交”呢？这是为了让两份日志之间的逻辑一致。要说明这个问题，我们得从文章开头的那个问题说起：怎样让数据库恢复到半个月内任意一秒的状态？</p>\n<p>前面我们说过了，<code>binlog</code> 会记录所有的逻辑操作，并且是采用<code>追加写</code>的形式。如果你的 DBA 承诺说半个月内可以恢复，那么备份系统中一定会保存最近半个月的所有 binlog，同时系统会定期做整库备份。这里的“定期”取决于系统的重要性，可以是一天一备，也可以是一周一备。</p>\n<p>当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数据，那你可以这么做：</p>\n<p>首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库；</p>\n<p>然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到中午误删表之前的那个时刻。</p>\n<p>这样你的临时库就跟误删之前的线上库一样了，然后你可以把表数据从临时库取出来，按需要恢复到线上库去。</p>\n<p>好了，说完了数据恢复过程，我们回来说说，为什么日志需要<code>两阶段提交</code>。这里不妨用反证法来进行解释。</p>\n<p>由于 <code>redo log</code> 和 <code>binlog</code> 是两个独立的逻辑，如果不用两阶段提交，要么就是先写完 redo log 再写 binlog，或者采用反过来的顺序。我们看看这两种方式会有什么问题。</p>\n<p>仍然用前面的 update 语句来做例子。假设当前 ID=2 的行，字段 c 的值是 0，再假设执行 update 语句过程中在写完第一个日志后，第二个日志还没有写完期间发生了 crash，会出现什么情况呢？</p>\n<ol>\n<li><p>先写 <code>redo log</code> 后写 <code>binlog</code>。假设在 <code>redo log</code> 写完，<code>binlog</code> 还没有写完的时候，MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。\n但是由于 <code>binlog</code> 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不同。</p>\n</li>\n<li><p>先写 <code>binlog</code> 后写 <code>redo log</code>。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同。</p>\n</li>\n</ol>\n<p>可以看到，如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。</p>\n<p>你可能会说，这个概率是不是很低，平时也没有什么动不动就需要恢复临时库的场景呀？</p>\n<p>其实不是的，不只是误操作后需要用这个过程来恢复数据。当你需要扩容的时候，也就是需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上应用 binlog 来实现的，这个“不一致”就会导致你的线上出现主从数据库不一致的情况。</p>\n<p>简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p>\n<p>小结</p>\n<p>今天，我介绍了 MySQL 里面最重要的两个日志，即物理日志 redo log 和逻辑日志 binlog。</p>\n<p>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</p>\n<p>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p>\n<p>我还跟你介绍了与 MySQL 日志系统密切相关的“两阶段提交”。两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案，即使你不做数据库内核开发，日常开发中也有可能会用到。</p>\n<p>文章的最后，我给你留一个思考题吧。前面我说到定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢？或者说，它影响了这个数据库系统的哪个指标？</p>\n<p>备份时间周期的长短，理解需要考虑</p>\n<p>业务实际的数据存量，如果大到一天没有办法备份完成，只能一周一次，甚至更长</p>\n<p>业务数据的增量，如果增量非常大，如果一周备份一次，增量备份的考验会比较大，极大的概率会出现增量备份失败问题，另外恢复时长和成功率也比较困难</p>\n<p>业务比较重要并且对恢复时间的忍受程度低，并且历史上多次出现类似数据回滚的需求，而且增量还不小优先一天一备份，相反业务实际不重要，出问题后可以容忍一定的不可用，而且增量还不多，出于成本考虑可以用一周一备份</p>\n<p>备份文件的恢复效率很高的话，大多业务增量一周的恢复时长还是可以保证的，这时候就是提供SLA让业务决策了</p>\n<p>综合数据存量、增量、备份成本、恢复效率、业务SLA选择，我理解就有答案了！</p>\n<p>精彩评语：</p>\n<p>两阶段提交遇到Mysqld crash</p>\n<ol>\n<li>prepare阶段 </li>\n<li>写binlog </li>\n<li>commit</li>\n</ol>\n<p>当在2之前崩溃时\n重启恢复：后发现没有commit，回滚。\n备份恢复：没有binlog\n当在3之前崩溃\n重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。\n备份：有binlog.</p>\n<p>知识点</p>\n<p>redo是物理的，binlog是逻辑的；现在由于redo是属于InnoDB引擎，所以必须要有binlog，因为你可以使用别的引擎</p>\n<p>保证数据库的一致性，必须要保证2份日志一致，使用的2阶段式提交；其实感觉像事务，不是成功就是失败，不能让中间环节出现，也就是一个成功，一个失败</p>\n<p>如果有一天mysql只有InnoDB引擎了，有redo来实现复制，那么感觉oracle的DG就诞生了，物理的速度也将远超逻辑的，毕竟只记录了改动向量</p>\n<p>binlog几大模式，一般采用row，因为遇到时间，从库可能会出现不一致的情况，但是row更新前后都有，会导致日志变大</p>\n<p>最后2个落盘参数，保证事务成功，日志必须落盘，这样，数据库crash后，就不会丢失某个事务的数据了</p>"},{"title":"03 | 事务隔离：为什么你改了我还看不见","date":"2019-06-02T16:00:00.000Z","_content":"\n\n提到事务，你肯定不陌生，和数据库打交道的时候，我们总是会用到事务。\n\n\n\n最经典的例子就是转账，你要给朋友小王转 100 块钱，而此时你的银行卡只有 100 块钱。转账过程具体到程序里会有一系列的操作，比如查询余额、做加减法、更新余额等，这些操作必须保证是一体的，不然等程序查完之后，还没做减法之前，你这 100 块钱，完全可以借着这个时间差再查一次，然后再给另外一个朋友转账，如果银行这么整，不就乱了么？这时就要用到“事务”这个概念了。\n\n\n\n简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。\n\n\n\n今天的文章里，我将会以 InnoDB 为例，剖析 MySQL 在事务支持方面的特定实现，并基于原理给出相应的实践建议，希望这些案例能加深你对 MySQL 事务原理的理解。\n\n<br/>\n### 隔离性与隔离级别\n\n提到事务，你肯定会想到 ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性），今天我们就来说说其中 I，也就是“隔离性”。当数据库上有多个事务同时执行的时候，就可能出现`脏读（dirty read）`、`不可重复读（non-repeatable read）`、`幻读（phantom read）`的问题，为了解决这些问题，就有了“隔离级别”的概念。\n\n\n\n在谈隔离级别之前，你首先要知道，你隔离得越严实，效率就会越低。因此很多时候，我们都要在二者之间寻找一个平衡点。SQL 标准的事务隔离级别包括：`读未提交（read uncommitted）`、`读提交（read committed）`、`可重复读（repeatable read）`和`串行化（serializable ）`。下面我逐一为你解释：\n\n1. 读未提交：一个事务还没提交时，它做的变更就能被别的事务看到。\n\n2. 读提交：一个事务提交之后，它做的变更才会被其他事务看到。\n\n3. 可重复读：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。\n\n4. 串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。\n\n\n\n其中“读提交”和“可重复读”比较难理解，所以我用一个例子说明这几种隔离级别。假设数据表 T 中只有一列，其中一行的值为 1，下面是按照时间顺序执行两个事务的行为。\n\n\n```\nmysql> create table T(c int) engine=InnoDB;\ninsert into T(c) values(1);\n```\n\n![]()\n\n我们来看看在不同的隔离级别下，事务 A 会有哪些不同的返回结果，也就是图里面 V1、V2、V3 的返回值分别是什么。\n- `读未提交（read uncommitted）`：则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2\n- `读提交（read committed）`：则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。\n- `可重复读（repeatable read）`：则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。\n- `串行化（serializable ）`：则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。\n\n\n在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行化”隔离级别下直接用加锁的方式来避免并行访问。\n\n\n我们可以看到在不同的隔离级别下，数据库行为是有所不同的。Oracle 数据库的默认隔离级别其实就是“读提交”，因此对于一些从 Oracle 迁移到 MySQL 的应用，为保证数据库隔离级别的一致，你一定要记得将 MySQL 的隔离级别设置为“读提交”。\n\n配置的方式是，将启动参数 transaction-isolation 的值设置成 READ-COMMITTED。你可以用 show variables 来查看当前的值。\n```\nmysql> show variables like 'transaction_isolation'; \n+-----------------------+----------------+\n| Variable_name | Value |\n+-----------------------+----------------+\n| transaction_isolation | READ-COMMITTED |\n+-----------------------+----------------+\n```\n\n总结来说，存在即合理，哪个隔离级别都有它自己的使用场景，你要根据自己的业务情况来定。我想你可能会问那什么时候需要“可重复读”的场景呢？我们来看一个数据校对逻辑的案例。\n\n\n假设你在管理一个个人银行账户表。一个表存了每个月月底的余额，一个表存了账单明细。这时候你要做数据校对，也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。你一定希望在校对过程中，即使有用户发生了一笔新的交易，也不影响你的校对结果。\n\n\n这时候使用“可重复读”隔离级别就很方便。事务启动时的视图可以认为是静态的，不受其他事务更新的影响。\n\n\n<br/>\n### 事务隔离的实现\n\n理解了事务的隔离级别，我们再来看看事务隔离具体是怎么实现的。这里我们展开说明“可重复读”。\n\n在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。\n\n\n当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如图中看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。\n\n\n\n同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。\n\n你一定会问，回滚日志总不能一直保留吧，什么时候删除呢？答案是，在不需要的时候才删除。也就是说，系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志会被删除。\n\n什么时候才不需要了呢？就是当系统里没有比这个回滚日志更早的 read-view 的时候。\n\n基于上面的说明，我们来讨论一下为什么建议你尽量不要使用长事务。\n\n长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。\n\n在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有 20GB，而回滚段有 200GB 的库。最终只好为了清理回滚段，重建整个库。\n\n\n除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库，这个我们会在后面讲锁的时候展开。\n\n\n<br/>\n### 事务的启动方式\n\n\n如前面所述，长事务有这些潜在风险，我当然是建议你尽量避免。其实很多时候业务开发同学并不是有意使用长事务，通常是由于误用所致。MySQL 的事务启动方式有以下几种：\n\n\n显式启动事务语句， `begin` 或 `start transaction`。配套的提交语句是 `commit`，回滚语句是 `rollback`。\n\n\n`set autocommit=0`，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。\n\n有些客户端连接框架会默认连接成功后先执行一个 set autocommit=0 的命令。这就导致接下来的查询都在事务中，如果是长连接，就导致了意外的长事务。\n\n\n因此，我会建议你总是使用 `set autocommit=1`, 通过显式语句的方式来启动事务。\n\n但是有的开发同学会纠结“多一次交互”的问题。对于一个需要频繁使用事务的业务，第二种方式每个事务在开始时都不需要主动执行一次 “begin”，减少了语句的交互次数。如果你也有这个顾虑，我建议你使用 commit work and chain 语法。\n\n\n\n在 autocommit 为 1 的情况下，用 begin 显式启动的事务，如果执行 commit 则提交事务。如果执行 commit work and chain，则是提交事务并自动启动下一个事务，这样也省去了再次执行 begin 语句的开销。同时带来的好处是从程序开发的角度明确地知道每个语句是否处于事务中。\n\n\n你可以在 information_schema 库的 innodb_trx 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务。\n```\nselect * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))>60\n```\n\n<br/>\n### 小结\n\n这篇文章里面，我介绍了 MySQL 的事务隔离级别的现象和实现，根据实现原理分析了长事务存在的风险，以及如何用正确的方式避免长事务。希望我举的例子能够帮助你理解事务，并更好地使用 MySQL 的事务特性。\n\n我给你留一个问题吧。你现在知道了系统里面应该避免长事务，如果你是业务开发负责人同时也是数据库负责人，你会有什么方案来避免出现或者处理这种情况呢？\n\n\n\n这个问题，我们可以从应用开发端和数据库端来看。\n\n首先，从应用开发端来看：\n\n确认是否使用了 set autocommit=0。这个确认工作可以在测试环境中开展，把 MySQL 的 general_log 开起来，然后随便跑一个业务逻辑，通过 general_log 的日志来确认。一般框架如果会设置这个值，也就会提供参数来控制行为，你的目标就是把它改成 1。\n\n确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用 begin/commit 框起来。我见过有些是业务并没有这个需要，但是也把好几个 select 语句放到了事务中，这种只读事务可以去掉。\n\n业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。（为什么会意外？在后续的文章中会提到这类案例）\n\n\n其次，从数据库端来看：\n\n监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 / 或者 kill；Percona 的 pt-kill 这个工具不错，推荐使用；\n\n在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题；\n\n如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2（或更大的值）。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。","source":"_posts/03-MySQL实战45讲-事务隔离：为什么你改了我还看不见.md","raw":"---\ntitle: 03 | 事务隔离：为什么你改了我还看不见\ndate: 2019-06-03\ncategories: \n    - MySQL\ntags:\n    - MySQL\n    - MySQL实战45讲\n---\n\n\n提到事务，你肯定不陌生，和数据库打交道的时候，我们总是会用到事务。\n\n\n\n最经典的例子就是转账，你要给朋友小王转 100 块钱，而此时你的银行卡只有 100 块钱。转账过程具体到程序里会有一系列的操作，比如查询余额、做加减法、更新余额等，这些操作必须保证是一体的，不然等程序查完之后，还没做减法之前，你这 100 块钱，完全可以借着这个时间差再查一次，然后再给另外一个朋友转账，如果银行这么整，不就乱了么？这时就要用到“事务”这个概念了。\n\n\n\n简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。\n\n\n\n今天的文章里，我将会以 InnoDB 为例，剖析 MySQL 在事务支持方面的特定实现，并基于原理给出相应的实践建议，希望这些案例能加深你对 MySQL 事务原理的理解。\n\n<br/>\n### 隔离性与隔离级别\n\n提到事务，你肯定会想到 ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性），今天我们就来说说其中 I，也就是“隔离性”。当数据库上有多个事务同时执行的时候，就可能出现`脏读（dirty read）`、`不可重复读（non-repeatable read）`、`幻读（phantom read）`的问题，为了解决这些问题，就有了“隔离级别”的概念。\n\n\n\n在谈隔离级别之前，你首先要知道，你隔离得越严实，效率就会越低。因此很多时候，我们都要在二者之间寻找一个平衡点。SQL 标准的事务隔离级别包括：`读未提交（read uncommitted）`、`读提交（read committed）`、`可重复读（repeatable read）`和`串行化（serializable ）`。下面我逐一为你解释：\n\n1. 读未提交：一个事务还没提交时，它做的变更就能被别的事务看到。\n\n2. 读提交：一个事务提交之后，它做的变更才会被其他事务看到。\n\n3. 可重复读：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。\n\n4. 串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。\n\n\n\n其中“读提交”和“可重复读”比较难理解，所以我用一个例子说明这几种隔离级别。假设数据表 T 中只有一列，其中一行的值为 1，下面是按照时间顺序执行两个事务的行为。\n\n\n```\nmysql> create table T(c int) engine=InnoDB;\ninsert into T(c) values(1);\n```\n\n![]()\n\n我们来看看在不同的隔离级别下，事务 A 会有哪些不同的返回结果，也就是图里面 V1、V2、V3 的返回值分别是什么。\n- `读未提交（read uncommitted）`：则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2\n- `读提交（read committed）`：则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。\n- `可重复读（repeatable read）`：则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。\n- `串行化（serializable ）`：则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。\n\n\n在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行化”隔离级别下直接用加锁的方式来避免并行访问。\n\n\n我们可以看到在不同的隔离级别下，数据库行为是有所不同的。Oracle 数据库的默认隔离级别其实就是“读提交”，因此对于一些从 Oracle 迁移到 MySQL 的应用，为保证数据库隔离级别的一致，你一定要记得将 MySQL 的隔离级别设置为“读提交”。\n\n配置的方式是，将启动参数 transaction-isolation 的值设置成 READ-COMMITTED。你可以用 show variables 来查看当前的值。\n```\nmysql> show variables like 'transaction_isolation'; \n+-----------------------+----------------+\n| Variable_name | Value |\n+-----------------------+----------------+\n| transaction_isolation | READ-COMMITTED |\n+-----------------------+----------------+\n```\n\n总结来说，存在即合理，哪个隔离级别都有它自己的使用场景，你要根据自己的业务情况来定。我想你可能会问那什么时候需要“可重复读”的场景呢？我们来看一个数据校对逻辑的案例。\n\n\n假设你在管理一个个人银行账户表。一个表存了每个月月底的余额，一个表存了账单明细。这时候你要做数据校对，也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。你一定希望在校对过程中，即使有用户发生了一笔新的交易，也不影响你的校对结果。\n\n\n这时候使用“可重复读”隔离级别就很方便。事务启动时的视图可以认为是静态的，不受其他事务更新的影响。\n\n\n<br/>\n### 事务隔离的实现\n\n理解了事务的隔离级别，我们再来看看事务隔离具体是怎么实现的。这里我们展开说明“可重复读”。\n\n在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。\n\n\n当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如图中看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。\n\n\n\n同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。\n\n你一定会问，回滚日志总不能一直保留吧，什么时候删除呢？答案是，在不需要的时候才删除。也就是说，系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志会被删除。\n\n什么时候才不需要了呢？就是当系统里没有比这个回滚日志更早的 read-view 的时候。\n\n基于上面的说明，我们来讨论一下为什么建议你尽量不要使用长事务。\n\n长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。\n\n在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有 20GB，而回滚段有 200GB 的库。最终只好为了清理回滚段，重建整个库。\n\n\n除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库，这个我们会在后面讲锁的时候展开。\n\n\n<br/>\n### 事务的启动方式\n\n\n如前面所述，长事务有这些潜在风险，我当然是建议你尽量避免。其实很多时候业务开发同学并不是有意使用长事务，通常是由于误用所致。MySQL 的事务启动方式有以下几种：\n\n\n显式启动事务语句， `begin` 或 `start transaction`。配套的提交语句是 `commit`，回滚语句是 `rollback`。\n\n\n`set autocommit=0`，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。\n\n有些客户端连接框架会默认连接成功后先执行一个 set autocommit=0 的命令。这就导致接下来的查询都在事务中，如果是长连接，就导致了意外的长事务。\n\n\n因此，我会建议你总是使用 `set autocommit=1`, 通过显式语句的方式来启动事务。\n\n但是有的开发同学会纠结“多一次交互”的问题。对于一个需要频繁使用事务的业务，第二种方式每个事务在开始时都不需要主动执行一次 “begin”，减少了语句的交互次数。如果你也有这个顾虑，我建议你使用 commit work and chain 语法。\n\n\n\n在 autocommit 为 1 的情况下，用 begin 显式启动的事务，如果执行 commit 则提交事务。如果执行 commit work and chain，则是提交事务并自动启动下一个事务，这样也省去了再次执行 begin 语句的开销。同时带来的好处是从程序开发的角度明确地知道每个语句是否处于事务中。\n\n\n你可以在 information_schema 库的 innodb_trx 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务。\n```\nselect * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))>60\n```\n\n<br/>\n### 小结\n\n这篇文章里面，我介绍了 MySQL 的事务隔离级别的现象和实现，根据实现原理分析了长事务存在的风险，以及如何用正确的方式避免长事务。希望我举的例子能够帮助你理解事务，并更好地使用 MySQL 的事务特性。\n\n我给你留一个问题吧。你现在知道了系统里面应该避免长事务，如果你是业务开发负责人同时也是数据库负责人，你会有什么方案来避免出现或者处理这种情况呢？\n\n\n\n这个问题，我们可以从应用开发端和数据库端来看。\n\n首先，从应用开发端来看：\n\n确认是否使用了 set autocommit=0。这个确认工作可以在测试环境中开展，把 MySQL 的 general_log 开起来，然后随便跑一个业务逻辑，通过 general_log 的日志来确认。一般框架如果会设置这个值，也就会提供参数来控制行为，你的目标就是把它改成 1。\n\n确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用 begin/commit 框起来。我见过有些是业务并没有这个需要，但是也把好几个 select 语句放到了事务中，这种只读事务可以去掉。\n\n业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。（为什么会意外？在后续的文章中会提到这类案例）\n\n\n其次，从数据库端来看：\n\n监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 / 或者 kill；Percona 的 pt-kill 这个工具不错，推荐使用；\n\n在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题；\n\n如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2（或更大的值）。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。","slug":"03-MySQL实战45讲-事务隔离：为什么你改了我还看不见","published":1,"updated":"2019-11-02T07:12:18.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y470007t6s605mpb1ia","content":"<p>提到事务，你肯定不陌生，和数据库打交道的时候，我们总是会用到事务。</p>\n<p>最经典的例子就是转账，你要给朋友小王转 100 块钱，而此时你的银行卡只有 100 块钱。转账过程具体到程序里会有一系列的操作，比如查询余额、做加减法、更新余额等，这些操作必须保证是一体的，不然等程序查完之后，还没做减法之前，你这 100 块钱，完全可以借着这个时间差再查一次，然后再给另外一个朋友转账，如果银行这么整，不就乱了么？这时就要用到“事务”这个概念了。</p>\n<p>简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。</p>\n<p>今天的文章里，我将会以 InnoDB 为例，剖析 MySQL 在事务支持方面的特定实现，并基于原理给出相应的实践建议，希望这些案例能加深你对 MySQL 事务原理的理解。</p>\n<p><br></p>\n<h3 id=\"隔离性与隔离级别\"><a href=\"#隔离性与隔离级别\" class=\"headerlink\" title=\"隔离性与隔离级别\"></a>隔离性与隔离级别</h3><p>提到事务，你肯定会想到 ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性），今天我们就来说说其中 I，也就是“隔离性”。当数据库上有多个事务同时执行的时候，就可能出现<code>脏读（dirty read）</code>、<code>不可重复读（non-repeatable read）</code>、<code>幻读（phantom read）</code>的问题，为了解决这些问题，就有了“隔离级别”的概念。</p>\n<p>在谈隔离级别之前，你首先要知道，你隔离得越严实，效率就会越低。因此很多时候，我们都要在二者之间寻找一个平衡点。SQL 标准的事务隔离级别包括：<code>读未提交（read uncommitted）</code>、<code>读提交（read committed）</code>、<code>可重复读（repeatable read）</code>和<code>串行化（serializable ）</code>。下面我逐一为你解释：</p>\n<ol>\n<li><p>读未提交：一个事务还没提交时，它做的变更就能被别的事务看到。</p>\n</li>\n<li><p>读提交：一个事务提交之后，它做的变更才会被其他事务看到。</p>\n</li>\n<li><p>可重复读：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</p>\n</li>\n<li><p>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p>\n</li>\n</ol>\n<p>其中“读提交”和“可重复读”比较难理解，所以我用一个例子说明这几种隔离级别。假设数据表 T 中只有一列，其中一行的值为 1，下面是按照时间顺序执行两个事务的行为。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table T(c int) engine=InnoDB;</span><br><span class=\"line\">insert into T(c) values(1);</span><br></pre></td></tr></table></figure>\n<p><img src alt></p>\n<p>我们来看看在不同的隔离级别下，事务 A 会有哪些不同的返回结果，也就是图里面 V1、V2、V3 的返回值分别是什么。</p>\n<ul>\n<li><code>读未提交（read uncommitted）</code>：则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2</li>\n<li><code>读提交（read committed）</code>：则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。</li>\n<li><code>可重复读（repeatable read）</code>：则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。</li>\n<li><code>串行化（serializable ）</code>：则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。</li>\n</ul>\n<p>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行化”隔离级别下直接用加锁的方式来避免并行访问。</p>\n<p>我们可以看到在不同的隔离级别下，数据库行为是有所不同的。Oracle 数据库的默认隔离级别其实就是“读提交”，因此对于一些从 Oracle 迁移到 MySQL 的应用，为保证数据库隔离级别的一致，你一定要记得将 MySQL 的隔离级别设置为“读提交”。</p>\n<p>配置的方式是，将启动参数 transaction-isolation 的值设置成 READ-COMMITTED。你可以用 show variables 来查看当前的值。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;transaction_isolation&apos;; </span><br><span class=\"line\">+-----------------------+----------------+</span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\">+-----------------------+----------------+</span><br><span class=\"line\">| transaction_isolation | READ-COMMITTED |</span><br><span class=\"line\">+-----------------------+----------------+</span><br></pre></td></tr></table></figure></p>\n<p>总结来说，存在即合理，哪个隔离级别都有它自己的使用场景，你要根据自己的业务情况来定。我想你可能会问那什么时候需要“可重复读”的场景呢？我们来看一个数据校对逻辑的案例。</p>\n<p>假设你在管理一个个人银行账户表。一个表存了每个月月底的余额，一个表存了账单明细。这时候你要做数据校对，也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。你一定希望在校对过程中，即使有用户发生了一笔新的交易，也不影响你的校对结果。</p>\n<p>这时候使用“可重复读”隔离级别就很方便。事务启动时的视图可以认为是静态的，不受其他事务更新的影响。</p>\n<p><br></p>\n<h3 id=\"事务隔离的实现\"><a href=\"#事务隔离的实现\" class=\"headerlink\" title=\"事务隔离的实现\"></a>事务隔离的实现</h3><p>理解了事务的隔离级别，我们再来看看事务隔离具体是怎么实现的。这里我们展开说明“可重复读”。</p>\n<p>在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p>\n<p>当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如图中看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。</p>\n<p>同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。</p>\n<p>你一定会问，回滚日志总不能一直保留吧，什么时候删除呢？答案是，在不需要的时候才删除。也就是说，系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志会被删除。</p>\n<p>什么时候才不需要了呢？就是当系统里没有比这个回滚日志更早的 read-view 的时候。</p>\n<p>基于上面的说明，我们来讨论一下为什么建议你尽量不要使用长事务。</p>\n<p>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。</p>\n<p>在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有 20GB，而回滚段有 200GB 的库。最终只好为了清理回滚段，重建整个库。</p>\n<p>除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库，这个我们会在后面讲锁的时候展开。</p>\n<p><br></p>\n<h3 id=\"事务的启动方式\"><a href=\"#事务的启动方式\" class=\"headerlink\" title=\"事务的启动方式\"></a>事务的启动方式</h3><p>如前面所述，长事务有这些潜在风险，我当然是建议你尽量避免。其实很多时候业务开发同学并不是有意使用长事务，通常是由于误用所致。MySQL 的事务启动方式有以下几种：</p>\n<p>显式启动事务语句， <code>begin</code> 或 <code>start transaction</code>。配套的提交语句是 <code>commit</code>，回滚语句是 <code>rollback</code>。</p>\n<p><code>set autocommit=0</code>，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。</p>\n<p>有些客户端连接框架会默认连接成功后先执行一个 set autocommit=0 的命令。这就导致接下来的查询都在事务中，如果是长连接，就导致了意外的长事务。</p>\n<p>因此，我会建议你总是使用 <code>set autocommit=1</code>, 通过显式语句的方式来启动事务。</p>\n<p>但是有的开发同学会纠结“多一次交互”的问题。对于一个需要频繁使用事务的业务，第二种方式每个事务在开始时都不需要主动执行一次 “begin”，减少了语句的交互次数。如果你也有这个顾虑，我建议你使用 commit work and chain 语法。</p>\n<p>在 autocommit 为 1 的情况下，用 begin 显式启动的事务，如果执行 commit 则提交事务。如果执行 commit work and chain，则是提交事务并自动启动下一个事务，这样也省去了再次执行 begin 语句的开销。同时带来的好处是从程序开发的角度明确地知道每个语句是否处于事务中。</p>\n<p>你可以在 information_schema 库的 innodb_trx 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这篇文章里面，我介绍了 MySQL 的事务隔离级别的现象和实现，根据实现原理分析了长事务存在的风险，以及如何用正确的方式避免长事务。希望我举的例子能够帮助你理解事务，并更好地使用 MySQL 的事务特性。</p>\n<p>我给你留一个问题吧。你现在知道了系统里面应该避免长事务，如果你是业务开发负责人同时也是数据库负责人，你会有什么方案来避免出现或者处理这种情况呢？</p>\n<p>这个问题，我们可以从应用开发端和数据库端来看。</p>\n<p>首先，从应用开发端来看：</p>\n<p>确认是否使用了 set autocommit=0。这个确认工作可以在测试环境中开展，把 MySQL 的 general_log 开起来，然后随便跑一个业务逻辑，通过 general_log 的日志来确认。一般框架如果会设置这个值，也就会提供参数来控制行为，你的目标就是把它改成 1。</p>\n<p>确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用 begin/commit 框起来。我见过有些是业务并没有这个需要，但是也把好几个 select 语句放到了事务中，这种只读事务可以去掉。</p>\n<p>业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。（为什么会意外？在后续的文章中会提到这类案例）</p>\n<p>其次，从数据库端来看：</p>\n<p>监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 / 或者 kill；Percona 的 pt-kill 这个工具不错，推荐使用；</p>\n<p>在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题；</p>\n<p>如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2（或更大的值）。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>提到事务，你肯定不陌生，和数据库打交道的时候，我们总是会用到事务。</p>\n<p>最经典的例子就是转账，你要给朋友小王转 100 块钱，而此时你的银行卡只有 100 块钱。转账过程具体到程序里会有一系列的操作，比如查询余额、做加减法、更新余额等，这些操作必须保证是一体的，不然等程序查完之后，还没做减法之前，你这 100 块钱，完全可以借着这个时间差再查一次，然后再给另外一个朋友转账，如果银行这么整，不就乱了么？这时就要用到“事务”这个概念了。</p>\n<p>简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。</p>\n<p>今天的文章里，我将会以 InnoDB 为例，剖析 MySQL 在事务支持方面的特定实现，并基于原理给出相应的实践建议，希望这些案例能加深你对 MySQL 事务原理的理解。</p>\n<p><br></p>\n<h3 id=\"隔离性与隔离级别\"><a href=\"#隔离性与隔离级别\" class=\"headerlink\" title=\"隔离性与隔离级别\"></a>隔离性与隔离级别</h3><p>提到事务，你肯定会想到 ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性），今天我们就来说说其中 I，也就是“隔离性”。当数据库上有多个事务同时执行的时候，就可能出现<code>脏读（dirty read）</code>、<code>不可重复读（non-repeatable read）</code>、<code>幻读（phantom read）</code>的问题，为了解决这些问题，就有了“隔离级别”的概念。</p>\n<p>在谈隔离级别之前，你首先要知道，你隔离得越严实，效率就会越低。因此很多时候，我们都要在二者之间寻找一个平衡点。SQL 标准的事务隔离级别包括：<code>读未提交（read uncommitted）</code>、<code>读提交（read committed）</code>、<code>可重复读（repeatable read）</code>和<code>串行化（serializable ）</code>。下面我逐一为你解释：</p>\n<ol>\n<li><p>读未提交：一个事务还没提交时，它做的变更就能被别的事务看到。</p>\n</li>\n<li><p>读提交：一个事务提交之后，它做的变更才会被其他事务看到。</p>\n</li>\n<li><p>可重复读：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</p>\n</li>\n<li><p>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p>\n</li>\n</ol>\n<p>其中“读提交”和“可重复读”比较难理解，所以我用一个例子说明这几种隔离级别。假设数据表 T 中只有一列，其中一行的值为 1，下面是按照时间顺序执行两个事务的行为。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table T(c int) engine=InnoDB;</span><br><span class=\"line\">insert into T(c) values(1);</span><br></pre></td></tr></table></figure>\n<p><img src alt></p>\n<p>我们来看看在不同的隔离级别下，事务 A 会有哪些不同的返回结果，也就是图里面 V1、V2、V3 的返回值分别是什么。</p>\n<ul>\n<li><code>读未提交（read uncommitted）</code>：则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2</li>\n<li><code>读提交（read committed）</code>：则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。</li>\n<li><code>可重复读（repeatable read）</code>：则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。</li>\n<li><code>串行化（serializable ）</code>：则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。</li>\n</ul>\n<p>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行化”隔离级别下直接用加锁的方式来避免并行访问。</p>\n<p>我们可以看到在不同的隔离级别下，数据库行为是有所不同的。Oracle 数据库的默认隔离级别其实就是“读提交”，因此对于一些从 Oracle 迁移到 MySQL 的应用，为保证数据库隔离级别的一致，你一定要记得将 MySQL 的隔离级别设置为“读提交”。</p>\n<p>配置的方式是，将启动参数 transaction-isolation 的值设置成 READ-COMMITTED。你可以用 show variables 来查看当前的值。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;transaction_isolation&apos;; </span><br><span class=\"line\">+-----------------------+----------------+</span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\">+-----------------------+----------------+</span><br><span class=\"line\">| transaction_isolation | READ-COMMITTED |</span><br><span class=\"line\">+-----------------------+----------------+</span><br></pre></td></tr></table></figure></p>\n<p>总结来说，存在即合理，哪个隔离级别都有它自己的使用场景，你要根据自己的业务情况来定。我想你可能会问那什么时候需要“可重复读”的场景呢？我们来看一个数据校对逻辑的案例。</p>\n<p>假设你在管理一个个人银行账户表。一个表存了每个月月底的余额，一个表存了账单明细。这时候你要做数据校对，也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。你一定希望在校对过程中，即使有用户发生了一笔新的交易，也不影响你的校对结果。</p>\n<p>这时候使用“可重复读”隔离级别就很方便。事务启动时的视图可以认为是静态的，不受其他事务更新的影响。</p>\n<p><br></p>\n<h3 id=\"事务隔离的实现\"><a href=\"#事务隔离的实现\" class=\"headerlink\" title=\"事务隔离的实现\"></a>事务隔离的实现</h3><p>理解了事务的隔离级别，我们再来看看事务隔离具体是怎么实现的。这里我们展开说明“可重复读”。</p>\n<p>在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p>\n<p>当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如图中看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。</p>\n<p>同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。</p>\n<p>你一定会问，回滚日志总不能一直保留吧，什么时候删除呢？答案是，在不需要的时候才删除。也就是说，系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志会被删除。</p>\n<p>什么时候才不需要了呢？就是当系统里没有比这个回滚日志更早的 read-view 的时候。</p>\n<p>基于上面的说明，我们来讨论一下为什么建议你尽量不要使用长事务。</p>\n<p>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。</p>\n<p>在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有 20GB，而回滚段有 200GB 的库。最终只好为了清理回滚段，重建整个库。</p>\n<p>除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库，这个我们会在后面讲锁的时候展开。</p>\n<p><br></p>\n<h3 id=\"事务的启动方式\"><a href=\"#事务的启动方式\" class=\"headerlink\" title=\"事务的启动方式\"></a>事务的启动方式</h3><p>如前面所述，长事务有这些潜在风险，我当然是建议你尽量避免。其实很多时候业务开发同学并不是有意使用长事务，通常是由于误用所致。MySQL 的事务启动方式有以下几种：</p>\n<p>显式启动事务语句， <code>begin</code> 或 <code>start transaction</code>。配套的提交语句是 <code>commit</code>，回滚语句是 <code>rollback</code>。</p>\n<p><code>set autocommit=0</code>，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。</p>\n<p>有些客户端连接框架会默认连接成功后先执行一个 set autocommit=0 的命令。这就导致接下来的查询都在事务中，如果是长连接，就导致了意外的长事务。</p>\n<p>因此，我会建议你总是使用 <code>set autocommit=1</code>, 通过显式语句的方式来启动事务。</p>\n<p>但是有的开发同学会纠结“多一次交互”的问题。对于一个需要频繁使用事务的业务，第二种方式每个事务在开始时都不需要主动执行一次 “begin”，减少了语句的交互次数。如果你也有这个顾虑，我建议你使用 commit work and chain 语法。</p>\n<p>在 autocommit 为 1 的情况下，用 begin 显式启动的事务，如果执行 commit 则提交事务。如果执行 commit work and chain，则是提交事务并自动启动下一个事务，这样也省去了再次执行 begin 语句的开销。同时带来的好处是从程序开发的角度明确地知道每个语句是否处于事务中。</p>\n<p>你可以在 information_schema 库的 innodb_trx 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这篇文章里面，我介绍了 MySQL 的事务隔离级别的现象和实现，根据实现原理分析了长事务存在的风险，以及如何用正确的方式避免长事务。希望我举的例子能够帮助你理解事务，并更好地使用 MySQL 的事务特性。</p>\n<p>我给你留一个问题吧。你现在知道了系统里面应该避免长事务，如果你是业务开发负责人同时也是数据库负责人，你会有什么方案来避免出现或者处理这种情况呢？</p>\n<p>这个问题，我们可以从应用开发端和数据库端来看。</p>\n<p>首先，从应用开发端来看：</p>\n<p>确认是否使用了 set autocommit=0。这个确认工作可以在测试环境中开展，把 MySQL 的 general_log 开起来，然后随便跑一个业务逻辑，通过 general_log 的日志来确认。一般框架如果会设置这个值，也就会提供参数来控制行为，你的目标就是把它改成 1。</p>\n<p>确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用 begin/commit 框起来。我见过有些是业务并没有这个需要，但是也把好几个 select 语句放到了事务中，这种只读事务可以去掉。</p>\n<p>业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。（为什么会意外？在后续的文章中会提到这类案例）</p>\n<p>其次，从数据库端来看：</p>\n<p>监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 / 或者 kill；Percona 的 pt-kill 这个工具不错，推荐使用；</p>\n<p>在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题；</p>\n<p>如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2（或更大的值）。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。</p>\n"},{"title":"04 | 深入浅出索引（上）","date":"2019-06-02T16:00:00.000Z","_content":"\n提到数据库索引，我想你并不陌生，在日常工作中会经常接触到。比如某一个 SQL 查询比较慢，分析完原因之后，你可能就会说“给某个字段加个索引吧”之类的解决方案。但到底什么是索引，索引又是如何工作的呢？今天就让我们一起来聊聊这个话题吧。\n\n数据库索引的内容比较多，我分成了上下两篇文章。索引是数据库系统里面最重要的概念之一，所以我希望你能够耐心看完。在后面的实战文章中，我也会经常引用这两篇文章中提到的知识点，加深你对数据库索引的理解。\n\n一句话简单来说，索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。一本 500 页的书，如果你想快速找到其中的某一个知识点，在不借助目录的情况下，那我估计你可得找一会儿。同样，对于数据库的表而言，索引其实就是它的“目录”。\n\n\n<br/>\n### 索引的常见模型\n\n索引的出现是为了提高查询效率，但是实现索引的方式却有很多种，所以这里也就引入了索引模型的概念。可以用于提高读写效率的数据结构很多，这里我先给你介绍三种常见、也比较简单的数据结构，它们分别是哈希表、有序数组和搜索树。\n\n下面我主要从使用的角度，为你简单分析一下这三种模型的区别。\n\n哈希表是一种以键 - 值（key-value）存储数据的结构，我们只要输入待查找的值即 key，就可以找到其对应的值即 Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。\n\n不可避免地，多个 key 值经过哈希函数的换算，会出现同一个值的情况。处理这种情况的一种方法是，拉出一个链表。\n\n假设，你现在维护着一个身份证信息和姓名的表，需要根据身份证号查找对应的名字，这时对应的哈希索引的示意图如下所示：\n\n\n![]()\n\n图中，User2 和 User4 根据身份证号算出来的值都是 N，但没关系，后面还跟了一个链表。假设，这时候你要查 ID_card_n2 对应的名字是什么，处理步骤就是：首先，将 ID_card_n2 通过哈希函数算出 N；然后，按顺序遍历，找到 User2。\n\n\n需要注意的是，图中四个 ID_card_n 的值并不是递增的，这样做的好处是增加新的 User 时速度会很快，只需要往后追加。但缺点是，因为不是有序的，所以哈希索引做区间查询的速度是很慢的。\n\n你可以设想下，如果你现在要找身份证号在 [ID_card_X, ID_card_Y] 这个区间的所有用户，就必须全部扫描一遍了。所以，哈希表这种结构适用于只有等值查询的场景，比如 Memcached 及其他一些 NoSQL 引擎。\n\n\n而有序数组在等值查询和范围查询场景中的性能就都非常优秀。还是上面这个根据身份证号查名字的例子，如果我们使用有序数组来实现的话，示意图如下所示：\n\n这里我们假设身份证号没有重复，这个数组就是按照身份证号递增的顺序保存的。这时候如果你要查 ID_card_n2 对应的名字，用二分法就可以快速得到，这个时间复杂度是 O(log(N))。\n\n\n\n同时很显然，这个索引结构支持范围查询。你要查身份证号在 [ID_card_X, ID_card_Y] 区间的 User，可以先用二分法找到 ID_card_X（如果不存在 ID_card_X，就找到大于 ID_card_X 的第一个 User），然后向右遍历，直到查到第一个大于 ID_card_Y 的身份证号，退出循环。\n\n\n\n如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。所以，有序数组索引只适用于静态存储引擎，比如你要保存的是 2017 年某个城市的所有人口信息，这类不会再修改的数据。\n\n\n\n二叉搜索树也是课本里的经典数据结构了。还是上面根据身份证号查名字的例子，如果我们用二叉搜索树来实现的话，示意图如下所示：\n\n\n\n二叉搜索树的特点是：每个节点的左儿子小于父节点，父节点又小于右儿子。这样如果你要查 ID_card_n2 的话，按照图中的搜索顺序就是按照 UserA -> UserC -> UserF -> User2 这个路径得到。这个时间复杂度是 O(log(N))。\n\n\n\n当然为了维持 O(log(N)) 的查询复杂度，你就需要保持这棵树是平衡二叉树。为了做这个保证，更新的时间复杂度也是 O(log(N))。\n\n\n\n树可以有二叉，也可以有多叉。多叉树就是每个节点有多个儿子，儿子之间的大小保证从左到右递增。二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。\n\n\n\n你可以想象一下一棵 100 万节点的平衡二叉树，树高 20。一次查询可能需要访问 20 个数据块。在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。也就是说，对于一个 100 万行的表，如果使用二叉树来存储，单独访问一个行可能需要 20 个 10 ms 的时间，这个查询可真够慢的。\n\n\n\n为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。\n\n\n\n以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。\n\n\n\nN 叉树由于在读写上的性能优点，以及适配磁盘的访问模式，已经被广泛应用在数据库引擎中了。\n\n\n\n不管是哈希还是有序数组，或者 N 叉树，它们都是不断迭代、不断优化的产物或者解决方案。数据库技术发展到今天，跳表、LSM 树等数据结构也被用于引擎设计中，这里我就不再一一展开了。\n\n\n\n你心里要有个概念，数据库底层存储的核心就是基于这些数据模型的。每碰到一个新数据库，我们需要先关注它的数据模型，这样才能从理论上分析出这个数据库的适用场景。\n\n\n\n截止到这里，我用了半篇文章的篇幅和你介绍了不同的数据结构，以及它们的适用场景，你可能会觉得有些枯燥。但是，我建议你还是要多花一些时间来理解这部分内容，毕竟这是数据库处理数据的核心概念之一，在分析问题的时候会经常用到。当你理解了索引的模型后，就会发现在分析问题的时候会有一个更清晰的视角，体会到引擎设计的精妙之处。\n\n\n\n现在，我们一起进入相对偏实战的内容吧。\n\n\n\n在 MySQL 中，索引是在存储引擎层实现的，所以并没有统一的索引标准，即不同存储引擎的索引的工作方式并不一样。而即使多个存储引擎支持同一种类型的索引，其底层的实现也可能不同。由于 InnoDB 存储引擎在 MySQL 数据库中使用最为广泛，所以下面我就以 InnoDB 为例，和你分析一下其中的索引模型。\n\n\n\nInnoDB 的索引模型\n\n\n在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又因为前面我们提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。\n\n\n\n每一个索引在 InnoDB 里面对应一棵 B+ 树。\n\n\n\n假设，我们有一个主键列为 ID 的表，表中有字段 k，并且在 k 上有索引。\n\n\n\n这个表的建表语句是：\n```\nmysql> create table T (\n    id int primary key, \n    k int not null, \n    name varchar(16),\n    index (k)\n) engine=InnoDB;\n```\n\n表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)，两棵树的示例示意图如下:\n\n\n从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。\n\n\n\n主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。\n\n非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。\n\n\n\n根据上面的索引结构说明，我们来讨论一个问题：基于主键索引和普通索引的查询有什么区别？\n\n\n\n如果语句是 select * from T where ID=500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树；\n\n如果语句是 select * from T where k=5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树\n\n搜索一次。\n\n\n这个过程称为回表。也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。\n\n\n\n<br/>\n### 索引维护\n\nB+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。以上面这个图为例，如果插入新的行 ID 值为 700，则只需要在 R5 的记录后面插入一个新记录。\n\n\n如果新插入的 ID 值为 400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会受影响。除了性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。\n\n基于上面的索引维护过程说明，我们来讨论一个案例：\n\n你可能在一些建表规范里面见到过类似的描述，要求建表语句里一定要有自增主键。当然事无绝对，我们来分析一下哪些场景下应该使用自增主键，而哪些场景下不应该。\n\n自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： `NOT NULL PRIMARY KEY AUTO_INCREMENT`。\n\n\n插入新记录的时候可以不指定 ID 的值，系统会获取当前 ID 最大值加 1 作为下一条记录的 ID 值。\n\n也就是说，自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。\n\n而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。\n\n除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？\n\n由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。\n\n显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。\n\n有没有什么场景适合用业务字段直接做主键的呢？还是有的。比如，有些业务的场景需求是这样的：\n\n只有一个索引；\n\n该索引必须是唯一索引。\n\n你一定看出来了，这就是典型的 KV 场景。由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。这时候我们就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。\n\n\n\n<br/>\n### 小结\n\n今天，我跟你分析了数据库引擎可用的数据结构，介绍了 InnoDB 采用的 B+ 树结构，以及为什么 InnoDB 要这么选择。B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数。\n\n由于 InnoDB 是索引组织表，一般情况下我会建议你创建一个自增主键，这样非主键索引占用的空间最小。但事无绝对，我也跟你讨论了使用业务逻辑字段做主键的应用场景。\n\n最后，我给你留下一个问题吧。对于上面例子中的 InnoDB 表 T，如果你要重建索引 k，你的两个 SQL 语句可以这么写：\n```\nalter table T drop index k;\nalter table T add index(k);\n```\n\n如果你要重建主键索引，也可以这么写：\n```\nalter table T drop primary key;\nalter table T add primary key(id);\n```\n我的问题是，对于上面这两个重建索引的作法，说出你的理解。如果有不合适的，为什么，更好的方法是什么？\n\n","source":"_posts/04-MySQL实战45讲-深入浅出索引（上）.md","raw":"---\ntitle: 04 | 深入浅出索引（上）\ndate: 2019-06-03\ncategories: \n    - MySQL\ntags:\n    - MySQL\n    - MySQL实战45讲\n---\n\n提到数据库索引，我想你并不陌生，在日常工作中会经常接触到。比如某一个 SQL 查询比较慢，分析完原因之后，你可能就会说“给某个字段加个索引吧”之类的解决方案。但到底什么是索引，索引又是如何工作的呢？今天就让我们一起来聊聊这个话题吧。\n\n数据库索引的内容比较多，我分成了上下两篇文章。索引是数据库系统里面最重要的概念之一，所以我希望你能够耐心看完。在后面的实战文章中，我也会经常引用这两篇文章中提到的知识点，加深你对数据库索引的理解。\n\n一句话简单来说，索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。一本 500 页的书，如果你想快速找到其中的某一个知识点，在不借助目录的情况下，那我估计你可得找一会儿。同样，对于数据库的表而言，索引其实就是它的“目录”。\n\n\n<br/>\n### 索引的常见模型\n\n索引的出现是为了提高查询效率，但是实现索引的方式却有很多种，所以这里也就引入了索引模型的概念。可以用于提高读写效率的数据结构很多，这里我先给你介绍三种常见、也比较简单的数据结构，它们分别是哈希表、有序数组和搜索树。\n\n下面我主要从使用的角度，为你简单分析一下这三种模型的区别。\n\n哈希表是一种以键 - 值（key-value）存储数据的结构，我们只要输入待查找的值即 key，就可以找到其对应的值即 Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。\n\n不可避免地，多个 key 值经过哈希函数的换算，会出现同一个值的情况。处理这种情况的一种方法是，拉出一个链表。\n\n假设，你现在维护着一个身份证信息和姓名的表，需要根据身份证号查找对应的名字，这时对应的哈希索引的示意图如下所示：\n\n\n![]()\n\n图中，User2 和 User4 根据身份证号算出来的值都是 N，但没关系，后面还跟了一个链表。假设，这时候你要查 ID_card_n2 对应的名字是什么，处理步骤就是：首先，将 ID_card_n2 通过哈希函数算出 N；然后，按顺序遍历，找到 User2。\n\n\n需要注意的是，图中四个 ID_card_n 的值并不是递增的，这样做的好处是增加新的 User 时速度会很快，只需要往后追加。但缺点是，因为不是有序的，所以哈希索引做区间查询的速度是很慢的。\n\n你可以设想下，如果你现在要找身份证号在 [ID_card_X, ID_card_Y] 这个区间的所有用户，就必须全部扫描一遍了。所以，哈希表这种结构适用于只有等值查询的场景，比如 Memcached 及其他一些 NoSQL 引擎。\n\n\n而有序数组在等值查询和范围查询场景中的性能就都非常优秀。还是上面这个根据身份证号查名字的例子，如果我们使用有序数组来实现的话，示意图如下所示：\n\n这里我们假设身份证号没有重复，这个数组就是按照身份证号递增的顺序保存的。这时候如果你要查 ID_card_n2 对应的名字，用二分法就可以快速得到，这个时间复杂度是 O(log(N))。\n\n\n\n同时很显然，这个索引结构支持范围查询。你要查身份证号在 [ID_card_X, ID_card_Y] 区间的 User，可以先用二分法找到 ID_card_X（如果不存在 ID_card_X，就找到大于 ID_card_X 的第一个 User），然后向右遍历，直到查到第一个大于 ID_card_Y 的身份证号，退出循环。\n\n\n\n如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。所以，有序数组索引只适用于静态存储引擎，比如你要保存的是 2017 年某个城市的所有人口信息，这类不会再修改的数据。\n\n\n\n二叉搜索树也是课本里的经典数据结构了。还是上面根据身份证号查名字的例子，如果我们用二叉搜索树来实现的话，示意图如下所示：\n\n\n\n二叉搜索树的特点是：每个节点的左儿子小于父节点，父节点又小于右儿子。这样如果你要查 ID_card_n2 的话，按照图中的搜索顺序就是按照 UserA -> UserC -> UserF -> User2 这个路径得到。这个时间复杂度是 O(log(N))。\n\n\n\n当然为了维持 O(log(N)) 的查询复杂度，你就需要保持这棵树是平衡二叉树。为了做这个保证，更新的时间复杂度也是 O(log(N))。\n\n\n\n树可以有二叉，也可以有多叉。多叉树就是每个节点有多个儿子，儿子之间的大小保证从左到右递增。二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。\n\n\n\n你可以想象一下一棵 100 万节点的平衡二叉树，树高 20。一次查询可能需要访问 20 个数据块。在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。也就是说，对于一个 100 万行的表，如果使用二叉树来存储，单独访问一个行可能需要 20 个 10 ms 的时间，这个查询可真够慢的。\n\n\n\n为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。\n\n\n\n以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。\n\n\n\nN 叉树由于在读写上的性能优点，以及适配磁盘的访问模式，已经被广泛应用在数据库引擎中了。\n\n\n\n不管是哈希还是有序数组，或者 N 叉树，它们都是不断迭代、不断优化的产物或者解决方案。数据库技术发展到今天，跳表、LSM 树等数据结构也被用于引擎设计中，这里我就不再一一展开了。\n\n\n\n你心里要有个概念，数据库底层存储的核心就是基于这些数据模型的。每碰到一个新数据库，我们需要先关注它的数据模型，这样才能从理论上分析出这个数据库的适用场景。\n\n\n\n截止到这里，我用了半篇文章的篇幅和你介绍了不同的数据结构，以及它们的适用场景，你可能会觉得有些枯燥。但是，我建议你还是要多花一些时间来理解这部分内容，毕竟这是数据库处理数据的核心概念之一，在分析问题的时候会经常用到。当你理解了索引的模型后，就会发现在分析问题的时候会有一个更清晰的视角，体会到引擎设计的精妙之处。\n\n\n\n现在，我们一起进入相对偏实战的内容吧。\n\n\n\n在 MySQL 中，索引是在存储引擎层实现的，所以并没有统一的索引标准，即不同存储引擎的索引的工作方式并不一样。而即使多个存储引擎支持同一种类型的索引，其底层的实现也可能不同。由于 InnoDB 存储引擎在 MySQL 数据库中使用最为广泛，所以下面我就以 InnoDB 为例，和你分析一下其中的索引模型。\n\n\n\nInnoDB 的索引模型\n\n\n在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又因为前面我们提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。\n\n\n\n每一个索引在 InnoDB 里面对应一棵 B+ 树。\n\n\n\n假设，我们有一个主键列为 ID 的表，表中有字段 k，并且在 k 上有索引。\n\n\n\n这个表的建表语句是：\n```\nmysql> create table T (\n    id int primary key, \n    k int not null, \n    name varchar(16),\n    index (k)\n) engine=InnoDB;\n```\n\n表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)，两棵树的示例示意图如下:\n\n\n从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。\n\n\n\n主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。\n\n非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。\n\n\n\n根据上面的索引结构说明，我们来讨论一个问题：基于主键索引和普通索引的查询有什么区别？\n\n\n\n如果语句是 select * from T where ID=500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树；\n\n如果语句是 select * from T where k=5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树\n\n搜索一次。\n\n\n这个过程称为回表。也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。\n\n\n\n<br/>\n### 索引维护\n\nB+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。以上面这个图为例，如果插入新的行 ID 值为 700，则只需要在 R5 的记录后面插入一个新记录。\n\n\n如果新插入的 ID 值为 400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会受影响。除了性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。\n\n基于上面的索引维护过程说明，我们来讨论一个案例：\n\n你可能在一些建表规范里面见到过类似的描述，要求建表语句里一定要有自增主键。当然事无绝对，我们来分析一下哪些场景下应该使用自增主键，而哪些场景下不应该。\n\n自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： `NOT NULL PRIMARY KEY AUTO_INCREMENT`。\n\n\n插入新记录的时候可以不指定 ID 的值，系统会获取当前 ID 最大值加 1 作为下一条记录的 ID 值。\n\n也就是说，自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。\n\n而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。\n\n除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？\n\n由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。\n\n显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。\n\n有没有什么场景适合用业务字段直接做主键的呢？还是有的。比如，有些业务的场景需求是这样的：\n\n只有一个索引；\n\n该索引必须是唯一索引。\n\n你一定看出来了，这就是典型的 KV 场景。由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。这时候我们就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。\n\n\n\n<br/>\n### 小结\n\n今天，我跟你分析了数据库引擎可用的数据结构，介绍了 InnoDB 采用的 B+ 树结构，以及为什么 InnoDB 要这么选择。B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数。\n\n由于 InnoDB 是索引组织表，一般情况下我会建议你创建一个自增主键，这样非主键索引占用的空间最小。但事无绝对，我也跟你讨论了使用业务逻辑字段做主键的应用场景。\n\n最后，我给你留下一个问题吧。对于上面例子中的 InnoDB 表 T，如果你要重建索引 k，你的两个 SQL 语句可以这么写：\n```\nalter table T drop index k;\nalter table T add index(k);\n```\n\n如果你要重建主键索引，也可以这么写：\n```\nalter table T drop primary key;\nalter table T add primary key(id);\n```\n我的问题是，对于上面这两个重建索引的作法，说出你的理解。如果有不合适的，为什么，更好的方法是什么？\n\n","slug":"04-MySQL实战45讲-深入浅出索引（上）","published":1,"updated":"2019-11-02T07:12:18.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y490009t6s6q7cqu36i","content":"<p>提到数据库索引，我想你并不陌生，在日常工作中会经常接触到。比如某一个 SQL 查询比较慢，分析完原因之后，你可能就会说“给某个字段加个索引吧”之类的解决方案。但到底什么是索引，索引又是如何工作的呢？今天就让我们一起来聊聊这个话题吧。</p>\n<p>数据库索引的内容比较多，我分成了上下两篇文章。索引是数据库系统里面最重要的概念之一，所以我希望你能够耐心看完。在后面的实战文章中，我也会经常引用这两篇文章中提到的知识点，加深你对数据库索引的理解。</p>\n<p>一句话简单来说，索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。一本 500 页的书，如果你想快速找到其中的某一个知识点，在不借助目录的情况下，那我估计你可得找一会儿。同样，对于数据库的表而言，索引其实就是它的“目录”。</p>\n<p><br></p>\n<h3 id=\"索引的常见模型\"><a href=\"#索引的常见模型\" class=\"headerlink\" title=\"索引的常见模型\"></a>索引的常见模型</h3><p>索引的出现是为了提高查询效率，但是实现索引的方式却有很多种，所以这里也就引入了索引模型的概念。可以用于提高读写效率的数据结构很多，这里我先给你介绍三种常见、也比较简单的数据结构，它们分别是哈希表、有序数组和搜索树。</p>\n<p>下面我主要从使用的角度，为你简单分析一下这三种模型的区别。</p>\n<p>哈希表是一种以键 - 值（key-value）存储数据的结构，我们只要输入待查找的值即 key，就可以找到其对应的值即 Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。</p>\n<p>不可避免地，多个 key 值经过哈希函数的换算，会出现同一个值的情况。处理这种情况的一种方法是，拉出一个链表。</p>\n<p>假设，你现在维护着一个身份证信息和姓名的表，需要根据身份证号查找对应的名字，这时对应的哈希索引的示意图如下所示：</p>\n<p><img src alt></p>\n<p>图中，User2 和 User4 根据身份证号算出来的值都是 N，但没关系，后面还跟了一个链表。假设，这时候你要查 ID_card_n2 对应的名字是什么，处理步骤就是：首先，将 ID_card_n2 通过哈希函数算出 N；然后，按顺序遍历，找到 User2。</p>\n<p>需要注意的是，图中四个 ID_card_n 的值并不是递增的，这样做的好处是增加新的 User 时速度会很快，只需要往后追加。但缺点是，因为不是有序的，所以哈希索引做区间查询的速度是很慢的。</p>\n<p>你可以设想下，如果你现在要找身份证号在 [ID_card_X, ID_card_Y] 这个区间的所有用户，就必须全部扫描一遍了。所以，哈希表这种结构适用于只有等值查询的场景，比如 Memcached 及其他一些 NoSQL 引擎。</p>\n<p>而有序数组在等值查询和范围查询场景中的性能就都非常优秀。还是上面这个根据身份证号查名字的例子，如果我们使用有序数组来实现的话，示意图如下所示：</p>\n<p>这里我们假设身份证号没有重复，这个数组就是按照身份证号递增的顺序保存的。这时候如果你要查 ID_card_n2 对应的名字，用二分法就可以快速得到，这个时间复杂度是 O(log(N))。</p>\n<p>同时很显然，这个索引结构支持范围查询。你要查身份证号在 [ID_card_X, ID_card_Y] 区间的 User，可以先用二分法找到 ID_card_X（如果不存在 ID_card_X，就找到大于 ID_card_X 的第一个 User），然后向右遍历，直到查到第一个大于 ID_card_Y 的身份证号，退出循环。</p>\n<p>如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。所以，有序数组索引只适用于静态存储引擎，比如你要保存的是 2017 年某个城市的所有人口信息，这类不会再修改的数据。</p>\n<p>二叉搜索树也是课本里的经典数据结构了。还是上面根据身份证号查名字的例子，如果我们用二叉搜索树来实现的话，示意图如下所示：</p>\n<p>二叉搜索树的特点是：每个节点的左儿子小于父节点，父节点又小于右儿子。这样如果你要查 ID_card_n2 的话，按照图中的搜索顺序就是按照 UserA -&gt; UserC -&gt; UserF -&gt; User2 这个路径得到。这个时间复杂度是 O(log(N))。</p>\n<p>当然为了维持 O(log(N)) 的查询复杂度，你就需要保持这棵树是平衡二叉树。为了做这个保证，更新的时间复杂度也是 O(log(N))。</p>\n<p>树可以有二叉，也可以有多叉。多叉树就是每个节点有多个儿子，儿子之间的大小保证从左到右递增。二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。</p>\n<p>你可以想象一下一棵 100 万节点的平衡二叉树，树高 20。一次查询可能需要访问 20 个数据块。在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。也就是说，对于一个 100 万行的表，如果使用二叉树来存储，单独访问一个行可能需要 20 个 10 ms 的时间，这个查询可真够慢的。</p>\n<p>为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。</p>\n<p>以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。</p>\n<p>N 叉树由于在读写上的性能优点，以及适配磁盘的访问模式，已经被广泛应用在数据库引擎中了。</p>\n<p>不管是哈希还是有序数组，或者 N 叉树，它们都是不断迭代、不断优化的产物或者解决方案。数据库技术发展到今天，跳表、LSM 树等数据结构也被用于引擎设计中，这里我就不再一一展开了。</p>\n<p>你心里要有个概念，数据库底层存储的核心就是基于这些数据模型的。每碰到一个新数据库，我们需要先关注它的数据模型，这样才能从理论上分析出这个数据库的适用场景。</p>\n<p>截止到这里，我用了半篇文章的篇幅和你介绍了不同的数据结构，以及它们的适用场景，你可能会觉得有些枯燥。但是，我建议你还是要多花一些时间来理解这部分内容，毕竟这是数据库处理数据的核心概念之一，在分析问题的时候会经常用到。当你理解了索引的模型后，就会发现在分析问题的时候会有一个更清晰的视角，体会到引擎设计的精妙之处。</p>\n<p>现在，我们一起进入相对偏实战的内容吧。</p>\n<p>在 MySQL 中，索引是在存储引擎层实现的，所以并没有统一的索引标准，即不同存储引擎的索引的工作方式并不一样。而即使多个存储引擎支持同一种类型的索引，其底层的实现也可能不同。由于 InnoDB 存储引擎在 MySQL 数据库中使用最为广泛，所以下面我就以 InnoDB 为例，和你分析一下其中的索引模型。</p>\n<p>InnoDB 的索引模型</p>\n<p>在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又因为前面我们提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。</p>\n<p>每一个索引在 InnoDB 里面对应一棵 B+ 树。</p>\n<p>假设，我们有一个主键列为 ID 的表，表中有字段 k，并且在 k 上有索引。</p>\n<p>这个表的建表语句是：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table T (</span><br><span class=\"line\">    id int primary key, </span><br><span class=\"line\">    k int not null, </span><br><span class=\"line\">    name varchar(16),</span><br><span class=\"line\">    index (k)</span><br><span class=\"line\">) engine=InnoDB;</span><br></pre></td></tr></table></figure></p>\n<p>表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)，两棵树的示例示意图如下:</p>\n<p>从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。</p>\n<p>主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。</p>\n<p>非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。</p>\n<p>根据上面的索引结构说明，我们来讨论一个问题：基于主键索引和普通索引的查询有什么区别？</p>\n<p>如果语句是 select * from T where ID=500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树；</p>\n<p>如果语句是 select * from T where k=5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树</p>\n<p>搜索一次。</p>\n<p>这个过程称为回表。也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</p>\n<p><br></p>\n<h3 id=\"索引维护\"><a href=\"#索引维护\" class=\"headerlink\" title=\"索引维护\"></a>索引维护</h3><p>B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。以上面这个图为例，如果插入新的行 ID 值为 700，则只需要在 R5 的记录后面插入一个新记录。</p>\n<p>如果新插入的 ID 值为 400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会受影响。除了性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。</p>\n<p>基于上面的索引维护过程说明，我们来讨论一个案例：</p>\n<p>你可能在一些建表规范里面见到过类似的描述，要求建表语句里一定要有自增主键。当然事无绝对，我们来分析一下哪些场景下应该使用自增主键，而哪些场景下不应该。</p>\n<p>自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： <code>NOT NULL PRIMARY KEY AUTO_INCREMENT</code>。</p>\n<p>插入新记录的时候可以不指定 ID 的值，系统会获取当前 ID 最大值加 1 作为下一条记录的 ID 值。</p>\n<p>也就是说，自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。</p>\n<p>而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。</p>\n<p>除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？</p>\n<p>由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。</p>\n<p>显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。</p>\n<p>有没有什么场景适合用业务字段直接做主键的呢？还是有的。比如，有些业务的场景需求是这样的：</p>\n<p>只有一个索引；</p>\n<p>该索引必须是唯一索引。</p>\n<p>你一定看出来了，这就是典型的 KV 场景。由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。这时候我们就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。</p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>今天，我跟你分析了数据库引擎可用的数据结构，介绍了 InnoDB 采用的 B+ 树结构，以及为什么 InnoDB 要这么选择。B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数。</p>\n<p>由于 InnoDB 是索引组织表，一般情况下我会建议你创建一个自增主键，这样非主键索引占用的空间最小。但事无绝对，我也跟你讨论了使用业务逻辑字段做主键的应用场景。</p>\n<p>最后，我给你留下一个问题吧。对于上面例子中的 InnoDB 表 T，如果你要重建索引 k，你的两个 SQL 语句可以这么写：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table T drop index k;</span><br><span class=\"line\">alter table T add index(k);</span><br></pre></td></tr></table></figure></p>\n<p>如果你要重建主键索引，也可以这么写：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table T drop primary key;</span><br><span class=\"line\">alter table T add primary key(id);</span><br></pre></td></tr></table></figure></p>\n<p>我的问题是，对于上面这两个重建索引的作法，说出你的理解。如果有不合适的，为什么，更好的方法是什么？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>提到数据库索引，我想你并不陌生，在日常工作中会经常接触到。比如某一个 SQL 查询比较慢，分析完原因之后，你可能就会说“给某个字段加个索引吧”之类的解决方案。但到底什么是索引，索引又是如何工作的呢？今天就让我们一起来聊聊这个话题吧。</p>\n<p>数据库索引的内容比较多，我分成了上下两篇文章。索引是数据库系统里面最重要的概念之一，所以我希望你能够耐心看完。在后面的实战文章中，我也会经常引用这两篇文章中提到的知识点，加深你对数据库索引的理解。</p>\n<p>一句话简单来说，索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。一本 500 页的书，如果你想快速找到其中的某一个知识点，在不借助目录的情况下，那我估计你可得找一会儿。同样，对于数据库的表而言，索引其实就是它的“目录”。</p>\n<p><br></p>\n<h3 id=\"索引的常见模型\"><a href=\"#索引的常见模型\" class=\"headerlink\" title=\"索引的常见模型\"></a>索引的常见模型</h3><p>索引的出现是为了提高查询效率，但是实现索引的方式却有很多种，所以这里也就引入了索引模型的概念。可以用于提高读写效率的数据结构很多，这里我先给你介绍三种常见、也比较简单的数据结构，它们分别是哈希表、有序数组和搜索树。</p>\n<p>下面我主要从使用的角度，为你简单分析一下这三种模型的区别。</p>\n<p>哈希表是一种以键 - 值（key-value）存储数据的结构，我们只要输入待查找的值即 key，就可以找到其对应的值即 Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。</p>\n<p>不可避免地，多个 key 值经过哈希函数的换算，会出现同一个值的情况。处理这种情况的一种方法是，拉出一个链表。</p>\n<p>假设，你现在维护着一个身份证信息和姓名的表，需要根据身份证号查找对应的名字，这时对应的哈希索引的示意图如下所示：</p>\n<p><img src alt></p>\n<p>图中，User2 和 User4 根据身份证号算出来的值都是 N，但没关系，后面还跟了一个链表。假设，这时候你要查 ID_card_n2 对应的名字是什么，处理步骤就是：首先，将 ID_card_n2 通过哈希函数算出 N；然后，按顺序遍历，找到 User2。</p>\n<p>需要注意的是，图中四个 ID_card_n 的值并不是递增的，这样做的好处是增加新的 User 时速度会很快，只需要往后追加。但缺点是，因为不是有序的，所以哈希索引做区间查询的速度是很慢的。</p>\n<p>你可以设想下，如果你现在要找身份证号在 [ID_card_X, ID_card_Y] 这个区间的所有用户，就必须全部扫描一遍了。所以，哈希表这种结构适用于只有等值查询的场景，比如 Memcached 及其他一些 NoSQL 引擎。</p>\n<p>而有序数组在等值查询和范围查询场景中的性能就都非常优秀。还是上面这个根据身份证号查名字的例子，如果我们使用有序数组来实现的话，示意图如下所示：</p>\n<p>这里我们假设身份证号没有重复，这个数组就是按照身份证号递增的顺序保存的。这时候如果你要查 ID_card_n2 对应的名字，用二分法就可以快速得到，这个时间复杂度是 O(log(N))。</p>\n<p>同时很显然，这个索引结构支持范围查询。你要查身份证号在 [ID_card_X, ID_card_Y] 区间的 User，可以先用二分法找到 ID_card_X（如果不存在 ID_card_X，就找到大于 ID_card_X 的第一个 User），然后向右遍历，直到查到第一个大于 ID_card_Y 的身份证号，退出循环。</p>\n<p>如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。所以，有序数组索引只适用于静态存储引擎，比如你要保存的是 2017 年某个城市的所有人口信息，这类不会再修改的数据。</p>\n<p>二叉搜索树也是课本里的经典数据结构了。还是上面根据身份证号查名字的例子，如果我们用二叉搜索树来实现的话，示意图如下所示：</p>\n<p>二叉搜索树的特点是：每个节点的左儿子小于父节点，父节点又小于右儿子。这样如果你要查 ID_card_n2 的话，按照图中的搜索顺序就是按照 UserA -&gt; UserC -&gt; UserF -&gt; User2 这个路径得到。这个时间复杂度是 O(log(N))。</p>\n<p>当然为了维持 O(log(N)) 的查询复杂度，你就需要保持这棵树是平衡二叉树。为了做这个保证，更新的时间复杂度也是 O(log(N))。</p>\n<p>树可以有二叉，也可以有多叉。多叉树就是每个节点有多个儿子，儿子之间的大小保证从左到右递增。二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。</p>\n<p>你可以想象一下一棵 100 万节点的平衡二叉树，树高 20。一次查询可能需要访问 20 个数据块。在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。也就是说，对于一个 100 万行的表，如果使用二叉树来存储，单独访问一个行可能需要 20 个 10 ms 的时间，这个查询可真够慢的。</p>\n<p>为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。</p>\n<p>以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。</p>\n<p>N 叉树由于在读写上的性能优点，以及适配磁盘的访问模式，已经被广泛应用在数据库引擎中了。</p>\n<p>不管是哈希还是有序数组，或者 N 叉树，它们都是不断迭代、不断优化的产物或者解决方案。数据库技术发展到今天，跳表、LSM 树等数据结构也被用于引擎设计中，这里我就不再一一展开了。</p>\n<p>你心里要有个概念，数据库底层存储的核心就是基于这些数据模型的。每碰到一个新数据库，我们需要先关注它的数据模型，这样才能从理论上分析出这个数据库的适用场景。</p>\n<p>截止到这里，我用了半篇文章的篇幅和你介绍了不同的数据结构，以及它们的适用场景，你可能会觉得有些枯燥。但是，我建议你还是要多花一些时间来理解这部分内容，毕竟这是数据库处理数据的核心概念之一，在分析问题的时候会经常用到。当你理解了索引的模型后，就会发现在分析问题的时候会有一个更清晰的视角，体会到引擎设计的精妙之处。</p>\n<p>现在，我们一起进入相对偏实战的内容吧。</p>\n<p>在 MySQL 中，索引是在存储引擎层实现的，所以并没有统一的索引标准，即不同存储引擎的索引的工作方式并不一样。而即使多个存储引擎支持同一种类型的索引，其底层的实现也可能不同。由于 InnoDB 存储引擎在 MySQL 数据库中使用最为广泛，所以下面我就以 InnoDB 为例，和你分析一下其中的索引模型。</p>\n<p>InnoDB 的索引模型</p>\n<p>在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又因为前面我们提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。</p>\n<p>每一个索引在 InnoDB 里面对应一棵 B+ 树。</p>\n<p>假设，我们有一个主键列为 ID 的表，表中有字段 k，并且在 k 上有索引。</p>\n<p>这个表的建表语句是：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table T (</span><br><span class=\"line\">    id int primary key, </span><br><span class=\"line\">    k int not null, </span><br><span class=\"line\">    name varchar(16),</span><br><span class=\"line\">    index (k)</span><br><span class=\"line\">) engine=InnoDB;</span><br></pre></td></tr></table></figure></p>\n<p>表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)，两棵树的示例示意图如下:</p>\n<p>从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。</p>\n<p>主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。</p>\n<p>非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。</p>\n<p>根据上面的索引结构说明，我们来讨论一个问题：基于主键索引和普通索引的查询有什么区别？</p>\n<p>如果语句是 select * from T where ID=500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树；</p>\n<p>如果语句是 select * from T where k=5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树</p>\n<p>搜索一次。</p>\n<p>这个过程称为回表。也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</p>\n<p><br></p>\n<h3 id=\"索引维护\"><a href=\"#索引维护\" class=\"headerlink\" title=\"索引维护\"></a>索引维护</h3><p>B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。以上面这个图为例，如果插入新的行 ID 值为 700，则只需要在 R5 的记录后面插入一个新记录。</p>\n<p>如果新插入的 ID 值为 400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会受影响。除了性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。</p>\n<p>基于上面的索引维护过程说明，我们来讨论一个案例：</p>\n<p>你可能在一些建表规范里面见到过类似的描述，要求建表语句里一定要有自增主键。当然事无绝对，我们来分析一下哪些场景下应该使用自增主键，而哪些场景下不应该。</p>\n<p>自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： <code>NOT NULL PRIMARY KEY AUTO_INCREMENT</code>。</p>\n<p>插入新记录的时候可以不指定 ID 的值，系统会获取当前 ID 最大值加 1 作为下一条记录的 ID 值。</p>\n<p>也就是说，自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。</p>\n<p>而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。</p>\n<p>除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？</p>\n<p>由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。</p>\n<p>显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。</p>\n<p>有没有什么场景适合用业务字段直接做主键的呢？还是有的。比如，有些业务的场景需求是这样的：</p>\n<p>只有一个索引；</p>\n<p>该索引必须是唯一索引。</p>\n<p>你一定看出来了，这就是典型的 KV 场景。由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。这时候我们就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。</p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>今天，我跟你分析了数据库引擎可用的数据结构，介绍了 InnoDB 采用的 B+ 树结构，以及为什么 InnoDB 要这么选择。B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数。</p>\n<p>由于 InnoDB 是索引组织表，一般情况下我会建议你创建一个自增主键，这样非主键索引占用的空间最小。但事无绝对，我也跟你讨论了使用业务逻辑字段做主键的应用场景。</p>\n<p>最后，我给你留下一个问题吧。对于上面例子中的 InnoDB 表 T，如果你要重建索引 k，你的两个 SQL 语句可以这么写：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table T drop index k;</span><br><span class=\"line\">alter table T add index(k);</span><br></pre></td></tr></table></figure></p>\n<p>如果你要重建主键索引，也可以这么写：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table T drop primary key;</span><br><span class=\"line\">alter table T add primary key(id);</span><br></pre></td></tr></table></figure></p>\n<p>我的问题是，对于上面这两个重建索引的作法，说出你的理解。如果有不合适的，为什么，更好的方法是什么？</p>\n"},{"title":"05 | 深入浅出索引（下）","date":"2019-06-02T16:00:00.000Z","_content":"\n在上一篇文章中，我和你介绍了 InnoDB 索引的数据结构模型，今天我们再继续聊聊跟 MySQL 索引有关的概念。\n\n在开始这篇文章之前，我们先来看一下这个问题：\n\n在下面这个表 T 中，如果我执行 `select * from T where k between 3 and 5`，需要执行几次树的搜索操作，会扫描多少行？\n\n下面是这个表的初始化语句。\n```\nmysql> create table T (\n    ID int primary key,\n    k int NOT NULL DEFAULT 0, \n    s varchar(16) NOT NULL DEFAULT '',\n    index k(k)\n) engine=InnoDB;\ninsert into T values(100,1, 'aa'),(200,2,'bb'),(300,3,'cc'),(500,5,'ee'),(600,6,'ff'),(700,7,'gg');\n```\n\n<!--more-->\n\n图 1 InnoDB 的索引组织结构\n\n\n现在，我们一起来看看这条 SQL 查询语句的执行流程：\n\n1. 在 k 索引树上找到 k=3 的记录，取得 `ID = 300`；\n2. 再到 ID 索引树查到 `ID=300` 对应的 R3；\n3. 在 k 索引树取下一个值 k=5，取得 ID=500；\n4. 再回到 ID 索引树查到 ID=500 对应的 R4；\n5. 在 k 索引树取下一个值 k=6，不满足条件，循环结束。\n\n\n\n在这个过程中，回到主键索引树搜索的过程，我们称为回表。可以看到，这个查询过程读了 k 索引树的 3 条记录（步骤 1、3 和 5），回表了两次（步骤 2 和 4）。\n\n在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。那么，有没有可能经过索引优化，避免回表过程呢？\n\n\n<br/>\n### 覆盖索引\n\n如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。\n\n\n\n由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。\n\n\n\n需要注意的是，在引擎内部使用覆盖索引在索引 k 上其实读了三个记录，R3~R5（对应的索引 k 上的记录项），但是对于 MySQL 的 Server 层来说，它就是找引擎拿到了两条记录，因此 MySQL 认为扫描行数是 2。\n\n备注：关于如何查看扫描行数的问题，我将会在第 16 文章《如何正确地显示随机消息？》中，和你详细讨论。\n\n\n\n基于上面覆盖索引的说明，我们来讨论一个问题：在一个市民信息表上，是否有必要将身份证号和名字建立联合索引？\n\n\n\n假设这个市民表的定义是这样的：\n```\nCREATE TABLE `tuser` (\n  `id` int(11) NOT NULL,\n  `id_card` varchar(32) DEFAULT NULL,\n  `name` varchar(32) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL,\n  `ismale` tinyint(1) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `id_card` (`id_card`),\n  KEY `name_age` (`name`,`age`)\n) ENGINE=InnoDB\n```\n\n我们知道，身份证号是市民的唯一标识。也就是说，如果有根据身份证号查询市民信息的需求，我们只要在身份证号字段上建立索引就够了。而再建立一个（身份证号、姓名）的联合索引，是不是浪费空间？\n\n\n\n如果现在有一个高频请求，要根据市民的身份证号查询他的姓名和年龄，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。\n\n\n\n当然，索引字段的维护总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。这正是业务 DBA，或者称为业务数据架构师的工作。\n\n\n\n最左前缀原则\n看到这里你一定有一个疑问，如果为每一种查询都设计一个索引，索引是不是太多了。如果我现在要按照市民的身份证号去查他的家庭地址呢？虽然这个查询需求在业务中出现的概率不高，但总不能让它走全表扫描吧？反过来说，单独为一个不频繁的请求创建一个（身份证号，地址）的索引又感觉有点浪费。应该这么做呢？\n\n\n\n这里，我先和你说结论吧。B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。为了直观地说明这个概念，我们用（name，age）这个联合索引来分析。\n\n\n\n图 2 （name，age）索引示意图\n\n可以看到，索引项是按照索引定义里面出现的字段顺序排序的。\n\n\n\n当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。\n\n\n\n如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是\"where name like ‘张 %’\"。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。\n\n\n\n可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。\n\n\n\n基于上面对最左前缀索引的说明，我们来讨论一个问题：在建立联合索引的时候，如何安排索引内的字段顺序。\n\n\n\n这里我们的评估标准是，索引的复用能力。因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。因此，第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。\n\n\n\n所以现在你知道了，这段开头的问题里，我们要为高频请求创建 (身份证号，姓名）这个联合索引，并用这个索引支持“根据身份证号查询地址”的需求。\n\n\n\n那么，如果既有联合查询，又有基于 a、b 各自的查询呢？查询条件里面只有 b 的语句，是无法使用 (a,b) 这个联合索引的，这时候你不得不维护另外一个索引，也就是说你需要同时维护 (a,b)、(b) 这两个索引。\n\n\n\n这时候，我们要考虑的原则就是空间了。比如上面这个市民表的情况，name 字段是比 age 字段大的 ，那我就建议你创建一个（name,age) 的联合索引和一个 (age) 的单字段索引。\n\n\n\n索引下推\n上一段我们说到满足最左前缀原则的时候，最左前缀可以用于在索引中定位记录。这时，你可能要问，那些不符合最左前缀的部分，会怎么样呢？\n\n\n\n我们还是以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：\n\n\n\nmysql> select * from tuser where name like '张 %' and age=10 and ismale=1;\n\n\n\n你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。当然，这还不错，总比全表扫描要好。\n\n\n\n然后呢？\n\n\n\n当然是判断其他条件是否满足。\n\n\n\n在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。\n\n\n\n而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。\n\n\n\n图 3 和图 4，是这两个过程的执行流程图。\n\n\n\n图 3 无索引下推执行流程\n\n\n\n图 4 索引下推执行流程\n\n在图 3 和 4 这两个图里面，每一个虚线箭头表示回表一次。\n\n\n\n图 3 中，在 (name,age) 索引里面我特意去掉了 age 的值，这个过程 InnoDB 并不会去看 age 的值，只是按顺序把“name 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次。\n\n图 4 跟图 3 的区别是，InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 ID4、ID5 这两条记录回表取数据判断，就只需要回表 2 次。\n\n\n<br/>\n### 小结\n\n今天这篇文章，我和你继续讨论了数据库索引的概念，包括了覆盖索引、前缀索引、索引下推。你可以看到，在满足语句需求的情况下， 尽量少地访问资源是数据库设计的重要原则之一。我们在使用数据库的时候，尤其是在设计表结构时，也要以减少资源消耗作为目标。\n\n接下来我给你留下一个问题吧。\n\n实际上主键索引也是可以使用多个字段的。DBA 小吕在入职新公司的时候，就发现自己接手维护的库里面，有这么一个表，表结构定义类似这样的：\n```\nCREATE TABLE `geek` (\n  `a` int(11) NOT NULL,\n  `b` int(11) NOT NULL,\n  `c` int(11) NOT NULL,\n  `d` int(11) NOT NULL,\n  PRIMARY KEY (`a`,`b`),\n  KEY `ca` (`c`,`a`),\n  KEY `cb` (`c`,`b`)\n) ENGINE=InnoDB;\n```\n\n公司的同事告诉他说，由于历史原因，这个表需要 a、b 做联合主键，这个小吕理解了。\n\n但是，学过本章内容的小吕又纳闷了，既然主键包含了 a、b 这两个字段，那意味着单独在字段 c 上创建一个索引，就已经包含了三个字段了呀，为什么要创建“ca”“cb”这两个索引？\n\n\n\n同事告诉他，是因为他们的业务里面有这样的两种语句：\n```\nselect ... from geek where c=N order by a;\n\nselect ... from geek where c=N order by b;\n```\n我给你的问题是，这位同事的解释对吗，为了这两个查询模式，这两个索引是否都是必须的？为什么呢？\n\n\n\n表记录\n\na | b | c | d\n--|---|---|--\n1 | 2 | 3 | d\n1 | 3 | 2 | d\n1 | 4 | 3 | d\n2 | 1 | 3 | d\n2 | 2 | 2 | d\n2 | 3 | 4 | d\n\n主键 a，b 的聚簇索引组织顺序相当于 order by a,b ，也就是先按 a 排序，再按 b 排序，c 无序。\n\n\n索引 ca 的组织是先按 c 排序，再按 a 排序，同时记录主键\n\n c | a | 主键部分b（注意，这里不是 ab，而是只有 b）\n---|---|-------------------------\n2 | 1 | 3\n2 | 2 | 2\n3 | 1 | 2\n3 | 1 | 4\n3 | 2 | 1\n4 | 2 | 3\n\n这个跟索引 c 的数据是一模一样的。\n\n\n\n索引 cb 的组织是先按 c 排序，在按 b 排序，同时记录主键\n\n c | b | 主键部分a（同上）\n---|---|----------\n2 | 2 | 2\n2 | 3 | 1\n3 | 1 | 2\n3 | 2 | 1\n3 | 4 | 1\n4 | 3 | 2\n\n\n所以，结论是 ca 可以去掉，cb 需要保留。","source":"_posts/05-MySQL实战45讲-深入浅出索引（下）.md","raw":"---\ntitle: 05 | 深入浅出索引（下）\ndate: 2019-06-03\ncategories: \n    - MySQL\ntags:\n    - MySQL\n    - MySQL实战45讲\n---\n\n在上一篇文章中，我和你介绍了 InnoDB 索引的数据结构模型，今天我们再继续聊聊跟 MySQL 索引有关的概念。\n\n在开始这篇文章之前，我们先来看一下这个问题：\n\n在下面这个表 T 中，如果我执行 `select * from T where k between 3 and 5`，需要执行几次树的搜索操作，会扫描多少行？\n\n下面是这个表的初始化语句。\n```\nmysql> create table T (\n    ID int primary key,\n    k int NOT NULL DEFAULT 0, \n    s varchar(16) NOT NULL DEFAULT '',\n    index k(k)\n) engine=InnoDB;\ninsert into T values(100,1, 'aa'),(200,2,'bb'),(300,3,'cc'),(500,5,'ee'),(600,6,'ff'),(700,7,'gg');\n```\n\n<!--more-->\n\n图 1 InnoDB 的索引组织结构\n\n\n现在，我们一起来看看这条 SQL 查询语句的执行流程：\n\n1. 在 k 索引树上找到 k=3 的记录，取得 `ID = 300`；\n2. 再到 ID 索引树查到 `ID=300` 对应的 R3；\n3. 在 k 索引树取下一个值 k=5，取得 ID=500；\n4. 再回到 ID 索引树查到 ID=500 对应的 R4；\n5. 在 k 索引树取下一个值 k=6，不满足条件，循环结束。\n\n\n\n在这个过程中，回到主键索引树搜索的过程，我们称为回表。可以看到，这个查询过程读了 k 索引树的 3 条记录（步骤 1、3 和 5），回表了两次（步骤 2 和 4）。\n\n在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。那么，有没有可能经过索引优化，避免回表过程呢？\n\n\n<br/>\n### 覆盖索引\n\n如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。\n\n\n\n由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。\n\n\n\n需要注意的是，在引擎内部使用覆盖索引在索引 k 上其实读了三个记录，R3~R5（对应的索引 k 上的记录项），但是对于 MySQL 的 Server 层来说，它就是找引擎拿到了两条记录，因此 MySQL 认为扫描行数是 2。\n\n备注：关于如何查看扫描行数的问题，我将会在第 16 文章《如何正确地显示随机消息？》中，和你详细讨论。\n\n\n\n基于上面覆盖索引的说明，我们来讨论一个问题：在一个市民信息表上，是否有必要将身份证号和名字建立联合索引？\n\n\n\n假设这个市民表的定义是这样的：\n```\nCREATE TABLE `tuser` (\n  `id` int(11) NOT NULL,\n  `id_card` varchar(32) DEFAULT NULL,\n  `name` varchar(32) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL,\n  `ismale` tinyint(1) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `id_card` (`id_card`),\n  KEY `name_age` (`name`,`age`)\n) ENGINE=InnoDB\n```\n\n我们知道，身份证号是市民的唯一标识。也就是说，如果有根据身份证号查询市民信息的需求，我们只要在身份证号字段上建立索引就够了。而再建立一个（身份证号、姓名）的联合索引，是不是浪费空间？\n\n\n\n如果现在有一个高频请求，要根据市民的身份证号查询他的姓名和年龄，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。\n\n\n\n当然，索引字段的维护总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。这正是业务 DBA，或者称为业务数据架构师的工作。\n\n\n\n最左前缀原则\n看到这里你一定有一个疑问，如果为每一种查询都设计一个索引，索引是不是太多了。如果我现在要按照市民的身份证号去查他的家庭地址呢？虽然这个查询需求在业务中出现的概率不高，但总不能让它走全表扫描吧？反过来说，单独为一个不频繁的请求创建一个（身份证号，地址）的索引又感觉有点浪费。应该这么做呢？\n\n\n\n这里，我先和你说结论吧。B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。为了直观地说明这个概念，我们用（name，age）这个联合索引来分析。\n\n\n\n图 2 （name，age）索引示意图\n\n可以看到，索引项是按照索引定义里面出现的字段顺序排序的。\n\n\n\n当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。\n\n\n\n如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是\"where name like ‘张 %’\"。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。\n\n\n\n可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。\n\n\n\n基于上面对最左前缀索引的说明，我们来讨论一个问题：在建立联合索引的时候，如何安排索引内的字段顺序。\n\n\n\n这里我们的评估标准是，索引的复用能力。因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。因此，第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。\n\n\n\n所以现在你知道了，这段开头的问题里，我们要为高频请求创建 (身份证号，姓名）这个联合索引，并用这个索引支持“根据身份证号查询地址”的需求。\n\n\n\n那么，如果既有联合查询，又有基于 a、b 各自的查询呢？查询条件里面只有 b 的语句，是无法使用 (a,b) 这个联合索引的，这时候你不得不维护另外一个索引，也就是说你需要同时维护 (a,b)、(b) 这两个索引。\n\n\n\n这时候，我们要考虑的原则就是空间了。比如上面这个市民表的情况，name 字段是比 age 字段大的 ，那我就建议你创建一个（name,age) 的联合索引和一个 (age) 的单字段索引。\n\n\n\n索引下推\n上一段我们说到满足最左前缀原则的时候，最左前缀可以用于在索引中定位记录。这时，你可能要问，那些不符合最左前缀的部分，会怎么样呢？\n\n\n\n我们还是以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：\n\n\n\nmysql> select * from tuser where name like '张 %' and age=10 and ismale=1;\n\n\n\n你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。当然，这还不错，总比全表扫描要好。\n\n\n\n然后呢？\n\n\n\n当然是判断其他条件是否满足。\n\n\n\n在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。\n\n\n\n而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。\n\n\n\n图 3 和图 4，是这两个过程的执行流程图。\n\n\n\n图 3 无索引下推执行流程\n\n\n\n图 4 索引下推执行流程\n\n在图 3 和 4 这两个图里面，每一个虚线箭头表示回表一次。\n\n\n\n图 3 中，在 (name,age) 索引里面我特意去掉了 age 的值，这个过程 InnoDB 并不会去看 age 的值，只是按顺序把“name 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次。\n\n图 4 跟图 3 的区别是，InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 ID4、ID5 这两条记录回表取数据判断，就只需要回表 2 次。\n\n\n<br/>\n### 小结\n\n今天这篇文章，我和你继续讨论了数据库索引的概念，包括了覆盖索引、前缀索引、索引下推。你可以看到，在满足语句需求的情况下， 尽量少地访问资源是数据库设计的重要原则之一。我们在使用数据库的时候，尤其是在设计表结构时，也要以减少资源消耗作为目标。\n\n接下来我给你留下一个问题吧。\n\n实际上主键索引也是可以使用多个字段的。DBA 小吕在入职新公司的时候，就发现自己接手维护的库里面，有这么一个表，表结构定义类似这样的：\n```\nCREATE TABLE `geek` (\n  `a` int(11) NOT NULL,\n  `b` int(11) NOT NULL,\n  `c` int(11) NOT NULL,\n  `d` int(11) NOT NULL,\n  PRIMARY KEY (`a`,`b`),\n  KEY `ca` (`c`,`a`),\n  KEY `cb` (`c`,`b`)\n) ENGINE=InnoDB;\n```\n\n公司的同事告诉他说，由于历史原因，这个表需要 a、b 做联合主键，这个小吕理解了。\n\n但是，学过本章内容的小吕又纳闷了，既然主键包含了 a、b 这两个字段，那意味着单独在字段 c 上创建一个索引，就已经包含了三个字段了呀，为什么要创建“ca”“cb”这两个索引？\n\n\n\n同事告诉他，是因为他们的业务里面有这样的两种语句：\n```\nselect ... from geek where c=N order by a;\n\nselect ... from geek where c=N order by b;\n```\n我给你的问题是，这位同事的解释对吗，为了这两个查询模式，这两个索引是否都是必须的？为什么呢？\n\n\n\n表记录\n\na | b | c | d\n--|---|---|--\n1 | 2 | 3 | d\n1 | 3 | 2 | d\n1 | 4 | 3 | d\n2 | 1 | 3 | d\n2 | 2 | 2 | d\n2 | 3 | 4 | d\n\n主键 a，b 的聚簇索引组织顺序相当于 order by a,b ，也就是先按 a 排序，再按 b 排序，c 无序。\n\n\n索引 ca 的组织是先按 c 排序，再按 a 排序，同时记录主键\n\n c | a | 主键部分b（注意，这里不是 ab，而是只有 b）\n---|---|-------------------------\n2 | 1 | 3\n2 | 2 | 2\n3 | 1 | 2\n3 | 1 | 4\n3 | 2 | 1\n4 | 2 | 3\n\n这个跟索引 c 的数据是一模一样的。\n\n\n\n索引 cb 的组织是先按 c 排序，在按 b 排序，同时记录主键\n\n c | b | 主键部分a（同上）\n---|---|----------\n2 | 2 | 2\n2 | 3 | 1\n3 | 1 | 2\n3 | 2 | 1\n3 | 4 | 1\n4 | 3 | 2\n\n\n所以，结论是 ca 可以去掉，cb 需要保留。","slug":"05-MySQL实战45讲-深入浅出索引（下）","published":1,"updated":"2019-11-02T07:12:18.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y4b000at6s6nx3xytxx","content":"<p>在上一篇文章中，我和你介绍了 InnoDB 索引的数据结构模型，今天我们再继续聊聊跟 MySQL 索引有关的概念。</p>\n<p>在开始这篇文章之前，我们先来看一下这个问题：</p>\n<p>在下面这个表 T 中，如果我执行 <code>select * from T where k between 3 and 5</code>，需要执行几次树的搜索操作，会扫描多少行？</p>\n<p>下面是这个表的初始化语句。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table T (</span><br><span class=\"line\">    ID int primary key,</span><br><span class=\"line\">    k int NOT NULL DEFAULT 0, </span><br><span class=\"line\">    s varchar(16) NOT NULL DEFAULT &apos;&apos;,</span><br><span class=\"line\">    index k(k)</span><br><span class=\"line\">) engine=InnoDB;</span><br><span class=\"line\">insert into T values(100,1, &apos;aa&apos;),(200,2,&apos;bb&apos;),(300,3,&apos;cc&apos;),(500,5,&apos;ee&apos;),(600,6,&apos;ff&apos;),(700,7,&apos;gg&apos;);</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>图 1 InnoDB 的索引组织结构</p>\n<p>现在，我们一起来看看这条 SQL 查询语句的执行流程：</p>\n<ol>\n<li>在 k 索引树上找到 k=3 的记录，取得 <code>ID = 300</code>；</li>\n<li>再到 ID 索引树查到 <code>ID=300</code> 对应的 R3；</li>\n<li>在 k 索引树取下一个值 k=5，取得 ID=500；</li>\n<li>再回到 ID 索引树查到 ID=500 对应的 R4；</li>\n<li>在 k 索引树取下一个值 k=6，不满足条件，循环结束。</li>\n</ol>\n<p>在这个过程中，回到主键索引树搜索的过程，我们称为回表。可以看到，这个查询过程读了 k 索引树的 3 条记录（步骤 1、3 和 5），回表了两次（步骤 2 和 4）。</p>\n<p>在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。那么，有没有可能经过索引优化，避免回表过程呢？</p>\n<p><br></p>\n<h3 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h3><p>如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。</p>\n<p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p>\n<p>需要注意的是，在引擎内部使用覆盖索引在索引 k 上其实读了三个记录，R3~R5（对应的索引 k 上的记录项），但是对于 MySQL 的 Server 层来说，它就是找引擎拿到了两条记录，因此 MySQL 认为扫描行数是 2。</p>\n<p>备注：关于如何查看扫描行数的问题，我将会在第 16 文章《如何正确地显示随机消息？》中，和你详细讨论。</p>\n<p>基于上面覆盖索引的说明，我们来讨论一个问题：在一个市民信息表上，是否有必要将身份证号和名字建立联合索引？</p>\n<p>假设这个市民表的定义是这样的：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tuser` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `id_card` varchar(32) DEFAULT NULL,</span><br><span class=\"line\">  `name` varchar(32) DEFAULT NULL,</span><br><span class=\"line\">  `age` int(11) DEFAULT NULL,</span><br><span class=\"line\">  `ismale` tinyint(1) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  KEY `id_card` (`id_card`),</span><br><span class=\"line\">  KEY `name_age` (`name`,`age`)</span><br><span class=\"line\">) ENGINE=InnoDB</span><br></pre></td></tr></table></figure></p>\n<p>我们知道，身份证号是市民的唯一标识。也就是说，如果有根据身份证号查询市民信息的需求，我们只要在身份证号字段上建立索引就够了。而再建立一个（身份证号、姓名）的联合索引，是不是浪费空间？</p>\n<p>如果现在有一个高频请求，要根据市民的身份证号查询他的姓名和年龄，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。</p>\n<p>当然，索引字段的维护总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。这正是业务 DBA，或者称为业务数据架构师的工作。</p>\n<p>最左前缀原则\n看到这里你一定有一个疑问，如果为每一种查询都设计一个索引，索引是不是太多了。如果我现在要按照市民的身份证号去查他的家庭地址呢？虽然这个查询需求在业务中出现的概率不高，但总不能让它走全表扫描吧？反过来说，单独为一个不频繁的请求创建一个（身份证号，地址）的索引又感觉有点浪费。应该这么做呢？</p>\n<p>这里，我先和你说结论吧。B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。为了直观地说明这个概念，我们用（name，age）这个联合索引来分析。</p>\n<p>图 2 （name，age）索引示意图</p>\n<p>可以看到，索引项是按照索引定义里面出现的字段顺序排序的。</p>\n<p>当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。</p>\n<p>如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是”where name like ‘张 %’”。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。</p>\n<p>可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。</p>\n<p>基于上面对最左前缀索引的说明，我们来讨论一个问题：在建立联合索引的时候，如何安排索引内的字段顺序。</p>\n<p>这里我们的评估标准是，索引的复用能力。因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。因此，第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</p>\n<p>所以现在你知道了，这段开头的问题里，我们要为高频请求创建 (身份证号，姓名）这个联合索引，并用这个索引支持“根据身份证号查询地址”的需求。</p>\n<p>那么，如果既有联合查询，又有基于 a、b 各自的查询呢？查询条件里面只有 b 的语句，是无法使用 (a,b) 这个联合索引的，这时候你不得不维护另外一个索引，也就是说你需要同时维护 (a,b)、(b) 这两个索引。</p>\n<p>这时候，我们要考虑的原则就是空间了。比如上面这个市民表的情况，name 字段是比 age 字段大的 ，那我就建议你创建一个（name,age) 的联合索引和一个 (age) 的单字段索引。</p>\n<p>索引下推\n上一段我们说到满足最左前缀原则的时候，最左前缀可以用于在索引中定位记录。这时，你可能要问，那些不符合最左前缀的部分，会怎么样呢？</p>\n<p>我们还是以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：</p>\n<p>mysql&gt; select * from tuser where name like ‘张 %’ and age=10 and ismale=1;</p>\n<p>你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。当然，这还不错，总比全表扫描要好。</p>\n<p>然后呢？</p>\n<p>当然是判断其他条件是否满足。</p>\n<p>在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。</p>\n<p>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p>\n<p>图 3 和图 4，是这两个过程的执行流程图。</p>\n<p>图 3 无索引下推执行流程</p>\n<p>图 4 索引下推执行流程</p>\n<p>在图 3 和 4 这两个图里面，每一个虚线箭头表示回表一次。</p>\n<p>图 3 中，在 (name,age) 索引里面我特意去掉了 age 的值，这个过程 InnoDB 并不会去看 age 的值，只是按顺序把“name 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次。</p>\n<p>图 4 跟图 3 的区别是，InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 ID4、ID5 这两条记录回表取数据判断，就只需要回表 2 次。</p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>今天这篇文章，我和你继续讨论了数据库索引的概念，包括了覆盖索引、前缀索引、索引下推。你可以看到，在满足语句需求的情况下， 尽量少地访问资源是数据库设计的重要原则之一。我们在使用数据库的时候，尤其是在设计表结构时，也要以减少资源消耗作为目标。</p>\n<p>接下来我给你留下一个问题吧。</p>\n<p>实际上主键索引也是可以使用多个字段的。DBA 小吕在入职新公司的时候，就发现自己接手维护的库里面，有这么一个表，表结构定义类似这样的：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `geek` (</span><br><span class=\"line\">  `a` int(11) NOT NULL,</span><br><span class=\"line\">  `b` int(11) NOT NULL,</span><br><span class=\"line\">  `c` int(11) NOT NULL,</span><br><span class=\"line\">  `d` int(11) NOT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`a`,`b`),</span><br><span class=\"line\">  KEY `ca` (`c`,`a`),</span><br><span class=\"line\">  KEY `cb` (`c`,`b`)</span><br><span class=\"line\">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure></p>\n<p>公司的同事告诉他说，由于历史原因，这个表需要 a、b 做联合主键，这个小吕理解了。</p>\n<p>但是，学过本章内容的小吕又纳闷了，既然主键包含了 a、b 这两个字段，那意味着单独在字段 c 上创建一个索引，就已经包含了三个字段了呀，为什么要创建“ca”“cb”这两个索引？</p>\n<p>同事告诉他，是因为他们的业务里面有这样的两种语句：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select ... from geek where c=N order by a;</span><br><span class=\"line\"></span><br><span class=\"line\">select ... from geek where c=N order by b;</span><br></pre></td></tr></table></figure></p>\n<p>我给你的问题是，这位同事的解释对吗，为了这两个查询模式，这两个索引是否都是必须的？为什么呢？</p>\n<p>表记录</p>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th>b</th>\n<th>c</th>\n<th>d</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>d</td>\n</tr>\n<tr>\n<td>1</td>\n<td>3</td>\n<td>2</td>\n<td>d</td>\n</tr>\n<tr>\n<td>1</td>\n<td>4</td>\n<td>3</td>\n<td>d</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>d</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>d</td>\n</tr>\n<tr>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>d</td>\n</tr>\n</tbody>\n</table>\n<p>主键 a，b 的聚簇索引组织顺序相当于 order by a,b ，也就是先按 a 排序，再按 b 排序，c 无序。</p>\n<p>索引 ca 的组织是先按 c 排序，再按 a 排序，同时记录主键</p>\n<table>\n<thead>\n<tr>\n<th>c</th>\n<th>a</th>\n<th>主键部分b（注意，这里不是 ab，而是只有 b）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>这个跟索引 c 的数据是一模一样的。</p>\n<p>索引 cb 的组织是先按 c 排序，在按 b 排序，同时记录主键</p>\n<table>\n<thead>\n<tr>\n<th>c</th>\n<th>b</th>\n<th>主键部分a（同上）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>2</td>\n<td>3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>4</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>所以，结论是 ca 可以去掉，cb 需要保留。</p>\n","site":{"data":{}},"excerpt":"<p>在上一篇文章中，我和你介绍了 InnoDB 索引的数据结构模型，今天我们再继续聊聊跟 MySQL 索引有关的概念。</p>\n<p>在开始这篇文章之前，我们先来看一下这个问题：</p>\n<p>在下面这个表 T 中，如果我执行 <code>select * from T where k between 3 and 5</code>，需要执行几次树的搜索操作，会扫描多少行？</p>\n<p>下面是这个表的初始化语句。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table T (</span><br><span class=\"line\">    ID int primary key,</span><br><span class=\"line\">    k int NOT NULL DEFAULT 0, </span><br><span class=\"line\">    s varchar(16) NOT NULL DEFAULT &apos;&apos;,</span><br><span class=\"line\">    index k(k)</span><br><span class=\"line\">) engine=InnoDB;</span><br><span class=\"line\">insert into T values(100,1, &apos;aa&apos;),(200,2,&apos;bb&apos;),(300,3,&apos;cc&apos;),(500,5,&apos;ee&apos;),(600,6,&apos;ff&apos;),(700,7,&apos;gg&apos;);</span><br></pre></td></tr></table></figure></p>","more":"<p>图 1 InnoDB 的索引组织结构</p>\n<p>现在，我们一起来看看这条 SQL 查询语句的执行流程：</p>\n<ol>\n<li>在 k 索引树上找到 k=3 的记录，取得 <code>ID = 300</code>；</li>\n<li>再到 ID 索引树查到 <code>ID=300</code> 对应的 R3；</li>\n<li>在 k 索引树取下一个值 k=5，取得 ID=500；</li>\n<li>再回到 ID 索引树查到 ID=500 对应的 R4；</li>\n<li>在 k 索引树取下一个值 k=6，不满足条件，循环结束。</li>\n</ol>\n<p>在这个过程中，回到主键索引树搜索的过程，我们称为回表。可以看到，这个查询过程读了 k 索引树的 3 条记录（步骤 1、3 和 5），回表了两次（步骤 2 和 4）。</p>\n<p>在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。那么，有没有可能经过索引优化，避免回表过程呢？</p>\n<p><br></p>\n<h3 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h3><p>如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。</p>\n<p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p>\n<p>需要注意的是，在引擎内部使用覆盖索引在索引 k 上其实读了三个记录，R3~R5（对应的索引 k 上的记录项），但是对于 MySQL 的 Server 层来说，它就是找引擎拿到了两条记录，因此 MySQL 认为扫描行数是 2。</p>\n<p>备注：关于如何查看扫描行数的问题，我将会在第 16 文章《如何正确地显示随机消息？》中，和你详细讨论。</p>\n<p>基于上面覆盖索引的说明，我们来讨论一个问题：在一个市民信息表上，是否有必要将身份证号和名字建立联合索引？</p>\n<p>假设这个市民表的定义是这样的：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tuser` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `id_card` varchar(32) DEFAULT NULL,</span><br><span class=\"line\">  `name` varchar(32) DEFAULT NULL,</span><br><span class=\"line\">  `age` int(11) DEFAULT NULL,</span><br><span class=\"line\">  `ismale` tinyint(1) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  KEY `id_card` (`id_card`),</span><br><span class=\"line\">  KEY `name_age` (`name`,`age`)</span><br><span class=\"line\">) ENGINE=InnoDB</span><br></pre></td></tr></table></figure></p>\n<p>我们知道，身份证号是市民的唯一标识。也就是说，如果有根据身份证号查询市民信息的需求，我们只要在身份证号字段上建立索引就够了。而再建立一个（身份证号、姓名）的联合索引，是不是浪费空间？</p>\n<p>如果现在有一个高频请求，要根据市民的身份证号查询他的姓名和年龄，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。</p>\n<p>当然，索引字段的维护总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。这正是业务 DBA，或者称为业务数据架构师的工作。</p>\n<p>最左前缀原则\n看到这里你一定有一个疑问，如果为每一种查询都设计一个索引，索引是不是太多了。如果我现在要按照市民的身份证号去查他的家庭地址呢？虽然这个查询需求在业务中出现的概率不高，但总不能让它走全表扫描吧？反过来说，单独为一个不频繁的请求创建一个（身份证号，地址）的索引又感觉有点浪费。应该这么做呢？</p>\n<p>这里，我先和你说结论吧。B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。为了直观地说明这个概念，我们用（name，age）这个联合索引来分析。</p>\n<p>图 2 （name，age）索引示意图</p>\n<p>可以看到，索引项是按照索引定义里面出现的字段顺序排序的。</p>\n<p>当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。</p>\n<p>如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是”where name like ‘张 %’”。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。</p>\n<p>可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。</p>\n<p>基于上面对最左前缀索引的说明，我们来讨论一个问题：在建立联合索引的时候，如何安排索引内的字段顺序。</p>\n<p>这里我们的评估标准是，索引的复用能力。因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。因此，第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</p>\n<p>所以现在你知道了，这段开头的问题里，我们要为高频请求创建 (身份证号，姓名）这个联合索引，并用这个索引支持“根据身份证号查询地址”的需求。</p>\n<p>那么，如果既有联合查询，又有基于 a、b 各自的查询呢？查询条件里面只有 b 的语句，是无法使用 (a,b) 这个联合索引的，这时候你不得不维护另外一个索引，也就是说你需要同时维护 (a,b)、(b) 这两个索引。</p>\n<p>这时候，我们要考虑的原则就是空间了。比如上面这个市民表的情况，name 字段是比 age 字段大的 ，那我就建议你创建一个（name,age) 的联合索引和一个 (age) 的单字段索引。</p>\n<p>索引下推\n上一段我们说到满足最左前缀原则的时候，最左前缀可以用于在索引中定位记录。这时，你可能要问，那些不符合最左前缀的部分，会怎么样呢？</p>\n<p>我们还是以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：</p>\n<p>mysql&gt; select * from tuser where name like ‘张 %’ and age=10 and ismale=1;</p>\n<p>你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。当然，这还不错，总比全表扫描要好。</p>\n<p>然后呢？</p>\n<p>当然是判断其他条件是否满足。</p>\n<p>在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。</p>\n<p>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p>\n<p>图 3 和图 4，是这两个过程的执行流程图。</p>\n<p>图 3 无索引下推执行流程</p>\n<p>图 4 索引下推执行流程</p>\n<p>在图 3 和 4 这两个图里面，每一个虚线箭头表示回表一次。</p>\n<p>图 3 中，在 (name,age) 索引里面我特意去掉了 age 的值，这个过程 InnoDB 并不会去看 age 的值，只是按顺序把“name 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次。</p>\n<p>图 4 跟图 3 的区别是，InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 ID4、ID5 这两条记录回表取数据判断，就只需要回表 2 次。</p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>今天这篇文章，我和你继续讨论了数据库索引的概念，包括了覆盖索引、前缀索引、索引下推。你可以看到，在满足语句需求的情况下， 尽量少地访问资源是数据库设计的重要原则之一。我们在使用数据库的时候，尤其是在设计表结构时，也要以减少资源消耗作为目标。</p>\n<p>接下来我给你留下一个问题吧。</p>\n<p>实际上主键索引也是可以使用多个字段的。DBA 小吕在入职新公司的时候，就发现自己接手维护的库里面，有这么一个表，表结构定义类似这样的：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `geek` (</span><br><span class=\"line\">  `a` int(11) NOT NULL,</span><br><span class=\"line\">  `b` int(11) NOT NULL,</span><br><span class=\"line\">  `c` int(11) NOT NULL,</span><br><span class=\"line\">  `d` int(11) NOT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`a`,`b`),</span><br><span class=\"line\">  KEY `ca` (`c`,`a`),</span><br><span class=\"line\">  KEY `cb` (`c`,`b`)</span><br><span class=\"line\">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure></p>\n<p>公司的同事告诉他说，由于历史原因，这个表需要 a、b 做联合主键，这个小吕理解了。</p>\n<p>但是，学过本章内容的小吕又纳闷了，既然主键包含了 a、b 这两个字段，那意味着单独在字段 c 上创建一个索引，就已经包含了三个字段了呀，为什么要创建“ca”“cb”这两个索引？</p>\n<p>同事告诉他，是因为他们的业务里面有这样的两种语句：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select ... from geek where c=N order by a;</span><br><span class=\"line\"></span><br><span class=\"line\">select ... from geek where c=N order by b;</span><br></pre></td></tr></table></figure></p>\n<p>我给你的问题是，这位同事的解释对吗，为了这两个查询模式，这两个索引是否都是必须的？为什么呢？</p>\n<p>表记录</p>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th>b</th>\n<th>c</th>\n<th>d</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>d</td>\n</tr>\n<tr>\n<td>1</td>\n<td>3</td>\n<td>2</td>\n<td>d</td>\n</tr>\n<tr>\n<td>1</td>\n<td>4</td>\n<td>3</td>\n<td>d</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>d</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>d</td>\n</tr>\n<tr>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>d</td>\n</tr>\n</tbody>\n</table>\n<p>主键 a，b 的聚簇索引组织顺序相当于 order by a,b ，也就是先按 a 排序，再按 b 排序，c 无序。</p>\n<p>索引 ca 的组织是先按 c 排序，再按 a 排序，同时记录主键</p>\n<table>\n<thead>\n<tr>\n<th>c</th>\n<th>a</th>\n<th>主键部分b（注意，这里不是 ab，而是只有 b）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>这个跟索引 c 的数据是一模一样的。</p>\n<p>索引 cb 的组织是先按 c 排序，在按 b 排序，同时记录主键</p>\n<table>\n<thead>\n<tr>\n<th>c</th>\n<th>b</th>\n<th>主键部分a（同上）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>2</td>\n<td>3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>4</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>所以，结论是 ca 可以去掉，cb 需要保留。</p>"},{"title":"07 | 行锁功过：怎么减少行锁对性能的影响","date":"2019-06-02T16:00:00.000Z","_content":"\n在上一篇文章中，我跟你介绍了 MySQL 的全局锁和表级锁，今天我们就来讲讲 MySQL 的行锁。\n\n\nMySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁，比如 MyISAM 引擎就不支持行锁。不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。\n\n我们今天就主要来聊聊 InnoDB 的行锁，以及如何通过减少锁冲突来提升业务并发度。\n\n顾名思义，行锁就是针对数据表中行记录的锁。这很好理解，比如事务 A 更新了一行，而这时候事务 B 也要更新同一行，则必须等事务 A 的操作完成后才能进行更新。\n\n当然，数据库中还有一些没那么一目了然的概念和设计，这些概念如果理解和使用不当，容易导致程序出现非预期行为，比如两阶段锁。\n\n\n<br/>\n### 从两阶段锁说起\n\n\n我先给你举个例子。在下面的操作序列中，事务 B 的 update 语句执行时会是什么现象呢？假设字段 id 是表 t 的主键。\n\n\n这个问题的结论取决于事务 A 在执行完两条 update 语句后，持有哪些锁，以及在什么时候释放。你可以验证一下：实际上事务 B 的 update 语句会被阻塞，直到事务 A 执行 commit 之后，事务 B 才能继续执行。\n\n\n知道了这个答案，你一定知道了事务 A 持有的两个记录的行锁，都是在 commit 的时候才释放的。\n\n\n也就是说，在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。\n\n\n知道了这个设定，对我们使用事务有什么帮助呢？那就是，如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。我给你举个例子。\n\n\n假设你负责实现一个电影票在线交易业务，顾客 A 要在影院 B 购买电影票。我们简化一点，这个业务需要涉及到以下操作：\n\n\n从顾客 A 账户余额中扣除电影票价；\n\n给影院 B 的账户余额增加这张电影票价；\n\n记录一条交易日志。\n\n\n也就是说，要完成这个交易，我们需要 update 两条记录，并 insert 一条记录。当然，为了保证交易的原子性，我们要把这三个操作放在一个事务中。那么，你会怎样安排这三个语句在事务中的顺序呢？\n\n\n试想如果同时有另外一个顾客 C 要在影院 B 买票，那么这两个事务冲突的部分就是语句 2 了。因为它们要更新同一个影院账户的余额，需要修改同一行数据。\n\n\n根据两阶段锁协议，不论你怎样安排语句顺序，所有的操作需要的行锁都是在事务提交的时候才释放的。所以，如果你把语句 2 安排在最后，比如按照 3、1、2 这样的顺序，那么影院账户余额这一行的锁时间就最少。这就最大程度地减少了事务之间的锁等待，提升了并发度。\n\n\n好了，现在由于你的正确设计，影院余额这一行的行锁在一个事务中不会停留很长时间。但是，这并没有完全解决你的困扰。\n\n\n如果这个影院做活动，可以低价预售一年内所有的电影票，而且这个活动只做一天。于是在活动时间开始的时候，你的 MySQL 就挂了。你登上服务器一看，CPU 消耗接近 100%，但整个数据库每秒就执行不到 100 个事务。这是什么原因呢？\n\n这里，我就要说到死锁和死锁检测了。\n\n\n<br/>\n### 死锁和死锁检测\n\n当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。这里我用数据库中的行锁举个例子。\n\n\n这时候，事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有两种策略：\n\n\n\n直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。\n\n发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。\n\n\n\n在 InnoDB 中，`innodb_lock_wait_timeout` 的默认值是 50s，意味着如果采用第一个策略，当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的。\n\n\n但是，我们又不可能直接把这个时间设置成一个很小的值，比如 1s。这样当出现死锁的时候，确实很快就可以解开，但如果不是死锁，而是简单的锁等待呢？所以，超时时间设置太短的话，会出现很多误伤。\n\n\n所以，正常情况下我们还是要采用第二种策略，即：主动死锁检测，而且 innodb_deadlock_detect 的默认值本身就是 on。主动死锁检测在发生死锁的时候，是能够快速发现并进行处理的，但是它也是有额外负担的。\n\n\n你可以想象一下这个过程：每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。\n\n\n那如果是我们上面说到的所有事务都要更新同一行的场景呢？\n\n\n每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n) 的操作。假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。因此，你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务。\n\n\n根据上面的分析，我们来讨论一下，怎么解决由这种热点行更新导致的性能问题呢？问题的症结在于，死锁检测要耗费大量的 CPU 资源。\n\n\n一种头痛医头的方法，就是如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉。但是这种操作本身带有一定的风险，因为业务设计的时候一般不会把死锁当做一个严重错误，毕竟出现死锁了，就回滚，然后通过业务重试一般就没问题了，这是业务无损的。而关掉死锁检测意味着可能会出现大量的超时，这是业务有损的。\n\n另一个思路是控制并发度。根据上面的分析，你会发现如果并发能够控制住，比如同一行同时最多只有 10 个线程在更新，那么死锁检测的成本很低，就不会出现这个问题。一个直接的想法就是，在客户端做并发控制。但是，你会很快发现这个方法不太可行，因为客户端很多。我见过一个应用，有 600 个客户端，这样即使每个客户端控制到只有 5 个并发线程，汇总到数据库服务端以后，峰值并发数也可能要达到 3000。\n\n因此，这个并发控制要做在数据库服务端。如果你有中间件，可以考虑在中间件实现；如果你的团队有能修改 MySQL 源码的人，也可以做在 MySQL 里面。基本思路就是，对于相同行的更新，在进入引擎之前排队。这样在 InnoDB 内部就不会有大量的死锁检测工作了。\n\n\n可能你会问，如果团队里暂时没有数据库方面的专家，不能实现这样的方案，能不能从设计上优化这个问题呢？\n\n\n你可以考虑通过将一行改成逻辑上的多行来减少锁冲突。还是以影院账户为例，可以考虑放在多条记录上，比如 10 个记录，影院的账户总额等于这 10 个记录的值的总和。这样每次要给影院账户加金额的时候，随机选其中一条记录来加。这样每次冲突概率变成原来的 1/10，可以减少锁等待个数，也就减少了死锁检测的 CPU 消耗。\n\n\n这个方案看上去是无损的，但其实这类方案需要根据业务逻辑做详细设计。如果账户余额可能会减少，比如退票逻辑，那么这时候就需要考虑当一部分行记录变成 0 的时候，代码要有特殊处理。\n\n\n\n<br/>\n### 小结\n\n今天，我和你介绍了 MySQL 的行锁，涉及了两阶段锁协议、死锁和死锁检测这两大部分内容。\n\n\n其中，我以两阶段协议为起点，和你一起讨论了在开发的时候如何安排正确的事务语句。这里的原则 / 我给你的建议是：如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁的申请时机尽量往后放。\n\n\n但是，调整语句顺序并不能完全避免死锁。所以我们引入了死锁和死锁检测的概念，以及提供了三个方案，来减少死锁对数据库的影响。减少死锁的主要方向，就是控制访问相同资源的并发事务量。\n\n\n\n最后，我给你留下一个问题吧。如果你要删除一个表里面的前 10000 行数据，有以下三种方法可以做到：\n\n\n\n第一种，直接执行 delete from T limit 10000;\n\n第二种，在一个连接中循环执行 20 次 delete from T limit 500;\n\n第三种，在 20 个连接中同时执行 delete from T limit 500。\n\n\n\n你会选择哪一种方法呢？为什么呢？\n\n二，减少事务时长的同时，降低的锁竞争","source":"_posts/07-MySQL实战45讲-行锁功过：怎么减少行锁对性能的影响.md","raw":"---\ntitle: 07 | 行锁功过：怎么减少行锁对性能的影响\ndate: 2019-06-03\ncategories: \n    - MySQL\ntags:\n    - MySQL\n    - MySQL实战45讲\n---\n\n在上一篇文章中，我跟你介绍了 MySQL 的全局锁和表级锁，今天我们就来讲讲 MySQL 的行锁。\n\n\nMySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁，比如 MyISAM 引擎就不支持行锁。不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。\n\n我们今天就主要来聊聊 InnoDB 的行锁，以及如何通过减少锁冲突来提升业务并发度。\n\n顾名思义，行锁就是针对数据表中行记录的锁。这很好理解，比如事务 A 更新了一行，而这时候事务 B 也要更新同一行，则必须等事务 A 的操作完成后才能进行更新。\n\n当然，数据库中还有一些没那么一目了然的概念和设计，这些概念如果理解和使用不当，容易导致程序出现非预期行为，比如两阶段锁。\n\n\n<br/>\n### 从两阶段锁说起\n\n\n我先给你举个例子。在下面的操作序列中，事务 B 的 update 语句执行时会是什么现象呢？假设字段 id 是表 t 的主键。\n\n\n这个问题的结论取决于事务 A 在执行完两条 update 语句后，持有哪些锁，以及在什么时候释放。你可以验证一下：实际上事务 B 的 update 语句会被阻塞，直到事务 A 执行 commit 之后，事务 B 才能继续执行。\n\n\n知道了这个答案，你一定知道了事务 A 持有的两个记录的行锁，都是在 commit 的时候才释放的。\n\n\n也就是说，在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。\n\n\n知道了这个设定，对我们使用事务有什么帮助呢？那就是，如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。我给你举个例子。\n\n\n假设你负责实现一个电影票在线交易业务，顾客 A 要在影院 B 购买电影票。我们简化一点，这个业务需要涉及到以下操作：\n\n\n从顾客 A 账户余额中扣除电影票价；\n\n给影院 B 的账户余额增加这张电影票价；\n\n记录一条交易日志。\n\n\n也就是说，要完成这个交易，我们需要 update 两条记录，并 insert 一条记录。当然，为了保证交易的原子性，我们要把这三个操作放在一个事务中。那么，你会怎样安排这三个语句在事务中的顺序呢？\n\n\n试想如果同时有另外一个顾客 C 要在影院 B 买票，那么这两个事务冲突的部分就是语句 2 了。因为它们要更新同一个影院账户的余额，需要修改同一行数据。\n\n\n根据两阶段锁协议，不论你怎样安排语句顺序，所有的操作需要的行锁都是在事务提交的时候才释放的。所以，如果你把语句 2 安排在最后，比如按照 3、1、2 这样的顺序，那么影院账户余额这一行的锁时间就最少。这就最大程度地减少了事务之间的锁等待，提升了并发度。\n\n\n好了，现在由于你的正确设计，影院余额这一行的行锁在一个事务中不会停留很长时间。但是，这并没有完全解决你的困扰。\n\n\n如果这个影院做活动，可以低价预售一年内所有的电影票，而且这个活动只做一天。于是在活动时间开始的时候，你的 MySQL 就挂了。你登上服务器一看，CPU 消耗接近 100%，但整个数据库每秒就执行不到 100 个事务。这是什么原因呢？\n\n这里，我就要说到死锁和死锁检测了。\n\n\n<br/>\n### 死锁和死锁检测\n\n当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。这里我用数据库中的行锁举个例子。\n\n\n这时候，事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有两种策略：\n\n\n\n直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。\n\n发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。\n\n\n\n在 InnoDB 中，`innodb_lock_wait_timeout` 的默认值是 50s，意味着如果采用第一个策略，当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的。\n\n\n但是，我们又不可能直接把这个时间设置成一个很小的值，比如 1s。这样当出现死锁的时候，确实很快就可以解开，但如果不是死锁，而是简单的锁等待呢？所以，超时时间设置太短的话，会出现很多误伤。\n\n\n所以，正常情况下我们还是要采用第二种策略，即：主动死锁检测，而且 innodb_deadlock_detect 的默认值本身就是 on。主动死锁检测在发生死锁的时候，是能够快速发现并进行处理的，但是它也是有额外负担的。\n\n\n你可以想象一下这个过程：每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。\n\n\n那如果是我们上面说到的所有事务都要更新同一行的场景呢？\n\n\n每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n) 的操作。假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。因此，你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务。\n\n\n根据上面的分析，我们来讨论一下，怎么解决由这种热点行更新导致的性能问题呢？问题的症结在于，死锁检测要耗费大量的 CPU 资源。\n\n\n一种头痛医头的方法，就是如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉。但是这种操作本身带有一定的风险，因为业务设计的时候一般不会把死锁当做一个严重错误，毕竟出现死锁了，就回滚，然后通过业务重试一般就没问题了，这是业务无损的。而关掉死锁检测意味着可能会出现大量的超时，这是业务有损的。\n\n另一个思路是控制并发度。根据上面的分析，你会发现如果并发能够控制住，比如同一行同时最多只有 10 个线程在更新，那么死锁检测的成本很低，就不会出现这个问题。一个直接的想法就是，在客户端做并发控制。但是，你会很快发现这个方法不太可行，因为客户端很多。我见过一个应用，有 600 个客户端，这样即使每个客户端控制到只有 5 个并发线程，汇总到数据库服务端以后，峰值并发数也可能要达到 3000。\n\n因此，这个并发控制要做在数据库服务端。如果你有中间件，可以考虑在中间件实现；如果你的团队有能修改 MySQL 源码的人，也可以做在 MySQL 里面。基本思路就是，对于相同行的更新，在进入引擎之前排队。这样在 InnoDB 内部就不会有大量的死锁检测工作了。\n\n\n可能你会问，如果团队里暂时没有数据库方面的专家，不能实现这样的方案，能不能从设计上优化这个问题呢？\n\n\n你可以考虑通过将一行改成逻辑上的多行来减少锁冲突。还是以影院账户为例，可以考虑放在多条记录上，比如 10 个记录，影院的账户总额等于这 10 个记录的值的总和。这样每次要给影院账户加金额的时候，随机选其中一条记录来加。这样每次冲突概率变成原来的 1/10，可以减少锁等待个数，也就减少了死锁检测的 CPU 消耗。\n\n\n这个方案看上去是无损的，但其实这类方案需要根据业务逻辑做详细设计。如果账户余额可能会减少，比如退票逻辑，那么这时候就需要考虑当一部分行记录变成 0 的时候，代码要有特殊处理。\n\n\n\n<br/>\n### 小结\n\n今天，我和你介绍了 MySQL 的行锁，涉及了两阶段锁协议、死锁和死锁检测这两大部分内容。\n\n\n其中，我以两阶段协议为起点，和你一起讨论了在开发的时候如何安排正确的事务语句。这里的原则 / 我给你的建议是：如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁的申请时机尽量往后放。\n\n\n但是，调整语句顺序并不能完全避免死锁。所以我们引入了死锁和死锁检测的概念，以及提供了三个方案，来减少死锁对数据库的影响。减少死锁的主要方向，就是控制访问相同资源的并发事务量。\n\n\n\n最后，我给你留下一个问题吧。如果你要删除一个表里面的前 10000 行数据，有以下三种方法可以做到：\n\n\n\n第一种，直接执行 delete from T limit 10000;\n\n第二种，在一个连接中循环执行 20 次 delete from T limit 500;\n\n第三种，在 20 个连接中同时执行 delete from T limit 500。\n\n\n\n你会选择哪一种方法呢？为什么呢？\n\n二，减少事务时长的同时，降低的锁竞争","slug":"07-MySQL实战45讲-行锁功过：怎么减少行锁对性能的影响","published":1,"updated":"2019-11-02T07:12:18.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y4e000dt6s6dppqlgb9","content":"<p>在上一篇文章中，我跟你介绍了 MySQL 的全局锁和表级锁，今天我们就来讲讲 MySQL 的行锁。</p>\n<p>MySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁，比如 MyISAM 引擎就不支持行锁。不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。</p>\n<p>我们今天就主要来聊聊 InnoDB 的行锁，以及如何通过减少锁冲突来提升业务并发度。</p>\n<p>顾名思义，行锁就是针对数据表中行记录的锁。这很好理解，比如事务 A 更新了一行，而这时候事务 B 也要更新同一行，则必须等事务 A 的操作完成后才能进行更新。</p>\n<p>当然，数据库中还有一些没那么一目了然的概念和设计，这些概念如果理解和使用不当，容易导致程序出现非预期行为，比如两阶段锁。</p>\n<p><br></p>\n<h3 id=\"从两阶段锁说起\"><a href=\"#从两阶段锁说起\" class=\"headerlink\" title=\"从两阶段锁说起\"></a>从两阶段锁说起</h3><p>我先给你举个例子。在下面的操作序列中，事务 B 的 update 语句执行时会是什么现象呢？假设字段 id 是表 t 的主键。</p>\n<p>这个问题的结论取决于事务 A 在执行完两条 update 语句后，持有哪些锁，以及在什么时候释放。你可以验证一下：实际上事务 B 的 update 语句会被阻塞，直到事务 A 执行 commit 之后，事务 B 才能继续执行。</p>\n<p>知道了这个答案，你一定知道了事务 A 持有的两个记录的行锁，都是在 commit 的时候才释放的。</p>\n<p>也就是说，在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</p>\n<p>知道了这个设定，对我们使用事务有什么帮助呢？那就是，如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。我给你举个例子。</p>\n<p>假设你负责实现一个电影票在线交易业务，顾客 A 要在影院 B 购买电影票。我们简化一点，这个业务需要涉及到以下操作：</p>\n<p>从顾客 A 账户余额中扣除电影票价；</p>\n<p>给影院 B 的账户余额增加这张电影票价；</p>\n<p>记录一条交易日志。</p>\n<p>也就是说，要完成这个交易，我们需要 update 两条记录，并 insert 一条记录。当然，为了保证交易的原子性，我们要把这三个操作放在一个事务中。那么，你会怎样安排这三个语句在事务中的顺序呢？</p>\n<p>试想如果同时有另外一个顾客 C 要在影院 B 买票，那么这两个事务冲突的部分就是语句 2 了。因为它们要更新同一个影院账户的余额，需要修改同一行数据。</p>\n<p>根据两阶段锁协议，不论你怎样安排语句顺序，所有的操作需要的行锁都是在事务提交的时候才释放的。所以，如果你把语句 2 安排在最后，比如按照 3、1、2 这样的顺序，那么影院账户余额这一行的锁时间就最少。这就最大程度地减少了事务之间的锁等待，提升了并发度。</p>\n<p>好了，现在由于你的正确设计，影院余额这一行的行锁在一个事务中不会停留很长时间。但是，这并没有完全解决你的困扰。</p>\n<p>如果这个影院做活动，可以低价预售一年内所有的电影票，而且这个活动只做一天。于是在活动时间开始的时候，你的 MySQL 就挂了。你登上服务器一看，CPU 消耗接近 100%，但整个数据库每秒就执行不到 100 个事务。这是什么原因呢？</p>\n<p>这里，我就要说到死锁和死锁检测了。</p>\n<p><br></p>\n<h3 id=\"死锁和死锁检测\"><a href=\"#死锁和死锁检测\" class=\"headerlink\" title=\"死锁和死锁检测\"></a>死锁和死锁检测</h3><p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。这里我用数据库中的行锁举个例子。</p>\n<p>这时候，事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有两种策略：</p>\n<p>直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。</p>\n<p>发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</p>\n<p>在 InnoDB 中，<code>innodb_lock_wait_timeout</code> 的默认值是 50s，意味着如果采用第一个策略，当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的。</p>\n<p>但是，我们又不可能直接把这个时间设置成一个很小的值，比如 1s。这样当出现死锁的时候，确实很快就可以解开，但如果不是死锁，而是简单的锁等待呢？所以，超时时间设置太短的话，会出现很多误伤。</p>\n<p>所以，正常情况下我们还是要采用第二种策略，即：主动死锁检测，而且 innodb_deadlock_detect 的默认值本身就是 on。主动死锁检测在发生死锁的时候，是能够快速发现并进行处理的，但是它也是有额外负担的。</p>\n<p>你可以想象一下这个过程：每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。</p>\n<p>那如果是我们上面说到的所有事务都要更新同一行的场景呢？</p>\n<p>每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n) 的操作。假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。因此，你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务。</p>\n<p>根据上面的分析，我们来讨论一下，怎么解决由这种热点行更新导致的性能问题呢？问题的症结在于，死锁检测要耗费大量的 CPU 资源。</p>\n<p>一种头痛医头的方法，就是如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉。但是这种操作本身带有一定的风险，因为业务设计的时候一般不会把死锁当做一个严重错误，毕竟出现死锁了，就回滚，然后通过业务重试一般就没问题了，这是业务无损的。而关掉死锁检测意味着可能会出现大量的超时，这是业务有损的。</p>\n<p>另一个思路是控制并发度。根据上面的分析，你会发现如果并发能够控制住，比如同一行同时最多只有 10 个线程在更新，那么死锁检测的成本很低，就不会出现这个问题。一个直接的想法就是，在客户端做并发控制。但是，你会很快发现这个方法不太可行，因为客户端很多。我见过一个应用，有 600 个客户端，这样即使每个客户端控制到只有 5 个并发线程，汇总到数据库服务端以后，峰值并发数也可能要达到 3000。</p>\n<p>因此，这个并发控制要做在数据库服务端。如果你有中间件，可以考虑在中间件实现；如果你的团队有能修改 MySQL 源码的人，也可以做在 MySQL 里面。基本思路就是，对于相同行的更新，在进入引擎之前排队。这样在 InnoDB 内部就不会有大量的死锁检测工作了。</p>\n<p>可能你会问，如果团队里暂时没有数据库方面的专家，不能实现这样的方案，能不能从设计上优化这个问题呢？</p>\n<p>你可以考虑通过将一行改成逻辑上的多行来减少锁冲突。还是以影院账户为例，可以考虑放在多条记录上，比如 10 个记录，影院的账户总额等于这 10 个记录的值的总和。这样每次要给影院账户加金额的时候，随机选其中一条记录来加。这样每次冲突概率变成原来的 1/10，可以减少锁等待个数，也就减少了死锁检测的 CPU 消耗。</p>\n<p>这个方案看上去是无损的，但其实这类方案需要根据业务逻辑做详细设计。如果账户余额可能会减少，比如退票逻辑，那么这时候就需要考虑当一部分行记录变成 0 的时候，代码要有特殊处理。</p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>今天，我和你介绍了 MySQL 的行锁，涉及了两阶段锁协议、死锁和死锁检测这两大部分内容。</p>\n<p>其中，我以两阶段协议为起点，和你一起讨论了在开发的时候如何安排正确的事务语句。这里的原则 / 我给你的建议是：如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁的申请时机尽量往后放。</p>\n<p>但是，调整语句顺序并不能完全避免死锁。所以我们引入了死锁和死锁检测的概念，以及提供了三个方案，来减少死锁对数据库的影响。减少死锁的主要方向，就是控制访问相同资源的并发事务量。</p>\n<p>最后，我给你留下一个问题吧。如果你要删除一个表里面的前 10000 行数据，有以下三种方法可以做到：</p>\n<p>第一种，直接执行 delete from T limit 10000;</p>\n<p>第二种，在一个连接中循环执行 20 次 delete from T limit 500;</p>\n<p>第三种，在 20 个连接中同时执行 delete from T limit 500。</p>\n<p>你会选择哪一种方法呢？为什么呢？</p>\n<p>二，减少事务时长的同时，降低的锁竞争</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在上一篇文章中，我跟你介绍了 MySQL 的全局锁和表级锁，今天我们就来讲讲 MySQL 的行锁。</p>\n<p>MySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁，比如 MyISAM 引擎就不支持行锁。不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。</p>\n<p>我们今天就主要来聊聊 InnoDB 的行锁，以及如何通过减少锁冲突来提升业务并发度。</p>\n<p>顾名思义，行锁就是针对数据表中行记录的锁。这很好理解，比如事务 A 更新了一行，而这时候事务 B 也要更新同一行，则必须等事务 A 的操作完成后才能进行更新。</p>\n<p>当然，数据库中还有一些没那么一目了然的概念和设计，这些概念如果理解和使用不当，容易导致程序出现非预期行为，比如两阶段锁。</p>\n<p><br></p>\n<h3 id=\"从两阶段锁说起\"><a href=\"#从两阶段锁说起\" class=\"headerlink\" title=\"从两阶段锁说起\"></a>从两阶段锁说起</h3><p>我先给你举个例子。在下面的操作序列中，事务 B 的 update 语句执行时会是什么现象呢？假设字段 id 是表 t 的主键。</p>\n<p>这个问题的结论取决于事务 A 在执行完两条 update 语句后，持有哪些锁，以及在什么时候释放。你可以验证一下：实际上事务 B 的 update 语句会被阻塞，直到事务 A 执行 commit 之后，事务 B 才能继续执行。</p>\n<p>知道了这个答案，你一定知道了事务 A 持有的两个记录的行锁，都是在 commit 的时候才释放的。</p>\n<p>也就是说，在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</p>\n<p>知道了这个设定，对我们使用事务有什么帮助呢？那就是，如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。我给你举个例子。</p>\n<p>假设你负责实现一个电影票在线交易业务，顾客 A 要在影院 B 购买电影票。我们简化一点，这个业务需要涉及到以下操作：</p>\n<p>从顾客 A 账户余额中扣除电影票价；</p>\n<p>给影院 B 的账户余额增加这张电影票价；</p>\n<p>记录一条交易日志。</p>\n<p>也就是说，要完成这个交易，我们需要 update 两条记录，并 insert 一条记录。当然，为了保证交易的原子性，我们要把这三个操作放在一个事务中。那么，你会怎样安排这三个语句在事务中的顺序呢？</p>\n<p>试想如果同时有另外一个顾客 C 要在影院 B 买票，那么这两个事务冲突的部分就是语句 2 了。因为它们要更新同一个影院账户的余额，需要修改同一行数据。</p>\n<p>根据两阶段锁协议，不论你怎样安排语句顺序，所有的操作需要的行锁都是在事务提交的时候才释放的。所以，如果你把语句 2 安排在最后，比如按照 3、1、2 这样的顺序，那么影院账户余额这一行的锁时间就最少。这就最大程度地减少了事务之间的锁等待，提升了并发度。</p>\n<p>好了，现在由于你的正确设计，影院余额这一行的行锁在一个事务中不会停留很长时间。但是，这并没有完全解决你的困扰。</p>\n<p>如果这个影院做活动，可以低价预售一年内所有的电影票，而且这个活动只做一天。于是在活动时间开始的时候，你的 MySQL 就挂了。你登上服务器一看，CPU 消耗接近 100%，但整个数据库每秒就执行不到 100 个事务。这是什么原因呢？</p>\n<p>这里，我就要说到死锁和死锁检测了。</p>\n<p><br></p>\n<h3 id=\"死锁和死锁检测\"><a href=\"#死锁和死锁检测\" class=\"headerlink\" title=\"死锁和死锁检测\"></a>死锁和死锁检测</h3><p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。这里我用数据库中的行锁举个例子。</p>\n<p>这时候，事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有两种策略：</p>\n<p>直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。</p>\n<p>发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</p>\n<p>在 InnoDB 中，<code>innodb_lock_wait_timeout</code> 的默认值是 50s，意味着如果采用第一个策略，当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的。</p>\n<p>但是，我们又不可能直接把这个时间设置成一个很小的值，比如 1s。这样当出现死锁的时候，确实很快就可以解开，但如果不是死锁，而是简单的锁等待呢？所以，超时时间设置太短的话，会出现很多误伤。</p>\n<p>所以，正常情况下我们还是要采用第二种策略，即：主动死锁检测，而且 innodb_deadlock_detect 的默认值本身就是 on。主动死锁检测在发生死锁的时候，是能够快速发现并进行处理的，但是它也是有额外负担的。</p>\n<p>你可以想象一下这个过程：每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。</p>\n<p>那如果是我们上面说到的所有事务都要更新同一行的场景呢？</p>\n<p>每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n) 的操作。假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。因此，你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务。</p>\n<p>根据上面的分析，我们来讨论一下，怎么解决由这种热点行更新导致的性能问题呢？问题的症结在于，死锁检测要耗费大量的 CPU 资源。</p>\n<p>一种头痛医头的方法，就是如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉。但是这种操作本身带有一定的风险，因为业务设计的时候一般不会把死锁当做一个严重错误，毕竟出现死锁了，就回滚，然后通过业务重试一般就没问题了，这是业务无损的。而关掉死锁检测意味着可能会出现大量的超时，这是业务有损的。</p>\n<p>另一个思路是控制并发度。根据上面的分析，你会发现如果并发能够控制住，比如同一行同时最多只有 10 个线程在更新，那么死锁检测的成本很低，就不会出现这个问题。一个直接的想法就是，在客户端做并发控制。但是，你会很快发现这个方法不太可行，因为客户端很多。我见过一个应用，有 600 个客户端，这样即使每个客户端控制到只有 5 个并发线程，汇总到数据库服务端以后，峰值并发数也可能要达到 3000。</p>\n<p>因此，这个并发控制要做在数据库服务端。如果你有中间件，可以考虑在中间件实现；如果你的团队有能修改 MySQL 源码的人，也可以做在 MySQL 里面。基本思路就是，对于相同行的更新，在进入引擎之前排队。这样在 InnoDB 内部就不会有大量的死锁检测工作了。</p>\n<p>可能你会问，如果团队里暂时没有数据库方面的专家，不能实现这样的方案，能不能从设计上优化这个问题呢？</p>\n<p>你可以考虑通过将一行改成逻辑上的多行来减少锁冲突。还是以影院账户为例，可以考虑放在多条记录上，比如 10 个记录，影院的账户总额等于这 10 个记录的值的总和。这样每次要给影院账户加金额的时候，随机选其中一条记录来加。这样每次冲突概率变成原来的 1/10，可以减少锁等待个数，也就减少了死锁检测的 CPU 消耗。</p>\n<p>这个方案看上去是无损的，但其实这类方案需要根据业务逻辑做详细设计。如果账户余额可能会减少，比如退票逻辑，那么这时候就需要考虑当一部分行记录变成 0 的时候，代码要有特殊处理。</p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>今天，我和你介绍了 MySQL 的行锁，涉及了两阶段锁协议、死锁和死锁检测这两大部分内容。</p>\n<p>其中，我以两阶段协议为起点，和你一起讨论了在开发的时候如何安排正确的事务语句。这里的原则 / 我给你的建议是：如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁的申请时机尽量往后放。</p>\n<p>但是，调整语句顺序并不能完全避免死锁。所以我们引入了死锁和死锁检测的概念，以及提供了三个方案，来减少死锁对数据库的影响。减少死锁的主要方向，就是控制访问相同资源的并发事务量。</p>\n<p>最后，我给你留下一个问题吧。如果你要删除一个表里面的前 10000 行数据，有以下三种方法可以做到：</p>\n<p>第一种，直接执行 delete from T limit 10000;</p>\n<p>第二种，在一个连接中循环执行 20 次 delete from T limit 500;</p>\n<p>第三种，在 20 个连接中同时执行 delete from T limit 500。</p>\n<p>你会选择哪一种方法呢？为什么呢？</p>\n<p>二，减少事务时长的同时，降低的锁竞争</p>\n"},{"title":"06 | 全局锁和表锁：给表加个字段怎么有这么多阻碍","date":"2019-06-02T16:00:00.000Z","_content":"\n今天我要跟你聊聊 MySQL 的锁。数据库锁设计的初衷是处理并发问题。作为多用户共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来实现这些访问规则的重要数据结构。\n\n根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类。今天这篇文章，我会和你分享全局锁和表级锁。而关于行锁的内容，我会留着在下一篇文章中再和你详细介绍。\n\n这里需要说明的是，锁的设计比较复杂，这两篇文章不会涉及锁的具体实现细节，主要介绍的是碰到锁时的现象和其背后的原理。\n\n\n<br/>\n### 全局锁\n\n顾名思义，全局锁就是对整个数据库实例加锁。MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。\n\n全局锁的典型使用场景是，做全库逻辑备份。也就是把整库每个表都 select 出来存成文本。\n\n以前有一种做法，是通过 FTWRL 确保不会有其他线程对数据库做更新，然后对整个库做备份。注意，在备份过程中整个库完全处于只读状态。\n\n但是让整库都只读，听上去就很危险：\n\n\n如果你在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆；\n\n如果你在从库上备份，那么备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。\n\n看来加全局锁不太好。但是细想一下，备份为什么要加锁呢？我们来看一下不加锁会有什么问题。\n\n假设你现在要维护“极客时间”的购买系统，关注的是用户账户余额表和用户课程表。\n\n现在发起一个逻辑备份。假设备份期间，有一个用户，他购买了一门课程，业务逻辑里就要扣掉他的余额，然后往已购课程里面加上一门课。\n\n如果时间顺序上是先备份账户余额表 (u_account)，然后用户购买，然后备份用户课程表 (u_course)，会怎么样呢？你可以看一下这个图：\n\n\n可以看到，这个备份结果里，用户 A 的数据状态是“账户余额没扣，但是用户课程表里面已经多了一门课”。如果后面用这个备份来恢复数据的话，用户 A 就发现，自己赚了。\n\n\n\n作为用户可别觉得这样可真好啊，你可以试想一下：如果备份表的顺序反过来，先备份用户课程表再备份账户余额表，又可能会出现什么结果？\n\n\n\n也就是说，不加锁的话，备份系统备份的得到的库不是一个逻辑时间点，这个视图是逻辑不一致的。\n\n\n\n说到视图你肯定想起来了，我们在前面讲事务隔离的时候，其实是有一个方法能够拿到一致性视图的，对吧？\n\n\n\n是的，就是在可重复读隔离级别下开启一个事务。\n\n\n\n官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。\n\n\n\n你一定在疑惑，有了这个功能，为什么还需要 FTWRL 呢？一致性读是好，但前提是引擎要支持这个隔离级别。比如，对于 MyISAM 这种不支持事务的引擎，如果备份过程中有更新，总是只能取到最新的数据，那么就破坏了备份的一致性。这时，我们就需要使用 FTWRL 命令了。\n\n\n\n所以，single-transaction 方法只适用于所有的表使用事务引擎的库。如果有的表使用了不支持事务的引擎，那么备份就只能通过 FTWRL 方法。这往往是 DBA 要求业务开发人员使用 InnoDB 替代 MyISAM 的原因之一。\n\n\n\n你也许会问，既然要全库只读，为什么不使用 set global readonly=true 的方式呢？确实 readonly 方式也可以让全库进入只读状态，但我还是会建议你用 FTWRL 方式，主要有两个原因：\n\n在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，我不建议你使用。\n\n在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。\n\n\n\n业务的更新不只是增删改数据（DML)，还有可能是加字段等修改表结构的操作（DDL）。不论是哪种方法，一个库被全局锁上以后，你要对里面任何一个表做加字段操作，都是会被锁住的。\n\n\n\n但是，即使没有被全局锁住，加字段也不是就能一帆风顺的，因为你还会碰到接下来我们要介绍的表级锁。\n\n\n<br/>\n### 表级锁\n\nMySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。\n\n\n表锁的语法是 lock tables … read/write。与 FTWRL 类似，可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。需要注意，lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。\n\n\n举个例子, 如果在某个线程 A 中执行 lock tables t1 read, t2 write; 这个语句，则其他线程写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 unlock tables 之前，也只能执行读 t1、读写 t2 的操作。连写 t1 都不允许，自然也不能访问其他表。\n\n\n\n在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。\n\n\n另一类表级的锁是 MDL（metadata lock)。MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。\n\n\n因此，在 MySQL 5.5 版本中引入了 MDL，当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。\n\n\n读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。\n\n读写锁之间，写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。\n\n\n虽然 MDL 锁是系统默认会加的，但却是你不能忽略的一个机制。比如下面这个例子，我经常看到有人掉到这个坑里：给一个小表加个字段，导致整个库挂了。\n\n\n你肯定知道，给一个表加字段，或者修改字段，或者加索引，需要扫描全表的数据。在对大表操作的时候，你肯定会特别小心，以免对线上服务造成影响。而实际上，即使是小表，操作不慎也会出问题。我们来看一下下面的操作序列，假设表 t 是一个小表。\n\n\n\nsession A 先启动，这时候会对表 t 加一个 MDL 读锁。\n\nsession B 需要的也是 MDL 读锁，因此可以正常执行。\n\nsession C 会被 blocked，因为 session A 的 MDL 读锁还没有释放，而 session C 需要 MDL 写锁，因此只能被阻塞。\n\n如果只有 session C 自己被阻塞还没什么关系，但是之后所有要在表 t 上新申请 MDL 读锁的请求也会被 session C 阻塞。\n\n\n\n前面我们说了，所有对表的增删改查操作都需要先申请 MDL 读锁，就都被锁住，等于这个表现在完全不可读写了。如果某个表上的查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。\n\n\n\n你现在应该知道了，事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。\n\n\n\n基于上面的分析，我们来讨论一个问题，如何安全地给小表加字段？\n\n\n\n首先我们要解决长事务，事务不提交，就会一直占着 MDL 锁。在 MySQL 的 information_schema 库的 innodb_trx 表中，你可以查到当前执行中的事务。如果你要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。\n\n\n\n但考虑一下这个场景。如果你要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频繁，而你不得不加个字段，你该怎么做呢？\n\n\n\n这时候 kill 可能未必管用，因为新的请求马上就来了。比较理想的机制是，在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者 DBA 再通过重试命令重复这个过程。\n\n\n\nMariaDB 已经合并了 AliSQL 的这个功能，所以这两个开源分支目前都支持 DDL NOWAIT/WAIT n 这个语法。\n\n\n\nALTER TABLE tbl_name NOWAIT add column ...\n\nALTER TABLE tbl_name WAIT N add column ...\n\n\n\n小结\n今天，我跟你介绍了 MySQL 的全局锁和表级锁。\n\n全局锁主要用在逻辑备份过程中。对于全部是 InnoDB 引擎的库，我建议你选择使用–single-transaction 参数，对应用会更友好。\n\n表锁一般是在数据库引擎不支持行锁的时候才会被用到的。如果你发现你的应用程序里有 lock tables 这样的语句，你需要追查一下，比较可能的情况是：\n\n要么是你的系统现在还在用 MyISAM 这类不支持事务的引擎，那要安排升级换引擎；\n\n要么是你的引擎升级了，但是代码还没升级。我见过这样的情况，最后业务开发就是把 lock tables 和 unlock tables 改成 begin 和 commit，问题就解决了。\n\n\n\nMDL 会直到事务提交才释放，在做表结构变更的时候，你一定要小心不要导致锁住线上查询和更新。\n\n\n\n最后，我给你留一个问题吧。备份一般都会在备库上执行，你在用–single-transaction 方法做逻辑备份的过程中，如果主库上的一个小表做了一个 DDL，比如给一个表上加了一列。这时候，从备库上会看到什么现象呢？\n\n\n\n假设这个 DDL 是针对表 t1 的， 这里我把备份过程中几个关键的语句列出来：\n\n\n\nQ1:SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;\nQ2:START TRANSACTION  WITH CONSISTENT SNAPSHOT；\n/* other tables */\nQ3:SAVEPOINT sp;\n/* 时刻 1 */\nQ4:show create table `t1`;\n/* 时刻 2 */\nQ5:SELECT * FROM `t1`;\n/* 时刻 3 */\nQ6:ROLLBACK TO SAVEPOINT sp;\n/* 时刻 4 */\n/* other tables */\n\n\n在备份开始的时候，为了确保 RR（可重复读）隔离级别，再设置一次 RR 隔离级别 (Q1);\n\n启动事务，这里用 WITH CONSISTENT SNAPSHOT 确保这个语句执行完就可以得到一个一致性视图（Q2)；\n\n设置一个保存点，这个很重要（Q3）；\n\nshow create 是为了拿到表结构 (Q4)，然后正式导数据 （Q5）;\n\n回滚到 SAVEPOINT sp，在这里的作用是释放 t1 的 MDL 锁 （Q6。当然这部分属于“超纲”，上文正文里面都没提到。\n\nDDL 从主库传过来的时间按照效果不同，我打了四个时刻。题目设定为小表，我们假定到达后，如果开始执行，则很快能够执行完成。\n\n\n\n参考答案如下：\n\n如果在 Q4 语句执行之前到达，现象：没有影响，备份拿到的是 DDL 后的表结构。\n\n如果在“时刻 2”到达，则表结构被改过，Q5 执行的时候，报 Table definition has changed, please retry transaction，现象：mysqldump 终止；\n\n如果在“时刻 2”和“时刻 3”之间到达，mysqldump 占着 t1 的 MDL 读锁，binlog 被阻塞，现象：主从延迟，直到 Q6 执行完成。\n\n从“时刻 4”开始，mysqldump 释放了 MDL 读锁，现象：没有影响，备份拿到的是 DDL 后的表结构。","source":"_posts/06-MySQL实战45讲-全局锁和表锁：给表加个字段怎么有这么多阻碍.md","raw":"---\ntitle: 06 | 全局锁和表锁：给表加个字段怎么有这么多阻碍\ndate: 2019-06-03\ncategories: \n    - MySQL\ntags:\n    - MySQL\n    - MySQL实战45讲\n---\n\n今天我要跟你聊聊 MySQL 的锁。数据库锁设计的初衷是处理并发问题。作为多用户共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来实现这些访问规则的重要数据结构。\n\n根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类。今天这篇文章，我会和你分享全局锁和表级锁。而关于行锁的内容，我会留着在下一篇文章中再和你详细介绍。\n\n这里需要说明的是，锁的设计比较复杂，这两篇文章不会涉及锁的具体实现细节，主要介绍的是碰到锁时的现象和其背后的原理。\n\n\n<br/>\n### 全局锁\n\n顾名思义，全局锁就是对整个数据库实例加锁。MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。\n\n全局锁的典型使用场景是，做全库逻辑备份。也就是把整库每个表都 select 出来存成文本。\n\n以前有一种做法，是通过 FTWRL 确保不会有其他线程对数据库做更新，然后对整个库做备份。注意，在备份过程中整个库完全处于只读状态。\n\n但是让整库都只读，听上去就很危险：\n\n\n如果你在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆；\n\n如果你在从库上备份，那么备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。\n\n看来加全局锁不太好。但是细想一下，备份为什么要加锁呢？我们来看一下不加锁会有什么问题。\n\n假设你现在要维护“极客时间”的购买系统，关注的是用户账户余额表和用户课程表。\n\n现在发起一个逻辑备份。假设备份期间，有一个用户，他购买了一门课程，业务逻辑里就要扣掉他的余额，然后往已购课程里面加上一门课。\n\n如果时间顺序上是先备份账户余额表 (u_account)，然后用户购买，然后备份用户课程表 (u_course)，会怎么样呢？你可以看一下这个图：\n\n\n可以看到，这个备份结果里，用户 A 的数据状态是“账户余额没扣，但是用户课程表里面已经多了一门课”。如果后面用这个备份来恢复数据的话，用户 A 就发现，自己赚了。\n\n\n\n作为用户可别觉得这样可真好啊，你可以试想一下：如果备份表的顺序反过来，先备份用户课程表再备份账户余额表，又可能会出现什么结果？\n\n\n\n也就是说，不加锁的话，备份系统备份的得到的库不是一个逻辑时间点，这个视图是逻辑不一致的。\n\n\n\n说到视图你肯定想起来了，我们在前面讲事务隔离的时候，其实是有一个方法能够拿到一致性视图的，对吧？\n\n\n\n是的，就是在可重复读隔离级别下开启一个事务。\n\n\n\n官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。\n\n\n\n你一定在疑惑，有了这个功能，为什么还需要 FTWRL 呢？一致性读是好，但前提是引擎要支持这个隔离级别。比如，对于 MyISAM 这种不支持事务的引擎，如果备份过程中有更新，总是只能取到最新的数据，那么就破坏了备份的一致性。这时，我们就需要使用 FTWRL 命令了。\n\n\n\n所以，single-transaction 方法只适用于所有的表使用事务引擎的库。如果有的表使用了不支持事务的引擎，那么备份就只能通过 FTWRL 方法。这往往是 DBA 要求业务开发人员使用 InnoDB 替代 MyISAM 的原因之一。\n\n\n\n你也许会问，既然要全库只读，为什么不使用 set global readonly=true 的方式呢？确实 readonly 方式也可以让全库进入只读状态，但我还是会建议你用 FTWRL 方式，主要有两个原因：\n\n在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，我不建议你使用。\n\n在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。\n\n\n\n业务的更新不只是增删改数据（DML)，还有可能是加字段等修改表结构的操作（DDL）。不论是哪种方法，一个库被全局锁上以后，你要对里面任何一个表做加字段操作，都是会被锁住的。\n\n\n\n但是，即使没有被全局锁住，加字段也不是就能一帆风顺的，因为你还会碰到接下来我们要介绍的表级锁。\n\n\n<br/>\n### 表级锁\n\nMySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。\n\n\n表锁的语法是 lock tables … read/write。与 FTWRL 类似，可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。需要注意，lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。\n\n\n举个例子, 如果在某个线程 A 中执行 lock tables t1 read, t2 write; 这个语句，则其他线程写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 unlock tables 之前，也只能执行读 t1、读写 t2 的操作。连写 t1 都不允许，自然也不能访问其他表。\n\n\n\n在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。\n\n\n另一类表级的锁是 MDL（metadata lock)。MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。\n\n\n因此，在 MySQL 5.5 版本中引入了 MDL，当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。\n\n\n读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。\n\n读写锁之间，写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。\n\n\n虽然 MDL 锁是系统默认会加的，但却是你不能忽略的一个机制。比如下面这个例子，我经常看到有人掉到这个坑里：给一个小表加个字段，导致整个库挂了。\n\n\n你肯定知道，给一个表加字段，或者修改字段，或者加索引，需要扫描全表的数据。在对大表操作的时候，你肯定会特别小心，以免对线上服务造成影响。而实际上，即使是小表，操作不慎也会出问题。我们来看一下下面的操作序列，假设表 t 是一个小表。\n\n\n\nsession A 先启动，这时候会对表 t 加一个 MDL 读锁。\n\nsession B 需要的也是 MDL 读锁，因此可以正常执行。\n\nsession C 会被 blocked，因为 session A 的 MDL 读锁还没有释放，而 session C 需要 MDL 写锁，因此只能被阻塞。\n\n如果只有 session C 自己被阻塞还没什么关系，但是之后所有要在表 t 上新申请 MDL 读锁的请求也会被 session C 阻塞。\n\n\n\n前面我们说了，所有对表的增删改查操作都需要先申请 MDL 读锁，就都被锁住，等于这个表现在完全不可读写了。如果某个表上的查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。\n\n\n\n你现在应该知道了，事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。\n\n\n\n基于上面的分析，我们来讨论一个问题，如何安全地给小表加字段？\n\n\n\n首先我们要解决长事务，事务不提交，就会一直占着 MDL 锁。在 MySQL 的 information_schema 库的 innodb_trx 表中，你可以查到当前执行中的事务。如果你要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。\n\n\n\n但考虑一下这个场景。如果你要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频繁，而你不得不加个字段，你该怎么做呢？\n\n\n\n这时候 kill 可能未必管用，因为新的请求马上就来了。比较理想的机制是，在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者 DBA 再通过重试命令重复这个过程。\n\n\n\nMariaDB 已经合并了 AliSQL 的这个功能，所以这两个开源分支目前都支持 DDL NOWAIT/WAIT n 这个语法。\n\n\n\nALTER TABLE tbl_name NOWAIT add column ...\n\nALTER TABLE tbl_name WAIT N add column ...\n\n\n\n小结\n今天，我跟你介绍了 MySQL 的全局锁和表级锁。\n\n全局锁主要用在逻辑备份过程中。对于全部是 InnoDB 引擎的库，我建议你选择使用–single-transaction 参数，对应用会更友好。\n\n表锁一般是在数据库引擎不支持行锁的时候才会被用到的。如果你发现你的应用程序里有 lock tables 这样的语句，你需要追查一下，比较可能的情况是：\n\n要么是你的系统现在还在用 MyISAM 这类不支持事务的引擎，那要安排升级换引擎；\n\n要么是你的引擎升级了，但是代码还没升级。我见过这样的情况，最后业务开发就是把 lock tables 和 unlock tables 改成 begin 和 commit，问题就解决了。\n\n\n\nMDL 会直到事务提交才释放，在做表结构变更的时候，你一定要小心不要导致锁住线上查询和更新。\n\n\n\n最后，我给你留一个问题吧。备份一般都会在备库上执行，你在用–single-transaction 方法做逻辑备份的过程中，如果主库上的一个小表做了一个 DDL，比如给一个表上加了一列。这时候，从备库上会看到什么现象呢？\n\n\n\n假设这个 DDL 是针对表 t1 的， 这里我把备份过程中几个关键的语句列出来：\n\n\n\nQ1:SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;\nQ2:START TRANSACTION  WITH CONSISTENT SNAPSHOT；\n/* other tables */\nQ3:SAVEPOINT sp;\n/* 时刻 1 */\nQ4:show create table `t1`;\n/* 时刻 2 */\nQ5:SELECT * FROM `t1`;\n/* 时刻 3 */\nQ6:ROLLBACK TO SAVEPOINT sp;\n/* 时刻 4 */\n/* other tables */\n\n\n在备份开始的时候，为了确保 RR（可重复读）隔离级别，再设置一次 RR 隔离级别 (Q1);\n\n启动事务，这里用 WITH CONSISTENT SNAPSHOT 确保这个语句执行完就可以得到一个一致性视图（Q2)；\n\n设置一个保存点，这个很重要（Q3）；\n\nshow create 是为了拿到表结构 (Q4)，然后正式导数据 （Q5）;\n\n回滚到 SAVEPOINT sp，在这里的作用是释放 t1 的 MDL 锁 （Q6。当然这部分属于“超纲”，上文正文里面都没提到。\n\nDDL 从主库传过来的时间按照效果不同，我打了四个时刻。题目设定为小表，我们假定到达后，如果开始执行，则很快能够执行完成。\n\n\n\n参考答案如下：\n\n如果在 Q4 语句执行之前到达，现象：没有影响，备份拿到的是 DDL 后的表结构。\n\n如果在“时刻 2”到达，则表结构被改过，Q5 执行的时候，报 Table definition has changed, please retry transaction，现象：mysqldump 终止；\n\n如果在“时刻 2”和“时刻 3”之间到达，mysqldump 占着 t1 的 MDL 读锁，binlog 被阻塞，现象：主从延迟，直到 Q6 执行完成。\n\n从“时刻 4”开始，mysqldump 释放了 MDL 读锁，现象：没有影响，备份拿到的是 DDL 后的表结构。","slug":"06-MySQL实战45讲-全局锁和表锁：给表加个字段怎么有这么多阻碍","published":1,"updated":"2019-11-02T07:12:18.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y4g000et6s6vp0vskma","content":"<p>今天我要跟你聊聊 MySQL 的锁。数据库锁设计的初衷是处理并发问题。作为多用户共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来实现这些访问规则的重要数据结构。</p>\n<p>根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类。今天这篇文章，我会和你分享全局锁和表级锁。而关于行锁的内容，我会留着在下一篇文章中再和你详细介绍。</p>\n<p>这里需要说明的是，锁的设计比较复杂，这两篇文章不会涉及锁的具体实现细节，主要介绍的是碰到锁时的现象和其背后的原理。</p>\n<p><br></p>\n<h3 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h3><p>顾名思义，全局锁就是对整个数据库实例加锁。MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。</p>\n<p>全局锁的典型使用场景是，做全库逻辑备份。也就是把整库每个表都 select 出来存成文本。</p>\n<p>以前有一种做法，是通过 FTWRL 确保不会有其他线程对数据库做更新，然后对整个库做备份。注意，在备份过程中整个库完全处于只读状态。</p>\n<p>但是让整库都只读，听上去就很危险：</p>\n<p>如果你在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆；</p>\n<p>如果你在从库上备份，那么备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。</p>\n<p>看来加全局锁不太好。但是细想一下，备份为什么要加锁呢？我们来看一下不加锁会有什么问题。</p>\n<p>假设你现在要维护“极客时间”的购买系统，关注的是用户账户余额表和用户课程表。</p>\n<p>现在发起一个逻辑备份。假设备份期间，有一个用户，他购买了一门课程，业务逻辑里就要扣掉他的余额，然后往已购课程里面加上一门课。</p>\n<p>如果时间顺序上是先备份账户余额表 (u_account)，然后用户购买，然后备份用户课程表 (u_course)，会怎么样呢？你可以看一下这个图：</p>\n<p>可以看到，这个备份结果里，用户 A 的数据状态是“账户余额没扣，但是用户课程表里面已经多了一门课”。如果后面用这个备份来恢复数据的话，用户 A 就发现，自己赚了。</p>\n<p>作为用户可别觉得这样可真好啊，你可以试想一下：如果备份表的顺序反过来，先备份用户课程表再备份账户余额表，又可能会出现什么结果？</p>\n<p>也就是说，不加锁的话，备份系统备份的得到的库不是一个逻辑时间点，这个视图是逻辑不一致的。</p>\n<p>说到视图你肯定想起来了，我们在前面讲事务隔离的时候，其实是有一个方法能够拿到一致性视图的，对吧？</p>\n<p>是的，就是在可重复读隔离级别下开启一个事务。</p>\n<p>官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。</p>\n<p>你一定在疑惑，有了这个功能，为什么还需要 FTWRL 呢？一致性读是好，但前提是引擎要支持这个隔离级别。比如，对于 MyISAM 这种不支持事务的引擎，如果备份过程中有更新，总是只能取到最新的数据，那么就破坏了备份的一致性。这时，我们就需要使用 FTWRL 命令了。</p>\n<p>所以，single-transaction 方法只适用于所有的表使用事务引擎的库。如果有的表使用了不支持事务的引擎，那么备份就只能通过 FTWRL 方法。这往往是 DBA 要求业务开发人员使用 InnoDB 替代 MyISAM 的原因之一。</p>\n<p>你也许会问，既然要全库只读，为什么不使用 set global readonly=true 的方式呢？确实 readonly 方式也可以让全库进入只读状态，但我还是会建议你用 FTWRL 方式，主要有两个原因：</p>\n<p>在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，我不建议你使用。</p>\n<p>在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。</p>\n<p>业务的更新不只是增删改数据（DML)，还有可能是加字段等修改表结构的操作（DDL）。不论是哪种方法，一个库被全局锁上以后，你要对里面任何一个表做加字段操作，都是会被锁住的。</p>\n<p>但是，即使没有被全局锁住，加字段也不是就能一帆风顺的，因为你还会碰到接下来我们要介绍的表级锁。</p>\n<p><br></p>\n<h3 id=\"表级锁\"><a href=\"#表级锁\" class=\"headerlink\" title=\"表级锁\"></a>表级锁</h3><p>MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p>\n<p>表锁的语法是 lock tables … read/write。与 FTWRL 类似，可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。需要注意，lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。</p>\n<p>举个例子, 如果在某个线程 A 中执行 lock tables t1 read, t2 write; 这个语句，则其他线程写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 unlock tables 之前，也只能执行读 t1、读写 t2 的操作。连写 t1 都不允许，自然也不能访问其他表。</p>\n<p>在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。</p>\n<p>另一类表级的锁是 MDL（metadata lock)。MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p>\n<p>因此，在 MySQL 5.5 版本中引入了 MDL，当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。</p>\n<p>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。</p>\n<p>读写锁之间，写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。</p>\n<p>虽然 MDL 锁是系统默认会加的，但却是你不能忽略的一个机制。比如下面这个例子，我经常看到有人掉到这个坑里：给一个小表加个字段，导致整个库挂了。</p>\n<p>你肯定知道，给一个表加字段，或者修改字段，或者加索引，需要扫描全表的数据。在对大表操作的时候，你肯定会特别小心，以免对线上服务造成影响。而实际上，即使是小表，操作不慎也会出问题。我们来看一下下面的操作序列，假设表 t 是一个小表。</p>\n<p>session A 先启动，这时候会对表 t 加一个 MDL 读锁。</p>\n<p>session B 需要的也是 MDL 读锁，因此可以正常执行。</p>\n<p>session C 会被 blocked，因为 session A 的 MDL 读锁还没有释放，而 session C 需要 MDL 写锁，因此只能被阻塞。</p>\n<p>如果只有 session C 自己被阻塞还没什么关系，但是之后所有要在表 t 上新申请 MDL 读锁的请求也会被 session C 阻塞。</p>\n<p>前面我们说了，所有对表的增删改查操作都需要先申请 MDL 读锁，就都被锁住，等于这个表现在完全不可读写了。如果某个表上的查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。</p>\n<p>你现在应该知道了，事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。</p>\n<p>基于上面的分析，我们来讨论一个问题，如何安全地给小表加字段？</p>\n<p>首先我们要解决长事务，事务不提交，就会一直占着 MDL 锁。在 MySQL 的 information_schema 库的 innodb_trx 表中，你可以查到当前执行中的事务。如果你要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。</p>\n<p>但考虑一下这个场景。如果你要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频繁，而你不得不加个字段，你该怎么做呢？</p>\n<p>这时候 kill 可能未必管用，因为新的请求马上就来了。比较理想的机制是，在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者 DBA 再通过重试命令重复这个过程。</p>\n<p>MariaDB 已经合并了 AliSQL 的这个功能，所以这两个开源分支目前都支持 DDL NOWAIT/WAIT n 这个语法。</p>\n<p>ALTER TABLE tbl_name NOWAIT add column …</p>\n<p>ALTER TABLE tbl_name WAIT N add column …</p>\n<p>小结\n今天，我跟你介绍了 MySQL 的全局锁和表级锁。</p>\n<p>全局锁主要用在逻辑备份过程中。对于全部是 InnoDB 引擎的库，我建议你选择使用–single-transaction 参数，对应用会更友好。</p>\n<p>表锁一般是在数据库引擎不支持行锁的时候才会被用到的。如果你发现你的应用程序里有 lock tables 这样的语句，你需要追查一下，比较可能的情况是：</p>\n<p>要么是你的系统现在还在用 MyISAM 这类不支持事务的引擎，那要安排升级换引擎；</p>\n<p>要么是你的引擎升级了，但是代码还没升级。我见过这样的情况，最后业务开发就是把 lock tables 和 unlock tables 改成 begin 和 commit，问题就解决了。</p>\n<p>MDL 会直到事务提交才释放，在做表结构变更的时候，你一定要小心不要导致锁住线上查询和更新。</p>\n<p>最后，我给你留一个问题吧。备份一般都会在备库上执行，你在用–single-transaction 方法做逻辑备份的过程中，如果主库上的一个小表做了一个 DDL，比如给一个表上加了一列。这时候，从备库上会看到什么现象呢？</p>\n<p>假设这个 DDL 是针对表 t1 的， 这里我把备份过程中几个关键的语句列出来：</p>\n<p>Q1:SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;\nQ2:START TRANSACTION  WITH CONSISTENT SNAPSHOT；\n/<em> other tables </em>/\nQ3:SAVEPOINT sp;\n/<em> 时刻 1 </em>/\nQ4:show create table <code>t1</code>;\n/<em> 时刻 2 </em>/\nQ5:SELECT <em> FROM <code>t1</code>;\n/</em> 时刻 3 <em>/\nQ6:ROLLBACK TO SAVEPOINT sp;\n/</em> 时刻 4 <em>/\n/</em> other tables */</p>\n<p>在备份开始的时候，为了确保 RR（可重复读）隔离级别，再设置一次 RR 隔离级别 (Q1);</p>\n<p>启动事务，这里用 WITH CONSISTENT SNAPSHOT 确保这个语句执行完就可以得到一个一致性视图（Q2)；</p>\n<p>设置一个保存点，这个很重要（Q3）；</p>\n<p>show create 是为了拿到表结构 (Q4)，然后正式导数据 （Q5）;</p>\n<p>回滚到 SAVEPOINT sp，在这里的作用是释放 t1 的 MDL 锁 （Q6。当然这部分属于“超纲”，上文正文里面都没提到。</p>\n<p>DDL 从主库传过来的时间按照效果不同，我打了四个时刻。题目设定为小表，我们假定到达后，如果开始执行，则很快能够执行完成。</p>\n<p>参考答案如下：</p>\n<p>如果在 Q4 语句执行之前到达，现象：没有影响，备份拿到的是 DDL 后的表结构。</p>\n<p>如果在“时刻 2”到达，则表结构被改过，Q5 执行的时候，报 Table definition has changed, please retry transaction，现象：mysqldump 终止；</p>\n<p>如果在“时刻 2”和“时刻 3”之间到达，mysqldump 占着 t1 的 MDL 读锁，binlog 被阻塞，现象：主从延迟，直到 Q6 执行完成。</p>\n<p>从“时刻 4”开始，mysqldump 释放了 MDL 读锁，现象：没有影响，备份拿到的是 DDL 后的表结构。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天我要跟你聊聊 MySQL 的锁。数据库锁设计的初衷是处理并发问题。作为多用户共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来实现这些访问规则的重要数据结构。</p>\n<p>根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类。今天这篇文章，我会和你分享全局锁和表级锁。而关于行锁的内容，我会留着在下一篇文章中再和你详细介绍。</p>\n<p>这里需要说明的是，锁的设计比较复杂，这两篇文章不会涉及锁的具体实现细节，主要介绍的是碰到锁时的现象和其背后的原理。</p>\n<p><br></p>\n<h3 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h3><p>顾名思义，全局锁就是对整个数据库实例加锁。MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。</p>\n<p>全局锁的典型使用场景是，做全库逻辑备份。也就是把整库每个表都 select 出来存成文本。</p>\n<p>以前有一种做法，是通过 FTWRL 确保不会有其他线程对数据库做更新，然后对整个库做备份。注意，在备份过程中整个库完全处于只读状态。</p>\n<p>但是让整库都只读，听上去就很危险：</p>\n<p>如果你在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆；</p>\n<p>如果你在从库上备份，那么备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。</p>\n<p>看来加全局锁不太好。但是细想一下，备份为什么要加锁呢？我们来看一下不加锁会有什么问题。</p>\n<p>假设你现在要维护“极客时间”的购买系统，关注的是用户账户余额表和用户课程表。</p>\n<p>现在发起一个逻辑备份。假设备份期间，有一个用户，他购买了一门课程，业务逻辑里就要扣掉他的余额，然后往已购课程里面加上一门课。</p>\n<p>如果时间顺序上是先备份账户余额表 (u_account)，然后用户购买，然后备份用户课程表 (u_course)，会怎么样呢？你可以看一下这个图：</p>\n<p>可以看到，这个备份结果里，用户 A 的数据状态是“账户余额没扣，但是用户课程表里面已经多了一门课”。如果后面用这个备份来恢复数据的话，用户 A 就发现，自己赚了。</p>\n<p>作为用户可别觉得这样可真好啊，你可以试想一下：如果备份表的顺序反过来，先备份用户课程表再备份账户余额表，又可能会出现什么结果？</p>\n<p>也就是说，不加锁的话，备份系统备份的得到的库不是一个逻辑时间点，这个视图是逻辑不一致的。</p>\n<p>说到视图你肯定想起来了，我们在前面讲事务隔离的时候，其实是有一个方法能够拿到一致性视图的，对吧？</p>\n<p>是的，就是在可重复读隔离级别下开启一个事务。</p>\n<p>官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。</p>\n<p>你一定在疑惑，有了这个功能，为什么还需要 FTWRL 呢？一致性读是好，但前提是引擎要支持这个隔离级别。比如，对于 MyISAM 这种不支持事务的引擎，如果备份过程中有更新，总是只能取到最新的数据，那么就破坏了备份的一致性。这时，我们就需要使用 FTWRL 命令了。</p>\n<p>所以，single-transaction 方法只适用于所有的表使用事务引擎的库。如果有的表使用了不支持事务的引擎，那么备份就只能通过 FTWRL 方法。这往往是 DBA 要求业务开发人员使用 InnoDB 替代 MyISAM 的原因之一。</p>\n<p>你也许会问，既然要全库只读，为什么不使用 set global readonly=true 的方式呢？确实 readonly 方式也可以让全库进入只读状态，但我还是会建议你用 FTWRL 方式，主要有两个原因：</p>\n<p>在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，我不建议你使用。</p>\n<p>在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。</p>\n<p>业务的更新不只是增删改数据（DML)，还有可能是加字段等修改表结构的操作（DDL）。不论是哪种方法，一个库被全局锁上以后，你要对里面任何一个表做加字段操作，都是会被锁住的。</p>\n<p>但是，即使没有被全局锁住，加字段也不是就能一帆风顺的，因为你还会碰到接下来我们要介绍的表级锁。</p>\n<p><br></p>\n<h3 id=\"表级锁\"><a href=\"#表级锁\" class=\"headerlink\" title=\"表级锁\"></a>表级锁</h3><p>MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p>\n<p>表锁的语法是 lock tables … read/write。与 FTWRL 类似，可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。需要注意，lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。</p>\n<p>举个例子, 如果在某个线程 A 中执行 lock tables t1 read, t2 write; 这个语句，则其他线程写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 unlock tables 之前，也只能执行读 t1、读写 t2 的操作。连写 t1 都不允许，自然也不能访问其他表。</p>\n<p>在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。</p>\n<p>另一类表级的锁是 MDL（metadata lock)。MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p>\n<p>因此，在 MySQL 5.5 版本中引入了 MDL，当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。</p>\n<p>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。</p>\n<p>读写锁之间，写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。</p>\n<p>虽然 MDL 锁是系统默认会加的，但却是你不能忽略的一个机制。比如下面这个例子，我经常看到有人掉到这个坑里：给一个小表加个字段，导致整个库挂了。</p>\n<p>你肯定知道，给一个表加字段，或者修改字段，或者加索引，需要扫描全表的数据。在对大表操作的时候，你肯定会特别小心，以免对线上服务造成影响。而实际上，即使是小表，操作不慎也会出问题。我们来看一下下面的操作序列，假设表 t 是一个小表。</p>\n<p>session A 先启动，这时候会对表 t 加一个 MDL 读锁。</p>\n<p>session B 需要的也是 MDL 读锁，因此可以正常执行。</p>\n<p>session C 会被 blocked，因为 session A 的 MDL 读锁还没有释放，而 session C 需要 MDL 写锁，因此只能被阻塞。</p>\n<p>如果只有 session C 自己被阻塞还没什么关系，但是之后所有要在表 t 上新申请 MDL 读锁的请求也会被 session C 阻塞。</p>\n<p>前面我们说了，所有对表的增删改查操作都需要先申请 MDL 读锁，就都被锁住，等于这个表现在完全不可读写了。如果某个表上的查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。</p>\n<p>你现在应该知道了，事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。</p>\n<p>基于上面的分析，我们来讨论一个问题，如何安全地给小表加字段？</p>\n<p>首先我们要解决长事务，事务不提交，就会一直占着 MDL 锁。在 MySQL 的 information_schema 库的 innodb_trx 表中，你可以查到当前执行中的事务。如果你要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。</p>\n<p>但考虑一下这个场景。如果你要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频繁，而你不得不加个字段，你该怎么做呢？</p>\n<p>这时候 kill 可能未必管用，因为新的请求马上就来了。比较理想的机制是，在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者 DBA 再通过重试命令重复这个过程。</p>\n<p>MariaDB 已经合并了 AliSQL 的这个功能，所以这两个开源分支目前都支持 DDL NOWAIT/WAIT n 这个语法。</p>\n<p>ALTER TABLE tbl_name NOWAIT add column …</p>\n<p>ALTER TABLE tbl_name WAIT N add column …</p>\n<p>小结\n今天，我跟你介绍了 MySQL 的全局锁和表级锁。</p>\n<p>全局锁主要用在逻辑备份过程中。对于全部是 InnoDB 引擎的库，我建议你选择使用–single-transaction 参数，对应用会更友好。</p>\n<p>表锁一般是在数据库引擎不支持行锁的时候才会被用到的。如果你发现你的应用程序里有 lock tables 这样的语句，你需要追查一下，比较可能的情况是：</p>\n<p>要么是你的系统现在还在用 MyISAM 这类不支持事务的引擎，那要安排升级换引擎；</p>\n<p>要么是你的引擎升级了，但是代码还没升级。我见过这样的情况，最后业务开发就是把 lock tables 和 unlock tables 改成 begin 和 commit，问题就解决了。</p>\n<p>MDL 会直到事务提交才释放，在做表结构变更的时候，你一定要小心不要导致锁住线上查询和更新。</p>\n<p>最后，我给你留一个问题吧。备份一般都会在备库上执行，你在用–single-transaction 方法做逻辑备份的过程中，如果主库上的一个小表做了一个 DDL，比如给一个表上加了一列。这时候，从备库上会看到什么现象呢？</p>\n<p>假设这个 DDL 是针对表 t1 的， 这里我把备份过程中几个关键的语句列出来：</p>\n<p>Q1:SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;\nQ2:START TRANSACTION  WITH CONSISTENT SNAPSHOT；\n/<em> other tables </em>/\nQ3:SAVEPOINT sp;\n/<em> 时刻 1 </em>/\nQ4:show create table <code>t1</code>;\n/<em> 时刻 2 </em>/\nQ5:SELECT <em> FROM <code>t1</code>;\n/</em> 时刻 3 <em>/\nQ6:ROLLBACK TO SAVEPOINT sp;\n/</em> 时刻 4 <em>/\n/</em> other tables */</p>\n<p>在备份开始的时候，为了确保 RR（可重复读）隔离级别，再设置一次 RR 隔离级别 (Q1);</p>\n<p>启动事务，这里用 WITH CONSISTENT SNAPSHOT 确保这个语句执行完就可以得到一个一致性视图（Q2)；</p>\n<p>设置一个保存点，这个很重要（Q3）；</p>\n<p>show create 是为了拿到表结构 (Q4)，然后正式导数据 （Q5）;</p>\n<p>回滚到 SAVEPOINT sp，在这里的作用是释放 t1 的 MDL 锁 （Q6。当然这部分属于“超纲”，上文正文里面都没提到。</p>\n<p>DDL 从主库传过来的时间按照效果不同，我打了四个时刻。题目设定为小表，我们假定到达后，如果开始执行，则很快能够执行完成。</p>\n<p>参考答案如下：</p>\n<p>如果在 Q4 语句执行之前到达，现象：没有影响，备份拿到的是 DDL 后的表结构。</p>\n<p>如果在“时刻 2”到达，则表结构被改过，Q5 执行的时候，报 Table definition has changed, please retry transaction，现象：mysqldump 终止；</p>\n<p>如果在“时刻 2”和“时刻 3”之间到达，mysqldump 占着 t1 的 MDL 读锁，binlog 被阻塞，现象：主从延迟，直到 Q6 执行完成。</p>\n<p>从“时刻 4”开始，mysqldump 释放了 MDL 读锁，现象：没有影响，备份拿到的是 DDL 后的表结构。</p>\n"},{"title":"08 | 事务到底是隔离的还是不隔离的","date":"2019-06-02T16:00:00.000Z","_content":"\n我在第 3 篇文章和你讲事务隔离级别的时候提到过，如果是可重复读隔离级别，事务 T 启动的时候会创建一个视图 read-view，之后事务 T 执行期间，即使有其他事务修改了数据，这个事务看到的仍然跟在启动时看到的一样。也就是说，一个在可重复读隔离级别下执行的事务，好像与世无争，不受外界影响。\n\n\n\n但是，我在上一篇文章中，和你分享行锁的时候又提到，一个事务如果要更新一行，而刚好有另外一个事务拥有这一行的行锁，它又不能这么超然了，会被锁住，进入等待状态。问题是，既然进入了等待状态，那么等到这个事务自己获取到行锁要更新数据的时候，它读到的值又是什么呢？\n\n\n\n我给你举一个例子吧。下面是一个只有两行的表的初始化语句。\n\n\n```\nmysql> CREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `k` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\ninsert into t(id, k) values(1,1),(2,2);\n```\n\n\n\n图 1 事务 A、B、C 的执行流程\n\n\n\n这里需要特别注意的是，在整个专栏里面，我们的例子中如果没有特别说明，都是默认 autocommit=1 的。\n\n\n\n在这个例子中，事务 C 没有显式地使用 begin/commit，表示这个 update 语句本身就是一个事务，语句完成的时候会自动提交。语句 Q1 在事务 B 中，更新了行之后查询 ; Q2 在只读事务 A 中查询，并且时间顺序上是在 Q1 的后面。\n\n\n\n这时，如果我告诉你语句 Q1 返回的 k 的值是 3，而语句 Q2 返回的 k 的值是 1，你是不是感觉有点晕呢？\n\n\n\n所以，今天这篇文章，我其实就是想和你说明白这个问题，希望借由把这个疑惑解开的过程，能够帮助你对 InnoDB 的事务和锁有更进一步的理解。\n\n\n\n在 MySQL 里，有两个“视图”的概念\n\nview，它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view，而它的查询方法与表一样。\n\nInnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复度）隔离级别的实现。\n\n它没有物理结构，用来在事务执行期间定义“我能看到什么数据”。\n\n\n\n在第 3 篇文章《事务隔离：为什么你改了我还看不见？》中，我跟你解释过一遍 MVCC 的实现逻辑。今天为了说明查询和更新的区别，我换一个方式来说明，把 read view 拆开。你可以结合这两篇文章的说明来更深一步地理解 MVCC。\n\n\n\n“快照”在 MVCC 里是怎么工作的？\n\n在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。\n\n\n\n这时，你会说这看上去不太现实啊。如果一个库有 100G，那么我启动一个事务，MySQL 就要拷贝 100G 的数据出来，这个过程得多慢啊。可是，我平时的事务执行起来很快啊。\n\n实际上，我们并不需要拷贝出这 100G 的数据，我们先来看看这个快照是怎么实现的。\n\nInnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。\n\n而每行数据也都是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id。同时，旧的数据版本要保留，并且在新的数据版本中，能够有信息可以直接拿到它。\n\n也就是说，数据表中的一行记录，其实可能有多个版本 (row), 每个版本有自己的 row trx_id。\n\n\n\n如图 2 所示，就是一个记录被多个事务连续更新后的状态。\n\n\n\n图 2 行状态变更图\n\n图中虚线框里是同一行数据的 4 个版本，当前最新版本是 V4，k 的值是 22，它是被 transaction id 为 25 的事务更新的，因此它的 row trx_id 也是 25。\n\n\n\n你可能会问，前面的文章不是说，语句更新会生成 undo log（回滚日志）吗？那么，undo log 在哪呢？\n\n\n\n实际上，图 2 中的三个虚线箭头，就是 undo log；而 V1、V2、V3 并不是物理上真实存在的，而是每次需要的时候根据当前版本和 undo log 计算出来的。比如，需要 V2 的时候，就是通过 V4 执行 U3、U2 算出来。\n\n\n\n明白了多版本和 row trx_id 的概念后，我们再来想一下，InnoDB 是怎么定义那个“100G”的快照的。\n\n\n\n按照可重复读的定义，一个事务启动的时候，能够看到所有已经提交的事务结果。但是之后，这个事务执行期间，其他事务的更新对它不可见。\n\n\n\n因此，InnoDB 代码实现上，一个事务只需要在启动的时候，找到所有已经提交的事务 ID 的最大值，记为 up_limit_id；然后声明说，“如果一个数据版本的 row trx_id 大于 up_limit_id，我就不认，我必须要找到它的上一个版本”。当然，如果一个事务自己更新的数据，它自己还是要认的。\n\n\n\n备注：up_limit_id 来源于源码里面的变量名，我没有想到更好的名字来称呼它。\n\n\n\n你看，有了这个声明后，系统里面随后发生的更新，是不是就跟这个事务看到的内容无关了呢？因为之后的更新，产生的新的数据版本的 row trx_id 都会大于 up_limit_id，而对它来说，这些新的数据版本是不存在的，所以这个事务的快照，就是“静态”的了。\n\n\n\n比如，对于图 2 中的数据来说，如果有一个事务，它的 up_limit_id 是 18，那么当它访问这一行数据时，就会从 V4 通过 U3 算出 V3，在它看来，这一行的值是 11。\n\n\n\n所以你现在知道了，InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。\n\n\n\n接下来，我们继续看一下图 1 中的三个事务，分析下 Q2 语句返回的结果，为什么是 k=1。\n\n\n\n这里，我们不妨做如下假设：\n\n\n\n事务 A 开始前，系统里面已经提交的事务最大 ID 是 99；\n\n事务 A、B、C 的版本号分别是 100、101、102，且当前系统里没有别的事务；\n\n三个事务开始前，(1,1）这一行数据的 row trx_id 是 90。\n\n这样，事务 A、B、C 的 up_limit_id 的值就都是 99。\n\n为了简化分析，我先把其他干扰语句去掉，只画出了跟 Q2 查询逻辑有关的操作。\n\n\n\n图 3 Q2 数据逻辑图\n\n\n\n从图中可以看到，第一个有效更新是事务 C，把数据从 (1,1) 改成了 (1,2)。这时候，这个数据的最新版本的 row trx_id 是 102，而 90 这个版本已经成为了历史版本。\n\n\n\n第二个有效更新是事务 B，把数据从 (1,2) 改成了 (1,3)。这时候，这个数据的最新版本（即 row trx_id）是 101，而 102 又成为了历史版本。\n\n\n\n好，现在事务 A 要来读数据了，它的 up_limit_id 是 99。当然了，读数据都是从当前版本读起的。所以，Q2 的读数据流程是这样的：\n\n\n\n找到 (1,3) 的时候，判断出 row trx_id=101 大于 up_limit_id，要不起；\n\n接着，找到上一个历史版本，一看 row trx_id=102，还是要不起；\n\n再往前找，终于找到了（1,1)，它的 row trx_id=90，是可以承认的数据。\n\n\n\n这样执行下来，事务 A 读到的这个数据，跟它在刚开始启动的时候读到的相同，所以我们称之为一致性读。\n\n\n\n这里你可以顺便再想一个问题。(1,1) 这个历史版本，什么时候可以被删除掉呢？\n\n\n\n答案是，当没有事务再需要它的时候，就可以删掉。\n\n\n\n如果只考虑图 1 中的三个事务的话，事务 B 只需要访问到 (1,3) 就可以，而事务 C 需要访问到的是 (1,2)。也就是说，在事务 A 提交后,（1,1) 这个版本就可以被删掉了。\n\n\n<br/>\n### 更新逻辑\n\n细心的同学可能有疑问了：事务 B 的 update 语句，读的到底是哪个版本？这里，我给你画了一个只看事务 B、C 的状态图。\n\n\n\n图 4 Q1 数据逻辑图\n\n这个状态，就是事务 B 刚要执行更新时的状态。\n\n\n\n事务 B 前面的查询语句，拿到的 k 也是 1。但是，当它要去更新数据的时候，不能再在历史版本上更新了，否则事务 C 的更新就丢失了。因此，事务 B 此时的 set k=k+1 是在（1,2）的基础上进行的操作。\n\n\n\n所以，这里就用到了这样一条规则：更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读（current read）”。\n\n\n\n因此，在更新的时候，当前读取到的数据是 (1,2)，更新后生成了新版本的数据 (1,3)，这个新版本的 row trx_id 是 101。\n\n\n\n所以，在执行事务 B 的 Q1 语句的时候，一看自己的版本号是 101，最新数据的版本号也是 101，可以用，所以 Q1 得到的 k 的值是 3。\n\n\n\n这里我们提到了一个概念，叫作当前读。其实，除了 update 语句外，select 语句如果加锁，也是当前读。\n\n\n\n所以，如果把 Q2 修改一下，加上 lock in share mode 或 for update，也都可以读到版本号是 101 的数据，返回的 k 的值是 3。下面这两个 select 语句，分别加了读锁（S 锁，共享锁）和写锁（X 锁，排他锁）。\n\n\n\nmysql> select k from t where id=1 lock in share mode;\nmysql> select k from t where id=1 for update;\n\n\n现在，我们再回到文章开头的问题：事务的可重复读的能力是怎么实现的？\n\n\n\n可重复读的核心就是一致性读（consistent read）；而事务更新数据的时候，只能用当前读。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。\n\n\n\n而读提交的逻辑和可重复读的逻辑类似，它们最主要的区别是：\n\n\n\n在可重复读隔离级别下，只需要在事务开始的时候找到那个 up_limit_id，之后事务里的其他查询都共用这个 up_limit_id；在读提交隔离级别下，每一个语句执行前都会重新算一次 up_limit_id 的值。\n\n\n\n那么，我们再看一下，在读提交隔离级别下，语句 Q1 和 Q2 返回的 k 的值，分别应该是多少呢？\n\n\n\n下面是读提交时的状态图， 可以看到 Q1、Q2 语句的 up_limit_id 发生了变化。\n\n\n\n\n\n图 5 读提交隔离级别下的事务状态图\n\n这时，事务 A 的 Q2 语句开始执行的时候，由于事务 B（101）、C（102）都已经提交了，所以 Q2 的 up_limit_id 的值就应该是事务 C 的 transaction id，即 102。那么，它在读到（1,3) 的时候，就满足了 up_limt_id(102) ≥row trx_id(101) 的条件，所以返回了 k=3。\n\n\n\n显然地，语句 Q1 的查询结果 k=3。\n\n\n<br/>\n### 小结\n\nInnoDB 的行数据有多个版本，每个数据版本有自己的 row trx_id，每个事务或者语句有自己的 up_limit_id。普通查询语句是一致性读，一致性读会根据 row trx_id 和 up_limit_id 的大小决定数据版本的可见性。\n\n\n\n对于可重复读，查询只承认在事务启动前就已经提交完成的数据；\n\n对于读提交，查询只承认在语句启动前就已经提交完成的数据；\n\n而当前读，总是读取已经提交完成的最新版本。\n\n\n\n你也可以想一下，为什么表结构不支持“可重复读”？这是因为表结构没有对应的行数据，也没有 row trx_id，因此只能遵循当前读的逻辑。\n\n\n\n当然，MySQL 8.0 已经可以把表结构放在 InnoDB 字典里了，也许以后会支持表结构的可重复读。\n\n\n\n又到思考题时间了。我用下面的表结构和初始化语句作为试验环境，事务隔离级别是可重复读。现在，我要把所有“字段 c 和 id 值相等的行”的 c 值清零，但是却发现了一个“诡异”的、改不掉的情况，如下图所示。请你构造出这种情况，并说明其原理。\n\n\n```\nmysql> CREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\ninsert into t(id, c) values(1,1),(2,2),(3,3),(4,4);\n```\n\n\n\n\n\n复现出来以后，请你再思考一下，在实际的业务开发中有没有可能碰到这种情况？你的应用代码会不会掉进这个“坑”里，你又是怎么解决的呢？\n\n\n\n\n\n这样，session A 看到的就是我截图的效果了。\n\n\n\n其实，还有另外一种场景，同学们在留言区都还没有提到。\n\n\n\n这个操作序列跑出来，session A 看的内容也是能够复现我截图的效果的。这个 session B’启动的事务比 A 要早，其实是上期我们描述事务版本的可见性规则时留的彩蛋，因为规则里还有一个“活跃事务的判断”，我是准备留到这里再补充的。\n\n\n\n用新的方式来分析 session B’的更新为什么对 session A 不可见就是：在 session A 视图数组创建的瞬间，session B’是活跃的，属于“版本未提交，不可见”这种情况。\n\n\n","source":"_posts/08-MySQL实战45讲-事务到底是隔离的还是不隔离的.md","raw":"---\ntitle: 08 | 事务到底是隔离的还是不隔离的\ndate: 2019-06-03\ncategories: \n    - MySQL\ntags:\n    - MySQL\n    - MySQL实战45讲\n---\n\n我在第 3 篇文章和你讲事务隔离级别的时候提到过，如果是可重复读隔离级别，事务 T 启动的时候会创建一个视图 read-view，之后事务 T 执行期间，即使有其他事务修改了数据，这个事务看到的仍然跟在启动时看到的一样。也就是说，一个在可重复读隔离级别下执行的事务，好像与世无争，不受外界影响。\n\n\n\n但是，我在上一篇文章中，和你分享行锁的时候又提到，一个事务如果要更新一行，而刚好有另外一个事务拥有这一行的行锁，它又不能这么超然了，会被锁住，进入等待状态。问题是，既然进入了等待状态，那么等到这个事务自己获取到行锁要更新数据的时候，它读到的值又是什么呢？\n\n\n\n我给你举一个例子吧。下面是一个只有两行的表的初始化语句。\n\n\n```\nmysql> CREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `k` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\ninsert into t(id, k) values(1,1),(2,2);\n```\n\n\n\n图 1 事务 A、B、C 的执行流程\n\n\n\n这里需要特别注意的是，在整个专栏里面，我们的例子中如果没有特别说明，都是默认 autocommit=1 的。\n\n\n\n在这个例子中，事务 C 没有显式地使用 begin/commit，表示这个 update 语句本身就是一个事务，语句完成的时候会自动提交。语句 Q1 在事务 B 中，更新了行之后查询 ; Q2 在只读事务 A 中查询，并且时间顺序上是在 Q1 的后面。\n\n\n\n这时，如果我告诉你语句 Q1 返回的 k 的值是 3，而语句 Q2 返回的 k 的值是 1，你是不是感觉有点晕呢？\n\n\n\n所以，今天这篇文章，我其实就是想和你说明白这个问题，希望借由把这个疑惑解开的过程，能够帮助你对 InnoDB 的事务和锁有更进一步的理解。\n\n\n\n在 MySQL 里，有两个“视图”的概念\n\nview，它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view，而它的查询方法与表一样。\n\nInnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复度）隔离级别的实现。\n\n它没有物理结构，用来在事务执行期间定义“我能看到什么数据”。\n\n\n\n在第 3 篇文章《事务隔离：为什么你改了我还看不见？》中，我跟你解释过一遍 MVCC 的实现逻辑。今天为了说明查询和更新的区别，我换一个方式来说明，把 read view 拆开。你可以结合这两篇文章的说明来更深一步地理解 MVCC。\n\n\n\n“快照”在 MVCC 里是怎么工作的？\n\n在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。\n\n\n\n这时，你会说这看上去不太现实啊。如果一个库有 100G，那么我启动一个事务，MySQL 就要拷贝 100G 的数据出来，这个过程得多慢啊。可是，我平时的事务执行起来很快啊。\n\n实际上，我们并不需要拷贝出这 100G 的数据，我们先来看看这个快照是怎么实现的。\n\nInnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。\n\n而每行数据也都是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id。同时，旧的数据版本要保留，并且在新的数据版本中，能够有信息可以直接拿到它。\n\n也就是说，数据表中的一行记录，其实可能有多个版本 (row), 每个版本有自己的 row trx_id。\n\n\n\n如图 2 所示，就是一个记录被多个事务连续更新后的状态。\n\n\n\n图 2 行状态变更图\n\n图中虚线框里是同一行数据的 4 个版本，当前最新版本是 V4，k 的值是 22，它是被 transaction id 为 25 的事务更新的，因此它的 row trx_id 也是 25。\n\n\n\n你可能会问，前面的文章不是说，语句更新会生成 undo log（回滚日志）吗？那么，undo log 在哪呢？\n\n\n\n实际上，图 2 中的三个虚线箭头，就是 undo log；而 V1、V2、V3 并不是物理上真实存在的，而是每次需要的时候根据当前版本和 undo log 计算出来的。比如，需要 V2 的时候，就是通过 V4 执行 U3、U2 算出来。\n\n\n\n明白了多版本和 row trx_id 的概念后，我们再来想一下，InnoDB 是怎么定义那个“100G”的快照的。\n\n\n\n按照可重复读的定义，一个事务启动的时候，能够看到所有已经提交的事务结果。但是之后，这个事务执行期间，其他事务的更新对它不可见。\n\n\n\n因此，InnoDB 代码实现上，一个事务只需要在启动的时候，找到所有已经提交的事务 ID 的最大值，记为 up_limit_id；然后声明说，“如果一个数据版本的 row trx_id 大于 up_limit_id，我就不认，我必须要找到它的上一个版本”。当然，如果一个事务自己更新的数据，它自己还是要认的。\n\n\n\n备注：up_limit_id 来源于源码里面的变量名，我没有想到更好的名字来称呼它。\n\n\n\n你看，有了这个声明后，系统里面随后发生的更新，是不是就跟这个事务看到的内容无关了呢？因为之后的更新，产生的新的数据版本的 row trx_id 都会大于 up_limit_id，而对它来说，这些新的数据版本是不存在的，所以这个事务的快照，就是“静态”的了。\n\n\n\n比如，对于图 2 中的数据来说，如果有一个事务，它的 up_limit_id 是 18，那么当它访问这一行数据时，就会从 V4 通过 U3 算出 V3，在它看来，这一行的值是 11。\n\n\n\n所以你现在知道了，InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。\n\n\n\n接下来，我们继续看一下图 1 中的三个事务，分析下 Q2 语句返回的结果，为什么是 k=1。\n\n\n\n这里，我们不妨做如下假设：\n\n\n\n事务 A 开始前，系统里面已经提交的事务最大 ID 是 99；\n\n事务 A、B、C 的版本号分别是 100、101、102，且当前系统里没有别的事务；\n\n三个事务开始前，(1,1）这一行数据的 row trx_id 是 90。\n\n这样，事务 A、B、C 的 up_limit_id 的值就都是 99。\n\n为了简化分析，我先把其他干扰语句去掉，只画出了跟 Q2 查询逻辑有关的操作。\n\n\n\n图 3 Q2 数据逻辑图\n\n\n\n从图中可以看到，第一个有效更新是事务 C，把数据从 (1,1) 改成了 (1,2)。这时候，这个数据的最新版本的 row trx_id 是 102，而 90 这个版本已经成为了历史版本。\n\n\n\n第二个有效更新是事务 B，把数据从 (1,2) 改成了 (1,3)。这时候，这个数据的最新版本（即 row trx_id）是 101，而 102 又成为了历史版本。\n\n\n\n好，现在事务 A 要来读数据了，它的 up_limit_id 是 99。当然了，读数据都是从当前版本读起的。所以，Q2 的读数据流程是这样的：\n\n\n\n找到 (1,3) 的时候，判断出 row trx_id=101 大于 up_limit_id，要不起；\n\n接着，找到上一个历史版本，一看 row trx_id=102，还是要不起；\n\n再往前找，终于找到了（1,1)，它的 row trx_id=90，是可以承认的数据。\n\n\n\n这样执行下来，事务 A 读到的这个数据，跟它在刚开始启动的时候读到的相同，所以我们称之为一致性读。\n\n\n\n这里你可以顺便再想一个问题。(1,1) 这个历史版本，什么时候可以被删除掉呢？\n\n\n\n答案是，当没有事务再需要它的时候，就可以删掉。\n\n\n\n如果只考虑图 1 中的三个事务的话，事务 B 只需要访问到 (1,3) 就可以，而事务 C 需要访问到的是 (1,2)。也就是说，在事务 A 提交后,（1,1) 这个版本就可以被删掉了。\n\n\n<br/>\n### 更新逻辑\n\n细心的同学可能有疑问了：事务 B 的 update 语句，读的到底是哪个版本？这里，我给你画了一个只看事务 B、C 的状态图。\n\n\n\n图 4 Q1 数据逻辑图\n\n这个状态，就是事务 B 刚要执行更新时的状态。\n\n\n\n事务 B 前面的查询语句，拿到的 k 也是 1。但是，当它要去更新数据的时候，不能再在历史版本上更新了，否则事务 C 的更新就丢失了。因此，事务 B 此时的 set k=k+1 是在（1,2）的基础上进行的操作。\n\n\n\n所以，这里就用到了这样一条规则：更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读（current read）”。\n\n\n\n因此，在更新的时候，当前读取到的数据是 (1,2)，更新后生成了新版本的数据 (1,3)，这个新版本的 row trx_id 是 101。\n\n\n\n所以，在执行事务 B 的 Q1 语句的时候，一看自己的版本号是 101，最新数据的版本号也是 101，可以用，所以 Q1 得到的 k 的值是 3。\n\n\n\n这里我们提到了一个概念，叫作当前读。其实，除了 update 语句外，select 语句如果加锁，也是当前读。\n\n\n\n所以，如果把 Q2 修改一下，加上 lock in share mode 或 for update，也都可以读到版本号是 101 的数据，返回的 k 的值是 3。下面这两个 select 语句，分别加了读锁（S 锁，共享锁）和写锁（X 锁，排他锁）。\n\n\n\nmysql> select k from t where id=1 lock in share mode;\nmysql> select k from t where id=1 for update;\n\n\n现在，我们再回到文章开头的问题：事务的可重复读的能力是怎么实现的？\n\n\n\n可重复读的核心就是一致性读（consistent read）；而事务更新数据的时候，只能用当前读。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。\n\n\n\n而读提交的逻辑和可重复读的逻辑类似，它们最主要的区别是：\n\n\n\n在可重复读隔离级别下，只需要在事务开始的时候找到那个 up_limit_id，之后事务里的其他查询都共用这个 up_limit_id；在读提交隔离级别下，每一个语句执行前都会重新算一次 up_limit_id 的值。\n\n\n\n那么，我们再看一下，在读提交隔离级别下，语句 Q1 和 Q2 返回的 k 的值，分别应该是多少呢？\n\n\n\n下面是读提交时的状态图， 可以看到 Q1、Q2 语句的 up_limit_id 发生了变化。\n\n\n\n\n\n图 5 读提交隔离级别下的事务状态图\n\n这时，事务 A 的 Q2 语句开始执行的时候，由于事务 B（101）、C（102）都已经提交了，所以 Q2 的 up_limit_id 的值就应该是事务 C 的 transaction id，即 102。那么，它在读到（1,3) 的时候，就满足了 up_limt_id(102) ≥row trx_id(101) 的条件，所以返回了 k=3。\n\n\n\n显然地，语句 Q1 的查询结果 k=3。\n\n\n<br/>\n### 小结\n\nInnoDB 的行数据有多个版本，每个数据版本有自己的 row trx_id，每个事务或者语句有自己的 up_limit_id。普通查询语句是一致性读，一致性读会根据 row trx_id 和 up_limit_id 的大小决定数据版本的可见性。\n\n\n\n对于可重复读，查询只承认在事务启动前就已经提交完成的数据；\n\n对于读提交，查询只承认在语句启动前就已经提交完成的数据；\n\n而当前读，总是读取已经提交完成的最新版本。\n\n\n\n你也可以想一下，为什么表结构不支持“可重复读”？这是因为表结构没有对应的行数据，也没有 row trx_id，因此只能遵循当前读的逻辑。\n\n\n\n当然，MySQL 8.0 已经可以把表结构放在 InnoDB 字典里了，也许以后会支持表结构的可重复读。\n\n\n\n又到思考题时间了。我用下面的表结构和初始化语句作为试验环境，事务隔离级别是可重复读。现在，我要把所有“字段 c 和 id 值相等的行”的 c 值清零，但是却发现了一个“诡异”的、改不掉的情况，如下图所示。请你构造出这种情况，并说明其原理。\n\n\n```\nmysql> CREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\ninsert into t(id, c) values(1,1),(2,2),(3,3),(4,4);\n```\n\n\n\n\n\n复现出来以后，请你再思考一下，在实际的业务开发中有没有可能碰到这种情况？你的应用代码会不会掉进这个“坑”里，你又是怎么解决的呢？\n\n\n\n\n\n这样，session A 看到的就是我截图的效果了。\n\n\n\n其实，还有另外一种场景，同学们在留言区都还没有提到。\n\n\n\n这个操作序列跑出来，session A 看的内容也是能够复现我截图的效果的。这个 session B’启动的事务比 A 要早，其实是上期我们描述事务版本的可见性规则时留的彩蛋，因为规则里还有一个“活跃事务的判断”，我是准备留到这里再补充的。\n\n\n\n用新的方式来分析 session B’的更新为什么对 session A 不可见就是：在 session A 视图数组创建的瞬间，session B’是活跃的，属于“版本未提交，不可见”这种情况。\n\n\n","slug":"08-MySQL实战45讲-事务到底是隔离的还是不隔离的","published":1,"updated":"2019-11-02T07:12:18.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y4i000jt6s6bwaw2ant","content":"<p>我在第 3 篇文章和你讲事务隔离级别的时候提到过，如果是可重复读隔离级别，事务 T 启动的时候会创建一个视图 read-view，之后事务 T 执行期间，即使有其他事务修改了数据，这个事务看到的仍然跟在启动时看到的一样。也就是说，一个在可重复读隔离级别下执行的事务，好像与世无争，不受外界影响。</p>\n<p>但是，我在上一篇文章中，和你分享行锁的时候又提到，一个事务如果要更新一行，而刚好有另外一个事务拥有这一行的行锁，它又不能这么超然了，会被锁住，进入等待状态。问题是，既然进入了等待状态，那么等到这个事务自己获取到行锁要更新数据的时候，它读到的值又是什么呢？</p>\n<p>我给你举一个例子吧。下面是一个只有两行的表的初始化语句。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TABLE `t` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `k` int(11) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB;</span><br><span class=\"line\">insert into t(id, k) values(1,1),(2,2);</span><br></pre></td></tr></table></figure>\n<p>图 1 事务 A、B、C 的执行流程</p>\n<p>这里需要特别注意的是，在整个专栏里面，我们的例子中如果没有特别说明，都是默认 autocommit=1 的。</p>\n<p>在这个例子中，事务 C 没有显式地使用 begin/commit，表示这个 update 语句本身就是一个事务，语句完成的时候会自动提交。语句 Q1 在事务 B 中，更新了行之后查询 ; Q2 在只读事务 A 中查询，并且时间顺序上是在 Q1 的后面。</p>\n<p>这时，如果我告诉你语句 Q1 返回的 k 的值是 3，而语句 Q2 返回的 k 的值是 1，你是不是感觉有点晕呢？</p>\n<p>所以，今天这篇文章，我其实就是想和你说明白这个问题，希望借由把这个疑惑解开的过程，能够帮助你对 InnoDB 的事务和锁有更进一步的理解。</p>\n<p>在 MySQL 里，有两个“视图”的概念</p>\n<p>view，它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view，而它的查询方法与表一样。</p>\n<p>InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复度）隔离级别的实现。</p>\n<p>它没有物理结构，用来在事务执行期间定义“我能看到什么数据”。</p>\n<p>在第 3 篇文章《事务隔离：为什么你改了我还看不见？》中，我跟你解释过一遍 MVCC 的实现逻辑。今天为了说明查询和更新的区别，我换一个方式来说明，把 read view 拆开。你可以结合这两篇文章的说明来更深一步地理解 MVCC。</p>\n<p>“快照”在 MVCC 里是怎么工作的？</p>\n<p>在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。</p>\n<p>这时，你会说这看上去不太现实啊。如果一个库有 100G，那么我启动一个事务，MySQL 就要拷贝 100G 的数据出来，这个过程得多慢啊。可是，我平时的事务执行起来很快啊。</p>\n<p>实际上，我们并不需要拷贝出这 100G 的数据，我们先来看看这个快照是怎么实现的。</p>\n<p>InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。</p>\n<p>而每行数据也都是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id。同时，旧的数据版本要保留，并且在新的数据版本中，能够有信息可以直接拿到它。</p>\n<p>也就是说，数据表中的一行记录，其实可能有多个版本 (row), 每个版本有自己的 row trx_id。</p>\n<p>如图 2 所示，就是一个记录被多个事务连续更新后的状态。</p>\n<p>图 2 行状态变更图</p>\n<p>图中虚线框里是同一行数据的 4 个版本，当前最新版本是 V4，k 的值是 22，它是被 transaction id 为 25 的事务更新的，因此它的 row trx_id 也是 25。</p>\n<p>你可能会问，前面的文章不是说，语句更新会生成 undo log（回滚日志）吗？那么，undo log 在哪呢？</p>\n<p>实际上，图 2 中的三个虚线箭头，就是 undo log；而 V1、V2、V3 并不是物理上真实存在的，而是每次需要的时候根据当前版本和 undo log 计算出来的。比如，需要 V2 的时候，就是通过 V4 执行 U3、U2 算出来。</p>\n<p>明白了多版本和 row trx_id 的概念后，我们再来想一下，InnoDB 是怎么定义那个“100G”的快照的。</p>\n<p>按照可重复读的定义，一个事务启动的时候，能够看到所有已经提交的事务结果。但是之后，这个事务执行期间，其他事务的更新对它不可见。</p>\n<p>因此，InnoDB 代码实现上，一个事务只需要在启动的时候，找到所有已经提交的事务 ID 的最大值，记为 up_limit_id；然后声明说，“如果一个数据版本的 row trx_id 大于 up_limit_id，我就不认，我必须要找到它的上一个版本”。当然，如果一个事务自己更新的数据，它自己还是要认的。</p>\n<p>备注：up_limit_id 来源于源码里面的变量名，我没有想到更好的名字来称呼它。</p>\n<p>你看，有了这个声明后，系统里面随后发生的更新，是不是就跟这个事务看到的内容无关了呢？因为之后的更新，产生的新的数据版本的 row trx_id 都会大于 up_limit_id，而对它来说，这些新的数据版本是不存在的，所以这个事务的快照，就是“静态”的了。</p>\n<p>比如，对于图 2 中的数据来说，如果有一个事务，它的 up_limit_id 是 18，那么当它访问这一行数据时，就会从 V4 通过 U3 算出 V3，在它看来，这一行的值是 11。</p>\n<p>所以你现在知道了，InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。</p>\n<p>接下来，我们继续看一下图 1 中的三个事务，分析下 Q2 语句返回的结果，为什么是 k=1。</p>\n<p>这里，我们不妨做如下假设：</p>\n<p>事务 A 开始前，系统里面已经提交的事务最大 ID 是 99；</p>\n<p>事务 A、B、C 的版本号分别是 100、101、102，且当前系统里没有别的事务；</p>\n<p>三个事务开始前，(1,1）这一行数据的 row trx_id 是 90。</p>\n<p>这样，事务 A、B、C 的 up_limit_id 的值就都是 99。</p>\n<p>为了简化分析，我先把其他干扰语句去掉，只画出了跟 Q2 查询逻辑有关的操作。</p>\n<p>图 3 Q2 数据逻辑图</p>\n<p>从图中可以看到，第一个有效更新是事务 C，把数据从 (1,1) 改成了 (1,2)。这时候，这个数据的最新版本的 row trx_id 是 102，而 90 这个版本已经成为了历史版本。</p>\n<p>第二个有效更新是事务 B，把数据从 (1,2) 改成了 (1,3)。这时候，这个数据的最新版本（即 row trx_id）是 101，而 102 又成为了历史版本。</p>\n<p>好，现在事务 A 要来读数据了，它的 up_limit_id 是 99。当然了，读数据都是从当前版本读起的。所以，Q2 的读数据流程是这样的：</p>\n<p>找到 (1,3) 的时候，判断出 row trx_id=101 大于 up_limit_id，要不起；</p>\n<p>接着，找到上一个历史版本，一看 row trx_id=102，还是要不起；</p>\n<p>再往前找，终于找到了（1,1)，它的 row trx_id=90，是可以承认的数据。</p>\n<p>这样执行下来，事务 A 读到的这个数据，跟它在刚开始启动的时候读到的相同，所以我们称之为一致性读。</p>\n<p>这里你可以顺便再想一个问题。(1,1) 这个历史版本，什么时候可以被删除掉呢？</p>\n<p>答案是，当没有事务再需要它的时候，就可以删掉。</p>\n<p>如果只考虑图 1 中的三个事务的话，事务 B 只需要访问到 (1,3) 就可以，而事务 C 需要访问到的是 (1,2)。也就是说，在事务 A 提交后,（1,1) 这个版本就可以被删掉了。</p>\n<p><br></p>\n<h3 id=\"更新逻辑\"><a href=\"#更新逻辑\" class=\"headerlink\" title=\"更新逻辑\"></a>更新逻辑</h3><p>细心的同学可能有疑问了：事务 B 的 update 语句，读的到底是哪个版本？这里，我给你画了一个只看事务 B、C 的状态图。</p>\n<p>图 4 Q1 数据逻辑图</p>\n<p>这个状态，就是事务 B 刚要执行更新时的状态。</p>\n<p>事务 B 前面的查询语句，拿到的 k 也是 1。但是，当它要去更新数据的时候，不能再在历史版本上更新了，否则事务 C 的更新就丢失了。因此，事务 B 此时的 set k=k+1 是在（1,2）的基础上进行的操作。</p>\n<p>所以，这里就用到了这样一条规则：更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读（current read）”。</p>\n<p>因此，在更新的时候，当前读取到的数据是 (1,2)，更新后生成了新版本的数据 (1,3)，这个新版本的 row trx_id 是 101。</p>\n<p>所以，在执行事务 B 的 Q1 语句的时候，一看自己的版本号是 101，最新数据的版本号也是 101，可以用，所以 Q1 得到的 k 的值是 3。</p>\n<p>这里我们提到了一个概念，叫作当前读。其实，除了 update 语句外，select 语句如果加锁，也是当前读。</p>\n<p>所以，如果把 Q2 修改一下，加上 lock in share mode 或 for update，也都可以读到版本号是 101 的数据，返回的 k 的值是 3。下面这两个 select 语句，分别加了读锁（S 锁，共享锁）和写锁（X 锁，排他锁）。</p>\n<p>mysql&gt; select k from t where id=1 lock in share mode;\nmysql&gt; select k from t where id=1 for update;</p>\n<p>现在，我们再回到文章开头的问题：事务的可重复读的能力是怎么实现的？</p>\n<p>可重复读的核心就是一致性读（consistent read）；而事务更新数据的时候，只能用当前读。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。</p>\n<p>而读提交的逻辑和可重复读的逻辑类似，它们最主要的区别是：</p>\n<p>在可重复读隔离级别下，只需要在事务开始的时候找到那个 up_limit_id，之后事务里的其他查询都共用这个 up_limit_id；在读提交隔离级别下，每一个语句执行前都会重新算一次 up_limit_id 的值。</p>\n<p>那么，我们再看一下，在读提交隔离级别下，语句 Q1 和 Q2 返回的 k 的值，分别应该是多少呢？</p>\n<p>下面是读提交时的状态图， 可以看到 Q1、Q2 语句的 up_limit_id 发生了变化。</p>\n<p>图 5 读提交隔离级别下的事务状态图</p>\n<p>这时，事务 A 的 Q2 语句开始执行的时候，由于事务 B（101）、C（102）都已经提交了，所以 Q2 的 up_limit_id 的值就应该是事务 C 的 transaction id，即 102。那么，它在读到（1,3) 的时候，就满足了 up_limt_id(102) ≥row trx_id(101) 的条件，所以返回了 k=3。</p>\n<p>显然地，语句 Q1 的查询结果 k=3。</p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>InnoDB 的行数据有多个版本，每个数据版本有自己的 row trx_id，每个事务或者语句有自己的 up_limit_id。普通查询语句是一致性读，一致性读会根据 row trx_id 和 up_limit_id 的大小决定数据版本的可见性。</p>\n<p>对于可重复读，查询只承认在事务启动前就已经提交完成的数据；</p>\n<p>对于读提交，查询只承认在语句启动前就已经提交完成的数据；</p>\n<p>而当前读，总是读取已经提交完成的最新版本。</p>\n<p>你也可以想一下，为什么表结构不支持“可重复读”？这是因为表结构没有对应的行数据，也没有 row trx_id，因此只能遵循当前读的逻辑。</p>\n<p>当然，MySQL 8.0 已经可以把表结构放在 InnoDB 字典里了，也许以后会支持表结构的可重复读。</p>\n<p>又到思考题时间了。我用下面的表结构和初始化语句作为试验环境，事务隔离级别是可重复读。现在，我要把所有“字段 c 和 id 值相等的行”的 c 值清零，但是却发现了一个“诡异”的、改不掉的情况，如下图所示。请你构造出这种情况，并说明其原理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TABLE `t` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `c` int(11) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB;</span><br><span class=\"line\">insert into t(id, c) values(1,1),(2,2),(3,3),(4,4);</span><br></pre></td></tr></table></figure>\n<p>复现出来以后，请你再思考一下，在实际的业务开发中有没有可能碰到这种情况？你的应用代码会不会掉进这个“坑”里，你又是怎么解决的呢？</p>\n<p>这样，session A 看到的就是我截图的效果了。</p>\n<p>其实，还有另外一种场景，同学们在留言区都还没有提到。</p>\n<p>这个操作序列跑出来，session A 看的内容也是能够复现我截图的效果的。这个 session B’启动的事务比 A 要早，其实是上期我们描述事务版本的可见性规则时留的彩蛋，因为规则里还有一个“活跃事务的判断”，我是准备留到这里再补充的。</p>\n<p>用新的方式来分析 session B’的更新为什么对 session A 不可见就是：在 session A 视图数组创建的瞬间，session B’是活跃的，属于“版本未提交，不可见”这种情况。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我在第 3 篇文章和你讲事务隔离级别的时候提到过，如果是可重复读隔离级别，事务 T 启动的时候会创建一个视图 read-view，之后事务 T 执行期间，即使有其他事务修改了数据，这个事务看到的仍然跟在启动时看到的一样。也就是说，一个在可重复读隔离级别下执行的事务，好像与世无争，不受外界影响。</p>\n<p>但是，我在上一篇文章中，和你分享行锁的时候又提到，一个事务如果要更新一行，而刚好有另外一个事务拥有这一行的行锁，它又不能这么超然了，会被锁住，进入等待状态。问题是，既然进入了等待状态，那么等到这个事务自己获取到行锁要更新数据的时候，它读到的值又是什么呢？</p>\n<p>我给你举一个例子吧。下面是一个只有两行的表的初始化语句。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TABLE `t` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `k` int(11) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB;</span><br><span class=\"line\">insert into t(id, k) values(1,1),(2,2);</span><br></pre></td></tr></table></figure>\n<p>图 1 事务 A、B、C 的执行流程</p>\n<p>这里需要特别注意的是，在整个专栏里面，我们的例子中如果没有特别说明，都是默认 autocommit=1 的。</p>\n<p>在这个例子中，事务 C 没有显式地使用 begin/commit，表示这个 update 语句本身就是一个事务，语句完成的时候会自动提交。语句 Q1 在事务 B 中，更新了行之后查询 ; Q2 在只读事务 A 中查询，并且时间顺序上是在 Q1 的后面。</p>\n<p>这时，如果我告诉你语句 Q1 返回的 k 的值是 3，而语句 Q2 返回的 k 的值是 1，你是不是感觉有点晕呢？</p>\n<p>所以，今天这篇文章，我其实就是想和你说明白这个问题，希望借由把这个疑惑解开的过程，能够帮助你对 InnoDB 的事务和锁有更进一步的理解。</p>\n<p>在 MySQL 里，有两个“视图”的概念</p>\n<p>view，它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view，而它的查询方法与表一样。</p>\n<p>InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复度）隔离级别的实现。</p>\n<p>它没有物理结构，用来在事务执行期间定义“我能看到什么数据”。</p>\n<p>在第 3 篇文章《事务隔离：为什么你改了我还看不见？》中，我跟你解释过一遍 MVCC 的实现逻辑。今天为了说明查询和更新的区别，我换一个方式来说明，把 read view 拆开。你可以结合这两篇文章的说明来更深一步地理解 MVCC。</p>\n<p>“快照”在 MVCC 里是怎么工作的？</p>\n<p>在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。</p>\n<p>这时，你会说这看上去不太现实啊。如果一个库有 100G，那么我启动一个事务，MySQL 就要拷贝 100G 的数据出来，这个过程得多慢啊。可是，我平时的事务执行起来很快啊。</p>\n<p>实际上，我们并不需要拷贝出这 100G 的数据，我们先来看看这个快照是怎么实现的。</p>\n<p>InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。</p>\n<p>而每行数据也都是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id。同时，旧的数据版本要保留，并且在新的数据版本中，能够有信息可以直接拿到它。</p>\n<p>也就是说，数据表中的一行记录，其实可能有多个版本 (row), 每个版本有自己的 row trx_id。</p>\n<p>如图 2 所示，就是一个记录被多个事务连续更新后的状态。</p>\n<p>图 2 行状态变更图</p>\n<p>图中虚线框里是同一行数据的 4 个版本，当前最新版本是 V4，k 的值是 22，它是被 transaction id 为 25 的事务更新的，因此它的 row trx_id 也是 25。</p>\n<p>你可能会问，前面的文章不是说，语句更新会生成 undo log（回滚日志）吗？那么，undo log 在哪呢？</p>\n<p>实际上，图 2 中的三个虚线箭头，就是 undo log；而 V1、V2、V3 并不是物理上真实存在的，而是每次需要的时候根据当前版本和 undo log 计算出来的。比如，需要 V2 的时候，就是通过 V4 执行 U3、U2 算出来。</p>\n<p>明白了多版本和 row trx_id 的概念后，我们再来想一下，InnoDB 是怎么定义那个“100G”的快照的。</p>\n<p>按照可重复读的定义，一个事务启动的时候，能够看到所有已经提交的事务结果。但是之后，这个事务执行期间，其他事务的更新对它不可见。</p>\n<p>因此，InnoDB 代码实现上，一个事务只需要在启动的时候，找到所有已经提交的事务 ID 的最大值，记为 up_limit_id；然后声明说，“如果一个数据版本的 row trx_id 大于 up_limit_id，我就不认，我必须要找到它的上一个版本”。当然，如果一个事务自己更新的数据，它自己还是要认的。</p>\n<p>备注：up_limit_id 来源于源码里面的变量名，我没有想到更好的名字来称呼它。</p>\n<p>你看，有了这个声明后，系统里面随后发生的更新，是不是就跟这个事务看到的内容无关了呢？因为之后的更新，产生的新的数据版本的 row trx_id 都会大于 up_limit_id，而对它来说，这些新的数据版本是不存在的，所以这个事务的快照，就是“静态”的了。</p>\n<p>比如，对于图 2 中的数据来说，如果有一个事务，它的 up_limit_id 是 18，那么当它访问这一行数据时，就会从 V4 通过 U3 算出 V3，在它看来，这一行的值是 11。</p>\n<p>所以你现在知道了，InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。</p>\n<p>接下来，我们继续看一下图 1 中的三个事务，分析下 Q2 语句返回的结果，为什么是 k=1。</p>\n<p>这里，我们不妨做如下假设：</p>\n<p>事务 A 开始前，系统里面已经提交的事务最大 ID 是 99；</p>\n<p>事务 A、B、C 的版本号分别是 100、101、102，且当前系统里没有别的事务；</p>\n<p>三个事务开始前，(1,1）这一行数据的 row trx_id 是 90。</p>\n<p>这样，事务 A、B、C 的 up_limit_id 的值就都是 99。</p>\n<p>为了简化分析，我先把其他干扰语句去掉，只画出了跟 Q2 查询逻辑有关的操作。</p>\n<p>图 3 Q2 数据逻辑图</p>\n<p>从图中可以看到，第一个有效更新是事务 C，把数据从 (1,1) 改成了 (1,2)。这时候，这个数据的最新版本的 row trx_id 是 102，而 90 这个版本已经成为了历史版本。</p>\n<p>第二个有效更新是事务 B，把数据从 (1,2) 改成了 (1,3)。这时候，这个数据的最新版本（即 row trx_id）是 101，而 102 又成为了历史版本。</p>\n<p>好，现在事务 A 要来读数据了，它的 up_limit_id 是 99。当然了，读数据都是从当前版本读起的。所以，Q2 的读数据流程是这样的：</p>\n<p>找到 (1,3) 的时候，判断出 row trx_id=101 大于 up_limit_id，要不起；</p>\n<p>接着，找到上一个历史版本，一看 row trx_id=102，还是要不起；</p>\n<p>再往前找，终于找到了（1,1)，它的 row trx_id=90，是可以承认的数据。</p>\n<p>这样执行下来，事务 A 读到的这个数据，跟它在刚开始启动的时候读到的相同，所以我们称之为一致性读。</p>\n<p>这里你可以顺便再想一个问题。(1,1) 这个历史版本，什么时候可以被删除掉呢？</p>\n<p>答案是，当没有事务再需要它的时候，就可以删掉。</p>\n<p>如果只考虑图 1 中的三个事务的话，事务 B 只需要访问到 (1,3) 就可以，而事务 C 需要访问到的是 (1,2)。也就是说，在事务 A 提交后,（1,1) 这个版本就可以被删掉了。</p>\n<p><br></p>\n<h3 id=\"更新逻辑\"><a href=\"#更新逻辑\" class=\"headerlink\" title=\"更新逻辑\"></a>更新逻辑</h3><p>细心的同学可能有疑问了：事务 B 的 update 语句，读的到底是哪个版本？这里，我给你画了一个只看事务 B、C 的状态图。</p>\n<p>图 4 Q1 数据逻辑图</p>\n<p>这个状态，就是事务 B 刚要执行更新时的状态。</p>\n<p>事务 B 前面的查询语句，拿到的 k 也是 1。但是，当它要去更新数据的时候，不能再在历史版本上更新了，否则事务 C 的更新就丢失了。因此，事务 B 此时的 set k=k+1 是在（1,2）的基础上进行的操作。</p>\n<p>所以，这里就用到了这样一条规则：更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读（current read）”。</p>\n<p>因此，在更新的时候，当前读取到的数据是 (1,2)，更新后生成了新版本的数据 (1,3)，这个新版本的 row trx_id 是 101。</p>\n<p>所以，在执行事务 B 的 Q1 语句的时候，一看自己的版本号是 101，最新数据的版本号也是 101，可以用，所以 Q1 得到的 k 的值是 3。</p>\n<p>这里我们提到了一个概念，叫作当前读。其实，除了 update 语句外，select 语句如果加锁，也是当前读。</p>\n<p>所以，如果把 Q2 修改一下，加上 lock in share mode 或 for update，也都可以读到版本号是 101 的数据，返回的 k 的值是 3。下面这两个 select 语句，分别加了读锁（S 锁，共享锁）和写锁（X 锁，排他锁）。</p>\n<p>mysql&gt; select k from t where id=1 lock in share mode;\nmysql&gt; select k from t where id=1 for update;</p>\n<p>现在，我们再回到文章开头的问题：事务的可重复读的能力是怎么实现的？</p>\n<p>可重复读的核心就是一致性读（consistent read）；而事务更新数据的时候，只能用当前读。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。</p>\n<p>而读提交的逻辑和可重复读的逻辑类似，它们最主要的区别是：</p>\n<p>在可重复读隔离级别下，只需要在事务开始的时候找到那个 up_limit_id，之后事务里的其他查询都共用这个 up_limit_id；在读提交隔离级别下，每一个语句执行前都会重新算一次 up_limit_id 的值。</p>\n<p>那么，我们再看一下，在读提交隔离级别下，语句 Q1 和 Q2 返回的 k 的值，分别应该是多少呢？</p>\n<p>下面是读提交时的状态图， 可以看到 Q1、Q2 语句的 up_limit_id 发生了变化。</p>\n<p>图 5 读提交隔离级别下的事务状态图</p>\n<p>这时，事务 A 的 Q2 语句开始执行的时候，由于事务 B（101）、C（102）都已经提交了，所以 Q2 的 up_limit_id 的值就应该是事务 C 的 transaction id，即 102。那么，它在读到（1,3) 的时候，就满足了 up_limt_id(102) ≥row trx_id(101) 的条件，所以返回了 k=3。</p>\n<p>显然地，语句 Q1 的查询结果 k=3。</p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>InnoDB 的行数据有多个版本，每个数据版本有自己的 row trx_id，每个事务或者语句有自己的 up_limit_id。普通查询语句是一致性读，一致性读会根据 row trx_id 和 up_limit_id 的大小决定数据版本的可见性。</p>\n<p>对于可重复读，查询只承认在事务启动前就已经提交完成的数据；</p>\n<p>对于读提交，查询只承认在语句启动前就已经提交完成的数据；</p>\n<p>而当前读，总是读取已经提交完成的最新版本。</p>\n<p>你也可以想一下，为什么表结构不支持“可重复读”？这是因为表结构没有对应的行数据，也没有 row trx_id，因此只能遵循当前读的逻辑。</p>\n<p>当然，MySQL 8.0 已经可以把表结构放在 InnoDB 字典里了，也许以后会支持表结构的可重复读。</p>\n<p>又到思考题时间了。我用下面的表结构和初始化语句作为试验环境，事务隔离级别是可重复读。现在，我要把所有“字段 c 和 id 值相等的行”的 c 值清零，但是却发现了一个“诡异”的、改不掉的情况，如下图所示。请你构造出这种情况，并说明其原理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TABLE `t` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `c` int(11) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB;</span><br><span class=\"line\">insert into t(id, c) values(1,1),(2,2),(3,3),(4,4);</span><br></pre></td></tr></table></figure>\n<p>复现出来以后，请你再思考一下，在实际的业务开发中有没有可能碰到这种情况？你的应用代码会不会掉进这个“坑”里，你又是怎么解决的呢？</p>\n<p>这样，session A 看到的就是我截图的效果了。</p>\n<p>其实，还有另外一种场景，同学们在留言区都还没有提到。</p>\n<p>这个操作序列跑出来，session A 看的内容也是能够复现我截图的效果的。这个 session B’启动的事务比 A 要早，其实是上期我们描述事务版本的可见性规则时留的彩蛋，因为规则里还有一个“活跃事务的判断”，我是准备留到这里再补充的。</p>\n<p>用新的方式来分析 session B’的更新为什么对 session A 不可见就是：在 session A 视图数组创建的瞬间，session B’是活跃的，属于“版本未提交，不可见”这种情况。</p>\n"},{"title":"09 | 普通索引和唯一索引，应该怎么选择","date":"2019-06-02T16:00:00.000Z","_content":"\n在前面的基础篇文章中，我给你介绍过索引的基本概念，相信你已经了解了唯一索引和普通索引的区别。今天我们就继续来谈谈，在不同的业务场景下，应该选择普通索引，还是唯一索引？\n\n\n\n假设你在维护一个市民系统，每个人都有一个唯一的身份证号，而且业务代码已经保证了不会写入两个重复的身份证号。如果市民系统需要按照身份证号查姓名，就会执行类似这样的 SQL 语句：\n```\nselect name from CUser where id_card = 'xxxxxxxyyyyyyzzzzz';\n```\n所以，你一定会考虑在 `id_card` 字段上建索引。\n\n由于身份证号字段比较大，我不建议你把身份证号当做主键，那么现在你有两个选择，要么给 id_card 字段创建唯一索引，要么创建一个普通索引。如果业务代码已经保证了不会写入重复的身份证号，那么这两个选择逻辑上都是正确的。\n\n\n现在我要问你的是，从性能的角度考虑，你选择唯一索引还是普通索引呢？选择的依据是什么呢？\n\n\n\n简单起见，我们还是用第 4 篇文章《深入浅出索引（上）》中的例子来说明，假设字段 k 上的值都不重复。\n\n\n![图 1 InnoDB 的索引组织结构]()\n\n接下来，我们就从这两种索引对查询语句和更新语句的性能影响来进行分析。\n\n\n<br/>\n### 查询过程\n假设，执行查询的语句是 `select id from T where k=5`。这个查询语句在索引树上查找的过程，先是通过 B+ 树从树根开始，按层搜索到叶子节点，也就是图中右下角的这个数据页，然后可以认为数据页内部通过二分法来定位记录。\n\n- 对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一个不满足 k=5 条件的记录。\n- 对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。\n\n那么，这个不同带来的性能差距会有多少呢？答案是，微乎其微。\n\n\n你知道的，InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中，每个数据页的大小默认是 16KB。\n\n\n因为引擎是按页读写的，所以说，当找到 k=5 的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。\n\n\n\n当然，如果 k=5 这个记录刚好是这个数据页的最后一个记录，那么要取下一个记录，必须读取下一个数据页，这个操作会稍微复杂一些。\n\n\n\n但是，我们之前计算过，对于整型字段，一个数据页可以放近千个 key，因此出现这种情况的概率会很低。所以，我们计算平均性能差异时，仍可以认为这个操作成本对于现在的 CPU 来说可以忽略不计。\n\n\n<br/>\n### 更新过程\n\n为了说明普通索引和唯一索引对更新语句性能的影响这个问题，我需要先跟你介绍一下 change buffer。\n\n\n当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。\n\n\n\n需要说明的是，虽然名字叫作 change buffer，实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。\n\n\n将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 purge。除了访问这个数据页会触发 purge 外，系统有后台线程会定期 purge。在数据库正常关闭（shutdown）的过程中，也会执行 purge 操作。\n\n\n显然，如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式还能够避免占用内存，提高内存利用率。\n\n那么，什么条件下可以使用 change buffer 呢？\n\n\n对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。比如，要插入 (4,400) 这个记录，就要先判断现在表中是否已经存在 k=4 的记录，而这必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用 change buffer 了。\n\n\n因此，唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用。\n\n\nchange buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。\n```\n+-------------------------------+-------+\n| Variable_name                 | Value |\n+-------------------------------+-------+\n| innodb_change_buffer_max_size | 25    |\n+-------------------------------+-------+\n```\n\n现在，你已经理解了 change buffer 的机制，那么我们再一起来看看如果要在这张表中插入一个新记录 (4,400) 的话，InnoDB 的处理流程是怎样的。\n\n\n\n第一种情况是，这个记录要更新的目标页在内存中。这时，InnoDB 的处理流程如下：\n\n\n对于唯一索引来说，找到 3 和 5 之间的位置，判断到没有冲突，插入这个值，语句执行结束；\n\n对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。\n\n\n\n这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小的 CPU 时间。但，这不是我们关注的重点。\n\n\n第二种情况是，这个记录要更新的目标页不在内存中。这时，InnoDB 的处理流程如下：\n\n\n\n对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；\n\n对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。\n\n\n\n将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。\n\n\n\n之前我就碰到过一件事儿，有个 DBA 的同学跟我反馈说，他负责的某个业务的库内存命中率突然从 99% 降低到了 75%，整个系统处于阻塞状态，更新语句全部堵住。而探究其原因后，我发现这个业务有大量插入数据的操作，而他在前一天把其中的某个普通索引改成了唯一索引。\n\n\n\nchange buffer 的使用场景\n\n\n通过上面的分析，你已经清楚了使用 change buffer 对更新过程的加速作用，也清楚了 change buffer 只限于用在普通索引的场景下，而不适用于唯一索引。那么，现在有一个问题就是：普通索引的所有场景，使用 change buffer 都可以起到加速作用吗？\n\n\n\n因为 purge 的时候是真正进行数据更新的时刻，而 change buffer 的主要目的就是将记录的变更动作缓存下来，所以在一个数据页做 purge 之前，change buffer 记录的变更越多（也就是这个页面上要更新的次数越多），收益就越大。\n\n\n\n因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是账单类、日志类的系统。\n\n\n\n反过来，假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在 change buffer，但之后由于马上要访问这个数据页，会立即触发 purge 过程。这样随机访问 IO 的次数不会减少，反而增加了 change buffer 的维护代价。所以，对于这种业务模式来说，change buffer 反而起到了副作用。\n\n\n\n索引选择和实践\n\n\n回到我们文章开头的问题，普通索引和唯一索引应该怎么选择。\n\n\n\n其实，这两类索引在查询能力上是没差别的，主要考虑的是对更新性能的影响。所以，我建议你尽量选择普通索引。\n\n如果所有的更新后面，都马上伴随着对这个记录的查询，那么你应该关闭 change buffer。而在其他情况下，change buffer 都能提升更新性能。\n\n\n\n在实际使用中，你会发现，普通索引和 change buffer 的配合使用，对于数据量大的表的更新优化还是很明显的。\n\n\n\n特别地，在使用机械硬盘时，change buffer 这个机制的收效是非常显著的。所以，当你有一个类似“历史数据”的库，并且出于成本考虑用的是机械硬盘时，那你应该特别关注这些表里的索引，尽量使用普通索引，然后把 change buffer 尽量开大，以确保这个“历史数据”表的数据写入速度。\n\n\n\nchange buffer 和 redo log\n\n\n理解了 change buffer 的原理，你可能会联想到我在前面文章中和你介绍过的 redo log 和 WAL。\n\n\n\n在前面文章的评论中，我发现有同学混淆了 redo log 和 change buffer。WAL 提升性能的核心机制，也的确是尽量减少随机读写，这两个概念确实容易混淆。所以，这里我把它们放到了同一个流程里来说明，便于你区分这两个概念。\n\n\n\n现在，我们要在表上执行这个插入语句：\n\n\n\nmysql> insert into t(id,k) values(id1,k1),(id2,k2);\n\n\n\n这里，我们假设当前 k 索引树的状态，查找到位置后，k1 所在的数据页在内存 (InnoDB buffer pool) 中，k2 所在的数据页不在内存中。如图 2 所示是带 change buffer 的更新状态图。\n\n\n\n图 2 带 change buffer 的更新过程\n\n\n\n分析这条更新语句，你会发现它涉及了四个部分：内存、redo log（ib_log_fileX）、 数据表空间（t.ibd）、系统表空间（ibdata1）。\n\n\n\n这条更新语句做了如下的操作（按照图中的数字顺序）：\n\n\n\nPage 1 在内存中，直接更新内存；\n\nPage 2 没有在内存中，就在内存的 change buffer 区域，记录下“我要往 Page 2 插入一行”这个信息\n\n将上述两个动作记入 redo log 中（图中 3 和 4）。\n\n\n\n做完上面这些，事务就可以完成了。所以，你会看到，执行这条更新语句的成本很低，就是写了两处内存，然后写了一处磁盘（两次操作合在一起写了一次磁盘），而且还是顺序写的。\n\n\n\n同时，图中的两个虚线箭头，是后台操作，不影响更新的响应时间。\n\n\n\n那在这之后的读请求，要怎么处理呢？\n\n\n\n比如，我们现在要执行 select * from t where k in (k1, k2)。这里，我画了这两个读请求的流程图。\n\n\n\n如果读语句发生在更新语句后不久，内存中的数据都还在，那么此时的这两个读操作就与系统表空间（ibdata1）和 redo log（ib_log_fileX）无关了。所以，我在图中就没画出这两部分。\n\n\n\n图 3 带 change buffer 的读过程\n\n从图中可以看到：\n\n\n\n读 Page 1 的时候，直接从内存返回。有几位同学在前面文章的评论中问到，WAL 之后如果读数据，是不是一定要读盘，是不是一定要从 redo log 里面把数据更新以后才可以返回？其实是不用的。你可以看一下图 3 的这个状态，虽然磁盘上还是之前的数据，但是这里直接从内存返回结果，结果是正确的。\n\n要读 Page 2 的时候，需要把 Page 2 从磁盘读入内存中，然后应用 change buffer 里面的操作日志，生成一个正确的版本并返回结果。\n\n\n\n可以看到，直到需要读 Page 2 的时候，这个数据页才会被读入内存。\n\n\n\n所以，如果要简单地对比这两个机制在提升更新性能上的收益的话，redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。\n\n\n<br/>\n### 小结\n今天，我从普通索引和唯一索引的选择开始，和你分享了数据的查询和更新过程，然后说明了 change buffer 的机制以及应用场景，最后讲到了索引选择的实践。\n\n由于唯一索引用不上 change buffer 的优化机制，因此如果业务可以接受，从性能角度出发我建议你优先考虑非唯一索引。\n\n\n最后，又到了思考题时间。\n\n\n通过图 2 你可以看到，change buffer 一开始是写内存的，那么如果这个时候机器掉电重启，会不会导致 change buffer 丢失呢？change buffer 丢失可不是小事儿，再从磁盘读入数据可就没有了 purge 过程，就等于是数据丢失了。会不会出现这种情况呢？\n\n\n这个问题的答案是不会丢失，留言区的很多同学都回答对了。虽然是只更新内存，但是在事务提交的时候，我们把 change buffer 的操作也记录到 redo log 里了，所以崩溃恢复的时候，change buffer 也能找回来。 \n在评论区有同学问到，merge 的过程是否会把数据直接写回磁盘，这是个好问题。这里，我再为你分析一下。\n\nmerge 的执行流程是这样的：\n\n从磁盘读入数据页到内存（老版本的数据页）；\n\n从 change buffer 里找出这个数据页的 change buffer 记录 (可能有多个），依次应用，得到新版数据页；\n\n写 redo log。这个 redo log 包含了数据的变更和 change buffer 的变更。\n\n到这里 merge 过程就结束了。这时候，数据页和内存中 change buffer 对应的磁盘位置都还没有修改，属于脏页，之后各自刷回自己的物理数据，就是另外一个过程了。","source":"_posts/09-MySQL实战45讲-普通索引和唯一索引，应该怎么选择.md","raw":"---\ntitle: 09 | 普通索引和唯一索引，应该怎么选择\ndate: 2019-06-03\ncategories: \n    - MySQL\ntags:\n    - MySQL\n    - MySQL实战45讲\n---\n\n在前面的基础篇文章中，我给你介绍过索引的基本概念，相信你已经了解了唯一索引和普通索引的区别。今天我们就继续来谈谈，在不同的业务场景下，应该选择普通索引，还是唯一索引？\n\n\n\n假设你在维护一个市民系统，每个人都有一个唯一的身份证号，而且业务代码已经保证了不会写入两个重复的身份证号。如果市民系统需要按照身份证号查姓名，就会执行类似这样的 SQL 语句：\n```\nselect name from CUser where id_card = 'xxxxxxxyyyyyyzzzzz';\n```\n所以，你一定会考虑在 `id_card` 字段上建索引。\n\n由于身份证号字段比较大，我不建议你把身份证号当做主键，那么现在你有两个选择，要么给 id_card 字段创建唯一索引，要么创建一个普通索引。如果业务代码已经保证了不会写入重复的身份证号，那么这两个选择逻辑上都是正确的。\n\n\n现在我要问你的是，从性能的角度考虑，你选择唯一索引还是普通索引呢？选择的依据是什么呢？\n\n\n\n简单起见，我们还是用第 4 篇文章《深入浅出索引（上）》中的例子来说明，假设字段 k 上的值都不重复。\n\n\n![图 1 InnoDB 的索引组织结构]()\n\n接下来，我们就从这两种索引对查询语句和更新语句的性能影响来进行分析。\n\n\n<br/>\n### 查询过程\n假设，执行查询的语句是 `select id from T where k=5`。这个查询语句在索引树上查找的过程，先是通过 B+ 树从树根开始，按层搜索到叶子节点，也就是图中右下角的这个数据页，然后可以认为数据页内部通过二分法来定位记录。\n\n- 对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一个不满足 k=5 条件的记录。\n- 对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。\n\n那么，这个不同带来的性能差距会有多少呢？答案是，微乎其微。\n\n\n你知道的，InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中，每个数据页的大小默认是 16KB。\n\n\n因为引擎是按页读写的，所以说，当找到 k=5 的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。\n\n\n\n当然，如果 k=5 这个记录刚好是这个数据页的最后一个记录，那么要取下一个记录，必须读取下一个数据页，这个操作会稍微复杂一些。\n\n\n\n但是，我们之前计算过，对于整型字段，一个数据页可以放近千个 key，因此出现这种情况的概率会很低。所以，我们计算平均性能差异时，仍可以认为这个操作成本对于现在的 CPU 来说可以忽略不计。\n\n\n<br/>\n### 更新过程\n\n为了说明普通索引和唯一索引对更新语句性能的影响这个问题，我需要先跟你介绍一下 change buffer。\n\n\n当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。\n\n\n\n需要说明的是，虽然名字叫作 change buffer，实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。\n\n\n将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 purge。除了访问这个数据页会触发 purge 外，系统有后台线程会定期 purge。在数据库正常关闭（shutdown）的过程中，也会执行 purge 操作。\n\n\n显然，如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式还能够避免占用内存，提高内存利用率。\n\n那么，什么条件下可以使用 change buffer 呢？\n\n\n对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。比如，要插入 (4,400) 这个记录，就要先判断现在表中是否已经存在 k=4 的记录，而这必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用 change buffer 了。\n\n\n因此，唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用。\n\n\nchange buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。\n```\n+-------------------------------+-------+\n| Variable_name                 | Value |\n+-------------------------------+-------+\n| innodb_change_buffer_max_size | 25    |\n+-------------------------------+-------+\n```\n\n现在，你已经理解了 change buffer 的机制，那么我们再一起来看看如果要在这张表中插入一个新记录 (4,400) 的话，InnoDB 的处理流程是怎样的。\n\n\n\n第一种情况是，这个记录要更新的目标页在内存中。这时，InnoDB 的处理流程如下：\n\n\n对于唯一索引来说，找到 3 和 5 之间的位置，判断到没有冲突，插入这个值，语句执行结束；\n\n对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。\n\n\n\n这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小的 CPU 时间。但，这不是我们关注的重点。\n\n\n第二种情况是，这个记录要更新的目标页不在内存中。这时，InnoDB 的处理流程如下：\n\n\n\n对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；\n\n对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。\n\n\n\n将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。\n\n\n\n之前我就碰到过一件事儿，有个 DBA 的同学跟我反馈说，他负责的某个业务的库内存命中率突然从 99% 降低到了 75%，整个系统处于阻塞状态，更新语句全部堵住。而探究其原因后，我发现这个业务有大量插入数据的操作，而他在前一天把其中的某个普通索引改成了唯一索引。\n\n\n\nchange buffer 的使用场景\n\n\n通过上面的分析，你已经清楚了使用 change buffer 对更新过程的加速作用，也清楚了 change buffer 只限于用在普通索引的场景下，而不适用于唯一索引。那么，现在有一个问题就是：普通索引的所有场景，使用 change buffer 都可以起到加速作用吗？\n\n\n\n因为 purge 的时候是真正进行数据更新的时刻，而 change buffer 的主要目的就是将记录的变更动作缓存下来，所以在一个数据页做 purge 之前，change buffer 记录的变更越多（也就是这个页面上要更新的次数越多），收益就越大。\n\n\n\n因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是账单类、日志类的系统。\n\n\n\n反过来，假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在 change buffer，但之后由于马上要访问这个数据页，会立即触发 purge 过程。这样随机访问 IO 的次数不会减少，反而增加了 change buffer 的维护代价。所以，对于这种业务模式来说，change buffer 反而起到了副作用。\n\n\n\n索引选择和实践\n\n\n回到我们文章开头的问题，普通索引和唯一索引应该怎么选择。\n\n\n\n其实，这两类索引在查询能力上是没差别的，主要考虑的是对更新性能的影响。所以，我建议你尽量选择普通索引。\n\n如果所有的更新后面，都马上伴随着对这个记录的查询，那么你应该关闭 change buffer。而在其他情况下，change buffer 都能提升更新性能。\n\n\n\n在实际使用中，你会发现，普通索引和 change buffer 的配合使用，对于数据量大的表的更新优化还是很明显的。\n\n\n\n特别地，在使用机械硬盘时，change buffer 这个机制的收效是非常显著的。所以，当你有一个类似“历史数据”的库，并且出于成本考虑用的是机械硬盘时，那你应该特别关注这些表里的索引，尽量使用普通索引，然后把 change buffer 尽量开大，以确保这个“历史数据”表的数据写入速度。\n\n\n\nchange buffer 和 redo log\n\n\n理解了 change buffer 的原理，你可能会联想到我在前面文章中和你介绍过的 redo log 和 WAL。\n\n\n\n在前面文章的评论中，我发现有同学混淆了 redo log 和 change buffer。WAL 提升性能的核心机制，也的确是尽量减少随机读写，这两个概念确实容易混淆。所以，这里我把它们放到了同一个流程里来说明，便于你区分这两个概念。\n\n\n\n现在，我们要在表上执行这个插入语句：\n\n\n\nmysql> insert into t(id,k) values(id1,k1),(id2,k2);\n\n\n\n这里，我们假设当前 k 索引树的状态，查找到位置后，k1 所在的数据页在内存 (InnoDB buffer pool) 中，k2 所在的数据页不在内存中。如图 2 所示是带 change buffer 的更新状态图。\n\n\n\n图 2 带 change buffer 的更新过程\n\n\n\n分析这条更新语句，你会发现它涉及了四个部分：内存、redo log（ib_log_fileX）、 数据表空间（t.ibd）、系统表空间（ibdata1）。\n\n\n\n这条更新语句做了如下的操作（按照图中的数字顺序）：\n\n\n\nPage 1 在内存中，直接更新内存；\n\nPage 2 没有在内存中，就在内存的 change buffer 区域，记录下“我要往 Page 2 插入一行”这个信息\n\n将上述两个动作记入 redo log 中（图中 3 和 4）。\n\n\n\n做完上面这些，事务就可以完成了。所以，你会看到，执行这条更新语句的成本很低，就是写了两处内存，然后写了一处磁盘（两次操作合在一起写了一次磁盘），而且还是顺序写的。\n\n\n\n同时，图中的两个虚线箭头，是后台操作，不影响更新的响应时间。\n\n\n\n那在这之后的读请求，要怎么处理呢？\n\n\n\n比如，我们现在要执行 select * from t where k in (k1, k2)。这里，我画了这两个读请求的流程图。\n\n\n\n如果读语句发生在更新语句后不久，内存中的数据都还在，那么此时的这两个读操作就与系统表空间（ibdata1）和 redo log（ib_log_fileX）无关了。所以，我在图中就没画出这两部分。\n\n\n\n图 3 带 change buffer 的读过程\n\n从图中可以看到：\n\n\n\n读 Page 1 的时候，直接从内存返回。有几位同学在前面文章的评论中问到，WAL 之后如果读数据，是不是一定要读盘，是不是一定要从 redo log 里面把数据更新以后才可以返回？其实是不用的。你可以看一下图 3 的这个状态，虽然磁盘上还是之前的数据，但是这里直接从内存返回结果，结果是正确的。\n\n要读 Page 2 的时候，需要把 Page 2 从磁盘读入内存中，然后应用 change buffer 里面的操作日志，生成一个正确的版本并返回结果。\n\n\n\n可以看到，直到需要读 Page 2 的时候，这个数据页才会被读入内存。\n\n\n\n所以，如果要简单地对比这两个机制在提升更新性能上的收益的话，redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。\n\n\n<br/>\n### 小结\n今天，我从普通索引和唯一索引的选择开始，和你分享了数据的查询和更新过程，然后说明了 change buffer 的机制以及应用场景，最后讲到了索引选择的实践。\n\n由于唯一索引用不上 change buffer 的优化机制，因此如果业务可以接受，从性能角度出发我建议你优先考虑非唯一索引。\n\n\n最后，又到了思考题时间。\n\n\n通过图 2 你可以看到，change buffer 一开始是写内存的，那么如果这个时候机器掉电重启，会不会导致 change buffer 丢失呢？change buffer 丢失可不是小事儿，再从磁盘读入数据可就没有了 purge 过程，就等于是数据丢失了。会不会出现这种情况呢？\n\n\n这个问题的答案是不会丢失，留言区的很多同学都回答对了。虽然是只更新内存，但是在事务提交的时候，我们把 change buffer 的操作也记录到 redo log 里了，所以崩溃恢复的时候，change buffer 也能找回来。 \n在评论区有同学问到，merge 的过程是否会把数据直接写回磁盘，这是个好问题。这里，我再为你分析一下。\n\nmerge 的执行流程是这样的：\n\n从磁盘读入数据页到内存（老版本的数据页）；\n\n从 change buffer 里找出这个数据页的 change buffer 记录 (可能有多个），依次应用，得到新版数据页；\n\n写 redo log。这个 redo log 包含了数据的变更和 change buffer 的变更。\n\n到这里 merge 过程就结束了。这时候，数据页和内存中 change buffer 对应的磁盘位置都还没有修改，属于脏页，之后各自刷回自己的物理数据，就是另外一个过程了。","slug":"09-MySQL实战45讲-普通索引和唯一索引，应该怎么选择","published":1,"updated":"2019-11-02T07:12:18.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y4m000mt6s6203322vy","content":"<p>在前面的基础篇文章中，我给你介绍过索引的基本概念，相信你已经了解了唯一索引和普通索引的区别。今天我们就继续来谈谈，在不同的业务场景下，应该选择普通索引，还是唯一索引？</p>\n<p>假设你在维护一个市民系统，每个人都有一个唯一的身份证号，而且业务代码已经保证了不会写入两个重复的身份证号。如果市民系统需要按照身份证号查姓名，就会执行类似这样的 SQL 语句：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select name from CUser where id_card = &apos;xxxxxxxyyyyyyzzzzz&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>所以，你一定会考虑在 <code>id_card</code> 字段上建索引。</p>\n<p>由于身份证号字段比较大，我不建议你把身份证号当做主键，那么现在你有两个选择，要么给 id_card 字段创建唯一索引，要么创建一个普通索引。如果业务代码已经保证了不会写入重复的身份证号，那么这两个选择逻辑上都是正确的。</p>\n<p>现在我要问你的是，从性能的角度考虑，你选择唯一索引还是普通索引呢？选择的依据是什么呢？</p>\n<p>简单起见，我们还是用第 4 篇文章《深入浅出索引（上）》中的例子来说明，假设字段 k 上的值都不重复。</p>\n<p><img src alt=\"图 1 InnoDB 的索引组织结构\"></p>\n<p>接下来，我们就从这两种索引对查询语句和更新语句的性能影响来进行分析。</p>\n<p><br></p>\n<h3 id=\"查询过程\"><a href=\"#查询过程\" class=\"headerlink\" title=\"查询过程\"></a>查询过程</h3><p>假设，执行查询的语句是 <code>select id from T where k=5</code>。这个查询语句在索引树上查找的过程，先是通过 B+ 树从树根开始，按层搜索到叶子节点，也就是图中右下角的这个数据页，然后可以认为数据页内部通过二分法来定位记录。</p>\n<ul>\n<li>对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一个不满足 k=5 条件的记录。</li>\n<li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</li>\n</ul>\n<p>那么，这个不同带来的性能差距会有多少呢？答案是，微乎其微。</p>\n<p>你知道的，InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中，每个数据页的大小默认是 16KB。</p>\n<p>因为引擎是按页读写的，所以说，当找到 k=5 的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。</p>\n<p>当然，如果 k=5 这个记录刚好是这个数据页的最后一个记录，那么要取下一个记录，必须读取下一个数据页，这个操作会稍微复杂一些。</p>\n<p>但是，我们之前计算过，对于整型字段，一个数据页可以放近千个 key，因此出现这种情况的概率会很低。所以，我们计算平均性能差异时，仍可以认为这个操作成本对于现在的 CPU 来说可以忽略不计。</p>\n<p><br></p>\n<h3 id=\"更新过程\"><a href=\"#更新过程\" class=\"headerlink\" title=\"更新过程\"></a>更新过程</h3><p>为了说明普通索引和唯一索引对更新语句性能的影响这个问题，我需要先跟你介绍一下 change buffer。</p>\n<p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p>\n<p>需要说明的是，虽然名字叫作 change buffer，实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。</p>\n<p>将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 purge。除了访问这个数据页会触发 purge 外，系统有后台线程会定期 purge。在数据库正常关闭（shutdown）的过程中，也会执行 purge 操作。</p>\n<p>显然，如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式还能够避免占用内存，提高内存利用率。</p>\n<p>那么，什么条件下可以使用 change buffer 呢？</p>\n<p>对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。比如，要插入 (4,400) 这个记录，就要先判断现在表中是否已经存在 k=4 的记录，而这必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用 change buffer 了。</p>\n<p>因此，唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用。</p>\n<p>change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| Variable_name                 | Value |</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| innodb_change_buffer_max_size | 25    |</span><br><span class=\"line\">+-------------------------------+-------+</span><br></pre></td></tr></table></figure></p>\n<p>现在，你已经理解了 change buffer 的机制，那么我们再一起来看看如果要在这张表中插入一个新记录 (4,400) 的话，InnoDB 的处理流程是怎样的。</p>\n<p>第一种情况是，这个记录要更新的目标页在内存中。这时，InnoDB 的处理流程如下：</p>\n<p>对于唯一索引来说，找到 3 和 5 之间的位置，判断到没有冲突，插入这个值，语句执行结束；</p>\n<p>对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。</p>\n<p>这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小的 CPU 时间。但，这不是我们关注的重点。</p>\n<p>第二种情况是，这个记录要更新的目标页不在内存中。这时，InnoDB 的处理流程如下：</p>\n<p>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；</p>\n<p>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</p>\n<p>将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p>\n<p>之前我就碰到过一件事儿，有个 DBA 的同学跟我反馈说，他负责的某个业务的库内存命中率突然从 99% 降低到了 75%，整个系统处于阻塞状态，更新语句全部堵住。而探究其原因后，我发现这个业务有大量插入数据的操作，而他在前一天把其中的某个普通索引改成了唯一索引。</p>\n<p>change buffer 的使用场景</p>\n<p>通过上面的分析，你已经清楚了使用 change buffer 对更新过程的加速作用，也清楚了 change buffer 只限于用在普通索引的场景下，而不适用于唯一索引。那么，现在有一个问题就是：普通索引的所有场景，使用 change buffer 都可以起到加速作用吗？</p>\n<p>因为 purge 的时候是真正进行数据更新的时刻，而 change buffer 的主要目的就是将记录的变更动作缓存下来，所以在一个数据页做 purge 之前，change buffer 记录的变更越多（也就是这个页面上要更新的次数越多），收益就越大。</p>\n<p>因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是账单类、日志类的系统。</p>\n<p>反过来，假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在 change buffer，但之后由于马上要访问这个数据页，会立即触发 purge 过程。这样随机访问 IO 的次数不会减少，反而增加了 change buffer 的维护代价。所以，对于这种业务模式来说，change buffer 反而起到了副作用。</p>\n<p>索引选择和实践</p>\n<p>回到我们文章开头的问题，普通索引和唯一索引应该怎么选择。</p>\n<p>其实，这两类索引在查询能力上是没差别的，主要考虑的是对更新性能的影响。所以，我建议你尽量选择普通索引。</p>\n<p>如果所有的更新后面，都马上伴随着对这个记录的查询，那么你应该关闭 change buffer。而在其他情况下，change buffer 都能提升更新性能。</p>\n<p>在实际使用中，你会发现，普通索引和 change buffer 的配合使用，对于数据量大的表的更新优化还是很明显的。</p>\n<p>特别地，在使用机械硬盘时，change buffer 这个机制的收效是非常显著的。所以，当你有一个类似“历史数据”的库，并且出于成本考虑用的是机械硬盘时，那你应该特别关注这些表里的索引，尽量使用普通索引，然后把 change buffer 尽量开大，以确保这个“历史数据”表的数据写入速度。</p>\n<p>change buffer 和 redo log</p>\n<p>理解了 change buffer 的原理，你可能会联想到我在前面文章中和你介绍过的 redo log 和 WAL。</p>\n<p>在前面文章的评论中，我发现有同学混淆了 redo log 和 change buffer。WAL 提升性能的核心机制，也的确是尽量减少随机读写，这两个概念确实容易混淆。所以，这里我把它们放到了同一个流程里来说明，便于你区分这两个概念。</p>\n<p>现在，我们要在表上执行这个插入语句：</p>\n<p>mysql&gt; insert into t(id,k) values(id1,k1),(id2,k2);</p>\n<p>这里，我们假设当前 k 索引树的状态，查找到位置后，k1 所在的数据页在内存 (InnoDB buffer pool) 中，k2 所在的数据页不在内存中。如图 2 所示是带 change buffer 的更新状态图。</p>\n<p>图 2 带 change buffer 的更新过程</p>\n<p>分析这条更新语句，你会发现它涉及了四个部分：内存、redo log（ib_log_fileX）、 数据表空间（t.ibd）、系统表空间（ibdata1）。</p>\n<p>这条更新语句做了如下的操作（按照图中的数字顺序）：</p>\n<p>Page 1 在内存中，直接更新内存；</p>\n<p>Page 2 没有在内存中，就在内存的 change buffer 区域，记录下“我要往 Page 2 插入一行”这个信息</p>\n<p>将上述两个动作记入 redo log 中（图中 3 和 4）。</p>\n<p>做完上面这些，事务就可以完成了。所以，你会看到，执行这条更新语句的成本很低，就是写了两处内存，然后写了一处磁盘（两次操作合在一起写了一次磁盘），而且还是顺序写的。</p>\n<p>同时，图中的两个虚线箭头，是后台操作，不影响更新的响应时间。</p>\n<p>那在这之后的读请求，要怎么处理呢？</p>\n<p>比如，我们现在要执行 select * from t where k in (k1, k2)。这里，我画了这两个读请求的流程图。</p>\n<p>如果读语句发生在更新语句后不久，内存中的数据都还在，那么此时的这两个读操作就与系统表空间（ibdata1）和 redo log（ib_log_fileX）无关了。所以，我在图中就没画出这两部分。</p>\n<p>图 3 带 change buffer 的读过程</p>\n<p>从图中可以看到：</p>\n<p>读 Page 1 的时候，直接从内存返回。有几位同学在前面文章的评论中问到，WAL 之后如果读数据，是不是一定要读盘，是不是一定要从 redo log 里面把数据更新以后才可以返回？其实是不用的。你可以看一下图 3 的这个状态，虽然磁盘上还是之前的数据，但是这里直接从内存返回结果，结果是正确的。</p>\n<p>要读 Page 2 的时候，需要把 Page 2 从磁盘读入内存中，然后应用 change buffer 里面的操作日志，生成一个正确的版本并返回结果。</p>\n<p>可以看到，直到需要读 Page 2 的时候，这个数据页才会被读入内存。</p>\n<p>所以，如果要简单地对比这两个机制在提升更新性能上的收益的话，redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>今天，我从普通索引和唯一索引的选择开始，和你分享了数据的查询和更新过程，然后说明了 change buffer 的机制以及应用场景，最后讲到了索引选择的实践。</p>\n<p>由于唯一索引用不上 change buffer 的优化机制，因此如果业务可以接受，从性能角度出发我建议你优先考虑非唯一索引。</p>\n<p>最后，又到了思考题时间。</p>\n<p>通过图 2 你可以看到，change buffer 一开始是写内存的，那么如果这个时候机器掉电重启，会不会导致 change buffer 丢失呢？change buffer 丢失可不是小事儿，再从磁盘读入数据可就没有了 purge 过程，就等于是数据丢失了。会不会出现这种情况呢？</p>\n<p>这个问题的答案是不会丢失，留言区的很多同学都回答对了。虽然是只更新内存，但是在事务提交的时候，我们把 change buffer 的操作也记录到 redo log 里了，所以崩溃恢复的时候，change buffer 也能找回来。 \n在评论区有同学问到，merge 的过程是否会把数据直接写回磁盘，这是个好问题。这里，我再为你分析一下。</p>\n<p>merge 的执行流程是这样的：</p>\n<p>从磁盘读入数据页到内存（老版本的数据页）；</p>\n<p>从 change buffer 里找出这个数据页的 change buffer 记录 (可能有多个），依次应用，得到新版数据页；</p>\n<p>写 redo log。这个 redo log 包含了数据的变更和 change buffer 的变更。</p>\n<p>到这里 merge 过程就结束了。这时候，数据页和内存中 change buffer 对应的磁盘位置都还没有修改，属于脏页，之后各自刷回自己的物理数据，就是另外一个过程了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在前面的基础篇文章中，我给你介绍过索引的基本概念，相信你已经了解了唯一索引和普通索引的区别。今天我们就继续来谈谈，在不同的业务场景下，应该选择普通索引，还是唯一索引？</p>\n<p>假设你在维护一个市民系统，每个人都有一个唯一的身份证号，而且业务代码已经保证了不会写入两个重复的身份证号。如果市民系统需要按照身份证号查姓名，就会执行类似这样的 SQL 语句：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select name from CUser where id_card = &apos;xxxxxxxyyyyyyzzzzz&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>所以，你一定会考虑在 <code>id_card</code> 字段上建索引。</p>\n<p>由于身份证号字段比较大，我不建议你把身份证号当做主键，那么现在你有两个选择，要么给 id_card 字段创建唯一索引，要么创建一个普通索引。如果业务代码已经保证了不会写入重复的身份证号，那么这两个选择逻辑上都是正确的。</p>\n<p>现在我要问你的是，从性能的角度考虑，你选择唯一索引还是普通索引呢？选择的依据是什么呢？</p>\n<p>简单起见，我们还是用第 4 篇文章《深入浅出索引（上）》中的例子来说明，假设字段 k 上的值都不重复。</p>\n<p><img src alt=\"图 1 InnoDB 的索引组织结构\"></p>\n<p>接下来，我们就从这两种索引对查询语句和更新语句的性能影响来进行分析。</p>\n<p><br></p>\n<h3 id=\"查询过程\"><a href=\"#查询过程\" class=\"headerlink\" title=\"查询过程\"></a>查询过程</h3><p>假设，执行查询的语句是 <code>select id from T where k=5</code>。这个查询语句在索引树上查找的过程，先是通过 B+ 树从树根开始，按层搜索到叶子节点，也就是图中右下角的这个数据页，然后可以认为数据页内部通过二分法来定位记录。</p>\n<ul>\n<li>对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一个不满足 k=5 条件的记录。</li>\n<li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</li>\n</ul>\n<p>那么，这个不同带来的性能差距会有多少呢？答案是，微乎其微。</p>\n<p>你知道的，InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中，每个数据页的大小默认是 16KB。</p>\n<p>因为引擎是按页读写的，所以说，当找到 k=5 的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。</p>\n<p>当然，如果 k=5 这个记录刚好是这个数据页的最后一个记录，那么要取下一个记录，必须读取下一个数据页，这个操作会稍微复杂一些。</p>\n<p>但是，我们之前计算过，对于整型字段，一个数据页可以放近千个 key，因此出现这种情况的概率会很低。所以，我们计算平均性能差异时，仍可以认为这个操作成本对于现在的 CPU 来说可以忽略不计。</p>\n<p><br></p>\n<h3 id=\"更新过程\"><a href=\"#更新过程\" class=\"headerlink\" title=\"更新过程\"></a>更新过程</h3><p>为了说明普通索引和唯一索引对更新语句性能的影响这个问题，我需要先跟你介绍一下 change buffer。</p>\n<p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p>\n<p>需要说明的是，虽然名字叫作 change buffer，实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。</p>\n<p>将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 purge。除了访问这个数据页会触发 purge 外，系统有后台线程会定期 purge。在数据库正常关闭（shutdown）的过程中，也会执行 purge 操作。</p>\n<p>显然，如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式还能够避免占用内存，提高内存利用率。</p>\n<p>那么，什么条件下可以使用 change buffer 呢？</p>\n<p>对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。比如，要插入 (4,400) 这个记录，就要先判断现在表中是否已经存在 k=4 的记录，而这必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用 change buffer 了。</p>\n<p>因此，唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用。</p>\n<p>change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| Variable_name                 | Value |</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| innodb_change_buffer_max_size | 25    |</span><br><span class=\"line\">+-------------------------------+-------+</span><br></pre></td></tr></table></figure></p>\n<p>现在，你已经理解了 change buffer 的机制，那么我们再一起来看看如果要在这张表中插入一个新记录 (4,400) 的话，InnoDB 的处理流程是怎样的。</p>\n<p>第一种情况是，这个记录要更新的目标页在内存中。这时，InnoDB 的处理流程如下：</p>\n<p>对于唯一索引来说，找到 3 和 5 之间的位置，判断到没有冲突，插入这个值，语句执行结束；</p>\n<p>对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。</p>\n<p>这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小的 CPU 时间。但，这不是我们关注的重点。</p>\n<p>第二种情况是，这个记录要更新的目标页不在内存中。这时，InnoDB 的处理流程如下：</p>\n<p>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；</p>\n<p>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</p>\n<p>将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p>\n<p>之前我就碰到过一件事儿，有个 DBA 的同学跟我反馈说，他负责的某个业务的库内存命中率突然从 99% 降低到了 75%，整个系统处于阻塞状态，更新语句全部堵住。而探究其原因后，我发现这个业务有大量插入数据的操作，而他在前一天把其中的某个普通索引改成了唯一索引。</p>\n<p>change buffer 的使用场景</p>\n<p>通过上面的分析，你已经清楚了使用 change buffer 对更新过程的加速作用，也清楚了 change buffer 只限于用在普通索引的场景下，而不适用于唯一索引。那么，现在有一个问题就是：普通索引的所有场景，使用 change buffer 都可以起到加速作用吗？</p>\n<p>因为 purge 的时候是真正进行数据更新的时刻，而 change buffer 的主要目的就是将记录的变更动作缓存下来，所以在一个数据页做 purge 之前，change buffer 记录的变更越多（也就是这个页面上要更新的次数越多），收益就越大。</p>\n<p>因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是账单类、日志类的系统。</p>\n<p>反过来，假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在 change buffer，但之后由于马上要访问这个数据页，会立即触发 purge 过程。这样随机访问 IO 的次数不会减少，反而增加了 change buffer 的维护代价。所以，对于这种业务模式来说，change buffer 反而起到了副作用。</p>\n<p>索引选择和实践</p>\n<p>回到我们文章开头的问题，普通索引和唯一索引应该怎么选择。</p>\n<p>其实，这两类索引在查询能力上是没差别的，主要考虑的是对更新性能的影响。所以，我建议你尽量选择普通索引。</p>\n<p>如果所有的更新后面，都马上伴随着对这个记录的查询，那么你应该关闭 change buffer。而在其他情况下，change buffer 都能提升更新性能。</p>\n<p>在实际使用中，你会发现，普通索引和 change buffer 的配合使用，对于数据量大的表的更新优化还是很明显的。</p>\n<p>特别地，在使用机械硬盘时，change buffer 这个机制的收效是非常显著的。所以，当你有一个类似“历史数据”的库，并且出于成本考虑用的是机械硬盘时，那你应该特别关注这些表里的索引，尽量使用普通索引，然后把 change buffer 尽量开大，以确保这个“历史数据”表的数据写入速度。</p>\n<p>change buffer 和 redo log</p>\n<p>理解了 change buffer 的原理，你可能会联想到我在前面文章中和你介绍过的 redo log 和 WAL。</p>\n<p>在前面文章的评论中，我发现有同学混淆了 redo log 和 change buffer。WAL 提升性能的核心机制，也的确是尽量减少随机读写，这两个概念确实容易混淆。所以，这里我把它们放到了同一个流程里来说明，便于你区分这两个概念。</p>\n<p>现在，我们要在表上执行这个插入语句：</p>\n<p>mysql&gt; insert into t(id,k) values(id1,k1),(id2,k2);</p>\n<p>这里，我们假设当前 k 索引树的状态，查找到位置后，k1 所在的数据页在内存 (InnoDB buffer pool) 中，k2 所在的数据页不在内存中。如图 2 所示是带 change buffer 的更新状态图。</p>\n<p>图 2 带 change buffer 的更新过程</p>\n<p>分析这条更新语句，你会发现它涉及了四个部分：内存、redo log（ib_log_fileX）、 数据表空间（t.ibd）、系统表空间（ibdata1）。</p>\n<p>这条更新语句做了如下的操作（按照图中的数字顺序）：</p>\n<p>Page 1 在内存中，直接更新内存；</p>\n<p>Page 2 没有在内存中，就在内存的 change buffer 区域，记录下“我要往 Page 2 插入一行”这个信息</p>\n<p>将上述两个动作记入 redo log 中（图中 3 和 4）。</p>\n<p>做完上面这些，事务就可以完成了。所以，你会看到，执行这条更新语句的成本很低，就是写了两处内存，然后写了一处磁盘（两次操作合在一起写了一次磁盘），而且还是顺序写的。</p>\n<p>同时，图中的两个虚线箭头，是后台操作，不影响更新的响应时间。</p>\n<p>那在这之后的读请求，要怎么处理呢？</p>\n<p>比如，我们现在要执行 select * from t where k in (k1, k2)。这里，我画了这两个读请求的流程图。</p>\n<p>如果读语句发生在更新语句后不久，内存中的数据都还在，那么此时的这两个读操作就与系统表空间（ibdata1）和 redo log（ib_log_fileX）无关了。所以，我在图中就没画出这两部分。</p>\n<p>图 3 带 change buffer 的读过程</p>\n<p>从图中可以看到：</p>\n<p>读 Page 1 的时候，直接从内存返回。有几位同学在前面文章的评论中问到，WAL 之后如果读数据，是不是一定要读盘，是不是一定要从 redo log 里面把数据更新以后才可以返回？其实是不用的。你可以看一下图 3 的这个状态，虽然磁盘上还是之前的数据，但是这里直接从内存返回结果，结果是正确的。</p>\n<p>要读 Page 2 的时候，需要把 Page 2 从磁盘读入内存中，然后应用 change buffer 里面的操作日志，生成一个正确的版本并返回结果。</p>\n<p>可以看到，直到需要读 Page 2 的时候，这个数据页才会被读入内存。</p>\n<p>所以，如果要简单地对比这两个机制在提升更新性能上的收益的话，redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</p>\n<p><br></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>今天，我从普通索引和唯一索引的选择开始，和你分享了数据的查询和更新过程，然后说明了 change buffer 的机制以及应用场景，最后讲到了索引选择的实践。</p>\n<p>由于唯一索引用不上 change buffer 的优化机制，因此如果业务可以接受，从性能角度出发我建议你优先考虑非唯一索引。</p>\n<p>最后，又到了思考题时间。</p>\n<p>通过图 2 你可以看到，change buffer 一开始是写内存的，那么如果这个时候机器掉电重启，会不会导致 change buffer 丢失呢？change buffer 丢失可不是小事儿，再从磁盘读入数据可就没有了 purge 过程，就等于是数据丢失了。会不会出现这种情况呢？</p>\n<p>这个问题的答案是不会丢失，留言区的很多同学都回答对了。虽然是只更新内存，但是在事务提交的时候，我们把 change buffer 的操作也记录到 redo log 里了，所以崩溃恢复的时候，change buffer 也能找回来。 \n在评论区有同学问到，merge 的过程是否会把数据直接写回磁盘，这是个好问题。这里，我再为你分析一下。</p>\n<p>merge 的执行流程是这样的：</p>\n<p>从磁盘读入数据页到内存（老版本的数据页）；</p>\n<p>从 change buffer 里找出这个数据页的 change buffer 记录 (可能有多个），依次应用，得到新版数据页；</p>\n<p>写 redo log。这个 redo log 包含了数据的变更和 change buffer 的变更。</p>\n<p>到这里 merge 过程就结束了。这时候，数据页和内存中 change buffer 对应的磁盘位置都还没有修改，属于脏页，之后各自刷回自己的物理数据，就是另外一个过程了。</p>\n"},{"title":"C4.5算法","date":"2018-11-10T04:01:01.000Z","_content":"\n\n\n<!-- more -->\n\n---\n参考\n\n[wikipedia-C4.5算法](https://en.wikipedia.org/wiki/C4.5_algorithm)","source":"_posts/C4.5算法.md","raw":"---\ntitle: C4.5算法\ndate: 2018-11-10 12:01:01\ncategories: \n    - 机器学习\ntags:\n    - 算法\n    - 机器学习\n    - 决策树\n---\n\n\n\n<!-- more -->\n\n---\n参考\n\n[wikipedia-C4.5算法](https://en.wikipedia.org/wiki/C4.5_algorithm)","slug":"C4.5算法","published":1,"updated":"2019-11-02T07:12:18.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y4q000qt6s6oi0tiuxp","content":"<a id=\"more\"></a>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/C4.5_algorithm\" target=\"_blank\" rel=\"noopener\">wikipedia-C4.5算法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/C4.5_algorithm\" target=\"_blank\" rel=\"noopener\">wikipedia-C4.5算法</a></p>"},{"title":"CART算法","date":"2018-11-09T07:01:41.000Z","_content":"\n\n\n<!-- more -->","source":"_posts/CART算法.md","raw":"---\ntitle: CART算法\ndate: 2018-11-09 15:01:41\ncategories:\n    - 机器学习\ntags:\n    - 算法\n    - 机器学习\n    - 决策树\n---\n\n\n\n<!-- more -->","slug":"CART算法","published":1,"updated":"2019-11-02T07:12:18.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y4u000tt6s6lrpisqty","content":"<a id=\"more\"></a>","site":{"data":{}},"excerpt":"","more":""},{"title":"EM算法","date":"2018-11-09T07:02:04.000Z","_content":"\n\n\n<!-- more -->","source":"_posts/EM算法.md","raw":"---\ntitle: EM算法\ndate: 2018-11-09 15:02:04\ncategories: \n    - 机器学习\ntags:\n    - 算法\n    - 机器学习\n---\n\n\n\n<!-- more -->","slug":"EM算法","published":1,"updated":"2019-11-02T07:12:18.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y4w000yt6s6f2hb48lj","content":"<a id=\"more\"></a>","site":{"data":{}},"excerpt":"","more":""},{"title":"Elasticsearch安装","date":"2019-01-15T06:15:53.000Z","_content":"\n\n---\n\n\n## 下载\n\n下载地址：https://www.elastic.co/downloads/elasticsearch\n\n## 安装\n\n```bash\n# 解压\ntar -zxvf elasticsearch-6.5.4.tar.gz\n# copy\n\n```\n\n### 单机\n```bash\n\n```\n\n\n### 集群\n\n#### 配置\n\n```bash\ndiscovery.zen.ping.unicast.hosts: [\"127.0.0.1:9300\", \"127.0.0.1:9301\", \"127.0.0.1:9302\"]\n\n```\n\n> elasticsearch 不推荐使用多播，推荐使用单播\n\n\n\n<br/>\n## 问题\n\n#### 异常详情\n```\nException in thread \"main\" java.nio.file.AccessDeniedException: /Library/elasticsearch-6.5.4/config/jvm.options\n\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:84)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n\tat sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214)\n\tat java.nio.file.Files.newByteChannel(Files.java:361)\n\tat java.nio.file.Files.newByteChannel(Files.java:407)\n\tat java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:384)\n\tat java.nio.file.Files.newInputStream(Files.java:152)\n\tat org.elasticsearch.tools.launchers.JvmOptionsParser.main(JvmOptionsParser.java:60)\n```\n#### 解决方案\n```bash\nsudo chown -R 用户名 elasticsearch-6.5.4\n```\n\n<br/>\n\n#### 异常详情\n```\nfailed to send join request to master [{node-1}{woYxlU_VRVOCKYgA9QXl5g}{GQW9C2dXTV2KkaPaYP76Jw}{127.0.0.1}{127.0.0.1:9300}{ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=true, ml.enabled=true}], reason [RemoteTransportException[[node-1][127.0.0.1:9300][internal:discovery/zen/join]]; nested: IllegalArgumentException[can't add node {node-2}{woYxlU_VRVOCKYgA9QXl5g}{aewcXbjZTq-brZG3gWiXPQ}{127.0.0.1}{127.0.0.1:9301}{ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=true, ml.enabled=true}, found existing node {node-1}{woYxlU_VRVOCKYgA9QXl5g}{GQW9C2dXTV2KkaPaYP76Jw}{127.0.0.1}{127.0.0.1:9300}{ml.machine_memory=17179869184, xpack.installed=true, ml.max_open_jobs=20, ml.enabled=true} with the same id but is a different node instance]; ]\n```\n#### 解决方案\n```bash\n是因为复制的elasticsearch文件夹下包含了data文件中示例一的节点数据，需要把data文件下的文件清空。\n```\n\n\n\n<br/>\n\n---\n参考\n","source":"_posts/Elasticsearch安装.md","raw":"---\ntitle: Elasticsearch安装\ndate: 2019-01-15 14:15:53\ncategories: \n    - Elasticsearch\ntags:\n    - 全文搜索\n    - Elasticsearch\n---\n\n\n---\n\n\n## 下载\n\n下载地址：https://www.elastic.co/downloads/elasticsearch\n\n## 安装\n\n```bash\n# 解压\ntar -zxvf elasticsearch-6.5.4.tar.gz\n# copy\n\n```\n\n### 单机\n```bash\n\n```\n\n\n### 集群\n\n#### 配置\n\n```bash\ndiscovery.zen.ping.unicast.hosts: [\"127.0.0.1:9300\", \"127.0.0.1:9301\", \"127.0.0.1:9302\"]\n\n```\n\n> elasticsearch 不推荐使用多播，推荐使用单播\n\n\n\n<br/>\n## 问题\n\n#### 异常详情\n```\nException in thread \"main\" java.nio.file.AccessDeniedException: /Library/elasticsearch-6.5.4/config/jvm.options\n\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:84)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n\tat sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214)\n\tat java.nio.file.Files.newByteChannel(Files.java:361)\n\tat java.nio.file.Files.newByteChannel(Files.java:407)\n\tat java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:384)\n\tat java.nio.file.Files.newInputStream(Files.java:152)\n\tat org.elasticsearch.tools.launchers.JvmOptionsParser.main(JvmOptionsParser.java:60)\n```\n#### 解决方案\n```bash\nsudo chown -R 用户名 elasticsearch-6.5.4\n```\n\n<br/>\n\n#### 异常详情\n```\nfailed to send join request to master [{node-1}{woYxlU_VRVOCKYgA9QXl5g}{GQW9C2dXTV2KkaPaYP76Jw}{127.0.0.1}{127.0.0.1:9300}{ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=true, ml.enabled=true}], reason [RemoteTransportException[[node-1][127.0.0.1:9300][internal:discovery/zen/join]]; nested: IllegalArgumentException[can't add node {node-2}{woYxlU_VRVOCKYgA9QXl5g}{aewcXbjZTq-brZG3gWiXPQ}{127.0.0.1}{127.0.0.1:9301}{ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=true, ml.enabled=true}, found existing node {node-1}{woYxlU_VRVOCKYgA9QXl5g}{GQW9C2dXTV2KkaPaYP76Jw}{127.0.0.1}{127.0.0.1:9300}{ml.machine_memory=17179869184, xpack.installed=true, ml.max_open_jobs=20, ml.enabled=true} with the same id but is a different node instance]; ]\n```\n#### 解决方案\n```bash\n是因为复制的elasticsearch文件夹下包含了data文件中示例一的节点数据，需要把data文件下的文件清空。\n```\n\n\n\n<br/>\n\n---\n参考\n","slug":"Elasticsearch安装","published":1,"updated":"2019-11-02T07:12:18.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y4x0011t6s6rvw8crqd","content":"<hr>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载地址：<a href=\"https://www.elastic.co/downloads/elasticsearch\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/downloads/elasticsearch</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf elasticsearch-6.5.4.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># copy</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"单机\"><a href=\"#单机\" class=\"headerlink\" title=\"单机\"></a>单机</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">discovery.zen.ping.unicast.hosts: [<span class=\"string\">\"127.0.0.1:9300\"</span>, <span class=\"string\">\"127.0.0.1:9301\"</span>, <span class=\"string\">\"127.0.0.1:9302\"</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>elasticsearch 不推荐使用多播，推荐使用单播</p>\n</blockquote>\n<p><br></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h4 id=\"异常详情\"><a href=\"#异常详情\" class=\"headerlink\" title=\"异常详情\"></a>异常详情</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.nio.file.AccessDeniedException: /Library/elasticsearch-6.5.4/config/jvm.options</span><br><span class=\"line\">\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:84)</span><br><span class=\"line\">\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)</span><br><span class=\"line\">\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)</span><br><span class=\"line\">\tat sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214)</span><br><span class=\"line\">\tat java.nio.file.Files.newByteChannel(Files.java:361)</span><br><span class=\"line\">\tat java.nio.file.Files.newByteChannel(Files.java:407)</span><br><span class=\"line\">\tat java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:384)</span><br><span class=\"line\">\tat java.nio.file.Files.newInputStream(Files.java:152)</span><br><span class=\"line\">\tat org.elasticsearch.tools.launchers.JvmOptionsParser.main(JvmOptionsParser.java:60)</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R 用户名 elasticsearch-6.5.4</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"异常详情-1\"><a href=\"#异常详情-1\" class=\"headerlink\" title=\"异常详情\"></a>异常详情</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">failed to send join request to master [&#123;node-1&#125;&#123;woYxlU_VRVOCKYgA9QXl5g&#125;&#123;GQW9C2dXTV2KkaPaYP76Jw&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=true, ml.enabled=true&#125;], reason [RemoteTransportException[[node-1][127.0.0.1:9300][internal:discovery/zen/join]]; nested: IllegalArgumentException[can&apos;t add node &#123;node-2&#125;&#123;woYxlU_VRVOCKYgA9QXl5g&#125;&#123;aewcXbjZTq-brZG3gWiXPQ&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9301&#125;&#123;ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=true, ml.enabled=true&#125;, found existing node &#123;node-1&#125;&#123;woYxlU_VRVOCKYgA9QXl5g&#125;&#123;GQW9C2dXTV2KkaPaYP76Jw&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;ml.machine_memory=17179869184, xpack.installed=true, ml.max_open_jobs=20, ml.enabled=true&#125; with the same id but is a different node instance]; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是因为复制的elasticsearch文件夹下包含了data文件中示例一的节点数据，需要把data文件下的文件清空。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<p>参考</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载地址：<a href=\"https://www.elastic.co/downloads/elasticsearch\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/downloads/elasticsearch</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf elasticsearch-6.5.4.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># copy</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"单机\"><a href=\"#单机\" class=\"headerlink\" title=\"单机\"></a>单机</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">discovery.zen.ping.unicast.hosts: [<span class=\"string\">\"127.0.0.1:9300\"</span>, <span class=\"string\">\"127.0.0.1:9301\"</span>, <span class=\"string\">\"127.0.0.1:9302\"</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>elasticsearch 不推荐使用多播，推荐使用单播</p>\n</blockquote>\n<p><br></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h4 id=\"异常详情\"><a href=\"#异常详情\" class=\"headerlink\" title=\"异常详情\"></a>异常详情</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.nio.file.AccessDeniedException: /Library/elasticsearch-6.5.4/config/jvm.options</span><br><span class=\"line\">\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:84)</span><br><span class=\"line\">\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)</span><br><span class=\"line\">\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)</span><br><span class=\"line\">\tat sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214)</span><br><span class=\"line\">\tat java.nio.file.Files.newByteChannel(Files.java:361)</span><br><span class=\"line\">\tat java.nio.file.Files.newByteChannel(Files.java:407)</span><br><span class=\"line\">\tat java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:384)</span><br><span class=\"line\">\tat java.nio.file.Files.newInputStream(Files.java:152)</span><br><span class=\"line\">\tat org.elasticsearch.tools.launchers.JvmOptionsParser.main(JvmOptionsParser.java:60)</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R 用户名 elasticsearch-6.5.4</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"异常详情-1\"><a href=\"#异常详情-1\" class=\"headerlink\" title=\"异常详情\"></a>异常详情</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">failed to send join request to master [&#123;node-1&#125;&#123;woYxlU_VRVOCKYgA9QXl5g&#125;&#123;GQW9C2dXTV2KkaPaYP76Jw&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=true, ml.enabled=true&#125;], reason [RemoteTransportException[[node-1][127.0.0.1:9300][internal:discovery/zen/join]]; nested: IllegalArgumentException[can&apos;t add node &#123;node-2&#125;&#123;woYxlU_VRVOCKYgA9QXl5g&#125;&#123;aewcXbjZTq-brZG3gWiXPQ&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9301&#125;&#123;ml.machine_memory=17179869184, ml.max_open_jobs=20, xpack.installed=true, ml.enabled=true&#125;, found existing node &#123;node-1&#125;&#123;woYxlU_VRVOCKYgA9QXl5g&#125;&#123;GQW9C2dXTV2KkaPaYP76Jw&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;ml.machine_memory=17179869184, xpack.installed=true, ml.max_open_jobs=20, ml.enabled=true&#125; with the same id but is a different node instance]; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是因为复制的elasticsearch文件夹下包含了data文件中示例一的节点数据，需要把data文件下的文件清空。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<p>参考</p>\n"},{"title":"Homebrew总结","date":"2015-08-30T00:01:01.000Z","_content":"\nHomebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。\n\n官网：https://brew.sh/index_zh-cn\n\n<!-- more -->\n\n\n<br/>\n## 介绍\nHomebrew以Ruby语言写成，针对于Mac OS X操作系统自带Ruby的版本。默认安装在/usr/local，由一个核心git版本库构成，以使用户能更新Homebrew。\n包管理器使用一种称为“公式”（formula）的DSL脚本来管理依赖、下载源代码及配置和编译软件，从源代码中构建软件。\n\nHomebrew 会将软件包安装到独立目录，并将其文件软链接至 /usr/local 。\n```\ncd /usr/local\n$ find Cellar\nCellar/wget/1.16.1\nCellar/wget/1.16.1/bin/wget\nCellar/wget/1.16.1/share/man/man1/wget.1\n```\n\n<br/>\n## 安装(推荐)\n\n```bash\n# 查看是否已经安装\nbrew --version\n# 安装\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n<br/>\n## 使用\n```bash\n# 安装指定的软件\nbrew install <formula>\n# 卸载指定的软件\nbrew uninstall <formula>\n# 更新指定的软件\nbrew upgrade <formula>\n# 展示brew安装的所有软件\nbrew list\n# 展示brew信息\nbrew info\n# 检测过时软件\nbrew outdated\n```\n\n## 软件推荐\n\n### 目录树形结构\n```bash\n# 检查是否安装\n$ tree --version\n# 安装\n$ brew install tree\n# 展示目录结构 -N 解决中文乱码\n$ tree -N\n```\n\n<br/>\n\n---\n参考\n[官方网站](https://brew.sh/index_zh-cn)","source":"_posts/Homebrew总结.md","raw":"---\ntitle: Homebrew总结\ndate: 2015-08-30 08:01:01\ncategories: \n    - Mac\ntags:\n    - Mac\n    - Homebrew\n---\n\nHomebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。\n\n官网：https://brew.sh/index_zh-cn\n\n<!-- more -->\n\n\n<br/>\n## 介绍\nHomebrew以Ruby语言写成，针对于Mac OS X操作系统自带Ruby的版本。默认安装在/usr/local，由一个核心git版本库构成，以使用户能更新Homebrew。\n包管理器使用一种称为“公式”（formula）的DSL脚本来管理依赖、下载源代码及配置和编译软件，从源代码中构建软件。\n\nHomebrew 会将软件包安装到独立目录，并将其文件软链接至 /usr/local 。\n```\ncd /usr/local\n$ find Cellar\nCellar/wget/1.16.1\nCellar/wget/1.16.1/bin/wget\nCellar/wget/1.16.1/share/man/man1/wget.1\n```\n\n<br/>\n## 安装(推荐)\n\n```bash\n# 查看是否已经安装\nbrew --version\n# 安装\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n<br/>\n## 使用\n```bash\n# 安装指定的软件\nbrew install <formula>\n# 卸载指定的软件\nbrew uninstall <formula>\n# 更新指定的软件\nbrew upgrade <formula>\n# 展示brew安装的所有软件\nbrew list\n# 展示brew信息\nbrew info\n# 检测过时软件\nbrew outdated\n```\n\n## 软件推荐\n\n### 目录树形结构\n```bash\n# 检查是否安装\n$ tree --version\n# 安装\n$ brew install tree\n# 展示目录结构 -N 解决中文乱码\n$ tree -N\n```\n\n<br/>\n\n---\n参考\n[官方网站](https://brew.sh/index_zh-cn)","slug":"Homebrew总结","published":1,"updated":"2019-11-02T07:12:18.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y4z0015t6s663n8hfqb","content":"<p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</p>\n<p>官网：<a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">https://brew.sh/index_zh-cn</a></p>\n<a id=\"more\"></a>\n<p><br></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Homebrew以Ruby语言写成，针对于Mac OS X操作系统自带Ruby的版本。默认安装在/usr/local，由一个核心git版本库构成，以使用户能更新Homebrew。\n包管理器使用一种称为“公式”（formula）的DSL脚本来管理依赖、下载源代码及配置和编译软件，从源代码中构建软件。</p>\n<p>Homebrew 会将软件包安装到独立目录，并将其文件软链接至 /usr/local 。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local</span><br><span class=\"line\">$ find Cellar</span><br><span class=\"line\">Cellar/wget/1.16.1</span><br><span class=\"line\">Cellar/wget/1.16.1/bin/wget</span><br><span class=\"line\">Cellar/wget/1.16.1/share/man/man1/wget.1</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"安装-推荐\"><a href=\"#安装-推荐\" class=\"headerlink\" title=\"安装(推荐)\"></a>安装(推荐)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看是否已经安装</span></span><br><span class=\"line\">brew --version</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装指定的软件</span></span><br><span class=\"line\">brew install &lt;formula&gt;</span><br><span class=\"line\"><span class=\"comment\"># 卸载指定的软件</span></span><br><span class=\"line\">brew uninstall &lt;formula&gt;</span><br><span class=\"line\"><span class=\"comment\"># 更新指定的软件</span></span><br><span class=\"line\">brew upgrade &lt;formula&gt;</span><br><span class=\"line\"><span class=\"comment\"># 展示brew安装的所有软件</span></span><br><span class=\"line\">brew list</span><br><span class=\"line\"><span class=\"comment\"># 展示brew信息</span></span><br><span class=\"line\">brew info</span><br><span class=\"line\"><span class=\"comment\"># 检测过时软件</span></span><br><span class=\"line\">brew outdated</span><br></pre></td></tr></table></figure>\n<h2 id=\"软件推荐\"><a href=\"#软件推荐\" class=\"headerlink\" title=\"软件推荐\"></a>软件推荐</h2><h3 id=\"目录树形结构\"><a href=\"#目录树形结构\" class=\"headerlink\" title=\"目录树形结构\"></a>目录树形结构</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查是否安装</span></span><br><span class=\"line\">$ tree --version</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">$ brew install tree</span><br><span class=\"line\"><span class=\"comment\"># 展示目录结构 -N 解决中文乱码</span></span><br><span class=\"line\">$ tree -N</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">官方网站</a></p>\n","site":{"data":{}},"excerpt":"<p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</p>\n<p>官网：<a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">https://brew.sh/index_zh-cn</a></p>","more":"<p><br></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Homebrew以Ruby语言写成，针对于Mac OS X操作系统自带Ruby的版本。默认安装在/usr/local，由一个核心git版本库构成，以使用户能更新Homebrew。\n包管理器使用一种称为“公式”（formula）的DSL脚本来管理依赖、下载源代码及配置和编译软件，从源代码中构建软件。</p>\n<p>Homebrew 会将软件包安装到独立目录，并将其文件软链接至 /usr/local 。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local</span><br><span class=\"line\">$ find Cellar</span><br><span class=\"line\">Cellar/wget/1.16.1</span><br><span class=\"line\">Cellar/wget/1.16.1/bin/wget</span><br><span class=\"line\">Cellar/wget/1.16.1/share/man/man1/wget.1</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"安装-推荐\"><a href=\"#安装-推荐\" class=\"headerlink\" title=\"安装(推荐)\"></a>安装(推荐)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看是否已经安装</span></span><br><span class=\"line\">brew --version</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装指定的软件</span></span><br><span class=\"line\">brew install &lt;formula&gt;</span><br><span class=\"line\"><span class=\"comment\"># 卸载指定的软件</span></span><br><span class=\"line\">brew uninstall &lt;formula&gt;</span><br><span class=\"line\"><span class=\"comment\"># 更新指定的软件</span></span><br><span class=\"line\">brew upgrade &lt;formula&gt;</span><br><span class=\"line\"><span class=\"comment\"># 展示brew安装的所有软件</span></span><br><span class=\"line\">brew list</span><br><span class=\"line\"><span class=\"comment\"># 展示brew信息</span></span><br><span class=\"line\">brew info</span><br><span class=\"line\"><span class=\"comment\"># 检测过时软件</span></span><br><span class=\"line\">brew outdated</span><br></pre></td></tr></table></figure>\n<h2 id=\"软件推荐\"><a href=\"#软件推荐\" class=\"headerlink\" title=\"软件推荐\"></a>软件推荐</h2><h3 id=\"目录树形结构\"><a href=\"#目录树形结构\" class=\"headerlink\" title=\"目录树形结构\"></a>目录树形结构</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查是否安装</span></span><br><span class=\"line\">$ tree --version</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">$ brew install tree</span><br><span class=\"line\"><span class=\"comment\"># 展示目录结构 -N 解决中文乱码</span></span><br><span class=\"line\">$ tree -N</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">官方网站</a></p>"},{"title":"Gihub搭建Hexo","date":"2012-08-01T00:01:01.000Z","_content":"\n当前教程在Mac上面搭建Hexo\n\n## 环境准备\n\n### Nodejs安装\n\n``` bash\n# 测试是否安装\n$ node -v\n# 如果没有安装，请安装\n$ node install\n```\n\n<!-- more -->\n\n\n### Git安装\n\n参考：[Git 安装](/2012/08/01/Mac安装Git)\n\n\n### Hexo安装\n\n``` bash\n# 测试是否安装\n$ hexo -v\n# 如果没有版本信息，代表没有安装，请按照如下安装Hexo\n$ npm install -g hexo-cli\n```\n\n\n## Github搭建Hexo\n\n### 创建Hexo\n\n如果 https://github.com 没有注册账号，先注册: https://github.com/join\n\n在Github创建项目，格式必须要遵守：`账户名.github.io`\n创建地址：https://github.com/new\n\n我的账户名：https://github.com/Gumihoy\n我的创建项目：`Gumihoy.github.io`\n\n![创建项目](1542073066701.jpg)\n\n``` bash\n# 克隆下项目且初始化hexo\n\n$ git clone https://github.com/Gumihoy/Gumihoy.github.io.git\n$ hexo init\n```\n\n### Hexo 配置\n\n在 `Gumihoy.github.io` 目录修改 `_config.yml`文件\n``` yml\n# 图片\npost_asset_folder: true\n\n# 配置 github项目关联\ndeploy:\n  type: git\n  repo: https://github.com/Gumihoy/Gumihoy.github.io.git\n  branch: master\n```\n\n### 生成静态文件\n\n``` bash\n$ hexo g\n```\n\n### 启动\n\n``` bash\n$ hexo s\n```\n访问地址： http://127.0.0.1:4000\n\n\n### 创建分类页\n``` bash\n$ hexo new page categories\n```\n\n\n### 创建标签页\n``` bash\n$ hexo new page tags\n```\n\n\n### 创建404页面\n\n``` bash\n$ hexo new page 404\n```\n\n404\b内容\n``` markdown\n---\ntitle: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\nfancybox: false\nnoDate: \"true\"\n---\n\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"https//music.163.com/outchain/player?type=0&id=993980219&auto=1&height=430\"></iframe>\n</div>\n```\n\n### 主题\n在theme目录下面执行下面命令\n``` bash\ngit clone https://github.com/Gumihoy/hexo-theme-spfk.git\n```\n在 `Gumihoy.github.io` 目录下 `_config.yml` 文件\b修改配置\n\n``` yml\ntheme: hexo-theme-spfk\n```\n可以按照上面`生成静态页`、`启动`命令查看主题是否生效\n\n\n### 评论：gitalk\n\n在`hexo-theme-spfk`目录下面`_config.yml`文件找到 gitalk配置，配置如下\n``` yml\ngitalk:\n  on: true\n  owner: gumihoy\n  admin: gumihoy\n  repo: gumihoy.github.io\n  client_id: acedb7865ff08426fa73\n  client_secret: f80c2b21236d7eb803d6069c7424de26d957e1bf\n```\n\n`client_id`、`client_secret` 可以在Github创建OAuth Apps获取，地址：https://github.com/settings/developers\n![OAuth Apps](1542037823098.jpg)\n\n![OAuth Apps配置](1542074055382.jpg)\n\n用自己的 `client_id`、`client_secret` 替换\n\n## Hexo 使用\n\n<br/>\n### 创建一个文章\n\n``` bash\n$ hexo new xx\n```\n上面命令会在 `source/_posts`目录下面创建 `xx.md`一个文件，打开`xx.md`可以写文章了\n\n<br/>\n### 文章插入图片\n在 `Gumihoy.github.io` 目录下 `_config.xml`文件 配置\n``` yml\n# 图片\npost_asset_folder: true\n```\n\n按照上面命令创建一个文章，\b会同时生成一个同样名字的目录，\n把文章图片copy到目录中，再在文章引用，如下\n`目录下图片文件：1542074055382.jpg；引用：![OAuth Apps配置](1542074055382.jpg)`\n\n\n<br/>\n### 文章摘要设置\n\n在文章插入 `<!-- more -->` ，`<!-- more -->`之前的内容就是摘要\n\n\n\n\n------\n参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)","source":"_posts/Github搭建Hexo.md","raw":"---\ntitle: Gihub搭建Hexo\ndate: 2012-08-01 08:01:01\ncategories: \n    - Hexo\ntags: \n    - Hexo\n---\n\n当前教程在Mac上面搭建Hexo\n\n## 环境准备\n\n### Nodejs安装\n\n``` bash\n# 测试是否安装\n$ node -v\n# 如果没有安装，请安装\n$ node install\n```\n\n<!-- more -->\n\n\n### Git安装\n\n参考：[Git 安装](/2012/08/01/Mac安装Git)\n\n\n### Hexo安装\n\n``` bash\n# 测试是否安装\n$ hexo -v\n# 如果没有版本信息，代表没有安装，请按照如下安装Hexo\n$ npm install -g hexo-cli\n```\n\n\n## Github搭建Hexo\n\n### 创建Hexo\n\n如果 https://github.com 没有注册账号，先注册: https://github.com/join\n\n在Github创建项目，格式必须要遵守：`账户名.github.io`\n创建地址：https://github.com/new\n\n我的账户名：https://github.com/Gumihoy\n我的创建项目：`Gumihoy.github.io`\n\n![创建项目](1542073066701.jpg)\n\n``` bash\n# 克隆下项目且初始化hexo\n\n$ git clone https://github.com/Gumihoy/Gumihoy.github.io.git\n$ hexo init\n```\n\n### Hexo 配置\n\n在 `Gumihoy.github.io` 目录修改 `_config.yml`文件\n``` yml\n# 图片\npost_asset_folder: true\n\n# 配置 github项目关联\ndeploy:\n  type: git\n  repo: https://github.com/Gumihoy/Gumihoy.github.io.git\n  branch: master\n```\n\n### 生成静态文件\n\n``` bash\n$ hexo g\n```\n\n### 启动\n\n``` bash\n$ hexo s\n```\n访问地址： http://127.0.0.1:4000\n\n\n### 创建分类页\n``` bash\n$ hexo new page categories\n```\n\n\n### 创建标签页\n``` bash\n$ hexo new page tags\n```\n\n\n### 创建404页面\n\n``` bash\n$ hexo new page 404\n```\n\n404\b内容\n``` markdown\n---\ntitle: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\nfancybox: false\nnoDate: \"true\"\n---\n\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"https//music.163.com/outchain/player?type=0&id=993980219&auto=1&height=430\"></iframe>\n</div>\n```\n\n### 主题\n在theme目录下面执行下面命令\n``` bash\ngit clone https://github.com/Gumihoy/hexo-theme-spfk.git\n```\n在 `Gumihoy.github.io` 目录下 `_config.yml` 文件\b修改配置\n\n``` yml\ntheme: hexo-theme-spfk\n```\n可以按照上面`生成静态页`、`启动`命令查看主题是否生效\n\n\n### 评论：gitalk\n\n在`hexo-theme-spfk`目录下面`_config.yml`文件找到 gitalk配置，配置如下\n``` yml\ngitalk:\n  on: true\n  owner: gumihoy\n  admin: gumihoy\n  repo: gumihoy.github.io\n  client_id: acedb7865ff08426fa73\n  client_secret: f80c2b21236d7eb803d6069c7424de26d957e1bf\n```\n\n`client_id`、`client_secret` 可以在Github创建OAuth Apps获取，地址：https://github.com/settings/developers\n![OAuth Apps](1542037823098.jpg)\n\n![OAuth Apps配置](1542074055382.jpg)\n\n用自己的 `client_id`、`client_secret` 替换\n\n## Hexo 使用\n\n<br/>\n### 创建一个文章\n\n``` bash\n$ hexo new xx\n```\n上面命令会在 `source/_posts`目录下面创建 `xx.md`一个文件，打开`xx.md`可以写文章了\n\n<br/>\n### 文章插入图片\n在 `Gumihoy.github.io` 目录下 `_config.xml`文件 配置\n``` yml\n# 图片\npost_asset_folder: true\n```\n\n按照上面命令创建一个文章，\b会同时生成一个同样名字的目录，\n把文章图片copy到目录中，再在文章引用，如下\n`目录下图片文件：1542074055382.jpg；引用：![OAuth Apps配置](1542074055382.jpg)`\n\n\n<br/>\n### 文章摘要设置\n\n在文章插入 `<!-- more -->` ，`<!-- more -->`之前的内容就是摘要\n\n\n\n\n------\n参考\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)","slug":"Github搭建Hexo","published":1,"updated":"2019-11-02T07:12:18.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y500019t6s6fduft0zf","content":"<p>当前教程在Mac上面搭建Hexo</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"Nodejs安装\"><a href=\"#Nodejs安装\" class=\"headerlink\" title=\"Nodejs安装\"></a>Nodejs安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试是否安装</span></span><br><span class=\"line\">$ node -v</span><br><span class=\"line\"><span class=\"comment\"># 如果没有安装，请安装</span></span><br><span class=\"line\">$ node install</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"Git安装\"><a href=\"#Git安装\" class=\"headerlink\" title=\"Git安装\"></a>Git安装</h3><p>参考：<a href=\"/2012/08/01/Mac安装Git\">Git 安装</a></p>\n<h3 id=\"Hexo安装\"><a href=\"#Hexo安装\" class=\"headerlink\" title=\"Hexo安装\"></a>Hexo安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试是否安装</span></span><br><span class=\"line\">$ hexo -v</span><br><span class=\"line\"><span class=\"comment\"># 如果没有版本信息，代表没有安装，请按照如下安装Hexo</span></span><br><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"Github搭建Hexo\"><a href=\"#Github搭建Hexo\" class=\"headerlink\" title=\"Github搭建Hexo\"></a>Github搭建Hexo</h2><h3 id=\"创建Hexo\"><a href=\"#创建Hexo\" class=\"headerlink\" title=\"创建Hexo\"></a>创建Hexo</h3><p>如果 <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">https://github.com</a> 没有注册账号，先注册: <a href=\"https://github.com/join\" target=\"_blank\" rel=\"noopener\">https://github.com/join</a></p>\n<p>在Github创建项目，格式必须要遵守：<code>账户名.github.io</code>\n创建地址：<a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">https://github.com/new</a></p>\n<p>我的账户名：<a href=\"https://github.com/Gumihoy\" target=\"_blank\" rel=\"noopener\">https://github.com/Gumihoy</a>\n我的创建项目：<code>Gumihoy.github.io</code></p>\n<p><img src=\"1542073066701.jpg\" alt=\"创建项目\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆下项目且初始化hexo</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Gumihoy/Gumihoy.github.io.git</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo-配置\"><a href=\"#Hexo-配置\" class=\"headerlink\" title=\"Hexo 配置\"></a>Hexo 配置</h3><p>在 <code>Gumihoy.github.io</code> 目录修改 <code>_config.yml</code>文件\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 图片</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置 github项目关联</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/Gumihoy/Gumihoy.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p>访问地址： <a href=\"http://127.0.0.1:4000\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:4000</a></p>\n<h3 id=\"创建分类页\"><a href=\"#创建分类页\" class=\"headerlink\" title=\"创建分类页\"></a>创建分类页</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建标签页\"><a href=\"#创建标签页\" class=\"headerlink\" title=\"创建标签页\"></a>创建标签页</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建404页面\"><a href=\"#创建404页面\" class=\"headerlink\" title=\"创建404页面\"></a>创建404页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page 404</span><br></pre></td></tr></table></figure>\n<p>404\b内容\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 404 Not Found：该页无法显示</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">permalink: /404</span><br><span class=\"line\">fancybox: false</span><br><span class=\"line\">noDate: \"true\"</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style type=\"text/css\"&gt;</span><br><span class=\"line\"><span class=\"code\">\t.article-title &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tfont-size: 2.1em;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tstrong a &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tcolor: #747474;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.share &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tdisplay: none;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.player &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tmargin-left: -10px;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.sign &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\ttext-align: right;</span></span><br><span class=\"line\"><span class=\"code\">\t\tfont-style: italic;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\">  \t#page-visit &#123;</span><br><span class=\"line\"><span class=\"code\">\t\tdisplay: none;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.center &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"code\">\t\theight: 2.5em;</span></span><br><span class=\"line\"><span class=\"code\">\t\tfont-weight: bold;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.search2 &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\theight: 2.2em;</span></span><br><span class=\"line\"><span class=\"code\">\t\tfont-size: 1em;</span></span><br><span class=\"line\"><span class=\"code\">\t\twidth: 50%;</span></span><br><span class=\"line\"><span class=\"code\">\t\tmargin: auto 24%;</span></span><br><span class=\"line\"><span class=\"code\">\t\tcolor: #727272;</span></span><br><span class=\"line\"><span class=\"code\">\t\topacity: .6;</span></span><br><span class=\"line\"><span class=\"code\">\t\tborder: 2px solid lightgray;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.search2:hover &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\topacity: 1;</span></span><br><span class=\"line\"><span class=\"code\">\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)</span></span><br><span class=\"line\"><span class=\"code\">\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\t.article-entry hr &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tmargin: 0;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.pic &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"code\">\t\tmargin: 0;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.pic br &#123;</span></span><br><span class=\"line\">  \t\tdisplay: none;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"emphasis\">***</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=\"center\"&gt;很抱歉，您所访问的地址并不存在: &lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=\"center\"&gt;&lt;a href=\"/\"&gt;回主页&lt;/a&gt; · &lt;a href=\"/archives\"&gt;所有文章&lt;/a&gt; · &lt;a href=\"/about\"&gt;留言板&lt;/a&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=\"center\"&gt;可在边栏搜索框中对本站进行检索，以获取相关信息。&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=\"text-align: center\"&gt;</span><br><span class=\"line\">以下是博主喜欢的一些歌曲，可以听听，稍作休息~</span><br><span class=\"line\">&lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"https//music.163.com/outchain/player?type=0&amp;id=993980219&amp;auto=1&amp;height=430\"&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p>在theme目录下面执行下面命令\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Gumihoy/hexo-theme-spfk.git</span><br></pre></td></tr></table></figure></p>\n<p>在 <code>Gumihoy.github.io</code> 目录下 <code>_config.yml</code> 文件\b修改配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">hexo-theme-spfk</span></span><br></pre></td></tr></table></figure>\n<p>可以按照上面<code>生成静态页</code>、<code>启动</code>命令查看主题是否生效</p>\n<h3 id=\"评论：gitalk\"><a href=\"#评论：gitalk\" class=\"headerlink\" title=\"评论：gitalk\"></a>评论：gitalk</h3><p>在<code>hexo-theme-spfk</code>目录下面<code>_config.yml</code>文件找到 gitalk配置，配置如下\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">on:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span> <span class=\"string\">gumihoy</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span> <span class=\"string\">gumihoy</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">gumihoy.github.io</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span> <span class=\"string\">acedb7865ff08426fa73</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span> <span class=\"string\">f80c2b21236d7eb803d6069c7424de26d957e1bf</span></span><br></pre></td></tr></table></figure></p>\n<p><code>client_id</code>、<code>client_secret</code> 可以在Github创建OAuth Apps获取，地址：<a href=\"https://github.com/settings/developers\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/developers</a>\n<img src=\"1542037823098.jpg\" alt=\"OAuth Apps\"></p>\n<p><img src=\"1542074055382.jpg\" alt=\"OAuth Apps配置\"></p>\n<p>用自己的 <code>client_id</code>、<code>client_secret</code> 替换</p>\n<h2 id=\"Hexo-使用\"><a href=\"#Hexo-使用\" class=\"headerlink\" title=\"Hexo 使用\"></a>Hexo 使用</h2><p><br></p>\n<h3 id=\"创建一个文章\"><a href=\"#创建一个文章\" class=\"headerlink\" title=\"创建一个文章\"></a>创建一个文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new xx</span><br></pre></td></tr></table></figure>\n<p>上面命令会在 <code>source/_posts</code>目录下面创建 <code>xx.md</code>一个文件，打开<code>xx.md</code>可以写文章了</p>\n<p><br></p>\n<h3 id=\"文章插入图片\"><a href=\"#文章插入图片\" class=\"headerlink\" title=\"文章插入图片\"></a>文章插入图片</h3><p>在 <code>Gumihoy.github.io</code> 目录下 <code>_config.xml</code>文件 配置\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 图片</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>按照上面命令创建一个文章，\b会同时生成一个同样名字的目录，\n把文章图片copy到目录中，再在文章引用，如下\n<code>目录下图片文件：1542074055382.jpg；引用：![OAuth Apps配置](1542074055382.jpg)</code></p>\n<p><br></p>\n<h3 id=\"文章摘要设置\"><a href=\"#文章摘要设置\" class=\"headerlink\" title=\"文章摘要设置\"></a>文章摘要设置</h3><p>在文章插入 <code>&lt;!-- more --&gt;</code> ，<code>&lt;!-- more --&gt;</code>之前的内容就是摘要</p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>\n","site":{"data":{}},"excerpt":"<p>当前教程在Mac上面搭建Hexo</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"Nodejs安装\"><a href=\"#Nodejs安装\" class=\"headerlink\" title=\"Nodejs安装\"></a>Nodejs安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试是否安装</span></span><br><span class=\"line\">$ node -v</span><br><span class=\"line\"><span class=\"comment\"># 如果没有安装，请安装</span></span><br><span class=\"line\">$ node install</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"Git安装\"><a href=\"#Git安装\" class=\"headerlink\" title=\"Git安装\"></a>Git安装</h3><p>参考：<a href=\"/2012/08/01/Mac安装Git\">Git 安装</a></p>\n<h3 id=\"Hexo安装\"><a href=\"#Hexo安装\" class=\"headerlink\" title=\"Hexo安装\"></a>Hexo安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试是否安装</span></span><br><span class=\"line\">$ hexo -v</span><br><span class=\"line\"><span class=\"comment\"># 如果没有版本信息，代表没有安装，请按照如下安装Hexo</span></span><br><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"Github搭建Hexo\"><a href=\"#Github搭建Hexo\" class=\"headerlink\" title=\"Github搭建Hexo\"></a>Github搭建Hexo</h2><h3 id=\"创建Hexo\"><a href=\"#创建Hexo\" class=\"headerlink\" title=\"创建Hexo\"></a>创建Hexo</h3><p>如果 <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">https://github.com</a> 没有注册账号，先注册: <a href=\"https://github.com/join\" target=\"_blank\" rel=\"noopener\">https://github.com/join</a></p>\n<p>在Github创建项目，格式必须要遵守：<code>账户名.github.io</code>\n创建地址：<a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">https://github.com/new</a></p>\n<p>我的账户名：<a href=\"https://github.com/Gumihoy\" target=\"_blank\" rel=\"noopener\">https://github.com/Gumihoy</a>\n我的创建项目：<code>Gumihoy.github.io</code></p>\n<p><img src=\"1542073066701.jpg\" alt=\"创建项目\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆下项目且初始化hexo</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Gumihoy/Gumihoy.github.io.git</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo-配置\"><a href=\"#Hexo-配置\" class=\"headerlink\" title=\"Hexo 配置\"></a>Hexo 配置</h3><p>在 <code>Gumihoy.github.io</code> 目录修改 <code>_config.yml</code>文件\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 图片</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置 github项目关联</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/Gumihoy/Gumihoy.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p>访问地址： <a href=\"http://127.0.0.1:4000\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:4000</a></p>\n<h3 id=\"创建分类页\"><a href=\"#创建分类页\" class=\"headerlink\" title=\"创建分类页\"></a>创建分类页</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建标签页\"><a href=\"#创建标签页\" class=\"headerlink\" title=\"创建标签页\"></a>创建标签页</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建404页面\"><a href=\"#创建404页面\" class=\"headerlink\" title=\"创建404页面\"></a>创建404页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page 404</span><br></pre></td></tr></table></figure>\n<p>404\b内容\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 404 Not Found：该页无法显示</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">permalink: /404</span><br><span class=\"line\">fancybox: false</span><br><span class=\"line\">noDate: \"true\"</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style type=\"text/css\"&gt;</span><br><span class=\"line\"><span class=\"code\">\t.article-title &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tfont-size: 2.1em;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tstrong a &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tcolor: #747474;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.share &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tdisplay: none;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.player &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tmargin-left: -10px;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.sign &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\ttext-align: right;</span></span><br><span class=\"line\"><span class=\"code\">\t\tfont-style: italic;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\">  \t#page-visit &#123;</span><br><span class=\"line\"><span class=\"code\">\t\tdisplay: none;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.center &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"code\">\t\theight: 2.5em;</span></span><br><span class=\"line\"><span class=\"code\">\t\tfont-weight: bold;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.search2 &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\theight: 2.2em;</span></span><br><span class=\"line\"><span class=\"code\">\t\tfont-size: 1em;</span></span><br><span class=\"line\"><span class=\"code\">\t\twidth: 50%;</span></span><br><span class=\"line\"><span class=\"code\">\t\tmargin: auto 24%;</span></span><br><span class=\"line\"><span class=\"code\">\t\tcolor: #727272;</span></span><br><span class=\"line\"><span class=\"code\">\t\topacity: .6;</span></span><br><span class=\"line\"><span class=\"code\">\t\tborder: 2px solid lightgray;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.search2:hover &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\topacity: 1;</span></span><br><span class=\"line\"><span class=\"code\">\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)</span></span><br><span class=\"line\"><span class=\"code\">\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\t.article-entry hr &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tmargin: 0;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.pic &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"code\">\t\tmargin: 0;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t.pic br &#123;</span></span><br><span class=\"line\">  \t\tdisplay: none;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"emphasis\">***</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=\"center\"&gt;很抱歉，您所访问的地址并不存在: &lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=\"center\"&gt;&lt;a href=\"/\"&gt;回主页&lt;/a&gt; · &lt;a href=\"/archives\"&gt;所有文章&lt;/a&gt; · &lt;a href=\"/about\"&gt;留言板&lt;/a&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p class=\"center\"&gt;可在边栏搜索框中对本站进行检索，以获取相关信息。&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=\"text-align: center\"&gt;</span><br><span class=\"line\">以下是博主喜欢的一些歌曲，可以听听，稍作休息~</span><br><span class=\"line\">&lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"https//music.163.com/outchain/player?type=0&amp;id=993980219&amp;auto=1&amp;height=430\"&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p>在theme目录下面执行下面命令\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Gumihoy/hexo-theme-spfk.git</span><br></pre></td></tr></table></figure></p>\n<p>在 <code>Gumihoy.github.io</code> 目录下 <code>_config.yml</code> 文件\b修改配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">hexo-theme-spfk</span></span><br></pre></td></tr></table></figure>\n<p>可以按照上面<code>生成静态页</code>、<code>启动</code>命令查看主题是否生效</p>\n<h3 id=\"评论：gitalk\"><a href=\"#评论：gitalk\" class=\"headerlink\" title=\"评论：gitalk\"></a>评论：gitalk</h3><p>在<code>hexo-theme-spfk</code>目录下面<code>_config.yml</code>文件找到 gitalk配置，配置如下\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">on:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span> <span class=\"string\">gumihoy</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span> <span class=\"string\">gumihoy</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">gumihoy.github.io</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span> <span class=\"string\">acedb7865ff08426fa73</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span> <span class=\"string\">f80c2b21236d7eb803d6069c7424de26d957e1bf</span></span><br></pre></td></tr></table></figure></p>\n<p><code>client_id</code>、<code>client_secret</code> 可以在Github创建OAuth Apps获取，地址：<a href=\"https://github.com/settings/developers\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/developers</a>\n<img src=\"1542037823098.jpg\" alt=\"OAuth Apps\"></p>\n<p><img src=\"1542074055382.jpg\" alt=\"OAuth Apps配置\"></p>\n<p>用自己的 <code>client_id</code>、<code>client_secret</code> 替换</p>\n<h2 id=\"Hexo-使用\"><a href=\"#Hexo-使用\" class=\"headerlink\" title=\"Hexo 使用\"></a>Hexo 使用</h2><p><br></p>\n<h3 id=\"创建一个文章\"><a href=\"#创建一个文章\" class=\"headerlink\" title=\"创建一个文章\"></a>创建一个文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new xx</span><br></pre></td></tr></table></figure>\n<p>上面命令会在 <code>source/_posts</code>目录下面创建 <code>xx.md</code>一个文件，打开<code>xx.md</code>可以写文章了</p>\n<p><br></p>\n<h3 id=\"文章插入图片\"><a href=\"#文章插入图片\" class=\"headerlink\" title=\"文章插入图片\"></a>文章插入图片</h3><p>在 <code>Gumihoy.github.io</code> 目录下 <code>_config.xml</code>文件 配置\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 图片</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>按照上面命令创建一个文章，\b会同时生成一个同样名字的目录，\n把文章图片copy到目录中，再在文章引用，如下\n<code>目录下图片文件：1542074055382.jpg；引用：![OAuth Apps配置](1542074055382.jpg)</code></p>\n<p><br></p>\n<h3 id=\"文章摘要设置\"><a href=\"#文章摘要设置\" class=\"headerlink\" title=\"文章摘要设置\"></a>文章摘要设置</h3><p>在文章插入 <code>&lt;!-- more --&gt;</code> ，<code>&lt;!-- more --&gt;</code>之前的内容就是摘要</p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>"},{"title":"ID3算法","date":"2018-11-10T02:01:01.000Z","_content":"\n\n\n\n\n<!-- more -->\n\n\n--- \n参考\n\n[wikipedia-ID3算法](https://en.wikipedia.org/wiki/ID3_algorithm)","source":"_posts/ID3算法.md","raw":"---\ntitle: ID3算法\ndate: 2018-11-10 10:01:01\ncategories: \n    - 机器学习\ntags:\n    - 算法\n    - 机器学习\n    - 决策树\n---\n\n\n\n\n\n<!-- more -->\n\n\n--- \n参考\n\n[wikipedia-ID3算法](https://en.wikipedia.org/wiki/ID3_algorithm)","slug":"ID3算法","published":1,"updated":"2019-11-02T07:12:18.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y52001dt6s6zxst7yvp","content":"<a id=\"more\"></a>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/ID3_algorithm\" target=\"_blank\" rel=\"noopener\">wikipedia-ID3算法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/ID3_algorithm\" target=\"_blank\" rel=\"noopener\">wikipedia-ID3算法</a></p>"},{"title":"Java Agent详解","date":"2019-08-13T03:29:09.000Z","_content":"\n\n`Java Agent`就是利用 `Java5` 提供的 `Instrumentation` 机制。\n在 `Java SE 5` 中，`Instrument` 要求与应用一块启动（设置参数启动 `-javaagent:agent.jar` ）\n在 `Java SE 6` 里面，`Instrumentation` 被赋予了更强大的功能：启动后的 instrument、本地代码（native code）instrument，以及动态改变 classpath 等等.\n\n\n`Java Agent`在不侵入代码字节码注入的方式对应用功能的增强和修改。\n\n\n<!-- more -->\n\n\n## 代码实现步骤\n\n### 1、代码\n\n**一、以vm参数的方式载入，在Java程序的main方法执行之前执行（JDK1.5和以上）**\n\n```java\n// 如果同时存在下面两个方法，第一个方法先执行\n\npublic static void premain(String arguments, Instrumentation instrumentation) {\n}\n\npublic static void premain(String arguments) {\n}\n\n```\n\n\n**二、以Attach的方式载入，在Java程序启动后执行（JDK1.6和以上）**\n\n```java\n// 如果同时存在下面两个方法，第一个方法先执行\n\npublic static void agentmain(String arguments, Instrumentation instrumentation) {\n\n}\npublic static void agentmain(String arguments) {\n\n}\n```\n\n\n\n<br/>\n### 2、配置\n#### 打包配置\n`META-INF/MANIFEST.MF`文件必须有以下参数配置\n```java\nManifest-Version: 1.0\n// JDK1.5，必须与应用一块启动\nPremain-Class: com.gumihoy.apm.agent.APMAgent\n// JDK1.6, 可以在应用启动之后再启动\nAgent-Class: com.gumihoy.apm.agent.APMAgent\n// 布尔值（true 或 false，与大小写无关）, 是否能重定义此代理所需的类\nCan-Redefine-Classes: true\n// 布尔值（true 或 false，与大小写无关）, 是否能重转换此代理所需的类\nCan-Retransform-Classes: true\n// 布尔值（true 或 false，与大小写无关）, 是否能设置此代理所需的本机方法前缀\nCan-Set-Native-Method-Prefix: true\n空行\n```\n> 最后一行（空行）必须要有\n\n<br/>\n#### 实现方式\n##### 一、Maven\n\n**方法一：使用插件maven-jar-plugin**\n只有一个包：\n- agent.jar: 包含第三方jar\n\n```xml\n <plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <version>3.1.2</version>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n            </manifest>\n            <manifestEntries>\n                <Premain-Class>com.gumihoy.apm.agent.APMAgent</Premain-Class>\n                <Can-Redefine-Classes>true</Can-Redefine-Classes>\n                <Can-Retransform-Classes>true</Can-Retransform-Classes>\n            </manifestEntries>\n        </archive>\n    </configuration>\n</plugin>\n```\n\n**方法二：使用插件maven-shade-plugin**\n两个包：\n- agent.jar: 包含第三方jar\n- original-agent.jar: 不饱和第三方jar，原始包\n\n```xml\n<plugin>\n    <artifactId>maven-shade-plugin</artifactId>\n    <executions>\n        <execution>\n            <phase>package</phase>\n            <goals>\n                <goal>shade</goal>\n            </goals>\n            <configuration>\n                <shadedArtifactAttached>false</shadedArtifactAttached>\n                <createDependencyReducedPom>true</createDependencyReducedPom>\n                <createSourcesJar>true</createSourcesJar>\n                <shadeSourcesContent>true</shadeSourcesContent>\n                <transformers>\n                    <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                        <manifestEntries>\n                            <Premain-Class>${premain.class}</Premain-Class>\n                            <Can-Redefine-Classes>${can.redefine.classes}</Can-Redefine-Classes>\n                            <Can-Retransform-Classes>${can.retransform.classes}</Can-Retransform-Classes>\n                        </manifestEntries>\n                    </transformer>\n                </transformers>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n```\n\n**方法三：使用插件maven-assembly-plugin**\n两个包：\n- agent.jar: 不饱和第三方jar，原始包\n- agent-jar-with-dependencies.jar: 包含第三方jar\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-assembly-plugin</artifactId>\n    <version>2.4.1</version>\n    <configuration>\n        <!-- get all project dependencies -->\n        <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n        </descriptorRefs>\n        <!-- MainClass in mainfest make a executable jar -->\n        <archive> \n            <manifest>\n                <addClasspath>true</addClasspath>\n            </manifest>\n            <manifestEntries>\n                <Premain-Class>com.gumihoy.apm.agent.APMAgent</Premain-Class>\n                <Can-Redefine-Classes>true</Can-Redefine-Classes>\n                <Can-Retransform-Classes>true</Can-Retransform-Classes>\n            </manifestEntries>\n                    \n        </archive>\n    </configuration>\n    <executions>\n        <execution>\n            <id>make-assembly</id>\n            <!-- bind to the packaging phase -->\n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n##### 二、Gradle\n```gradle\njar {\n    manifest {\n        attributes(\n                'Premain-Class': 'xx.Agent',\n                'Agent-Class': 'cxx.Agent',\n                'Can-Redefine-Classes': 'true',\n                'Can-Retransform-Classes': 'true',\n                'Can-Set-Native-Method-Prefix': 'true',\n                'Implementation-Title': \"CallSpy\",\n                'Implementation-Version': rootProject.version,\n                'Built-By': System.getProperty('user.name'),\n                'Built-Date': new Date(),\n                'Built-JDK': System.getProperty('java.version')\n        )\n    }\n}\n\n```\n\n\n<br/>\n### 3、启动\n**一、vm参数配置启动**\n```java\n-javaagent:agent.jar[=arguments]\n```\n> arguments: 参数，String 类型。多个参数后端必须处理（如a=1,b=2 or a=1;b=2）\n\n\n<br/>\n## 框架\n\n | baseline | Byte Buddy | cglib | Javassist | Java proxy\n-|----------|------------|-------|-----------|-----------\ntrivial class creation | 0.003 (0.001) | 142.772 (1.390) | 515.174 (26.753) | 193.733 (4.430) | 70.712 (0.645)\ninterface implementation | 0.004 (0.001) | 1'126.364 (10.328) | 960.527 (11.788) | 1'070.766 (59.865) | 1'060.766 (12.231)\nstub method invocation | 0.002 (0.001) | 0.002 (0.001) | 0.003 (0.001) | 0.011 (0.001) | 0.008 (0.001)\nclass extension | 0.004 (0.001) | 885.983 5'408.329 | (7.901) (52.437) | 1'632.730 (52.737) | 683.478 (6.735) | –\nsuper method invocation | 0.004 (0.001) | 0.004 <br/> 0.004 | (0.001) <br/> (0.001) | 0.021 (0.001) | 0.025 (0.001) | –\n\n\n> - javassist更偏向底层，比较难于使用并且在动态组合字符串以实现更复杂的逻辑时很容易出错\n> - cglib现在维护的则相当慢了，基本处于无人维护的阶段了，而这些缺点ByteBuddy都没有\n> - ByteBuddy性能相对来说在三者中是最优的\n\n\n### 使用 Byte Buddy 实现 JavaAgent\n\n#### 一、导入`jar`\n```xml\n<!-- https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy -->\n<dependency>\n    <groupId>net.bytebuddy</groupId>\n    <artifactId>byte-buddy</artifactId>\n    <version>1.10.0</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy-agent -->\n<dependency>\n    <groupId>net.bytebuddy</groupId>\n    <artifactId>byte-buddy-agent</artifactId>\n    <version>1.10.0</version>\n</dependency>\n```\n\n#### 二、`Agent`代码\n```java\npublic class APMAgent {\n\n\n    /**\n     * http://bytebuddy.net/#/tutorialTypeValidation\n     *\n     * @param arguments\n     * @param instrumentation\n     */\n    public static void premain(String arguments, Instrumentation instrumentation) {\n        System.out.println(\"xx\");\n//        ByteBuddy buddy = new ByteBuddy().with(TypeValidation.of(false)).with(ClassFileVersion.JAVA_V8);\n        new AgentBuilder.Default()\n                .type(ElementMatchers.nameStartsWith(\"com.gumihoy.apm.agent.demo\"))\n                .transform(new AgentTransformer())\n                .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)\n                .with(new AgentListener())\n                .installOn(instrumentation);\n    }\n\n    public static void agentmain(String arguments, Instrumentation instrumentation) {\n\n    }\n\n    protected static ElementMatcher<? super TypeDescription> buildIgnoreMatcher() {\n        return ElementMatchers.nameStartsWith(\"net.bytebuddy.*\");\n    }\n\n\n    static class AgentTransformer implements AgentBuilder.Transformer {\n        @Override\n        public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDescription typeDescription, ClassLoader classLoader, JavaModule module) {\n            return builder\n                    .method(ElementMatchers.any()) // 拦截任意方法\n                    .intercept(MethodDelegation.to(MethodIntercept.class)); // 委托\n        }\n    }\n\n\n    static class AgentListener implements AgentBuilder.Listener {\n        @Override\n        public void onDiscovery(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded) {\n\n        }\n\n        @Override\n        public void onTransformation(TypeDescription typeDescription, ClassLoader classLoader, JavaModule module, boolean loaded, DynamicType dynamicType) {\n\n        }\n\n        @Override\n        public void onIgnored(TypeDescription typeDescription, ClassLoader classLoader, JavaModule module, boolean loaded) {\n\n        }\n\n        @Override\n        public void onError(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded, Throwable throwable) {\n\n        }\n\n        @Override\n        public void onComplete(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded) {\n\n        }\n    }\n\n}\n\n\npublic class MethodIntercept {\n\n    @RuntimeType\n    public static Object intercept(@Origin Method method,\n                                   @SuperCall Callable<?> callable) throws Throwable {\n        long start = System.currentTimeMillis();\n        try {\n            // 原有函数执行\n            return callable.call();\n        } finally {\n            System.out.println(method + \": took \" + (System.currentTimeMillis() - start) + \"ms\");\n        }\n    }\n}\n```\n\n#### 三、应用代码\n```\npackage com.gumihoy.apm.agent.demo;\n\npublic class AgentTest {\n\n    public void fun1() throws Exception {\n        System.out.println(\"this is fun 1.\");\n        Thread.sleep(500);\n    }\n\n    private void fun2() throws Exception {\n        System.out.println(\"this is fun 2.\");\n        Thread.sleep(500);\n    }\n\n    public static void main(String[] args) throws Exception {\n        AgentTest test = new AgentTest();\n        test.fun1();\n        test.fun2();\n    }\n}\n```\n\n#### 四、打包\n[pom.xml配置](#实现方式)\n```\nmvn clean package\n```\n\n#### 五、启动\n![](1565784207465.jpg)\n\n\n#### 六、运行结果\n![](1565786297241.jpg)\n\n\n\n\n\n如何自定义类加载器，避免污染目前进程\n如何实现字节码的修改\n如何实现字节码的多次修改\n如何恢复被修改过的字节码\n如何卸载Java Agent的类\n卸载自定义类加载器遇到的一些坑\n\n---\n参考\n\n[Instrumentation介绍](https://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html)","source":"_posts/Java-Agent详解.md","raw":"---\ntitle: Java Agent详解\ndate: 2019-08-13 11:29:09\ncategories: \n    - Java\n    - JavaAgent\ntags:\n    - Java\n    - JavaAgent\n---\n\n\n`Java Agent`就是利用 `Java5` 提供的 `Instrumentation` 机制。\n在 `Java SE 5` 中，`Instrument` 要求与应用一块启动（设置参数启动 `-javaagent:agent.jar` ）\n在 `Java SE 6` 里面，`Instrumentation` 被赋予了更强大的功能：启动后的 instrument、本地代码（native code）instrument，以及动态改变 classpath 等等.\n\n\n`Java Agent`在不侵入代码字节码注入的方式对应用功能的增强和修改。\n\n\n<!-- more -->\n\n\n## 代码实现步骤\n\n### 1、代码\n\n**一、以vm参数的方式载入，在Java程序的main方法执行之前执行（JDK1.5和以上）**\n\n```java\n// 如果同时存在下面两个方法，第一个方法先执行\n\npublic static void premain(String arguments, Instrumentation instrumentation) {\n}\n\npublic static void premain(String arguments) {\n}\n\n```\n\n\n**二、以Attach的方式载入，在Java程序启动后执行（JDK1.6和以上）**\n\n```java\n// 如果同时存在下面两个方法，第一个方法先执行\n\npublic static void agentmain(String arguments, Instrumentation instrumentation) {\n\n}\npublic static void agentmain(String arguments) {\n\n}\n```\n\n\n\n<br/>\n### 2、配置\n#### 打包配置\n`META-INF/MANIFEST.MF`文件必须有以下参数配置\n```java\nManifest-Version: 1.0\n// JDK1.5，必须与应用一块启动\nPremain-Class: com.gumihoy.apm.agent.APMAgent\n// JDK1.6, 可以在应用启动之后再启动\nAgent-Class: com.gumihoy.apm.agent.APMAgent\n// 布尔值（true 或 false，与大小写无关）, 是否能重定义此代理所需的类\nCan-Redefine-Classes: true\n// 布尔值（true 或 false，与大小写无关）, 是否能重转换此代理所需的类\nCan-Retransform-Classes: true\n// 布尔值（true 或 false，与大小写无关）, 是否能设置此代理所需的本机方法前缀\nCan-Set-Native-Method-Prefix: true\n空行\n```\n> 最后一行（空行）必须要有\n\n<br/>\n#### 实现方式\n##### 一、Maven\n\n**方法一：使用插件maven-jar-plugin**\n只有一个包：\n- agent.jar: 包含第三方jar\n\n```xml\n <plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <version>3.1.2</version>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n            </manifest>\n            <manifestEntries>\n                <Premain-Class>com.gumihoy.apm.agent.APMAgent</Premain-Class>\n                <Can-Redefine-Classes>true</Can-Redefine-Classes>\n                <Can-Retransform-Classes>true</Can-Retransform-Classes>\n            </manifestEntries>\n        </archive>\n    </configuration>\n</plugin>\n```\n\n**方法二：使用插件maven-shade-plugin**\n两个包：\n- agent.jar: 包含第三方jar\n- original-agent.jar: 不饱和第三方jar，原始包\n\n```xml\n<plugin>\n    <artifactId>maven-shade-plugin</artifactId>\n    <executions>\n        <execution>\n            <phase>package</phase>\n            <goals>\n                <goal>shade</goal>\n            </goals>\n            <configuration>\n                <shadedArtifactAttached>false</shadedArtifactAttached>\n                <createDependencyReducedPom>true</createDependencyReducedPom>\n                <createSourcesJar>true</createSourcesJar>\n                <shadeSourcesContent>true</shadeSourcesContent>\n                <transformers>\n                    <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                        <manifestEntries>\n                            <Premain-Class>${premain.class}</Premain-Class>\n                            <Can-Redefine-Classes>${can.redefine.classes}</Can-Redefine-Classes>\n                            <Can-Retransform-Classes>${can.retransform.classes}</Can-Retransform-Classes>\n                        </manifestEntries>\n                    </transformer>\n                </transformers>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n```\n\n**方法三：使用插件maven-assembly-plugin**\n两个包：\n- agent.jar: 不饱和第三方jar，原始包\n- agent-jar-with-dependencies.jar: 包含第三方jar\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-assembly-plugin</artifactId>\n    <version>2.4.1</version>\n    <configuration>\n        <!-- get all project dependencies -->\n        <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n        </descriptorRefs>\n        <!-- MainClass in mainfest make a executable jar -->\n        <archive> \n            <manifest>\n                <addClasspath>true</addClasspath>\n            </manifest>\n            <manifestEntries>\n                <Premain-Class>com.gumihoy.apm.agent.APMAgent</Premain-Class>\n                <Can-Redefine-Classes>true</Can-Redefine-Classes>\n                <Can-Retransform-Classes>true</Can-Retransform-Classes>\n            </manifestEntries>\n                    \n        </archive>\n    </configuration>\n    <executions>\n        <execution>\n            <id>make-assembly</id>\n            <!-- bind to the packaging phase -->\n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n##### 二、Gradle\n```gradle\njar {\n    manifest {\n        attributes(\n                'Premain-Class': 'xx.Agent',\n                'Agent-Class': 'cxx.Agent',\n                'Can-Redefine-Classes': 'true',\n                'Can-Retransform-Classes': 'true',\n                'Can-Set-Native-Method-Prefix': 'true',\n                'Implementation-Title': \"CallSpy\",\n                'Implementation-Version': rootProject.version,\n                'Built-By': System.getProperty('user.name'),\n                'Built-Date': new Date(),\n                'Built-JDK': System.getProperty('java.version')\n        )\n    }\n}\n\n```\n\n\n<br/>\n### 3、启动\n**一、vm参数配置启动**\n```java\n-javaagent:agent.jar[=arguments]\n```\n> arguments: 参数，String 类型。多个参数后端必须处理（如a=1,b=2 or a=1;b=2）\n\n\n<br/>\n## 框架\n\n | baseline | Byte Buddy | cglib | Javassist | Java proxy\n-|----------|------------|-------|-----------|-----------\ntrivial class creation | 0.003 (0.001) | 142.772 (1.390) | 515.174 (26.753) | 193.733 (4.430) | 70.712 (0.645)\ninterface implementation | 0.004 (0.001) | 1'126.364 (10.328) | 960.527 (11.788) | 1'070.766 (59.865) | 1'060.766 (12.231)\nstub method invocation | 0.002 (0.001) | 0.002 (0.001) | 0.003 (0.001) | 0.011 (0.001) | 0.008 (0.001)\nclass extension | 0.004 (0.001) | 885.983 5'408.329 | (7.901) (52.437) | 1'632.730 (52.737) | 683.478 (6.735) | –\nsuper method invocation | 0.004 (0.001) | 0.004 <br/> 0.004 | (0.001) <br/> (0.001) | 0.021 (0.001) | 0.025 (0.001) | –\n\n\n> - javassist更偏向底层，比较难于使用并且在动态组合字符串以实现更复杂的逻辑时很容易出错\n> - cglib现在维护的则相当慢了，基本处于无人维护的阶段了，而这些缺点ByteBuddy都没有\n> - ByteBuddy性能相对来说在三者中是最优的\n\n\n### 使用 Byte Buddy 实现 JavaAgent\n\n#### 一、导入`jar`\n```xml\n<!-- https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy -->\n<dependency>\n    <groupId>net.bytebuddy</groupId>\n    <artifactId>byte-buddy</artifactId>\n    <version>1.10.0</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy-agent -->\n<dependency>\n    <groupId>net.bytebuddy</groupId>\n    <artifactId>byte-buddy-agent</artifactId>\n    <version>1.10.0</version>\n</dependency>\n```\n\n#### 二、`Agent`代码\n```java\npublic class APMAgent {\n\n\n    /**\n     * http://bytebuddy.net/#/tutorialTypeValidation\n     *\n     * @param arguments\n     * @param instrumentation\n     */\n    public static void premain(String arguments, Instrumentation instrumentation) {\n        System.out.println(\"xx\");\n//        ByteBuddy buddy = new ByteBuddy().with(TypeValidation.of(false)).with(ClassFileVersion.JAVA_V8);\n        new AgentBuilder.Default()\n                .type(ElementMatchers.nameStartsWith(\"com.gumihoy.apm.agent.demo\"))\n                .transform(new AgentTransformer())\n                .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)\n                .with(new AgentListener())\n                .installOn(instrumentation);\n    }\n\n    public static void agentmain(String arguments, Instrumentation instrumentation) {\n\n    }\n\n    protected static ElementMatcher<? super TypeDescription> buildIgnoreMatcher() {\n        return ElementMatchers.nameStartsWith(\"net.bytebuddy.*\");\n    }\n\n\n    static class AgentTransformer implements AgentBuilder.Transformer {\n        @Override\n        public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDescription typeDescription, ClassLoader classLoader, JavaModule module) {\n            return builder\n                    .method(ElementMatchers.any()) // 拦截任意方法\n                    .intercept(MethodDelegation.to(MethodIntercept.class)); // 委托\n        }\n    }\n\n\n    static class AgentListener implements AgentBuilder.Listener {\n        @Override\n        public void onDiscovery(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded) {\n\n        }\n\n        @Override\n        public void onTransformation(TypeDescription typeDescription, ClassLoader classLoader, JavaModule module, boolean loaded, DynamicType dynamicType) {\n\n        }\n\n        @Override\n        public void onIgnored(TypeDescription typeDescription, ClassLoader classLoader, JavaModule module, boolean loaded) {\n\n        }\n\n        @Override\n        public void onError(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded, Throwable throwable) {\n\n        }\n\n        @Override\n        public void onComplete(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded) {\n\n        }\n    }\n\n}\n\n\npublic class MethodIntercept {\n\n    @RuntimeType\n    public static Object intercept(@Origin Method method,\n                                   @SuperCall Callable<?> callable) throws Throwable {\n        long start = System.currentTimeMillis();\n        try {\n            // 原有函数执行\n            return callable.call();\n        } finally {\n            System.out.println(method + \": took \" + (System.currentTimeMillis() - start) + \"ms\");\n        }\n    }\n}\n```\n\n#### 三、应用代码\n```\npackage com.gumihoy.apm.agent.demo;\n\npublic class AgentTest {\n\n    public void fun1() throws Exception {\n        System.out.println(\"this is fun 1.\");\n        Thread.sleep(500);\n    }\n\n    private void fun2() throws Exception {\n        System.out.println(\"this is fun 2.\");\n        Thread.sleep(500);\n    }\n\n    public static void main(String[] args) throws Exception {\n        AgentTest test = new AgentTest();\n        test.fun1();\n        test.fun2();\n    }\n}\n```\n\n#### 四、打包\n[pom.xml配置](#实现方式)\n```\nmvn clean package\n```\n\n#### 五、启动\n![](1565784207465.jpg)\n\n\n#### 六、运行结果\n![](1565786297241.jpg)\n\n\n\n\n\n如何自定义类加载器，避免污染目前进程\n如何实现字节码的修改\n如何实现字节码的多次修改\n如何恢复被修改过的字节码\n如何卸载Java Agent的类\n卸载自定义类加载器遇到的一些坑\n\n---\n参考\n\n[Instrumentation介绍](https://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html)","slug":"Java-Agent详解","published":1,"updated":"2019-11-02T07:12:18.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y53001ht6s6ky4bobhc","content":"<p><code>Java Agent</code>就是利用 <code>Java5</code> 提供的 <code>Instrumentation</code> 机制。\n在 <code>Java SE 5</code> 中，<code>Instrument</code> 要求与应用一块启动（设置参数启动 <code>-javaagent:agent.jar</code> ）\n在 <code>Java SE 6</code> 里面，<code>Instrumentation</code> 被赋予了更强大的功能：启动后的 instrument、本地代码（native code）instrument，以及动态改变 classpath 等等.</p>\n<p><code>Java Agent</code>在不侵入代码字节码注入的方式对应用功能的增强和修改。</p>\n<a id=\"more\"></a>\n<h2 id=\"代码实现步骤\"><a href=\"#代码实现步骤\" class=\"headerlink\" title=\"代码实现步骤\"></a>代码实现步骤</h2><h3 id=\"1、代码\"><a href=\"#1、代码\" class=\"headerlink\" title=\"1、代码\"></a>1、代码</h3><p><strong>一、以vm参数的方式载入，在Java程序的main方法执行之前执行（JDK1.5和以上）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果同时存在下面两个方法，第一个方法先执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String arguments, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String arguments)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>二、以Attach的方式载入，在Java程序启动后执行（JDK1.6和以上）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果同时存在下面两个方法，第一个方法先执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String arguments, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String arguments)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"2、配置\"><a href=\"#2、配置\" class=\"headerlink\" title=\"2、配置\"></a>2、配置</h3><h4 id=\"打包配置\"><a href=\"#打包配置\" class=\"headerlink\" title=\"打包配置\"></a>打包配置</h4><p><code>META-INF/MANIFEST.MF</code>文件必须有以下参数配置\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"comment\">// JDK1.5，必须与应用一块启动</span></span><br><span class=\"line\">Premain-Class: com.gumihoy.apm.agent.APMAgent</span><br><span class=\"line\"><span class=\"comment\">// JDK1.6, 可以在应用启动之后再启动</span></span><br><span class=\"line\">Agent-Class: com.gumihoy.apm.agent.APMAgent</span><br><span class=\"line\"><span class=\"comment\">// 布尔值（true 或 false，与大小写无关）, 是否能重定义此代理所需的类</span></span><br><span class=\"line\">Can-Redefine-Classes: <span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"comment\">// 布尔值（true 或 false，与大小写无关）, 是否能重转换此代理所需的类</span></span><br><span class=\"line\">Can-Retransform-Classes: <span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"comment\">// 布尔值（true 或 false，与大小写无关）, 是否能设置此代理所需的本机方法前缀</span></span><br><span class=\"line\">Can-Set-Native-Method-Prefix: <span class=\"keyword\">true</span></span><br><span class=\"line\">空行</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>最后一行（空行）必须要有</p>\n</blockquote>\n<p><br></p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><h5 id=\"一、Maven\"><a href=\"#一、Maven\" class=\"headerlink\" title=\"一、Maven\"></a>一、Maven</h5><p><strong>方法一：使用插件maven-jar-plugin</strong>\n只有一个包：</p>\n<ul>\n<li>agent.jar: 包含第三方jar</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-jar-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">addClasspath</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">addClasspath</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Premain-Class</span>&gt;</span>com.gumihoy.apm.agent.APMAgent<span class=\"tag\">&lt;/<span class=\"name\">Premain-Class</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Can-Redefine-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Redefine-Classes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Can-Retransform-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Retransform-Classes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>方法二：使用插件maven-shade-plugin</strong>\n两个包：</p>\n<ul>\n<li>agent.jar: 包含第三方jar</li>\n<li>original-agent.jar: 不饱和第三方jar，原始包</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-shade-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>shade<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">shadedArtifactAttached</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">shadedArtifactAttached</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">createDependencyReducedPom</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">createDependencyReducedPom</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">createSourcesJar</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">createSourcesJar</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">shadeSourcesContent</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">shadeSourcesContent</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">transformers</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">transformer</span> <span class=\"attr\">implementation</span>=<span class=\"string\">\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Premain-Class</span>&gt;</span>$&#123;premain.class&#125;<span class=\"tag\">&lt;/<span class=\"name\">Premain-Class</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Can-Redefine-Classes</span>&gt;</span>$&#123;can.redefine.classes&#125;<span class=\"tag\">&lt;/<span class=\"name\">Can-Redefine-Classes</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Can-Retransform-Classes</span>&gt;</span>$&#123;can.retransform.classes&#125;<span class=\"tag\">&lt;/<span class=\"name\">Can-Retransform-Classes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">transformer</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">transformers</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>方法三：使用插件maven-assembly-plugin</strong>\n两个包：</p>\n<ul>\n<li>agent.jar: 不饱和第三方jar，原始包</li>\n<li>agent-jar-with-dependencies.jar: 包含第三方jar</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-assembly-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- get all project dependencies --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">descriptorRefs</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">descriptorRef</span>&gt;</span>jar-with-dependencies<span class=\"tag\">&lt;/<span class=\"name\">descriptorRef</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">descriptorRefs</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- MainClass in mainfest make a executable jar --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">archive</span>&gt;</span> </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">addClasspath</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">addClasspath</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Premain-Class</span>&gt;</span>com.gumihoy.apm.agent.APMAgent<span class=\"tag\">&lt;/<span class=\"name\">Premain-Class</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Can-Redefine-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Redefine-Classes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Can-Retransform-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Retransform-Classes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                    </span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>make-assembly<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- bind to the packaging phase --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>single<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"二、Gradle\"><a href=\"#二、Gradle\" class=\"headerlink\" title=\"二、Gradle\"></a>二、Gradle</h5><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar &#123;</span><br><span class=\"line\">    manifest &#123;</span><br><span class=\"line\">        attributes(</span><br><span class=\"line\">                <span class=\"string\">'Premain-Class'</span>: <span class=\"string\">'xx.Agent'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Agent-Class'</span>: <span class=\"string\">'cxx.Agent'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Can-Redefine-Classes'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Can-Retransform-Classes'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Can-Set-Native-Method-Prefix'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Implementation-Title'</span>: <span class=\"string\">\"CallSpy\"</span>,</span><br><span class=\"line\">                <span class=\"string\">'Implementation-Version'</span>: rootProject.version,</span><br><span class=\"line\">                <span class=\"string\">'Built-By'</span>: System.getProperty(<span class=\"string\">'user.name'</span>),</span><br><span class=\"line\">                <span class=\"string\">'Built-Date'</span>: <span class=\"keyword\">new</span> Date(),</span><br><span class=\"line\">                <span class=\"string\">'Built-JDK'</span>: System.getProperty(<span class=\"string\">'java.version'</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"3、启动\"><a href=\"#3、启动\" class=\"headerlink\" title=\"3、启动\"></a>3、启动</h3><p><strong>一、vm参数配置启动</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-javaagent:agent.jar[=arguments]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>arguments: 参数，String 类型。多个参数后端必须处理（如a=1,b=2 or a=1;b=2）</p>\n</blockquote>\n<p><br></p>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>baseline</th>\n<th>Byte Buddy</th>\n<th>cglib</th>\n<th>Javassist</th>\n<th>Java proxy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>trivial class creation</td>\n<td>0.003 (0.001)</td>\n<td>142.772 (1.390)</td>\n<td>515.174 (26.753)</td>\n<td>193.733 (4.430)</td>\n<td>70.712 (0.645)</td>\n</tr>\n<tr>\n<td>interface implementation</td>\n<td>0.004 (0.001)</td>\n<td>1’126.364 (10.328)</td>\n<td>960.527 (11.788)</td>\n<td>1’070.766 (59.865)</td>\n<td>1’060.766 (12.231)</td>\n</tr>\n<tr>\n<td>stub method invocation</td>\n<td>0.002 (0.001)</td>\n<td>0.002 (0.001)</td>\n<td>0.003 (0.001)</td>\n<td>0.011 (0.001)</td>\n<td>0.008 (0.001)</td>\n</tr>\n<tr>\n<td>class extension</td>\n<td>0.004 (0.001)</td>\n<td>885.983 5’408.329</td>\n<td>(7.901) (52.437)</td>\n<td>1’632.730 (52.737)</td>\n<td>683.478 (6.735)</td>\n<td>–</td>\n</tr>\n<tr>\n<td>super method invocation</td>\n<td>0.004 (0.001)</td>\n<td>0.004 <br> 0.004</td>\n<td>(0.001) <br> (0.001)</td>\n<td>0.021 (0.001)</td>\n<td>0.025 (0.001)</td>\n<td>–</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<ul>\n<li>javassist更偏向底层，比较难于使用并且在动态组合字符串以实现更复杂的逻辑时很容易出错</li>\n<li>cglib现在维护的则相当慢了，基本处于无人维护的阶段了，而这些缺点ByteBuddy都没有</li>\n<li>ByteBuddy性能相对来说在三者中是最优的</li>\n</ul>\n</blockquote>\n<h3 id=\"使用-Byte-Buddy-实现-JavaAgent\"><a href=\"#使用-Byte-Buddy-实现-JavaAgent\" class=\"headerlink\" title=\"使用 Byte Buddy 实现 JavaAgent\"></a>使用 Byte Buddy 实现 JavaAgent</h3><h4 id=\"一、导入jar\"><a href=\"#一、导入jar\" class=\"headerlink\" title=\"一、导入jar\"></a>一、导入<code>jar</code></h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.bytebuddy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>byte-buddy<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.10.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy-agent --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.bytebuddy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>byte-buddy-agent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.10.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"二、Agent代码\"><a href=\"#二、Agent代码\" class=\"headerlink\" title=\"二、Agent代码\"></a>二、<code>Agent</code>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">APMAgent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * http://bytebuddy.net/#/tutorialTypeValidation</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arguments</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> instrumentation</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String arguments, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"xx\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        ByteBuddy buddy = new ByteBuddy().with(TypeValidation.of(false)).with(ClassFileVersion.JAVA_V8);</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> AgentBuilder.Default()</span><br><span class=\"line\">                .type(ElementMatchers.nameStartsWith(<span class=\"string\">\"com.gumihoy.apm.agent.demo\"</span>))</span><br><span class=\"line\">                .transform(<span class=\"keyword\">new</span> AgentTransformer())</span><br><span class=\"line\">                .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)</span><br><span class=\"line\">                .with(<span class=\"keyword\">new</span> AgentListener())</span><br><span class=\"line\">                .installOn(instrumentation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String arguments, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> ElementMatcher&lt;? <span class=\"keyword\">super</span> TypeDescription&gt; buildIgnoreMatcher() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ElementMatchers.nameStartsWith(<span class=\"string\">\"net.bytebuddy.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">AgentBuilder</span>.<span class=\"title\">Transformer</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DynamicType.Builder&lt;?&gt; transform(DynamicType.Builder&lt;?&gt; builder, TypeDescription typeDescription, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder</span><br><span class=\"line\">                    .method(ElementMatchers.any()) <span class=\"comment\">// 拦截任意方法</span></span><br><span class=\"line\">                    .intercept(MethodDelegation.to(MethodIntercept<span class=\"class\">.<span class=\"keyword\">class</span>))</span>; <span class=\"comment\">// 委托</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">AgentBuilder</span>.<span class=\"title\">Listener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDiscovery</span><span class=\"params\">(String typeName, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>, <span class=\"keyword\">boolean</span> loaded)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTransformation</span><span class=\"params\">(TypeDescription typeDescription, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>, <span class=\"keyword\">boolean</span> loaded, DynamicType dynamicType)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onIgnored</span><span class=\"params\">(TypeDescription typeDescription, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>, <span class=\"keyword\">boolean</span> loaded)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(String typeName, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>, <span class=\"keyword\">boolean</span> loaded, Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">(String typeName, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>, <span class=\"keyword\">boolean</span> loaded)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodIntercept</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RuntimeType</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">intercept</span><span class=\"params\">(@Origin Method method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   @SuperCall Callable&lt;?&gt; callable)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 原有函数执行</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> callable.call();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(method + <span class=\"string\">\": took \"</span> + (System.currentTimeMillis() - start) + <span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、应用代码\"><a href=\"#三、应用代码\" class=\"headerlink\" title=\"三、应用代码\"></a>三、应用代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.gumihoy.apm.agent.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">public class AgentTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void fun1() throws Exception &#123;</span><br><span class=\"line\">        System.out.println(&quot;this is fun 1.&quot;);</span><br><span class=\"line\">        Thread.sleep(500);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void fun2() throws Exception &#123;</span><br><span class=\"line\">        System.out.println(&quot;this is fun 2.&quot;);</span><br><span class=\"line\">        Thread.sleep(500);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        AgentTest test = new AgentTest();</span><br><span class=\"line\">        test.fun1();</span><br><span class=\"line\">        test.fun2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"四、打包\"><a href=\"#四、打包\" class=\"headerlink\" title=\"四、打包\"></a>四、打包</h4><p><a href=\"#实现方式\">pom.xml配置</a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"五、启动\"><a href=\"#五、启动\" class=\"headerlink\" title=\"五、启动\"></a>五、启动</h4><p><img src=\"1565784207465.jpg\" alt></p>\n<h4 id=\"六、运行结果\"><a href=\"#六、运行结果\" class=\"headerlink\" title=\"六、运行结果\"></a>六、运行结果</h4><p><img src=\"1565786297241.jpg\" alt></p>\n<p>如何自定义类加载器，避免污染目前进程\n如何实现字节码的修改\n如何实现字节码的多次修改\n如何恢复被修改过的字节码\n如何卸载Java Agent的类\n卸载自定义类加载器遇到的一些坑</p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html\" target=\"_blank\" rel=\"noopener\">Instrumentation介绍</a></p>\n","site":{"data":{}},"excerpt":"<p><code>Java Agent</code>就是利用 <code>Java5</code> 提供的 <code>Instrumentation</code> 机制。\n在 <code>Java SE 5</code> 中，<code>Instrument</code> 要求与应用一块启动（设置参数启动 <code>-javaagent:agent.jar</code> ）\n在 <code>Java SE 6</code> 里面，<code>Instrumentation</code> 被赋予了更强大的功能：启动后的 instrument、本地代码（native code）instrument，以及动态改变 classpath 等等.</p>\n<p><code>Java Agent</code>在不侵入代码字节码注入的方式对应用功能的增强和修改。</p>","more":"<h2 id=\"代码实现步骤\"><a href=\"#代码实现步骤\" class=\"headerlink\" title=\"代码实现步骤\"></a>代码实现步骤</h2><h3 id=\"1、代码\"><a href=\"#1、代码\" class=\"headerlink\" title=\"1、代码\"></a>1、代码</h3><p><strong>一、以vm参数的方式载入，在Java程序的main方法执行之前执行（JDK1.5和以上）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果同时存在下面两个方法，第一个方法先执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String arguments, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String arguments)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>二、以Attach的方式载入，在Java程序启动后执行（JDK1.6和以上）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果同时存在下面两个方法，第一个方法先执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String arguments, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String arguments)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"2、配置\"><a href=\"#2、配置\" class=\"headerlink\" title=\"2、配置\"></a>2、配置</h3><h4 id=\"打包配置\"><a href=\"#打包配置\" class=\"headerlink\" title=\"打包配置\"></a>打包配置</h4><p><code>META-INF/MANIFEST.MF</code>文件必须有以下参数配置\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"comment\">// JDK1.5，必须与应用一块启动</span></span><br><span class=\"line\">Premain-Class: com.gumihoy.apm.agent.APMAgent</span><br><span class=\"line\"><span class=\"comment\">// JDK1.6, 可以在应用启动之后再启动</span></span><br><span class=\"line\">Agent-Class: com.gumihoy.apm.agent.APMAgent</span><br><span class=\"line\"><span class=\"comment\">// 布尔值（true 或 false，与大小写无关）, 是否能重定义此代理所需的类</span></span><br><span class=\"line\">Can-Redefine-Classes: <span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"comment\">// 布尔值（true 或 false，与大小写无关）, 是否能重转换此代理所需的类</span></span><br><span class=\"line\">Can-Retransform-Classes: <span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"comment\">// 布尔值（true 或 false，与大小写无关）, 是否能设置此代理所需的本机方法前缀</span></span><br><span class=\"line\">Can-Set-Native-Method-Prefix: <span class=\"keyword\">true</span></span><br><span class=\"line\">空行</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>最后一行（空行）必须要有</p>\n</blockquote>\n<p><br></p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><h5 id=\"一、Maven\"><a href=\"#一、Maven\" class=\"headerlink\" title=\"一、Maven\"></a>一、Maven</h5><p><strong>方法一：使用插件maven-jar-plugin</strong>\n只有一个包：</p>\n<ul>\n<li>agent.jar: 包含第三方jar</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-jar-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">addClasspath</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">addClasspath</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Premain-Class</span>&gt;</span>com.gumihoy.apm.agent.APMAgent<span class=\"tag\">&lt;/<span class=\"name\">Premain-Class</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Can-Redefine-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Redefine-Classes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Can-Retransform-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Retransform-Classes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>方法二：使用插件maven-shade-plugin</strong>\n两个包：</p>\n<ul>\n<li>agent.jar: 包含第三方jar</li>\n<li>original-agent.jar: 不饱和第三方jar，原始包</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-shade-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>shade<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">shadedArtifactAttached</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">shadedArtifactAttached</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">createDependencyReducedPom</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">createDependencyReducedPom</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">createSourcesJar</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">createSourcesJar</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">shadeSourcesContent</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">shadeSourcesContent</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">transformers</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">transformer</span> <span class=\"attr\">implementation</span>=<span class=\"string\">\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Premain-Class</span>&gt;</span>$&#123;premain.class&#125;<span class=\"tag\">&lt;/<span class=\"name\">Premain-Class</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Can-Redefine-Classes</span>&gt;</span>$&#123;can.redefine.classes&#125;<span class=\"tag\">&lt;/<span class=\"name\">Can-Redefine-Classes</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Can-Retransform-Classes</span>&gt;</span>$&#123;can.retransform.classes&#125;<span class=\"tag\">&lt;/<span class=\"name\">Can-Retransform-Classes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">transformer</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">transformers</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>方法三：使用插件maven-assembly-plugin</strong>\n两个包：</p>\n<ul>\n<li>agent.jar: 不饱和第三方jar，原始包</li>\n<li>agent-jar-with-dependencies.jar: 包含第三方jar</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-assembly-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- get all project dependencies --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">descriptorRefs</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">descriptorRef</span>&gt;</span>jar-with-dependencies<span class=\"tag\">&lt;/<span class=\"name\">descriptorRef</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">descriptorRefs</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- MainClass in mainfest make a executable jar --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">archive</span>&gt;</span> </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">addClasspath</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">addClasspath</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Premain-Class</span>&gt;</span>com.gumihoy.apm.agent.APMAgent<span class=\"tag\">&lt;/<span class=\"name\">Premain-Class</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Can-Redefine-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Redefine-Classes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Can-Retransform-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Retransform-Classes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                    </span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>make-assembly<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- bind to the packaging phase --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>single<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"二、Gradle\"><a href=\"#二、Gradle\" class=\"headerlink\" title=\"二、Gradle\"></a>二、Gradle</h5><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar &#123;</span><br><span class=\"line\">    manifest &#123;</span><br><span class=\"line\">        attributes(</span><br><span class=\"line\">                <span class=\"string\">'Premain-Class'</span>: <span class=\"string\">'xx.Agent'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Agent-Class'</span>: <span class=\"string\">'cxx.Agent'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Can-Redefine-Classes'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Can-Retransform-Classes'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Can-Set-Native-Method-Prefix'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Implementation-Title'</span>: <span class=\"string\">\"CallSpy\"</span>,</span><br><span class=\"line\">                <span class=\"string\">'Implementation-Version'</span>: rootProject.version,</span><br><span class=\"line\">                <span class=\"string\">'Built-By'</span>: System.getProperty(<span class=\"string\">'user.name'</span>),</span><br><span class=\"line\">                <span class=\"string\">'Built-Date'</span>: <span class=\"keyword\">new</span> Date(),</span><br><span class=\"line\">                <span class=\"string\">'Built-JDK'</span>: System.getProperty(<span class=\"string\">'java.version'</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"3、启动\"><a href=\"#3、启动\" class=\"headerlink\" title=\"3、启动\"></a>3、启动</h3><p><strong>一、vm参数配置启动</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-javaagent:agent.jar[=arguments]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>arguments: 参数，String 类型。多个参数后端必须处理（如a=1,b=2 or a=1;b=2）</p>\n</blockquote>\n<p><br></p>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>baseline</th>\n<th>Byte Buddy</th>\n<th>cglib</th>\n<th>Javassist</th>\n<th>Java proxy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>trivial class creation</td>\n<td>0.003 (0.001)</td>\n<td>142.772 (1.390)</td>\n<td>515.174 (26.753)</td>\n<td>193.733 (4.430)</td>\n<td>70.712 (0.645)</td>\n</tr>\n<tr>\n<td>interface implementation</td>\n<td>0.004 (0.001)</td>\n<td>1’126.364 (10.328)</td>\n<td>960.527 (11.788)</td>\n<td>1’070.766 (59.865)</td>\n<td>1’060.766 (12.231)</td>\n</tr>\n<tr>\n<td>stub method invocation</td>\n<td>0.002 (0.001)</td>\n<td>0.002 (0.001)</td>\n<td>0.003 (0.001)</td>\n<td>0.011 (0.001)</td>\n<td>0.008 (0.001)</td>\n</tr>\n<tr>\n<td>class extension</td>\n<td>0.004 (0.001)</td>\n<td>885.983 5’408.329</td>\n<td>(7.901) (52.437)</td>\n<td>1’632.730 (52.737)</td>\n<td>683.478 (6.735)</td>\n<td>–</td>\n</tr>\n<tr>\n<td>super method invocation</td>\n<td>0.004 (0.001)</td>\n<td>0.004 <br> 0.004</td>\n<td>(0.001) <br> (0.001)</td>\n<td>0.021 (0.001)</td>\n<td>0.025 (0.001)</td>\n<td>–</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<ul>\n<li>javassist更偏向底层，比较难于使用并且在动态组合字符串以实现更复杂的逻辑时很容易出错</li>\n<li>cglib现在维护的则相当慢了，基本处于无人维护的阶段了，而这些缺点ByteBuddy都没有</li>\n<li>ByteBuddy性能相对来说在三者中是最优的</li>\n</ul>\n</blockquote>\n<h3 id=\"使用-Byte-Buddy-实现-JavaAgent\"><a href=\"#使用-Byte-Buddy-实现-JavaAgent\" class=\"headerlink\" title=\"使用 Byte Buddy 实现 JavaAgent\"></a>使用 Byte Buddy 实现 JavaAgent</h3><h4 id=\"一、导入jar\"><a href=\"#一、导入jar\" class=\"headerlink\" title=\"一、导入jar\"></a>一、导入<code>jar</code></h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.bytebuddy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>byte-buddy<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.10.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy-agent --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.bytebuddy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>byte-buddy-agent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.10.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"二、Agent代码\"><a href=\"#二、Agent代码\" class=\"headerlink\" title=\"二、Agent代码\"></a>二、<code>Agent</code>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">APMAgent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * http://bytebuddy.net/#/tutorialTypeValidation</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arguments</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> instrumentation</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String arguments, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"xx\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        ByteBuddy buddy = new ByteBuddy().with(TypeValidation.of(false)).with(ClassFileVersion.JAVA_V8);</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> AgentBuilder.Default()</span><br><span class=\"line\">                .type(ElementMatchers.nameStartsWith(<span class=\"string\">\"com.gumihoy.apm.agent.demo\"</span>))</span><br><span class=\"line\">                .transform(<span class=\"keyword\">new</span> AgentTransformer())</span><br><span class=\"line\">                .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)</span><br><span class=\"line\">                .with(<span class=\"keyword\">new</span> AgentListener())</span><br><span class=\"line\">                .installOn(instrumentation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String arguments, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> ElementMatcher&lt;? <span class=\"keyword\">super</span> TypeDescription&gt; buildIgnoreMatcher() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ElementMatchers.nameStartsWith(<span class=\"string\">\"net.bytebuddy.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">AgentBuilder</span>.<span class=\"title\">Transformer</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DynamicType.Builder&lt;?&gt; transform(DynamicType.Builder&lt;?&gt; builder, TypeDescription typeDescription, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder</span><br><span class=\"line\">                    .method(ElementMatchers.any()) <span class=\"comment\">// 拦截任意方法</span></span><br><span class=\"line\">                    .intercept(MethodDelegation.to(MethodIntercept<span class=\"class\">.<span class=\"keyword\">class</span>))</span>; <span class=\"comment\">// 委托</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgentListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">AgentBuilder</span>.<span class=\"title\">Listener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDiscovery</span><span class=\"params\">(String typeName, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>, <span class=\"keyword\">boolean</span> loaded)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTransformation</span><span class=\"params\">(TypeDescription typeDescription, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>, <span class=\"keyword\">boolean</span> loaded, DynamicType dynamicType)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onIgnored</span><span class=\"params\">(TypeDescription typeDescription, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>, <span class=\"keyword\">boolean</span> loaded)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(String typeName, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>, <span class=\"keyword\">boolean</span> loaded, Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">(String typeName, ClassLoader classLoader, JavaModule <span class=\"keyword\">module</span>, <span class=\"keyword\">boolean</span> loaded)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodIntercept</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RuntimeType</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">intercept</span><span class=\"params\">(@Origin Method method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   @SuperCall Callable&lt;?&gt; callable)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 原有函数执行</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> callable.call();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(method + <span class=\"string\">\": took \"</span> + (System.currentTimeMillis() - start) + <span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、应用代码\"><a href=\"#三、应用代码\" class=\"headerlink\" title=\"三、应用代码\"></a>三、应用代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.gumihoy.apm.agent.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">public class AgentTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void fun1() throws Exception &#123;</span><br><span class=\"line\">        System.out.println(&quot;this is fun 1.&quot;);</span><br><span class=\"line\">        Thread.sleep(500);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void fun2() throws Exception &#123;</span><br><span class=\"line\">        System.out.println(&quot;this is fun 2.&quot;);</span><br><span class=\"line\">        Thread.sleep(500);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        AgentTest test = new AgentTest();</span><br><span class=\"line\">        test.fun1();</span><br><span class=\"line\">        test.fun2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"四、打包\"><a href=\"#四、打包\" class=\"headerlink\" title=\"四、打包\"></a>四、打包</h4><p><a href=\"#实现方式\">pom.xml配置</a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"五、启动\"><a href=\"#五、启动\" class=\"headerlink\" title=\"五、启动\"></a>五、启动</h4><p><img src=\"1565784207465.jpg\" alt></p>\n<h4 id=\"六、运行结果\"><a href=\"#六、运行结果\" class=\"headerlink\" title=\"六、运行结果\"></a>六、运行结果</h4><p><img src=\"1565786297241.jpg\" alt></p>\n<p>如何自定义类加载器，避免污染目前进程\n如何实现字节码的修改\n如何实现字节码的多次修改\n如何恢复被修改过的字节码\n如何卸载Java Agent的类\n卸载自定义类加载器遇到的一些坑</p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html\" target=\"_blank\" rel=\"noopener\">Instrumentation介绍</a></p>"},{"title":"Java使用Redis","date":"2018-12-06T01:22:22.000Z","_content":"\nRedis 支持很多种语言客户端：`ActionScript` `Bash` `C` `C#` `C++` `Clojure` `Common Lisp`  `Crystal`  `D`  `Dart`  `Elixir`  `emacs lisp` `Erlang`  `Fancy`  `gawk`  `GNU Prolog`  `Go`  `Haskell` `Haxe`  `Io`  `Java`  `Javascript`  `Julia`  `Lua` `Matlab`  `Nim`  `Node.js`  `Objective-C`  `OCaml`  `Pascal` `Perl`  `PHP`  `Pure Data`  `Python`  `R`  `Racket` `Rebol`  `Ruby`  `Rust`  `Scala`  `Scheme`  `Smalltalk` `Swift`  `Tcl`  `VB` `VCL`\n\n官网客户端选择：https://redis.io/clients\n\n<!-- more -->\n---\n\n<br/>\n\n在Redis官网推荐的Java客户端有`Jedis`、`Lettuce`和`Redisson`。对这三个客户端的介绍如下：\n\n- Jedis：一个非常小而且健全的redis java客户端。\n- Lettuce：高级Redis客户端，用于线程安全同步，异步和反应使用。支持群集，哨兵，管道和编解码器。\n- Redisson：Redis服务器之上的分布式和可伸缩的Java数据结构。\n\n<br/>\n### Jedis\nGithub：https://github.com/xetorthio/jedis\n\n```xml\n<!-- https://mvnrepository.com/artifact/redis.clients/jedis -->\n\n```\n\n\n\n\n\n<br/>\n### Lettuce\nGithub：https://github.com/lettuce-io/lettuce-core\n\n```xml\n<!-- https://mvnrepository.com/artifact/io.lettuce/lettuce-core -->\n\n```\n\n\n\n<br/>\n### Redisson\nGithub：https://github.com/redisson/redisson\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.redisson/redisson -->\n\n\n```\n","source":"_posts/Java使用Redis.md","raw":"---\ntitle: Java使用Redis\ndate: 2018-12-06 09:22:22\ncategories: \n    - Redis\ntags:\n    - NoSQL\n    - Redis\n---\n\nRedis 支持很多种语言客户端：`ActionScript` `Bash` `C` `C#` `C++` `Clojure` `Common Lisp`  `Crystal`  `D`  `Dart`  `Elixir`  `emacs lisp` `Erlang`  `Fancy`  `gawk`  `GNU Prolog`  `Go`  `Haskell` `Haxe`  `Io`  `Java`  `Javascript`  `Julia`  `Lua` `Matlab`  `Nim`  `Node.js`  `Objective-C`  `OCaml`  `Pascal` `Perl`  `PHP`  `Pure Data`  `Python`  `R`  `Racket` `Rebol`  `Ruby`  `Rust`  `Scala`  `Scheme`  `Smalltalk` `Swift`  `Tcl`  `VB` `VCL`\n\n官网客户端选择：https://redis.io/clients\n\n<!-- more -->\n---\n\n<br/>\n\n在Redis官网推荐的Java客户端有`Jedis`、`Lettuce`和`Redisson`。对这三个客户端的介绍如下：\n\n- Jedis：一个非常小而且健全的redis java客户端。\n- Lettuce：高级Redis客户端，用于线程安全同步，异步和反应使用。支持群集，哨兵，管道和编解码器。\n- Redisson：Redis服务器之上的分布式和可伸缩的Java数据结构。\n\n<br/>\n### Jedis\nGithub：https://github.com/xetorthio/jedis\n\n```xml\n<!-- https://mvnrepository.com/artifact/redis.clients/jedis -->\n\n```\n\n\n\n\n\n<br/>\n### Lettuce\nGithub：https://github.com/lettuce-io/lettuce-core\n\n```xml\n<!-- https://mvnrepository.com/artifact/io.lettuce/lettuce-core -->\n\n```\n\n\n\n<br/>\n### Redisson\nGithub：https://github.com/redisson/redisson\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.redisson/redisson -->\n\n\n```\n","slug":"Java使用Redis","published":1,"updated":"2019-11-02T07:12:18.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y55001kt6s6udmyruhz","content":"<p>Redis 支持很多种语言客户端：<code>ActionScript</code> <code>Bash</code> <code>C</code> <code>C#</code> <code>C++</code> <code>Clojure</code> <code>Common Lisp</code>  <code>Crystal</code>  <code>D</code>  <code>Dart</code>  <code>Elixir</code>  <code>emacs lisp</code> <code>Erlang</code>  <code>Fancy</code>  <code>gawk</code>  <code>GNU Prolog</code>  <code>Go</code>  <code>Haskell</code> <code>Haxe</code>  <code>Io</code>  <code>Java</code>  <code>Javascript</code>  <code>Julia</code>  <code>Lua</code> <code>Matlab</code>  <code>Nim</code>  <code>Node.js</code>  <code>Objective-C</code>  <code>OCaml</code>  <code>Pascal</code> <code>Perl</code>  <code>PHP</code>  <code>Pure Data</code>  <code>Python</code>  <code>R</code>  <code>Racket</code> <code>Rebol</code>  <code>Ruby</code>  <code>Rust</code>  <code>Scala</code>  <code>Scheme</code>  <code>Smalltalk</code> <code>Swift</code>  <code>Tcl</code>  <code>VB</code> <code>VCL</code></p>\n<p>官网客户端选择：<a href=\"https://redis.io/clients\" target=\"_blank\" rel=\"noopener\">https://redis.io/clients</a></p>\n<a id=\"more\"></a>\n<hr>\n<p><br></p>\n<p>在Redis官网推荐的Java客户端有<code>Jedis</code>、<code>Lettuce</code>和<code>Redisson</code>。对这三个客户端的介绍如下：</p>\n<ul>\n<li>Jedis：一个非常小而且健全的redis java客户端。</li>\n<li>Lettuce：高级Redis客户端，用于线程安全同步，异步和反应使用。支持群集，哨兵，管道和编解码器。</li>\n<li>Redisson：Redis服务器之上的分布式和可伸缩的Java数据结构。</li>\n</ul>\n<p><br></p>\n<h3 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h3><p>Github：<a href=\"https://github.com/xetorthio/jedis\" target=\"_blank\" rel=\"noopener\">https://github.com/xetorthio/jedis</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Lettuce\"><a href=\"#Lettuce\" class=\"headerlink\" title=\"Lettuce\"></a>Lettuce</h3><p>Github：<a href=\"https://github.com/lettuce-io/lettuce-core\" target=\"_blank\" rel=\"noopener\">https://github.com/lettuce-io/lettuce-core</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/io.lettuce/lettuce-core --&gt;</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Redisson\"><a href=\"#Redisson\" class=\"headerlink\" title=\"Redisson\"></a>Redisson</h3><p>Github：<a href=\"https://github.com/redisson/redisson\" target=\"_blank\" rel=\"noopener\">https://github.com/redisson/redisson</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Redis 支持很多种语言客户端：<code>ActionScript</code> <code>Bash</code> <code>C</code> <code>C#</code> <code>C++</code> <code>Clojure</code> <code>Common Lisp</code>  <code>Crystal</code>  <code>D</code>  <code>Dart</code>  <code>Elixir</code>  <code>emacs lisp</code> <code>Erlang</code>  <code>Fancy</code>  <code>gawk</code>  <code>GNU Prolog</code>  <code>Go</code>  <code>Haskell</code> <code>Haxe</code>  <code>Io</code>  <code>Java</code>  <code>Javascript</code>  <code>Julia</code>  <code>Lua</code> <code>Matlab</code>  <code>Nim</code>  <code>Node.js</code>  <code>Objective-C</code>  <code>OCaml</code>  <code>Pascal</code> <code>Perl</code>  <code>PHP</code>  <code>Pure Data</code>  <code>Python</code>  <code>R</code>  <code>Racket</code> <code>Rebol</code>  <code>Ruby</code>  <code>Rust</code>  <code>Scala</code>  <code>Scheme</code>  <code>Smalltalk</code> <code>Swift</code>  <code>Tcl</code>  <code>VB</code> <code>VCL</code></p>\n<p>官网客户端选择：<a href=\"https://redis.io/clients\" target=\"_blank\" rel=\"noopener\">https://redis.io/clients</a></p>","more":"<hr>\n<p><br></p>\n<p>在Redis官网推荐的Java客户端有<code>Jedis</code>、<code>Lettuce</code>和<code>Redisson</code>。对这三个客户端的介绍如下：</p>\n<ul>\n<li>Jedis：一个非常小而且健全的redis java客户端。</li>\n<li>Lettuce：高级Redis客户端，用于线程安全同步，异步和反应使用。支持群集，哨兵，管道和编解码器。</li>\n<li>Redisson：Redis服务器之上的分布式和可伸缩的Java数据结构。</li>\n</ul>\n<p><br></p>\n<h3 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h3><p>Github：<a href=\"https://github.com/xetorthio/jedis\" target=\"_blank\" rel=\"noopener\">https://github.com/xetorthio/jedis</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Lettuce\"><a href=\"#Lettuce\" class=\"headerlink\" title=\"Lettuce\"></a>Lettuce</h3><p>Github：<a href=\"https://github.com/lettuce-io/lettuce-core\" target=\"_blank\" rel=\"noopener\">https://github.com/lettuce-io/lettuce-core</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/io.lettuce/lettuce-core --&gt;</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Redisson\"><a href=\"#Redisson\" class=\"headerlink\" title=\"Redisson\"></a>Redisson</h3><p>Github：<a href=\"https://github.com/redisson/redisson\" target=\"_blank\" rel=\"noopener\">https://github.com/redisson/redisson</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Java常见问题总结","date":"2019-01-28T01:38:14.000Z","_content":"\n\n\n---\n\n### NoSuchMethodException\n#### 原因\n- Java ClassLoader机制\n- Jar版本冲突问题\n\n#### 排查方法\n\n\n<br>\n### 应用没响应\n\n<br>\n### 调用另一应用超时\n\n<br>\n### java.lang.OutOfMemoryError\n\n\n<br>\n### CPU us高\n\n\n<br>\n### CPU sy高\n\n\n<br>\n### CPU iowait高\n\n\n<br>\n### Java进程退出\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Java常见问题总结.md","raw":"---\ntitle: Java常见问题总结\ndate: 2019-01-28 09:38:14\ncategories: \n    - Java\ntags:\n    - Java\n---\n\n\n\n---\n\n### NoSuchMethodException\n#### 原因\n- Java ClassLoader机制\n- Jar版本冲突问题\n\n#### 排查方法\n\n\n<br>\n### 应用没响应\n\n<br>\n### 调用另一应用超时\n\n<br>\n### java.lang.OutOfMemoryError\n\n\n<br>\n### CPU us高\n\n\n<br>\n### CPU sy高\n\n\n<br>\n### CPU iowait高\n\n\n<br>\n### Java进程退出\n\n\n\n\n\n\n\n\n\n\n","slug":"Java常见问题总结","published":1,"updated":"2019-11-02T07:12:18.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y56001ot6s6g9kyg77z","content":"<hr>\n<h3 id=\"NoSuchMethodException\"><a href=\"#NoSuchMethodException\" class=\"headerlink\" title=\"NoSuchMethodException\"></a>NoSuchMethodException</h3><h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>Java ClassLoader机制</li>\n<li>Jar版本冲突问题</li>\n</ul>\n<h4 id=\"排查方法\"><a href=\"#排查方法\" class=\"headerlink\" title=\"排查方法\"></a>排查方法</h4><p><br></p>\n<h3 id=\"应用没响应\"><a href=\"#应用没响应\" class=\"headerlink\" title=\"应用没响应\"></a>应用没响应</h3><p><br></p>\n<h3 id=\"调用另一应用超时\"><a href=\"#调用另一应用超时\" class=\"headerlink\" title=\"调用另一应用超时\"></a>调用另一应用超时</h3><p><br></p>\n<h3 id=\"java-lang-OutOfMemoryError\"><a href=\"#java-lang-OutOfMemoryError\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError\"></a>java.lang.OutOfMemoryError</h3><p><br></p>\n<h3 id=\"CPU-us高\"><a href=\"#CPU-us高\" class=\"headerlink\" title=\"CPU us高\"></a>CPU us高</h3><p><br></p>\n<h3 id=\"CPU-sy高\"><a href=\"#CPU-sy高\" class=\"headerlink\" title=\"CPU sy高\"></a>CPU sy高</h3><p><br></p>\n<h3 id=\"CPU-iowait高\"><a href=\"#CPU-iowait高\" class=\"headerlink\" title=\"CPU iowait高\"></a>CPU iowait高</h3><p><br></p>\n<h3 id=\"Java进程退出\"><a href=\"#Java进程退出\" class=\"headerlink\" title=\"Java进程退出\"></a>Java进程退出</h3>","site":{"data":{}},"excerpt":"","more":"<hr>\n<h3 id=\"NoSuchMethodException\"><a href=\"#NoSuchMethodException\" class=\"headerlink\" title=\"NoSuchMethodException\"></a>NoSuchMethodException</h3><h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>Java ClassLoader机制</li>\n<li>Jar版本冲突问题</li>\n</ul>\n<h4 id=\"排查方法\"><a href=\"#排查方法\" class=\"headerlink\" title=\"排查方法\"></a>排查方法</h4><p><br></p>\n<h3 id=\"应用没响应\"><a href=\"#应用没响应\" class=\"headerlink\" title=\"应用没响应\"></a>应用没响应</h3><p><br></p>\n<h3 id=\"调用另一应用超时\"><a href=\"#调用另一应用超时\" class=\"headerlink\" title=\"调用另一应用超时\"></a>调用另一应用超时</h3><p><br></p>\n<h3 id=\"java-lang-OutOfMemoryError\"><a href=\"#java-lang-OutOfMemoryError\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError\"></a>java.lang.OutOfMemoryError</h3><p><br></p>\n<h3 id=\"CPU-us高\"><a href=\"#CPU-us高\" class=\"headerlink\" title=\"CPU us高\"></a>CPU us高</h3><p><br></p>\n<h3 id=\"CPU-sy高\"><a href=\"#CPU-sy高\" class=\"headerlink\" title=\"CPU sy高\"></a>CPU sy高</h3><p><br></p>\n<h3 id=\"CPU-iowait高\"><a href=\"#CPU-iowait高\" class=\"headerlink\" title=\"CPU iowait高\"></a>CPU iowait高</h3><p><br></p>\n<h3 id=\"Java进程退出\"><a href=\"#Java进程退出\" class=\"headerlink\" title=\"Java进程退出\"></a>Java进程退出</h3>"},{"title":"Kafka安装","date":"2019-01-09T07:08:43.000Z","_content":"\n\n## 下载\n\n下载地址：http://kafka.apache.org/downloads\n\n\n## 安装\n\n\n\n### 单机\n#### 配置\n\n### 集群\n#### 配置\n\n\n### 启动\n\n\n\n<!-- more -->\n\n\n\n\n\n<br/>\n\n---\n\n参考\n官网：http://kafka.apache.org/","source":"_posts/Kafka安装.md","raw":"---\ntitle: Kafka安装\ndate: 2019-01-09 15:08:43\ncategories: \n    - Kafka\ntags:\n    - 消息队列\n    - Kafka\n---\n\n\n## 下载\n\n下载地址：http://kafka.apache.org/downloads\n\n\n## 安装\n\n\n\n### 单机\n#### 配置\n\n### 集群\n#### 配置\n\n\n### 启动\n\n\n\n<!-- more -->\n\n\n\n\n\n<br/>\n\n---\n\n参考\n官网：http://kafka.apache.org/","slug":"Kafka安装","published":1,"updated":"2019-11-02T07:12:18.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y58001st6s6pdp165s8","content":"<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载地址：<a href=\"http://kafka.apache.org/downloads\" target=\"_blank\" rel=\"noopener\">http://kafka.apache.org/downloads</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"单机\"><a href=\"#单机\" class=\"headerlink\" title=\"单机\"></a>单机</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><h3 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h3><h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><a id=\"more\"></a>\n<p><br></p>\n<hr>\n<p>参考\n官网：<a href=\"http://kafka.apache.org/\" target=\"_blank\" rel=\"noopener\">http://kafka.apache.org/</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载地址：<a href=\"http://kafka.apache.org/downloads\" target=\"_blank\" rel=\"noopener\">http://kafka.apache.org/downloads</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"单机\"><a href=\"#单机\" class=\"headerlink\" title=\"单机\"></a>单机</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><h3 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h3><h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3>","more":"<p><br></p>\n<hr>\n<p>参考\n官网：<a href=\"http://kafka.apache.org/\" target=\"_blank\" rel=\"noopener\">http://kafka.apache.org/</a></p>"},{"title":"K近邻算法","date":"2018-11-13T02:25:59.000Z","_content":"\n\n\n\n<!-- more -->","source":"_posts/K近邻算法.md","raw":"---\ntitle: K近邻算法\ndate: 2018-11-13 10:25:59\ncategories: \n    - 机器学习\ntags: \n    - 算法\n    - 机器学习\n    - 监督学习\n    - KNN\n---\n\n\n\n\n<!-- more -->","slug":"K近邻算法","published":1,"updated":"2019-11-02T07:12:18.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y59001wt6s6mudpvusf","content":"<a id=\"more\"></a>","site":{"data":{}},"excerpt":"","more":""},{"title":"Joda Time总结","date":"2019-08-13T11:26:55.000Z","_content":"\n\n官网：https://www.joda.org/joda-time/index.html\n\n为啥用`Joda Time`\n- 1. 易于使用:Calendar让获取\"正常的\"的日期变得很困难，使它没办法提供简单的方法，而Joda-Time能够 直接进行访问域并且索引值1就是代表January。\n- 2. 易于扩展：JDK支持多日历系统是通过Calendar的子类来实现，这样就显示的非常笨重而且事实 上要实现其它日历系统是很困难的。Joda-Time支持多日历系统是通过基于Chronology类的插件体系来实现。\n- 3. 提供一组完整的功能：它打算提供 所有关系到date-time计算的功能．Joda-Time当前支持8种日历系统，而且在将来还会继续添加，有着比JDK Calendar更好的整体性能等等。\n- \n\n\n\n> 大部分人使用`SimpleDateFormat`处理时间格式化过程，但是`SimpleDateFormat`存在并发问题。使用`Joda Time`替代\n\n\n## 使用\n\n导入jar，地址： https://mvnrepository.com/artifact/joda-time\n``` maven\n<dependency>\n    <groupId>joda-time</groupId>\n    <artifactId>joda-time</artifactId>\n    <version>2.10.3</version>\n</dependency>\n```\n\n### `Java`日期对象 与 `Joda Time`日期对象相互转换\n\n#### 毫秒 与 DateTime\n\n**毫秒  =>  DateTime**\n```java\nlong milliseconds = System.currentTimeMillis();\nDateTime dateTime = new DateTime(milliseconds);\n```\n\n**DateTime  =>  毫秒**\n```java\nDateTime dateTime = new DateTime();\nlong milliseconds = dateTime.getMillis();\n```\n\n\n#### Date 与 DateTime\n\n**Date  =>  DateTime**\n```java\nDate d = new Date();\nDateTime dateTime = new DateTime(d);\n```\n\n**DateTime  =>  Date**\n```java\nDateTime dateTime = new DateTime();\nDate d = dateTime.toDate();\n```\n\n\n#### Calendar 与 DateTime\n\n**Calendar  =>  DateTime**\n```java\nCalendar c = Calendar.getInstance();\nDateTime dateTime = new DateTime(c);\n```\n\n**DateTime  =>  Calendar**\n```java\nDateTime dateTime = new DateTime();\nCalendar c = dateTime.toCalendar(null);\n```\n\n\n### 时间 => 字符串 （时间转换字符串、时间格式化）\n\n**第一种方式** \n```java\nDate d = new Date();\nDateTime dateTime = new DateTime(d);\ndateTime.toString(\"yyyy-MM-dd HH:mm:ss);\n```\n\n**第二种方式** \n```java\nDate d = new Date();\nDateTime dateTime = new DateTime(d);\nDateTimeFormatter formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\");\nformatter.print(dateTime);\n```\n\n\n### 字符串 => 时间\n\n\n\n\n### 日期计算\n\n","source":"_posts/Joda-Time总结.md","raw":"---\ntitle: Joda Time总结\ndate: 2019-08-13 19:26:55\ntags:\n---\n\n\n官网：https://www.joda.org/joda-time/index.html\n\n为啥用`Joda Time`\n- 1. 易于使用:Calendar让获取\"正常的\"的日期变得很困难，使它没办法提供简单的方法，而Joda-Time能够 直接进行访问域并且索引值1就是代表January。\n- 2. 易于扩展：JDK支持多日历系统是通过Calendar的子类来实现，这样就显示的非常笨重而且事实 上要实现其它日历系统是很困难的。Joda-Time支持多日历系统是通过基于Chronology类的插件体系来实现。\n- 3. 提供一组完整的功能：它打算提供 所有关系到date-time计算的功能．Joda-Time当前支持8种日历系统，而且在将来还会继续添加，有着比JDK Calendar更好的整体性能等等。\n- \n\n\n\n> 大部分人使用`SimpleDateFormat`处理时间格式化过程，但是`SimpleDateFormat`存在并发问题。使用`Joda Time`替代\n\n\n## 使用\n\n导入jar，地址： https://mvnrepository.com/artifact/joda-time\n``` maven\n<dependency>\n    <groupId>joda-time</groupId>\n    <artifactId>joda-time</artifactId>\n    <version>2.10.3</version>\n</dependency>\n```\n\n### `Java`日期对象 与 `Joda Time`日期对象相互转换\n\n#### 毫秒 与 DateTime\n\n**毫秒  =>  DateTime**\n```java\nlong milliseconds = System.currentTimeMillis();\nDateTime dateTime = new DateTime(milliseconds);\n```\n\n**DateTime  =>  毫秒**\n```java\nDateTime dateTime = new DateTime();\nlong milliseconds = dateTime.getMillis();\n```\n\n\n#### Date 与 DateTime\n\n**Date  =>  DateTime**\n```java\nDate d = new Date();\nDateTime dateTime = new DateTime(d);\n```\n\n**DateTime  =>  Date**\n```java\nDateTime dateTime = new DateTime();\nDate d = dateTime.toDate();\n```\n\n\n#### Calendar 与 DateTime\n\n**Calendar  =>  DateTime**\n```java\nCalendar c = Calendar.getInstance();\nDateTime dateTime = new DateTime(c);\n```\n\n**DateTime  =>  Calendar**\n```java\nDateTime dateTime = new DateTime();\nCalendar c = dateTime.toCalendar(null);\n```\n\n\n### 时间 => 字符串 （时间转换字符串、时间格式化）\n\n**第一种方式** \n```java\nDate d = new Date();\nDateTime dateTime = new DateTime(d);\ndateTime.toString(\"yyyy-MM-dd HH:mm:ss);\n```\n\n**第二种方式** \n```java\nDate d = new Date();\nDateTime dateTime = new DateTime(d);\nDateTimeFormatter formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\");\nformatter.print(dateTime);\n```\n\n\n### 字符串 => 时间\n\n\n\n\n### 日期计算\n\n","slug":"Joda-Time总结","published":1,"updated":"2019-11-02T07:12:18.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5b001zt6s6p3yuqr6k","content":"<p>官网：<a href=\"https://www.joda.org/joda-time/index.html\" target=\"_blank\" rel=\"noopener\">https://www.joda.org/joda-time/index.html</a></p>\n<p>为啥用<code>Joda Time</code></p>\n<ul>\n<li><ol>\n<li>易于使用:Calendar让获取”正常的”的日期变得很困难，使它没办法提供简单的方法，而Joda-Time能够 直接进行访问域并且索引值1就是代表January。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>易于扩展：JDK支持多日历系统是通过Calendar的子类来实现，这样就显示的非常笨重而且事实 上要实现其它日历系统是很困难的。Joda-Time支持多日历系统是通过基于Chronology类的插件体系来实现。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>提供一组完整的功能：它打算提供 所有关系到date-time计算的功能．Joda-Time当前支持8种日历系统，而且在将来还会继续添加，有着比JDK Calendar更好的整体性能等等。</li>\n</ol>\n</li>\n<li></li>\n</ul>\n<blockquote>\n<p>大部分人使用<code>SimpleDateFormat</code>处理时间格式化过程，但是<code>SimpleDateFormat</code>存在并发问题。使用<code>Joda Time</code>替代</p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>导入jar，地址： <a href=\"https://mvnrepository.com/artifact/joda-time\" target=\"_blank\" rel=\"noopener\">https://mvnrepository.com/artifact/joda-time</a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;joda-time&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;joda-time&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.10.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Java日期对象-与-Joda-Time日期对象相互转换\"><a href=\"#Java日期对象-与-Joda-Time日期对象相互转换\" class=\"headerlink\" title=\"Java日期对象 与 Joda Time日期对象相互转换\"></a><code>Java</code>日期对象 与 <code>Joda Time</code>日期对象相互转换</h3><h4 id=\"毫秒-与-DateTime\"><a href=\"#毫秒-与-DateTime\" class=\"headerlink\" title=\"毫秒 与 DateTime\"></a>毫秒 与 DateTime</h4><p><strong>毫秒  =&gt;  DateTime</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> milliseconds = System.currentTimeMillis();</span><br><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime(milliseconds);</span><br></pre></td></tr></table></figure></p>\n<p><strong>DateTime  =&gt;  毫秒</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime();</span><br><span class=\"line\"><span class=\"keyword\">long</span> milliseconds = dateTime.getMillis();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Date-与-DateTime\"><a href=\"#Date-与-DateTime\" class=\"headerlink\" title=\"Date 与 DateTime\"></a>Date 与 DateTime</h4><p><strong>Date  =&gt;  DateTime</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date d = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime(d);</span><br></pre></td></tr></table></figure></p>\n<p><strong>DateTime  =&gt;  Date</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime();</span><br><span class=\"line\">Date d = dateTime.toDate();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Calendar-与-DateTime\"><a href=\"#Calendar-与-DateTime\" class=\"headerlink\" title=\"Calendar 与 DateTime\"></a>Calendar 与 DateTime</h4><p><strong>Calendar  =&gt;  DateTime</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Calendar c = Calendar.getInstance();</span><br><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime(c);</span><br></pre></td></tr></table></figure></p>\n<p><strong>DateTime  =&gt;  Calendar</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime();</span><br><span class=\"line\">Calendar c = dateTime.toCalendar(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"时间-gt-字符串-（时间转换字符串、时间格式化）\"><a href=\"#时间-gt-字符串-（时间转换字符串、时间格式化）\" class=\"headerlink\" title=\"时间 =&gt; 字符串 （时间转换字符串、时间格式化）\"></a>时间 =&gt; 字符串 （时间转换字符串、时间格式化）</h3><p><strong>第一种方式</strong> \n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date d = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime(d);</span><br><span class=\"line\">dateTime.toString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss);</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>第二种方式</strong> \n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date d = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime(d);</span><br><span class=\"line\">DateTimeFormatter formatter = DateTimeFormat.forPattern(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">formatter.print(dateTime);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"字符串-gt-时间\"><a href=\"#字符串-gt-时间\" class=\"headerlink\" title=\"字符串 =&gt; 时间\"></a>字符串 =&gt; 时间</h3><h3 id=\"日期计算\"><a href=\"#日期计算\" class=\"headerlink\" title=\"日期计算\"></a>日期计算</h3>","site":{"data":{}},"excerpt":"","more":"<p>官网：<a href=\"https://www.joda.org/joda-time/index.html\" target=\"_blank\" rel=\"noopener\">https://www.joda.org/joda-time/index.html</a></p>\n<p>为啥用<code>Joda Time</code></p>\n<ul>\n<li><ol>\n<li>易于使用:Calendar让获取”正常的”的日期变得很困难，使它没办法提供简单的方法，而Joda-Time能够 直接进行访问域并且索引值1就是代表January。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>易于扩展：JDK支持多日历系统是通过Calendar的子类来实现，这样就显示的非常笨重而且事实 上要实现其它日历系统是很困难的。Joda-Time支持多日历系统是通过基于Chronology类的插件体系来实现。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>提供一组完整的功能：它打算提供 所有关系到date-time计算的功能．Joda-Time当前支持8种日历系统，而且在将来还会继续添加，有着比JDK Calendar更好的整体性能等等。</li>\n</ol>\n</li>\n<li></li>\n</ul>\n<blockquote>\n<p>大部分人使用<code>SimpleDateFormat</code>处理时间格式化过程，但是<code>SimpleDateFormat</code>存在并发问题。使用<code>Joda Time</code>替代</p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>导入jar，地址： <a href=\"https://mvnrepository.com/artifact/joda-time\" target=\"_blank\" rel=\"noopener\">https://mvnrepository.com/artifact/joda-time</a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;joda-time&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;joda-time&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.10.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Java日期对象-与-Joda-Time日期对象相互转换\"><a href=\"#Java日期对象-与-Joda-Time日期对象相互转换\" class=\"headerlink\" title=\"Java日期对象 与 Joda Time日期对象相互转换\"></a><code>Java</code>日期对象 与 <code>Joda Time</code>日期对象相互转换</h3><h4 id=\"毫秒-与-DateTime\"><a href=\"#毫秒-与-DateTime\" class=\"headerlink\" title=\"毫秒 与 DateTime\"></a>毫秒 与 DateTime</h4><p><strong>毫秒  =&gt;  DateTime</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> milliseconds = System.currentTimeMillis();</span><br><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime(milliseconds);</span><br></pre></td></tr></table></figure></p>\n<p><strong>DateTime  =&gt;  毫秒</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime();</span><br><span class=\"line\"><span class=\"keyword\">long</span> milliseconds = dateTime.getMillis();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Date-与-DateTime\"><a href=\"#Date-与-DateTime\" class=\"headerlink\" title=\"Date 与 DateTime\"></a>Date 与 DateTime</h4><p><strong>Date  =&gt;  DateTime</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date d = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime(d);</span><br></pre></td></tr></table></figure></p>\n<p><strong>DateTime  =&gt;  Date</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime();</span><br><span class=\"line\">Date d = dateTime.toDate();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Calendar-与-DateTime\"><a href=\"#Calendar-与-DateTime\" class=\"headerlink\" title=\"Calendar 与 DateTime\"></a>Calendar 与 DateTime</h4><p><strong>Calendar  =&gt;  DateTime</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Calendar c = Calendar.getInstance();</span><br><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime(c);</span><br></pre></td></tr></table></figure></p>\n<p><strong>DateTime  =&gt;  Calendar</strong>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime();</span><br><span class=\"line\">Calendar c = dateTime.toCalendar(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"时间-gt-字符串-（时间转换字符串、时间格式化）\"><a href=\"#时间-gt-字符串-（时间转换字符串、时间格式化）\" class=\"headerlink\" title=\"时间 =&gt; 字符串 （时间转换字符串、时间格式化）\"></a>时间 =&gt; 字符串 （时间转换字符串、时间格式化）</h3><p><strong>第一种方式</strong> \n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date d = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime(d);</span><br><span class=\"line\">dateTime.toString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss);</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>第二种方式</strong> \n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date d = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">DateTime dateTime = <span class=\"keyword\">new</span> DateTime(d);</span><br><span class=\"line\">DateTimeFormatter formatter = DateTimeFormat.forPattern(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">formatter.print(dateTime);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"字符串-gt-时间\"><a href=\"#字符串-gt-时间\" class=\"headerlink\" title=\"字符串 =&gt; 时间\"></a>字符串 =&gt; 时间</h3><h3 id=\"日期计算\"><a href=\"#日期计算\" class=\"headerlink\" title=\"日期计算\"></a>日期计算</h3>"},{"title":"LaTeX教程","date":"2012-09-02T01:01:01.000Z","_content":"\n\nLaTeX，是一种基于TEX的排版系统，由美国计算机科学家莱斯利·兰伯特在20世纪80年代初期开发，利用这种格式系统的处理，即使使用者没有排版和程序设计的知识也可以充分发挥由TEX所提供的强大功能，不必一一亲自去设计或校对，能在几天，甚至几小时内生成很多具有书籍品质的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学、物理文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　—————摘自《维基百科》\n\n\n<!-- more -->\n\n<br/>\n\n---\n\n<br/>\n\nLaTeX 公式 必须要用 `$...$` 或者 `$$...$$` 包裹\n\n`$...$` 、`$$...$$` 区别：`$...$` 排版在左边，`$$...$$` 排版在中间，如：\n\n``` markdown\n$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$\n```\n$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$\n\n\n<br/>\n\n``` markdown\n$$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$$\n```\n$$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$$\n\n\n<br/>\n\n### 分数 \\frac{a}{b}\n\n``` bash\n# a：分子，b：分母\n$\\frac{a}{b}$\n```\n$$【例】\\frac{a}{b}$$\n\n<br/>\n### 指数 a^{b}\n\n``` bash\n$a^{b}$\n```\n\n\n<br/>\n### 根号 \\sqrt{a}\n``` bash\n$\\sqrt{a}$\n```\n\n\n\n<br/>\n### 根号 \\sqrt[n]{a}\n``` bash\n$\\sqrt[n]{a}$\n```\n\n\n<br/>\n### 极限 \\lim\\limits_{x \\to \\infty}\n``` bash\n$\\lim\\limits_{x\\to\\infty}$\n```\n$【例】\\lim\\limits_{x \\to 0}$\n$【例】\\lim\\limits_{x \\to \\infty}$\n\n\n<br/>\n### 对数 \\log_{b}{a}\n``` bash\n$\\log_{b}{a}$\n```\n$【例】\\log_{b}{a}$\n\n<br/>\n### 和 \\sum \\limits_{n=0}^{\\infty}\n``` bash\n$\\sum \\limits_{n=0}^{\\infty}$\n```\n$【例】\\sum \\limits_{n=0}^{\\infty}$\n\n\n\n<br/>\n### 和 \\prod \\limits_{n=0}^{\\infty}\n``` bash\n$\\prod \\limits_{n=0}^{\\infty}$\n```\n$【例】\\prod \\limits_{n=0}^{\\infty}$\n\n\n\n<br/>\n### 和 \\int_{a}^{b}\n``` bash\n$\\int_{a}^{b}$\n```\n$【例】\\int_{a}^{b}$\n\n\n\n\n<br/>\n### 和 \\int_{a}^{b}\n``` bash\n$\\int_{a}^{b}$\n```\n\n\nbr/>\n### 函数定义 \\begin{cases} xx & 描述 \\\\\\ 0 & 描述 \\end{cases}\n``` bash\n\\begin{cases} xx & 描述 \\\\\\ 0 & 描述 \\end{cases}\n```\n$【例】\\begin{cases} xx & 描述 \\\\\\ 0 & 描述 \\end{cases}$\n\n---\n参考\n\n[mathjax-basic-tutorial-and-quick-reference](https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference)\n[mathjax-latex-basic-tutorial-und-referenz-deutsch](https://www.mathelounge.de/509545/mathjax-latex-basic-tutorial-und-referenz-deutsch)\n[在线编辑LaTeX](https://www.matheretter.de/rechner/latex/)","source":"_posts/LaTeX教程.md","raw":"---\ntitle: LaTeX教程\ndate: 2012-09-02 09:01:01\ncategories:\n    - LaTeX\ntags:\n    - LaTeX\n    - 公式\n---\n\n\nLaTeX，是一种基于TEX的排版系统，由美国计算机科学家莱斯利·兰伯特在20世纪80年代初期开发，利用这种格式系统的处理，即使使用者没有排版和程序设计的知识也可以充分发挥由TEX所提供的强大功能，不必一一亲自去设计或校对，能在几天，甚至几小时内生成很多具有书籍品质的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学、物理文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　—————摘自《维基百科》\n\n\n<!-- more -->\n\n<br/>\n\n---\n\n<br/>\n\nLaTeX 公式 必须要用 `$...$` 或者 `$$...$$` 包裹\n\n`$...$` 、`$$...$$` 区别：`$...$` 排版在左边，`$$...$$` 排版在中间，如：\n\n``` markdown\n$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$\n```\n$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$\n\n\n<br/>\n\n``` markdown\n$$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$$\n```\n$$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$$\n\n\n<br/>\n\n### 分数 \\frac{a}{b}\n\n``` bash\n# a：分子，b：分母\n$\\frac{a}{b}$\n```\n$$【例】\\frac{a}{b}$$\n\n<br/>\n### 指数 a^{b}\n\n``` bash\n$a^{b}$\n```\n\n\n<br/>\n### 根号 \\sqrt{a}\n``` bash\n$\\sqrt{a}$\n```\n\n\n\n<br/>\n### 根号 \\sqrt[n]{a}\n``` bash\n$\\sqrt[n]{a}$\n```\n\n\n<br/>\n### 极限 \\lim\\limits_{x \\to \\infty}\n``` bash\n$\\lim\\limits_{x\\to\\infty}$\n```\n$【例】\\lim\\limits_{x \\to 0}$\n$【例】\\lim\\limits_{x \\to \\infty}$\n\n\n<br/>\n### 对数 \\log_{b}{a}\n``` bash\n$\\log_{b}{a}$\n```\n$【例】\\log_{b}{a}$\n\n<br/>\n### 和 \\sum \\limits_{n=0}^{\\infty}\n``` bash\n$\\sum \\limits_{n=0}^{\\infty}$\n```\n$【例】\\sum \\limits_{n=0}^{\\infty}$\n\n\n\n<br/>\n### 和 \\prod \\limits_{n=0}^{\\infty}\n``` bash\n$\\prod \\limits_{n=0}^{\\infty}$\n```\n$【例】\\prod \\limits_{n=0}^{\\infty}$\n\n\n\n<br/>\n### 和 \\int_{a}^{b}\n``` bash\n$\\int_{a}^{b}$\n```\n$【例】\\int_{a}^{b}$\n\n\n\n\n<br/>\n### 和 \\int_{a}^{b}\n``` bash\n$\\int_{a}^{b}$\n```\n\n\nbr/>\n### 函数定义 \\begin{cases} xx & 描述 \\\\\\ 0 & 描述 \\end{cases}\n``` bash\n\\begin{cases} xx & 描述 \\\\\\ 0 & 描述 \\end{cases}\n```\n$【例】\\begin{cases} xx & 描述 \\\\\\ 0 & 描述 \\end{cases}$\n\n---\n参考\n\n[mathjax-basic-tutorial-and-quick-reference](https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference)\n[mathjax-latex-basic-tutorial-und-referenz-deutsch](https://www.mathelounge.de/509545/mathjax-latex-basic-tutorial-und-referenz-deutsch)\n[在线编辑LaTeX](https://www.matheretter.de/rechner/latex/)","slug":"LaTeX教程","published":1,"updated":"2019-11-02T07:12:18.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5d0023t6s6g9qcxdca","content":"<p>LaTeX，是一种基于TEX的排版系统，由美国计算机科学家莱斯利·兰伯特在20世纪80年代初期开发，利用这种格式系统的处理，即使使用者没有排版和程序设计的知识也可以充分发挥由TEX所提供的强大功能，不必一一亲自去设计或校对，能在几天，甚至几小时内生成很多具有书籍品质的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学、物理文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　—————摘自《维基百科》</p>\n<a id=\"more\"></a>\n<p><br></p>\n<hr>\n<p><br></p>\n<p>LaTeX 公式 必须要用 <code>$...$</code> 或者 <code>$$...$$</code> 包裹</p>\n<p><code>$...$</code> 、<code>$$...$$</code> 区别：<code>$...$</code> 排版在左边，<code>$$...$$</code> 排版在中间，如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$H(X)=-\\sum<span class=\"emphasis\">_&#123;i=0&#125; P(X_</span>&#123;i&#125;) \\log<span class=\"emphasis\">_b P(X_</span>&#123;i&#125;)$</span><br></pre></td></tr></table></figure>\n<p>$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$</p>\n<p><br></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$H(X)=-\\sum<span class=\"emphasis\">_&#123;i=0&#125; P(X_</span>&#123;i&#125;) \\log<span class=\"emphasis\">_b P(X_</span>&#123;i&#125;)$$</span><br></pre></td></tr></table></figure>\n<p>$$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$$</p>\n<p><br></p>\n<h3 id=\"分数-frac-a-b\"><a href=\"#分数-frac-a-b\" class=\"headerlink\" title=\"分数 \\frac{a}{b}\"></a>分数 \\frac{a}{b}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># a：分子，b：分母</span></span><br><span class=\"line\">$\\frac&#123;a&#125;&#123;b&#125;$</span><br></pre></td></tr></table></figure>\n<p>$$【例】\\frac{a}{b}$$</p>\n<p><br></p>\n<h3 id=\"指数-a-b\"><a href=\"#指数-a-b\" class=\"headerlink\" title=\"指数 a^{b}\"></a>指数 a^{b}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span>^&#123;b&#125;$</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"根号-sqrt-a\"><a href=\"#根号-sqrt-a\" class=\"headerlink\" title=\"根号 \\sqrt{a}\"></a>根号 \\sqrt{a}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\sqrt&#123;a&#125;$</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"根号-sqrt-n-a\"><a href=\"#根号-sqrt-n-a\" class=\"headerlink\" title=\"根号 \\sqrt[n]{a}\"></a>根号 \\sqrt[n]{a}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\sqrt[n]&#123;a&#125;$</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"极限-lim-limits-x-to-infty\"><a href=\"#极限-lim-limits-x-to-infty\" class=\"headerlink\" title=\"极限 \\lim\\limits_{x \\to \\infty}\"></a>极限 \\lim\\limits_{x \\to \\infty}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\lim\\limits_&#123;x\\to\\infty&#125;$</span><br></pre></td></tr></table></figure>\n<p>$【例】\\lim\\limits_{x \\to 0}$\n$【例】\\lim\\limits_{x \\to \\infty}$</p>\n<p><br></p>\n<h3 id=\"对数-log-b-a\"><a href=\"#对数-log-b-a\" class=\"headerlink\" title=\"对数 \\log_{b}{a}\"></a>对数 \\log_{b}{a}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\log_&#123;b&#125;&#123;a&#125;$</span><br></pre></td></tr></table></figure>\n<p>$【例】\\log_{b}{a}$</p>\n<p><br></p>\n<h3 id=\"和-sum-limits-n-0-infty\"><a href=\"#和-sum-limits-n-0-infty\" class=\"headerlink\" title=\"和 \\sum \\limits_{n=0}^{\\infty}\"></a>和 \\sum \\limits_{n=0}^{\\infty}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\sum \\limits_&#123;n=0&#125;^&#123;\\infty&#125;$</span><br></pre></td></tr></table></figure>\n<p>$【例】\\sum \\limits_{n=0}^{\\infty}$</p>\n<p><br></p>\n<h3 id=\"和-prod-limits-n-0-infty\"><a href=\"#和-prod-limits-n-0-infty\" class=\"headerlink\" title=\"和 \\prod \\limits_{n=0}^{\\infty}\"></a>和 \\prod \\limits_{n=0}^{\\infty}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\prod \\limits_&#123;n=0&#125;^&#123;\\infty&#125;$</span><br></pre></td></tr></table></figure>\n<p>$【例】\\prod \\limits_{n=0}^{\\infty}$</p>\n<p><br></p>\n<h3 id=\"和-int-a-b\"><a href=\"#和-int-a-b\" class=\"headerlink\" title=\"和 \\int_{a}^{b}\"></a>和 \\int_{a}^{b}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\int_&#123;a&#125;^&#123;b&#125;$</span><br></pre></td></tr></table></figure>\n<p>$【例】\\int_{a}^{b}$</p>\n<p><br></p>\n<h3 id=\"和-int-a-b-1\"><a href=\"#和-int-a-b-1\" class=\"headerlink\" title=\"和 \\int_{a}^{b}\"></a>和 \\int_{a}^{b}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\int_&#123;a&#125;^&#123;b&#125;$</span><br></pre></td></tr></table></figure>\n<p>br/&gt;</p>\n<h3 id=\"函数定义-begin-cases-xx-amp-描述-0-amp-描述-end-cases\"><a href=\"#函数定义-begin-cases-xx-amp-描述-0-amp-描述-end-cases\" class=\"headerlink\" title=\"函数定义 \\begin{cases} xx &amp; 描述 \\\\ 0 &amp; 描述 \\end{cases}\"></a>函数定义 \\begin{cases} xx &amp; 描述 \\\\ 0 &amp; 描述 \\end{cases}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\begin&#123;cases&#125; xx &amp; 描述 \\\\\\ 0 &amp; 描述 \\end&#123;cases&#125;</span><br></pre></td></tr></table></figure>\n<p>$【例】\\begin{cases} xx &amp; 描述 \\\\ 0 &amp; 描述 \\end{cases}$</p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">mathjax-basic-tutorial-and-quick-reference</a>\n<a href=\"https://www.mathelounge.de/509545/mathjax-latex-basic-tutorial-und-referenz-deutsch\" target=\"_blank\" rel=\"noopener\">mathjax-latex-basic-tutorial-und-referenz-deutsch</a>\n<a href=\"https://www.matheretter.de/rechner/latex/\" target=\"_blank\" rel=\"noopener\">在线编辑LaTeX</a></p>\n","site":{"data":{}},"excerpt":"<p>LaTeX，是一种基于TEX的排版系统，由美国计算机科学家莱斯利·兰伯特在20世纪80年代初期开发，利用这种格式系统的处理，即使使用者没有排版和程序设计的知识也可以充分发挥由TEX所提供的强大功能，不必一一亲自去设计或校对，能在几天，甚至几小时内生成很多具有书籍品质的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学、物理文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　—————摘自《维基百科》</p>","more":"<p><br></p>\n<hr>\n<p><br></p>\n<p>LaTeX 公式 必须要用 <code>$...$</code> 或者 <code>$$...$$</code> 包裹</p>\n<p><code>$...$</code> 、<code>$$...$$</code> 区别：<code>$...$</code> 排版在左边，<code>$$...$$</code> 排版在中间，如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$H(X)=-\\sum<span class=\"emphasis\">_&#123;i=0&#125; P(X_</span>&#123;i&#125;) \\log<span class=\"emphasis\">_b P(X_</span>&#123;i&#125;)$</span><br></pre></td></tr></table></figure>\n<p>$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$</p>\n<p><br></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$H(X)=-\\sum<span class=\"emphasis\">_&#123;i=0&#125; P(X_</span>&#123;i&#125;) \\log<span class=\"emphasis\">_b P(X_</span>&#123;i&#125;)$$</span><br></pre></td></tr></table></figure>\n<p>$$H(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})$$</p>\n<p><br></p>\n<h3 id=\"分数-frac-a-b\"><a href=\"#分数-frac-a-b\" class=\"headerlink\" title=\"分数 \\frac{a}{b}\"></a>分数 \\frac{a}{b}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># a：分子，b：分母</span></span><br><span class=\"line\">$\\frac&#123;a&#125;&#123;b&#125;$</span><br></pre></td></tr></table></figure>\n<p>$$【例】\\frac{a}{b}$$</p>\n<p><br></p>\n<h3 id=\"指数-a-b\"><a href=\"#指数-a-b\" class=\"headerlink\" title=\"指数 a^{b}\"></a>指数 a^{b}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span>^&#123;b&#125;$</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"根号-sqrt-a\"><a href=\"#根号-sqrt-a\" class=\"headerlink\" title=\"根号 \\sqrt{a}\"></a>根号 \\sqrt{a}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\sqrt&#123;a&#125;$</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"根号-sqrt-n-a\"><a href=\"#根号-sqrt-n-a\" class=\"headerlink\" title=\"根号 \\sqrt[n]{a}\"></a>根号 \\sqrt[n]{a}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\sqrt[n]&#123;a&#125;$</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"极限-lim-limits-x-to-infty\"><a href=\"#极限-lim-limits-x-to-infty\" class=\"headerlink\" title=\"极限 \\lim\\limits_{x \\to \\infty}\"></a>极限 \\lim\\limits_{x \\to \\infty}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\lim\\limits_&#123;x\\to\\infty&#125;$</span><br></pre></td></tr></table></figure>\n<p>$【例】\\lim\\limits_{x \\to 0}$\n$【例】\\lim\\limits_{x \\to \\infty}$</p>\n<p><br></p>\n<h3 id=\"对数-log-b-a\"><a href=\"#对数-log-b-a\" class=\"headerlink\" title=\"对数 \\log_{b}{a}\"></a>对数 \\log_{b}{a}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\log_&#123;b&#125;&#123;a&#125;$</span><br></pre></td></tr></table></figure>\n<p>$【例】\\log_{b}{a}$</p>\n<p><br></p>\n<h3 id=\"和-sum-limits-n-0-infty\"><a href=\"#和-sum-limits-n-0-infty\" class=\"headerlink\" title=\"和 \\sum \\limits_{n=0}^{\\infty}\"></a>和 \\sum \\limits_{n=0}^{\\infty}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\sum \\limits_&#123;n=0&#125;^&#123;\\infty&#125;$</span><br></pre></td></tr></table></figure>\n<p>$【例】\\sum \\limits_{n=0}^{\\infty}$</p>\n<p><br></p>\n<h3 id=\"和-prod-limits-n-0-infty\"><a href=\"#和-prod-limits-n-0-infty\" class=\"headerlink\" title=\"和 \\prod \\limits_{n=0}^{\\infty}\"></a>和 \\prod \\limits_{n=0}^{\\infty}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\prod \\limits_&#123;n=0&#125;^&#123;\\infty&#125;$</span><br></pre></td></tr></table></figure>\n<p>$【例】\\prod \\limits_{n=0}^{\\infty}$</p>\n<p><br></p>\n<h3 id=\"和-int-a-b\"><a href=\"#和-int-a-b\" class=\"headerlink\" title=\"和 \\int_{a}^{b}\"></a>和 \\int_{a}^{b}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\int_&#123;a&#125;^&#123;b&#125;$</span><br></pre></td></tr></table></figure>\n<p>$【例】\\int_{a}^{b}$</p>\n<p><br></p>\n<h3 id=\"和-int-a-b-1\"><a href=\"#和-int-a-b-1\" class=\"headerlink\" title=\"和 \\int_{a}^{b}\"></a>和 \\int_{a}^{b}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\int_&#123;a&#125;^&#123;b&#125;$</span><br></pre></td></tr></table></figure>\n<p>br/&gt;</p>\n<h3 id=\"函数定义-begin-cases-xx-amp-描述-0-amp-描述-end-cases\"><a href=\"#函数定义-begin-cases-xx-amp-描述-0-amp-描述-end-cases\" class=\"headerlink\" title=\"函数定义 \\begin{cases} xx &amp; 描述 \\\\ 0 &amp; 描述 \\end{cases}\"></a>函数定义 \\begin{cases} xx &amp; 描述 \\\\ 0 &amp; 描述 \\end{cases}</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\begin&#123;cases&#125; xx &amp; 描述 \\\\\\ 0 &amp; 描述 \\end&#123;cases&#125;</span><br></pre></td></tr></table></figure>\n<p>$【例】\\begin{cases} xx &amp; 描述 \\\\ 0 &amp; 描述 \\end{cases}$</p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">mathjax-basic-tutorial-and-quick-reference</a>\n<a href=\"https://www.mathelounge.de/509545/mathjax-latex-basic-tutorial-und-referenz-deutsch\" target=\"_blank\" rel=\"noopener\">mathjax-latex-basic-tutorial-und-referenz-deutsch</a>\n<a href=\"https://www.matheretter.de/rechner/latex/\" target=\"_blank\" rel=\"noopener\">在线编辑LaTeX</a></p>"},{"title":"Mac 使用rz、sz 远程上传、下载文件","date":"2015-08-30T02:00:00.000Z","_content":"\n\n\n## 下载安装lrzsz\n**安装** \n```bash\nsudo brew install lrzsz\n```\n\n**建立软连接** \n```\nln -s /usr/local/Cellar/lrzsz/0.12.20/bin/sz\nln -s /usr/local/Cellar/lrzsz/0.12.20/bin/rz\n```\n\n\n\n## 下载并安装automatic zmoderm\n```bash\n/usr/local/bin\n\n## 如果没有安装 wget：brew install wget\nsudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh\nsudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh\n\nsudo chmod 777 /usr/local/bin/iterm2-*\n```\n\n\n## 添加iTerm2 trigger\n```\niTerm2 --> Profiles --> Open Profiles --> Edit Profiles --> Advanced --> Edit Trigger\n\nRegular expression      　　Action      　　　　　　　Parameters\n\n\\*\\*B0100　　　　　　　　Run Silent Coprocess　　/usr/local/bin/iterm2-send-zmodem.sh\n\\*\\*B00000000000000　  Run Silent Coprocess　　/usr/local/bin/iterm2-recv-zmodem.sh\n```\n\n\n![配置图片](122150034707951.png)\n\n\n> 最后 iTerm2 重启","source":"_posts/Mac-使用rz、sz-远程上传、下载文件.md","raw":"---\ntitle: Mac 使用rz、sz 远程上传、下载文件\ndate: 2015-08-30 10:00\ncategories: \n    - Mac\ntags:\n    - Mac\n---\n\n\n\n## 下载安装lrzsz\n**安装** \n```bash\nsudo brew install lrzsz\n```\n\n**建立软连接** \n```\nln -s /usr/local/Cellar/lrzsz/0.12.20/bin/sz\nln -s /usr/local/Cellar/lrzsz/0.12.20/bin/rz\n```\n\n\n\n## 下载并安装automatic zmoderm\n```bash\n/usr/local/bin\n\n## 如果没有安装 wget：brew install wget\nsudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh\nsudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh\n\nsudo chmod 777 /usr/local/bin/iterm2-*\n```\n\n\n## 添加iTerm2 trigger\n```\niTerm2 --> Profiles --> Open Profiles --> Edit Profiles --> Advanced --> Edit Trigger\n\nRegular expression      　　Action      　　　　　　　Parameters\n\n\\*\\*B0100　　　　　　　　Run Silent Coprocess　　/usr/local/bin/iterm2-send-zmodem.sh\n\\*\\*B00000000000000　  Run Silent Coprocess　　/usr/local/bin/iterm2-recv-zmodem.sh\n```\n\n\n![配置图片](122150034707951.png)\n\n\n> 最后 iTerm2 重启","slug":"Mac-使用rz、sz-远程上传、下载文件","published":1,"updated":"2019-11-02T07:12:18.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5e0026t6s6ytxvowqi","content":"<h2 id=\"下载安装lrzsz\"><a href=\"#下载安装lrzsz\" class=\"headerlink\" title=\"下载安装lrzsz\"></a>下载安装lrzsz</h2><p><strong>安装</strong> \n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo brew install lrzsz</span><br></pre></td></tr></table></figure></p>\n<p><strong>建立软连接</strong> \n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/Cellar/lrzsz/0.12.20/bin/sz</span><br><span class=\"line\">ln -s /usr/local/Cellar/lrzsz/0.12.20/bin/rz</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"下载并安装automatic-zmoderm\"><a href=\"#下载并安装automatic-zmoderm\" class=\"headerlink\" title=\"下载并安装automatic zmoderm\"></a>下载并安装automatic zmoderm</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 如果没有安装 wget：brew install wget</span></span><br><span class=\"line\">sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh</span><br><span class=\"line\">sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh</span><br><span class=\"line\"></span><br><span class=\"line\">sudo chmod 777 /usr/<span class=\"built_in\">local</span>/bin/iterm2-*</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加iTerm2-trigger\"><a href=\"#添加iTerm2-trigger\" class=\"headerlink\" title=\"添加iTerm2 trigger\"></a>添加iTerm2 trigger</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iTerm2 --&gt; Profiles --&gt; Open Profiles --&gt; Edit Profiles --&gt; Advanced --&gt; Edit Trigger</span><br><span class=\"line\"></span><br><span class=\"line\">Regular expression      　　Action      　　　　　　　Parameters</span><br><span class=\"line\"></span><br><span class=\"line\">\\*\\*B0100　　　　　　　　Run Silent Coprocess　　/usr/local/bin/iterm2-send-zmodem.sh</span><br><span class=\"line\">\\*\\*B00000000000000　  Run Silent Coprocess　　/usr/local/bin/iterm2-recv-zmodem.sh</span><br></pre></td></tr></table></figure>\n<p><img src=\"122150034707951.png\" alt=\"配置图片\"></p>\n<blockquote>\n<p>最后 iTerm2 重启</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下载安装lrzsz\"><a href=\"#下载安装lrzsz\" class=\"headerlink\" title=\"下载安装lrzsz\"></a>下载安装lrzsz</h2><p><strong>安装</strong> \n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo brew install lrzsz</span><br></pre></td></tr></table></figure></p>\n<p><strong>建立软连接</strong> \n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/Cellar/lrzsz/0.12.20/bin/sz</span><br><span class=\"line\">ln -s /usr/local/Cellar/lrzsz/0.12.20/bin/rz</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"下载并安装automatic-zmoderm\"><a href=\"#下载并安装automatic-zmoderm\" class=\"headerlink\" title=\"下载并安装automatic zmoderm\"></a>下载并安装automatic zmoderm</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 如果没有安装 wget：brew install wget</span></span><br><span class=\"line\">sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh</span><br><span class=\"line\">sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh</span><br><span class=\"line\"></span><br><span class=\"line\">sudo chmod 777 /usr/<span class=\"built_in\">local</span>/bin/iterm2-*</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加iTerm2-trigger\"><a href=\"#添加iTerm2-trigger\" class=\"headerlink\" title=\"添加iTerm2 trigger\"></a>添加iTerm2 trigger</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iTerm2 --&gt; Profiles --&gt; Open Profiles --&gt; Edit Profiles --&gt; Advanced --&gt; Edit Trigger</span><br><span class=\"line\"></span><br><span class=\"line\">Regular expression      　　Action      　　　　　　　Parameters</span><br><span class=\"line\"></span><br><span class=\"line\">\\*\\*B0100　　　　　　　　Run Silent Coprocess　　/usr/local/bin/iterm2-send-zmodem.sh</span><br><span class=\"line\">\\*\\*B00000000000000　  Run Silent Coprocess　　/usr/local/bin/iterm2-recv-zmodem.sh</span><br></pre></td></tr></table></figure>\n<p><img src=\"122150034707951.png\" alt=\"配置图片\"></p>\n<blockquote>\n<p>最后 iTerm2 重启</p>\n</blockquote>\n"},{"title":"Mac安装Git","date":"2012-08-01T00:02:01.000Z","_content":"\n### 查看\b机器是否已经安装\n``` bash\n$ git --version\n```\n\n输入上面命令，如果有版本信息，说明已经安装，如果没有\b说明没有安装；\n如果没有安装请下载安装：https://git-scm.com/download/mac\n\n\n---\n参考\n\n[官方文档安装](https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)","source":"_posts/Mac安装Git.md","raw":"---\ntitle: Mac安装Git\ndate: 2012-08-01 08:02:01\ncategories:\n    - Git\ntags:\n    - Git\n---\n\n### 查看\b机器是否已经安装\n``` bash\n$ git --version\n```\n\n输入上面命令，如果有版本信息，说明已经安装，如果没有\b说明没有安装；\n如果没有安装请下载安装：https://git-scm.com/download/mac\n\n\n---\n参考\n\n[官方文档安装](https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)","slug":"Mac安装Git","published":1,"updated":"2019-11-02T07:12:18.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5g002at6s6z1epzh86","content":"<h3 id=\"查看机器是否已经安装\"><a href=\"#查看机器是否已经安装\" class=\"headerlink\" title=\"查看\b机器是否已经安装\"></a>查看\b机器是否已经安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br></pre></td></tr></table></figure>\n<p>输入上面命令，如果有版本信息，说明已经安装，如果没有\b说明没有安装；\n如果没有安装请下载安装：<a href=\"https://git-scm.com/download/mac\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/download/mac</a></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\" target=\"_blank\" rel=\"noopener\">官方文档安装</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"查看机器是否已经安装\"><a href=\"#查看机器是否已经安装\" class=\"headerlink\" title=\"查看\b机器是否已经安装\"></a>查看\b机器是否已经安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br></pre></td></tr></table></figure>\n<p>输入上面命令，如果有版本信息，说明已经安装，如果没有\b说明没有安装；\n如果没有安装请下载安装：<a href=\"https://git-scm.com/download/mac\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/download/mac</a></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\" target=\"_blank\" rel=\"noopener\">官方文档安装</a></p>\n"},{"title":"MongoDB安装","date":"2018-12-26T02:13:18.000Z","_content":"\n\nhttps://www.mongodb.com/\n\n\n## 安装&配置\n\nhttps://docs.mongodb.com/manual/installation/\n\n### 下载\n\n### 配置\n\n\n```conf\n#数据库路径\ndbpath=/Library/mongodb-osx-x86_64-4.0.5/data/\n\n#日志输出文件路径\nlogpath=/Library/mongodb-osx-x86_64-4.0.5/log/mongodb.log\n\n#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件\nlogappend=true\n\n#启用日志文件，默认启用\njournal=true\n\n#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false\nquiet=false\n\n#是否后台启动，有这个参数，就可以实现后台运行\nfork=true\n\n#端口号 默认为27017\nport=27017\n\n#指定存储引擎（默认不需要指定）\n#storageEngine=mmapv1\n\n#开启网页日志监控，有这个参数就可以在浏览器上用28017查看监控界面\nhttpinterface=true\n```\n\n### 启动\n\n```\n$ cd bin\n$ sudo ./mongod -f /Library/mongodb-osx-x86_64-4.0.5/conf/mongo.conf\n\nabout to fork child process, waiting until server is ready for connections.\nforked process: 13313\nchild process started successfully, parent exiting\n```\n\n### 关闭\n$ cd bin\n$ ./mongo\n```\n\n\n\n\n\n## MongoDB可视化界面\n\b\n### 安装&启动\n\n```bash\nsudo git clone https://github.com/mrvautin/adminMongo.git && cd adminMongo\nsudo npm install\nsudo npm start\n```\n\n访问：http://127.0.0.1:1234\n\n\n\n\n<br/>\n\n---\n\n参考\n\nhttps://github.com/mrvautin/adminMongo\nhttps://adminmongo.markmoffat.com/docs/","source":"_posts/MongoDB安装.md","raw":"---\ntitle: MongoDB安装\ndate: 2018-12-26 10:13:18\ntags:\n---\n\n\nhttps://www.mongodb.com/\n\n\n## 安装&配置\n\nhttps://docs.mongodb.com/manual/installation/\n\n### 下载\n\n### 配置\n\n\n```conf\n#数据库路径\ndbpath=/Library/mongodb-osx-x86_64-4.0.5/data/\n\n#日志输出文件路径\nlogpath=/Library/mongodb-osx-x86_64-4.0.5/log/mongodb.log\n\n#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件\nlogappend=true\n\n#启用日志文件，默认启用\njournal=true\n\n#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false\nquiet=false\n\n#是否后台启动，有这个参数，就可以实现后台运行\nfork=true\n\n#端口号 默认为27017\nport=27017\n\n#指定存储引擎（默认不需要指定）\n#storageEngine=mmapv1\n\n#开启网页日志监控，有这个参数就可以在浏览器上用28017查看监控界面\nhttpinterface=true\n```\n\n### 启动\n\n```\n$ cd bin\n$ sudo ./mongod -f /Library/mongodb-osx-x86_64-4.0.5/conf/mongo.conf\n\nabout to fork child process, waiting until server is ready for connections.\nforked process: 13313\nchild process started successfully, parent exiting\n```\n\n### 关闭\n$ cd bin\n$ ./mongo\n```\n\n\n\n\n\n## MongoDB可视化界面\n\b\n### 安装&启动\n\n```bash\nsudo git clone https://github.com/mrvautin/adminMongo.git && cd adminMongo\nsudo npm install\nsudo npm start\n```\n\n访问：http://127.0.0.1:1234\n\n\n\n\n<br/>\n\n---\n\n参考\n\nhttps://github.com/mrvautin/adminMongo\nhttps://adminmongo.markmoffat.com/docs/","slug":"MongoDB安装","published":1,"updated":"2019-11-02T07:12:18.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5h002ct6s6elu57cmx","content":"<p><a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/</a></p>\n<h2 id=\"安装-amp-配置\"><a href=\"#安装-amp-配置\" class=\"headerlink\" title=\"安装&amp;配置\"></a>安装&amp;配置</h2><p><a href=\"https://docs.mongodb.com/manual/installation/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/installation/</a></p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#数据库路径</span><br><span class=\"line\">dbpath=/Library/mongodb-osx-x86_64-4.0.5/data/</span><br><span class=\"line\"></span><br><span class=\"line\">#日志输出文件路径</span><br><span class=\"line\">logpath=/Library/mongodb-osx-x86_64-4.0.5/log/mongodb.log</span><br><span class=\"line\"></span><br><span class=\"line\">#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</span><br><span class=\"line\">logappend=true</span><br><span class=\"line\"></span><br><span class=\"line\">#启用日志文件，默认启用</span><br><span class=\"line\">journal=true</span><br><span class=\"line\"></span><br><span class=\"line\">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class=\"line\">quiet=false</span><br><span class=\"line\"></span><br><span class=\"line\">#是否后台启动，有这个参数，就可以实现后台运行</span><br><span class=\"line\">fork=true</span><br><span class=\"line\"></span><br><span class=\"line\">#端口号 默认为27017</span><br><span class=\"line\">port=27017</span><br><span class=\"line\"></span><br><span class=\"line\">#指定存储引擎（默认不需要指定）</span><br><span class=\"line\">#storageEngine=mmapv1</span><br><span class=\"line\"></span><br><span class=\"line\">#开启网页日志监控，有这个参数就可以在浏览器上用28017查看监控界面</span><br><span class=\"line\">httpinterface=true</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd bin</span><br><span class=\"line\">$ sudo ./mongod -f /Library/mongodb-osx-x86_64-4.0.5/conf/mongo.conf</span><br><span class=\"line\"></span><br><span class=\"line\">about to fork child process, waiting until server is ready for connections.</span><br><span class=\"line\">forked process: 13313</span><br><span class=\"line\">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h3><p>$ cd bin\n$ ./mongo\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## MongoDB可视化界面</span><br><span class=\"line\">\b</span><br><span class=\"line\">### 安装&amp;启动</span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">sudo git clone https://github.com/mrvautin/adminMongo.git &amp;&amp; cd adminMongo</span><br><span class=\"line\">sudo npm install</span><br><span class=\"line\">sudo npm start</span><br></pre></td></tr></table></figure></p>\n<p>访问：<a href=\"http://127.0.0.1:1234\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:1234</a></p>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://github.com/mrvautin/adminMongo\" target=\"_blank\" rel=\"noopener\">https://github.com/mrvautin/adminMongo</a>\n<a href=\"https://adminmongo.markmoffat.com/docs/\" target=\"_blank\" rel=\"noopener\">https://adminmongo.markmoffat.com/docs/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/</a></p>\n<h2 id=\"安装-amp-配置\"><a href=\"#安装-amp-配置\" class=\"headerlink\" title=\"安装&amp;配置\"></a>安装&amp;配置</h2><p><a href=\"https://docs.mongodb.com/manual/installation/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/installation/</a></p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#数据库路径</span><br><span class=\"line\">dbpath=/Library/mongodb-osx-x86_64-4.0.5/data/</span><br><span class=\"line\"></span><br><span class=\"line\">#日志输出文件路径</span><br><span class=\"line\">logpath=/Library/mongodb-osx-x86_64-4.0.5/log/mongodb.log</span><br><span class=\"line\"></span><br><span class=\"line\">#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</span><br><span class=\"line\">logappend=true</span><br><span class=\"line\"></span><br><span class=\"line\">#启用日志文件，默认启用</span><br><span class=\"line\">journal=true</span><br><span class=\"line\"></span><br><span class=\"line\">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class=\"line\">quiet=false</span><br><span class=\"line\"></span><br><span class=\"line\">#是否后台启动，有这个参数，就可以实现后台运行</span><br><span class=\"line\">fork=true</span><br><span class=\"line\"></span><br><span class=\"line\">#端口号 默认为27017</span><br><span class=\"line\">port=27017</span><br><span class=\"line\"></span><br><span class=\"line\">#指定存储引擎（默认不需要指定）</span><br><span class=\"line\">#storageEngine=mmapv1</span><br><span class=\"line\"></span><br><span class=\"line\">#开启网页日志监控，有这个参数就可以在浏览器上用28017查看监控界面</span><br><span class=\"line\">httpinterface=true</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd bin</span><br><span class=\"line\">$ sudo ./mongod -f /Library/mongodb-osx-x86_64-4.0.5/conf/mongo.conf</span><br><span class=\"line\"></span><br><span class=\"line\">about to fork child process, waiting until server is ready for connections.</span><br><span class=\"line\">forked process: 13313</span><br><span class=\"line\">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h3><p>$ cd bin\n$ ./mongo\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## MongoDB可视化界面</span><br><span class=\"line\">\b</span><br><span class=\"line\">### 安装&amp;启动</span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">sudo git clone https://github.com/mrvautin/adminMongo.git &amp;&amp; cd adminMongo</span><br><span class=\"line\">sudo npm install</span><br><span class=\"line\">sudo npm start</span><br></pre></td></tr></table></figure></p>\n<p>访问：<a href=\"http://127.0.0.1:1234\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:1234</a></p>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://github.com/mrvautin/adminMongo\" target=\"_blank\" rel=\"noopener\">https://github.com/mrvautin/adminMongo</a>\n<a href=\"https://adminmongo.markmoffat.com/docs/\" target=\"_blank\" rel=\"noopener\">https://adminmongo.markmoffat.com/docs/</a></p>\n"},{"title":"MongoDB教程","date":"2018-12-26T02:13:30.000Z","_content":"","source":"_posts/MongoDB教程.md","raw":"---\ntitle: MongoDB教程\ndate: 2018-12-26 10:13:30\ntags:\n---\n","slug":"MongoDB教程","published":1,"updated":"2019-11-02T07:12:18.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5j002gt6s66q8utb90","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"MongoDB设计与实现","date":"2018-12-26T02:13:46.000Z","_content":"","source":"_posts/MongoDB设计与实现.md","raw":"---\ntitle: MongoDB设计与实现\ndate: 2018-12-26 10:13:46\ntags:\n---\n","slug":"MongoDB设计与实现","published":1,"updated":"2019-11-02T07:12:18.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5k002kt6s668gjda23","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"《MySQL实战45讲》","date":"2019-06-03T07:05:30.000Z","_content":"\n\n<br/>\n\n{% post_link 01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的 《01 | 基础架构：一条SQL查询语句是如何执行的》%}\n\n<hr/>\n\n{% post_link 02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的 《02 | 日志系统：一条SQL更新语句是如何执行的》%}\n\n<hr/>\n\n{% post_link 03-MySQL实战45讲-事务隔离：为什么你改了我还看不见 《03-事务隔离：为什么你改了我还看不见》%}\n\n<hr/>\n\n{% post_link 04-MySQL实战45讲-深入浅出索引（上） 《04 | 深入浅出索引（上）》%}\n\n<hr/>\n\n{% post_link 05-MySQL实战45讲-深入浅出索引（下） 《05 | 深入浅出索引（下）》%}\n\n<hr/>\n\n{% post_link 06-MySQL实战45讲-全局锁和表锁：给表加个字段怎么有这么多阻碍   《06 | 全局锁和表锁：给表加个字段怎么有这么多阻碍》%}\n\n<hr/>\n\n{% post_link 07-MySQL实战45讲-行锁功过：怎么减少行锁对性能的影响    《07 | 行锁功过：怎么减少行锁对性能的影响》%}\n\n<hr/>\n\n{% post_link 08-MySQL实战45讲-事务到底是隔离的还是不隔离的  《08 | 事务到底是隔离的还是不隔离的》%}\n\n<hr/>\n\n{% post_link 09-MySQL实战45讲-普通索引和唯一索引，应该怎么选择  《09 | 普通索引和唯一索引，应该怎么选择》%}\n\n\n","source":"_posts/MySQL实战45讲.md","raw":"---\ntitle: 《MySQL实战45讲》\ndate: 2019-06-03 15:05:30\ncategories: \n    - MySQL\ntags:\n    - MySQL\n    - MySQL实战45讲\n---\n\n\n<br/>\n\n{% post_link 01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的 《01 | 基础架构：一条SQL查询语句是如何执行的》%}\n\n<hr/>\n\n{% post_link 02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的 《02 | 日志系统：一条SQL更新语句是如何执行的》%}\n\n<hr/>\n\n{% post_link 03-MySQL实战45讲-事务隔离：为什么你改了我还看不见 《03-事务隔离：为什么你改了我还看不见》%}\n\n<hr/>\n\n{% post_link 04-MySQL实战45讲-深入浅出索引（上） 《04 | 深入浅出索引（上）》%}\n\n<hr/>\n\n{% post_link 05-MySQL实战45讲-深入浅出索引（下） 《05 | 深入浅出索引（下）》%}\n\n<hr/>\n\n{% post_link 06-MySQL实战45讲-全局锁和表锁：给表加个字段怎么有这么多阻碍   《06 | 全局锁和表锁：给表加个字段怎么有这么多阻碍》%}\n\n<hr/>\n\n{% post_link 07-MySQL实战45讲-行锁功过：怎么减少行锁对性能的影响    《07 | 行锁功过：怎么减少行锁对性能的影响》%}\n\n<hr/>\n\n{% post_link 08-MySQL实战45讲-事务到底是隔离的还是不隔离的  《08 | 事务到底是隔离的还是不隔离的》%}\n\n<hr/>\n\n{% post_link 09-MySQL实战45讲-普通索引和唯一索引，应该怎么选择  《09 | 普通索引和唯一索引，应该怎么选择》%}\n\n\n","slug":"MySQL实战45讲","published":1,"updated":"2019-11-02T07:12:18.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5m002nt6s6u67psajl","content":"<p><br></p>\n<a href=\"/2019/06/03/01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的/\" title=\"《01 | 基础架构：一条SQL查询语句是如何执行的》\">《01 | 基础架构：一条SQL查询语句是如何执行的》</a>\n<hr>\n\n<a href=\"/2019/06/03/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的/\" title=\"《02 | 日志系统：一条SQL更新语句是如何执行的》\">《02 | 日志系统：一条SQL更新语句是如何执行的》</a>\n<hr>\n\n<a href=\"/2019/06/03/03-MySQL实战45讲-事务隔离：为什么你改了我还看不见/\" title=\"《03-事务隔离：为什么你改了我还看不见》\">《03-事务隔离：为什么你改了我还看不见》</a>\n<hr>\n\n<a href=\"/2019/06/03/04-MySQL实战45讲-深入浅出索引（上）/\" title=\"《04 | 深入浅出索引（上）》\">《04 | 深入浅出索引（上）》</a>\n<hr>\n\n<a href=\"/2019/06/03/05-MySQL实战45讲-深入浅出索引（下）/\" title=\"《05 | 深入浅出索引（下）》\">《05 | 深入浅出索引（下）》</a>\n<hr>\n\n<a href=\"/2019/06/03/06-MySQL实战45讲-全局锁和表锁：给表加个字段怎么有这么多阻碍/\" title=\"《06 | 全局锁和表锁：给表加个字段怎么有这么多阻碍》\">《06 | 全局锁和表锁：给表加个字段怎么有这么多阻碍》</a>\n<hr>\n\n<a href=\"/2019/06/03/07-MySQL实战45讲-行锁功过：怎么减少行锁对性能的影响/\" title=\"《07 | 行锁功过：怎么减少行锁对性能的影响》\">《07 | 行锁功过：怎么减少行锁对性能的影响》</a>\n<hr>\n\n<a href=\"/2019/06/03/08-MySQL实战45讲-事务到底是隔离的还是不隔离的/\" title=\"《08 | 事务到底是隔离的还是不隔离的》\">《08 | 事务到底是隔离的还是不隔离的》</a>\n<hr>\n\n<a href=\"/2019/06/03/09-MySQL实战45讲-普通索引和唯一索引，应该怎么选择/\" title=\"《09 | 普通索引和唯一索引，应该怎么选择》\">《09 | 普通索引和唯一索引，应该怎么选择》</a>\n","site":{"data":{}},"excerpt":"","more":"<p><br></p>\n<a href=\"/2019/06/03/01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的/\" title=\"《01 | 基础架构：一条SQL查询语句是如何执行的》\">《01 | 基础架构：一条SQL查询语句是如何执行的》</a>\n<hr>\n\n<a href=\"/2019/06/03/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的/\" title=\"《02 | 日志系统：一条SQL更新语句是如何执行的》\">《02 | 日志系统：一条SQL更新语句是如何执行的》</a>\n<hr>\n\n<a href=\"/2019/06/03/03-MySQL实战45讲-事务隔离：为什么你改了我还看不见/\" title=\"《03-事务隔离：为什么你改了我还看不见》\">《03-事务隔离：为什么你改了我还看不见》</a>\n<hr>\n\n<a href=\"/2019/06/03/04-MySQL实战45讲-深入浅出索引（上）/\" title=\"《04 | 深入浅出索引（上）》\">《04 | 深入浅出索引（上）》</a>\n<hr>\n\n<a href=\"/2019/06/03/05-MySQL实战45讲-深入浅出索引（下）/\" title=\"《05 | 深入浅出索引（下）》\">《05 | 深入浅出索引（下）》</a>\n<hr>\n\n<a href=\"/2019/06/03/06-MySQL实战45讲-全局锁和表锁：给表加个字段怎么有这么多阻碍/\" title=\"《06 | 全局锁和表锁：给表加个字段怎么有这么多阻碍》\">《06 | 全局锁和表锁：给表加个字段怎么有这么多阻碍》</a>\n<hr>\n\n<a href=\"/2019/06/03/07-MySQL实战45讲-行锁功过：怎么减少行锁对性能的影响/\" title=\"《07 | 行锁功过：怎么减少行锁对性能的影响》\">《07 | 行锁功过：怎么减少行锁对性能的影响》</a>\n<hr>\n\n<a href=\"/2019/06/03/08-MySQL实战45讲-事务到底是隔离的还是不隔离的/\" title=\"《08 | 事务到底是隔离的还是不隔离的》\">《08 | 事务到底是隔离的还是不隔离的》</a>\n<hr>\n\n<a href=\"/2019/06/03/09-MySQL实战45讲-普通索引和唯一索引，应该怎么选择/\" title=\"《09 | 普通索引和唯一索引，应该怎么选择》\">《09 | 普通索引和唯一索引，应该怎么选择》</a>\n"},{"title":"MySQL汇总","date":"9999-12-30T16:00:00.000Z","_content":"\n<br/>\n\n&zwj;{% post_link MySQL索引 《MySQL索引》%}\n{% post_link MySQL锁 《MySQL锁》%}\n\n<hr/>\n\n<br/>\n### 《MySQL实战45讲》\n&emsp;&emsp;    {% post_link 01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的 《01 | 基础架构：一条SQL查询语句是如何执行的》%}\n&emsp;&emsp;    {% post_link 02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的 《02 | 日志系统：一条SQL更新语句是如何执行的》%}\n&emsp;&emsp;    {% post_link 03-MySQL实战45讲-事务隔离：为什么你改了我还看不见 《03-事务隔离：为什么你改了我还看不见》%}","source":"_posts/MySQL汇总.md","raw":"---\ntitle: MySQL汇总\ndate: 9999-12-31\ncategories: \n    - MySQL\ntags:\n    - MySQL\n---\n\n<br/>\n\n&zwj;{% post_link MySQL索引 《MySQL索引》%}\n{% post_link MySQL锁 《MySQL锁》%}\n\n<hr/>\n\n<br/>\n### 《MySQL实战45讲》\n&emsp;&emsp;    {% post_link 01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的 《01 | 基础架构：一条SQL查询语句是如何执行的》%}\n&emsp;&emsp;    {% post_link 02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的 《02 | 日志系统：一条SQL更新语句是如何执行的》%}\n&emsp;&emsp;    {% post_link 03-MySQL实战45讲-事务隔离：为什么你改了我还看不见 《03-事务隔离：为什么你改了我还看不见》%}","slug":"MySQL汇总","published":1,"updated":"2019-11-02T07:12:18.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5n002pt6s6eo142vtw","content":"<p><br></p>\n<p>&zwj;<a href=\"/2019/06/12/MySQL索引/\" title=\"《MySQL索引》\">《MySQL索引》</a>\n<a href=\"/2019/06/06/MySQL锁/\" title=\"《MySQL锁》\">《MySQL锁》</a></p>\n<hr>\n\n<p><br></p>\n<h3 id=\"《MySQL实战45讲》\"><a href=\"#《MySQL实战45讲》\" class=\"headerlink\" title=\"《MySQL实战45讲》\"></a>《MySQL实战45讲》</h3><p>&emsp;&emsp;    <a href=\"/2019/06/03/01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的/\" title=\"《01 | 基础架构：一条SQL查询语句是如何执行的》\">《01 | 基础架构：一条SQL查询语句是如何执行的》</a>\n&emsp;&emsp;    <a href=\"/2019/06/03/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的/\" title=\"《02 | 日志系统：一条SQL更新语句是如何执行的》\">《02 | 日志系统：一条SQL更新语句是如何执行的》</a>\n&emsp;&emsp;    <a href=\"/2019/06/03/03-MySQL实战45讲-事务隔离：为什么你改了我还看不见/\" title=\"《03-事务隔离：为什么你改了我还看不见》\">《03-事务隔离：为什么你改了我还看不见》</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><br></p>\n<p>&zwj;<a href=\"/2019/06/12/MySQL索引/\" title=\"《MySQL索引》\">《MySQL索引》</a>\n<a href=\"/2019/06/06/MySQL锁/\" title=\"《MySQL锁》\">《MySQL锁》</a></p>\n<hr>\n\n<p><br></p>\n<h3 id=\"《MySQL实战45讲》\"><a href=\"#《MySQL实战45讲》\" class=\"headerlink\" title=\"《MySQL实战45讲》\"></a>《MySQL实战45讲》</h3><p>&emsp;&emsp;    <a href=\"/2019/06/03/01-MySQL实战45讲-基础架构：一条SQL查询语句是如何执行的/\" title=\"《01 | 基础架构：一条SQL查询语句是如何执行的》\">《01 | 基础架构：一条SQL查询语句是如何执行的》</a>\n&emsp;&emsp;    <a href=\"/2019/06/03/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的/\" title=\"《02 | 日志系统：一条SQL更新语句是如何执行的》\">《02 | 日志系统：一条SQL更新语句是如何执行的》</a>\n&emsp;&emsp;    <a href=\"/2019/06/03/03-MySQL实战45讲-事务隔离：为什么你改了我还看不见/\" title=\"《03-事务隔离：为什么你改了我还看不见》\">《03-事务隔离：为什么你改了我还看不见》</a></p>\n"},{"title":"MySQL索引","date":"2019-06-11T16:00:00.000Z","_content":"\n数据库索引是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—————————— 《维基百科》\n\n索引是存储引擎用于快速找到记录的一种数据结构\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—————————— 《高性能MySQL》\n\n\n\n<!-- more -->\n<br/>\n### \n\n<br/>\n\n### 原理\n\n---\n\n<br/>\n\n**参考**\n《高性能MySQL》\n《MySQL技术内幕——InnoDB存储引擎》","source":"_posts/MySQL索引.md","raw":"---\ntitle: MySQL索引\ndate: 2019-06-12\ncategories: \n    - MySQL\ntags:\n    - MySQL\n---\n\n数据库索引是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—————————— 《维基百科》\n\n索引是存储引擎用于快速找到记录的一种数据结构\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—————————— 《高性能MySQL》\n\n\n\n<!-- more -->\n<br/>\n### \n\n<br/>\n\n### 原理\n\n---\n\n<br/>\n\n**参考**\n《高性能MySQL》\n《MySQL技术内幕——InnoDB存储引擎》","slug":"MySQL索引","published":1,"updated":"2019-11-02T07:12:18.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5p002st6s651d3pwi9","content":"<p>数据库索引是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—————————— 《维基百科》</p>\n<p>索引是存储引擎用于快速找到记录的一种数据结构\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—————————— 《高性能MySQL》</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>### </p>\n<p><br></p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><hr>\n<p><br></p>\n<p><strong>参考</strong>\n《高性能MySQL》\n《MySQL技术内幕——InnoDB存储引擎》</p>\n","site":{"data":{}},"excerpt":"<p>数据库索引是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—————————— 《维基百科》</p>\n<p>索引是存储引擎用于快速找到记录的一种数据结构\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—————————— 《高性能MySQL》</p>","more":"<p><br></p>\n<p>### </p>\n<p><br></p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><hr>\n<p><br></p>\n<p><strong>参考</strong>\n《高性能MySQL》\n《MySQL技术内幕——InnoDB存储引擎》</p>"},{"title":"MySQL锁","date":"2019-06-06T09:56:32.000Z","_content":"\n\n\n<!-- more -->\n\n---\n\n\n## InnoDB\n\n### 共享锁（shared (S) lock）和 排它锁（exclusive (X) lock）\nInnoDB实现了两种类型的行级锁：\n- `共享锁（shared (S) lock）`：允许持有锁的事务读取一行\n- `排它锁（exclusive (X) lock）`：允许持有锁的事务更新或删除行\n\n用一张经典的矩阵表格继续说明共享锁和排他锁的互斥关系：\n\n | S | X\n-|---|---\nS | 兼容 | 冲突\nX | 冲突 | 冲突\n\n- 如果一个事务对某一行数据加了S锁，另一个事务还可以对相应的行加S锁，但是不能对相应的行加X锁。\n- 如果一个事务对某一行数据加了X锁，另一个事务既不能对相应的行加S锁也不能加X锁。\n\n\n<br/>\n### 意向锁\n\n\n\n | X | IX | S | IS\n-|---|----|---|---\nX | 冲突 | 冲突 | 冲突 | 冲突\nIX | 冲突 | 兼容 | 冲突 | 兼容\nS | 冲突 | 冲突 | 兼容 | 兼容\nIS | 冲突 | 兼容 | 兼容 | 兼容\n\n\n<br/>\n### Record Locks\n\n\n\n<br/>\n### Gap Locks\n\n\n\n<br/>\n### Next-Key Locks\n\n\n\n<br/>\n### AUTO-INC Locks\n\n\n\n### 加锁语句\n- `select ... from`: InnoDB引擎采用多版本并发控制（MVCC）的方式实现了非阻塞读，所以对于普通的select读语句，InnoDB并不会加锁[【备注1】](#备注1)\n- `select ... from lock in share mode`: \n- `select ... from for update`: \n- `update ... where ...`: \n\n\n\n\n---\n\n<br/>\n### 备注\n<span id=\"备注1\">**【备注1】**: xxxx sffs</span>\n\n\n\n---\n\n<br/>\n\n**参考**\n[MySQL innodb-locking](https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html)\n《高性能MySQL》\n《MySQL技术内幕——InnoDB存储引擎》","source":"_posts/MySQL锁.md","raw":"---\ntitle: MySQL锁\ndate: 2019-06-06 17:56:32\ncategories:\n    - SQL\n    - MySQL\ntags:\n    - SQL\n    - MySQL\n---\n\n\n\n<!-- more -->\n\n---\n\n\n## InnoDB\n\n### 共享锁（shared (S) lock）和 排它锁（exclusive (X) lock）\nInnoDB实现了两种类型的行级锁：\n- `共享锁（shared (S) lock）`：允许持有锁的事务读取一行\n- `排它锁（exclusive (X) lock）`：允许持有锁的事务更新或删除行\n\n用一张经典的矩阵表格继续说明共享锁和排他锁的互斥关系：\n\n | S | X\n-|---|---\nS | 兼容 | 冲突\nX | 冲突 | 冲突\n\n- 如果一个事务对某一行数据加了S锁，另一个事务还可以对相应的行加S锁，但是不能对相应的行加X锁。\n- 如果一个事务对某一行数据加了X锁，另一个事务既不能对相应的行加S锁也不能加X锁。\n\n\n<br/>\n### 意向锁\n\n\n\n | X | IX | S | IS\n-|---|----|---|---\nX | 冲突 | 冲突 | 冲突 | 冲突\nIX | 冲突 | 兼容 | 冲突 | 兼容\nS | 冲突 | 冲突 | 兼容 | 兼容\nIS | 冲突 | 兼容 | 兼容 | 兼容\n\n\n<br/>\n### Record Locks\n\n\n\n<br/>\n### Gap Locks\n\n\n\n<br/>\n### Next-Key Locks\n\n\n\n<br/>\n### AUTO-INC Locks\n\n\n\n### 加锁语句\n- `select ... from`: InnoDB引擎采用多版本并发控制（MVCC）的方式实现了非阻塞读，所以对于普通的select读语句，InnoDB并不会加锁[【备注1】](#备注1)\n- `select ... from lock in share mode`: \n- `select ... from for update`: \n- `update ... where ...`: \n\n\n\n\n---\n\n<br/>\n### 备注\n<span id=\"备注1\">**【备注1】**: xxxx sffs</span>\n\n\n\n---\n\n<br/>\n\n**参考**\n[MySQL innodb-locking](https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html)\n《高性能MySQL》\n《MySQL技术内幕——InnoDB存储引擎》","slug":"MySQL锁","published":1,"updated":"2019-11-02T07:12:18.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5q002wt6s6qnmx3e1v","content":"<a id=\"more\"></a>\n<hr>\n<h2 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h2><h3 id=\"共享锁（shared-S-lock）和-排它锁（exclusive-X-lock）\"><a href=\"#共享锁（shared-S-lock）和-排它锁（exclusive-X-lock）\" class=\"headerlink\" title=\"共享锁（shared (S) lock）和 排它锁（exclusive (X) lock）\"></a>共享锁（shared (S) lock）和 排它锁（exclusive (X) lock）</h3><p>InnoDB实现了两种类型的行级锁：</p>\n<ul>\n<li><code>共享锁（shared (S) lock）</code>：允许持有锁的事务读取一行</li>\n<li><code>排它锁（exclusive (X) lock）</code>：允许持有锁的事务更新或删除行</li>\n</ul>\n<p>用一张经典的矩阵表格继续说明共享锁和排他锁的互斥关系：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>S</th>\n<th>X</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>S</td>\n<td>兼容</td>\n<td>冲突</td>\n</tr>\n<tr>\n<td>X</td>\n<td>冲突</td>\n<td>冲突</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>如果一个事务对某一行数据加了S锁，另一个事务还可以对相应的行加S锁，但是不能对相应的行加X锁。</li>\n<li>如果一个事务对某一行数据加了X锁，另一个事务既不能对相应的行加S锁也不能加X锁。</li>\n</ul>\n<p><br></p>\n<h3 id=\"意向锁\"><a href=\"#意向锁\" class=\"headerlink\" title=\"意向锁\"></a>意向锁</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>X</th>\n<th>IX</th>\n<th>S</th>\n<th>IS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>X</td>\n<td>冲突</td>\n<td>冲突</td>\n<td>冲突</td>\n<td>冲突</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>冲突</td>\n<td>兼容</td>\n<td>冲突</td>\n<td>兼容</td>\n</tr>\n<tr>\n<td>S</td>\n<td>冲突</td>\n<td>冲突</td>\n<td>兼容</td>\n<td>兼容</td>\n</tr>\n<tr>\n<td>IS</td>\n<td>冲突</td>\n<td>兼容</td>\n<td>兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"Record-Locks\"><a href=\"#Record-Locks\" class=\"headerlink\" title=\"Record Locks\"></a>Record Locks</h3><p><br></p>\n<h3 id=\"Gap-Locks\"><a href=\"#Gap-Locks\" class=\"headerlink\" title=\"Gap Locks\"></a>Gap Locks</h3><p><br></p>\n<h3 id=\"Next-Key-Locks\"><a href=\"#Next-Key-Locks\" class=\"headerlink\" title=\"Next-Key Locks\"></a>Next-Key Locks</h3><p><br></p>\n<h3 id=\"AUTO-INC-Locks\"><a href=\"#AUTO-INC-Locks\" class=\"headerlink\" title=\"AUTO-INC Locks\"></a>AUTO-INC Locks</h3><h3 id=\"加锁语句\"><a href=\"#加锁语句\" class=\"headerlink\" title=\"加锁语句\"></a>加锁语句</h3><ul>\n<li><code>select ... from</code>: InnoDB引擎采用多版本并发控制（MVCC）的方式实现了非阻塞读，所以对于普通的select读语句，InnoDB并不会加锁<a href=\"#备注1\">【备注1】</a></li>\n<li><code>select ... from lock in share mode</code>: </li>\n<li><code>select ... from for update</code>: </li>\n<li><code>update ... where ...</code>: </li>\n</ul>\n<hr>\n<p><br></p>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p><span id=\"备注1\"><strong>【备注1】</strong>: xxxx sffs</span></p>\n<hr>\n<p><br></p>\n<p><strong>参考</strong>\n<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html\" target=\"_blank\" rel=\"noopener\">MySQL innodb-locking</a>\n《高性能MySQL》\n《MySQL技术内幕——InnoDB存储引擎》</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h2><h3 id=\"共享锁（shared-S-lock）和-排它锁（exclusive-X-lock）\"><a href=\"#共享锁（shared-S-lock）和-排它锁（exclusive-X-lock）\" class=\"headerlink\" title=\"共享锁（shared (S) lock）和 排它锁（exclusive (X) lock）\"></a>共享锁（shared (S) lock）和 排它锁（exclusive (X) lock）</h3><p>InnoDB实现了两种类型的行级锁：</p>\n<ul>\n<li><code>共享锁（shared (S) lock）</code>：允许持有锁的事务读取一行</li>\n<li><code>排它锁（exclusive (X) lock）</code>：允许持有锁的事务更新或删除行</li>\n</ul>\n<p>用一张经典的矩阵表格继续说明共享锁和排他锁的互斥关系：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>S</th>\n<th>X</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>S</td>\n<td>兼容</td>\n<td>冲突</td>\n</tr>\n<tr>\n<td>X</td>\n<td>冲突</td>\n<td>冲突</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>如果一个事务对某一行数据加了S锁，另一个事务还可以对相应的行加S锁，但是不能对相应的行加X锁。</li>\n<li>如果一个事务对某一行数据加了X锁，另一个事务既不能对相应的行加S锁也不能加X锁。</li>\n</ul>\n<p><br></p>\n<h3 id=\"意向锁\"><a href=\"#意向锁\" class=\"headerlink\" title=\"意向锁\"></a>意向锁</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>X</th>\n<th>IX</th>\n<th>S</th>\n<th>IS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>X</td>\n<td>冲突</td>\n<td>冲突</td>\n<td>冲突</td>\n<td>冲突</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>冲突</td>\n<td>兼容</td>\n<td>冲突</td>\n<td>兼容</td>\n</tr>\n<tr>\n<td>S</td>\n<td>冲突</td>\n<td>冲突</td>\n<td>兼容</td>\n<td>兼容</td>\n</tr>\n<tr>\n<td>IS</td>\n<td>冲突</td>\n<td>兼容</td>\n<td>兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"Record-Locks\"><a href=\"#Record-Locks\" class=\"headerlink\" title=\"Record Locks\"></a>Record Locks</h3><p><br></p>\n<h3 id=\"Gap-Locks\"><a href=\"#Gap-Locks\" class=\"headerlink\" title=\"Gap Locks\"></a>Gap Locks</h3><p><br></p>\n<h3 id=\"Next-Key-Locks\"><a href=\"#Next-Key-Locks\" class=\"headerlink\" title=\"Next-Key Locks\"></a>Next-Key Locks</h3><p><br></p>\n<h3 id=\"AUTO-INC-Locks\"><a href=\"#AUTO-INC-Locks\" class=\"headerlink\" title=\"AUTO-INC Locks\"></a>AUTO-INC Locks</h3><h3 id=\"加锁语句\"><a href=\"#加锁语句\" class=\"headerlink\" title=\"加锁语句\"></a>加锁语句</h3><ul>\n<li><code>select ... from</code>: InnoDB引擎采用多版本并发控制（MVCC）的方式实现了非阻塞读，所以对于普通的select读语句，InnoDB并不会加锁<a href=\"#备注1\">【备注1】</a></li>\n<li><code>select ... from lock in share mode</code>: </li>\n<li><code>select ... from for update</code>: </li>\n<li><code>update ... where ...</code>: </li>\n</ul>\n<hr>\n<p><br></p>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p><span id=\"备注1\"><strong>【备注1】</strong>: xxxx sffs</span></p>\n<hr>\n<p><br></p>\n<p><strong>参考</strong>\n<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html\" target=\"_blank\" rel=\"noopener\">MySQL innodb-locking</a>\n《高性能MySQL》\n《MySQL技术内幕——InnoDB存储引擎》</p>"},{"title":"Oracle转EDB总结","date":"2019-08-15T15:26:31.000Z","_content":"\n\n## 数据类型\n### character datatypes\n\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n<br/>\n### number datatypes\n\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n<br/>\n### long and raw datatypes\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n<br/>\n### datetime datatypes\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n<br/>\n### large object datatypes\n\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n<br/>\n### rowid datatypes\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n<br/>\n### ANSI supported datatypes\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n<br/>\n### any types\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n<br/>\n### XML types\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n<br/>\n### spatial types\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n<br/>\n### media types\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n### Other datatypes\n\n\n<br/>\n## 方法\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>   \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n\n\n<br/>\n## DDL\n\n### FUNCTION\n\n<br/>\n### MATERIALIZED VIEW\n#### CREATE\n- 物理属性、字段属性等无关信息去掉\n\n#### ALTER\n- 物理属性、字段属性等无关信息去掉\n\n#### DROP\n- 物理属性、字段属性等无关信息去掉\n\n<br/>\n### TABLE\nCREATE\n- 物理属性、字段属性等无关信息去掉\n\nALTER\n- 物理属性、字段属性等无关信息去掉\n\nDROP\n- 物理属性、字段属性等无关信息去掉\n\n### TYPE\n\n### TYPE BODY\n\n### PROCEDURE\n\n### TRIGGER\n\n### VIEW\n#### CREATE\n- 物理属性、字段属性等无关信息去掉\n\n#### ALTER\n#### DROP\n\n<br/>\n## DML\n### SELECT\n\n### INSERT\n\n### DELETE\n\n### UPDATE\n\n\n\n---\n参考\n- http://www.sqlines.com/oracle-to-postgresql\n- [Oracle官网文档](https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html)\n- [EDB官网文档](https://www.enterprisedb.com/edb-docs/d/edb-postgres-advanced-server/user-guides/database-compatibility-for-oracle-developers-guide/11/toc.html)","source":"_posts/Oracle转EDB总结.md","raw":"---\ntitle: Oracle转EDB总结\ndate: 2019-08-15 23:26:31\ncategories: \n    - SQL转换\ntags:\n    - SQL转换\n---\n\n\n## 数据类型\n### character datatypes\n\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n<br/>\n### number datatypes\n\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n<br/>\n### long and raw datatypes\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n<br/>\n### datetime datatypes\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n<br/>\n### large object datatypes\n\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n<br/>\n### rowid datatypes\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n<br/>\n### ANSI supported datatypes\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n<br/>\n### any types\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n<br/>\n### XML types\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n<br/>\n### spatial types\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n<br/>\n### media types\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n### Other datatypes\n\n\n<br/>\n## 方法\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>   \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n{% endraw %}\n\n\n\n\n<br/>\n## DDL\n\n### FUNCTION\n\n<br/>\n### MATERIALIZED VIEW\n#### CREATE\n- 物理属性、字段属性等无关信息去掉\n\n#### ALTER\n- 物理属性、字段属性等无关信息去掉\n\n#### DROP\n- 物理属性、字段属性等无关信息去掉\n\n<br/>\n### TABLE\nCREATE\n- 物理属性、字段属性等无关信息去掉\n\nALTER\n- 物理属性、字段属性等无关信息去掉\n\nDROP\n- 物理属性、字段属性等无关信息去掉\n\n### TYPE\n\n### TYPE BODY\n\n### PROCEDURE\n\n### TRIGGER\n\n### VIEW\n#### CREATE\n- 物理属性、字段属性等无关信息去掉\n\n#### ALTER\n#### DROP\n\n<br/>\n## DML\n### SELECT\n\n### INSERT\n\n### DELETE\n\n### UPDATE\n\n\n\n---\n参考\n- http://www.sqlines.com/oracle-to-postgresql\n- [Oracle官网文档](https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html)\n- [EDB官网文档](https://www.enterprisedb.com/edb-docs/d/edb-postgres-advanced-server/user-guides/database-compatibility-for-oracle-developers-guide/11/toc.html)","slug":"Oracle转EDB总结","published":1,"updated":"2019-11-02T07:12:18.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5s0030t6s6eq3q9x6d","content":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"character-datatypes\"><a href=\"#character-datatypes\" class=\"headerlink\" title=\"character datatypes\"></a>character datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"number-datatypes\"><a href=\"#number-datatypes\" class=\"headerlink\" title=\"number datatypes\"></a>number datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"long-and-raw-datatypes\"><a href=\"#long-and-raw-datatypes\" class=\"headerlink\" title=\"long and raw datatypes\"></a>long and raw datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"datetime-datatypes\"><a href=\"#datetime-datatypes\" class=\"headerlink\" title=\"datetime datatypes\"></a>datetime datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"large-object-datatypes\"><a href=\"#large-object-datatypes\" class=\"headerlink\" title=\"large object datatypes\"></a>large object datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"rowid-datatypes\"><a href=\"#rowid-datatypes\" class=\"headerlink\" title=\"rowid datatypes\"></a>rowid datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"ANSI-supported-datatypes\"><a href=\"#ANSI-supported-datatypes\" class=\"headerlink\" title=\"ANSI supported datatypes\"></a>ANSI supported datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"any-types\"><a href=\"#any-types\" class=\"headerlink\" title=\"any types\"></a>any types</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"XML-types\"><a href=\"#XML-types\" class=\"headerlink\" title=\"XML types\"></a>XML types</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"spatial-types\"><a href=\"#spatial-types\" class=\"headerlink\" title=\"spatial types\"></a>spatial types</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"media-types\"><a href=\"#media-types\" class=\"headerlink\" title=\"media types\"></a>media types</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3 id=\"Other-datatypes\"><a href=\"#Other-datatypes\" class=\"headerlink\" title=\"Other datatypes\"></a>Other datatypes</h3><p><br></p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>   \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h2 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h2><h3 id=\"FUNCTION\"><a href=\"#FUNCTION\" class=\"headerlink\" title=\"FUNCTION\"></a>FUNCTION</h3><p><br></p>\n<h3 id=\"MATERIALIZED-VIEW\"><a href=\"#MATERIALIZED-VIEW\" class=\"headerlink\" title=\"MATERIALIZED VIEW\"></a>MATERIALIZED VIEW</h3><h4 id=\"CREATE\"><a href=\"#CREATE\" class=\"headerlink\" title=\"CREATE\"></a>CREATE</h4><ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<h4 id=\"ALTER\"><a href=\"#ALTER\" class=\"headerlink\" title=\"ALTER\"></a>ALTER</h4><ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<h4 id=\"DROP\"><a href=\"#DROP\" class=\"headerlink\" title=\"DROP\"></a>DROP</h4><ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<p><br></p>\n<h3 id=\"TABLE\"><a href=\"#TABLE\" class=\"headerlink\" title=\"TABLE\"></a>TABLE</h3><p>CREATE</p>\n<ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<p>ALTER</p>\n<ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<p>DROP</p>\n<ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<h3 id=\"TYPE\"><a href=\"#TYPE\" class=\"headerlink\" title=\"TYPE\"></a>TYPE</h3><h3 id=\"TYPE-BODY\"><a href=\"#TYPE-BODY\" class=\"headerlink\" title=\"TYPE BODY\"></a>TYPE BODY</h3><h3 id=\"PROCEDURE\"><a href=\"#PROCEDURE\" class=\"headerlink\" title=\"PROCEDURE\"></a>PROCEDURE</h3><h3 id=\"TRIGGER\"><a href=\"#TRIGGER\" class=\"headerlink\" title=\"TRIGGER\"></a>TRIGGER</h3><h3 id=\"VIEW\"><a href=\"#VIEW\" class=\"headerlink\" title=\"VIEW\"></a>VIEW</h3><h4 id=\"CREATE-1\"><a href=\"#CREATE-1\" class=\"headerlink\" title=\"CREATE\"></a>CREATE</h4><ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<h4 id=\"ALTER-1\"><a href=\"#ALTER-1\" class=\"headerlink\" title=\"ALTER\"></a>ALTER</h4><h4 id=\"DROP-1\"><a href=\"#DROP-1\" class=\"headerlink\" title=\"DROP\"></a>DROP</h4><p><br></p>\n<h2 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h2><h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><h3 id=\"INSERT\"><a href=\"#INSERT\" class=\"headerlink\" title=\"INSERT\"></a>INSERT</h3><h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><h3 id=\"UPDATE\"><a href=\"#UPDATE\" class=\"headerlink\" title=\"UPDATE\"></a>UPDATE</h3><hr>\n<p>参考</p>\n<ul>\n<li><a href=\"http://www.sqlines.com/oracle-to-postgresql\" target=\"_blank\" rel=\"noopener\">http://www.sqlines.com/oracle-to-postgresql</a></li>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html\" target=\"_blank\" rel=\"noopener\">Oracle官网文档</a></li>\n<li><a href=\"https://www.enterprisedb.com/edb-docs/d/edb-postgres-advanced-server/user-guides/database-compatibility-for-oracle-developers-guide/11/toc.html\" target=\"_blank\" rel=\"noopener\">EDB官网文档</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"character-datatypes\"><a href=\"#character-datatypes\" class=\"headerlink\" title=\"character datatypes\"></a>character datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"number-datatypes\"><a href=\"#number-datatypes\" class=\"headerlink\" title=\"number datatypes\"></a>number datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"long-and-raw-datatypes\"><a href=\"#long-and-raw-datatypes\" class=\"headerlink\" title=\"long and raw datatypes\"></a>long and raw datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"datetime-datatypes\"><a href=\"#datetime-datatypes\" class=\"headerlink\" title=\"datetime datatypes\"></a>datetime datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"large-object-datatypes\"><a href=\"#large-object-datatypes\" class=\"headerlink\" title=\"large object datatypes\"></a>large object datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"rowid-datatypes\"><a href=\"#rowid-datatypes\" class=\"headerlink\" title=\"rowid datatypes\"></a>rowid datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"ANSI-supported-datatypes\"><a href=\"#ANSI-supported-datatypes\" class=\"headerlink\" title=\"ANSI supported datatypes\"></a>ANSI supported datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"any-types\"><a href=\"#any-types\" class=\"headerlink\" title=\"any types\"></a>any types</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"XML-types\"><a href=\"#XML-types\" class=\"headerlink\" title=\"XML types\"></a>XML types</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"spatial-types\"><a href=\"#spatial-types\" class=\"headerlink\" title=\"spatial types\"></a>spatial types</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h3 id=\"media-types\"><a href=\"#media-types\" class=\"headerlink\" title=\"media types\"></a>media types</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3 id=\"Other-datatypes\"><a href=\"#Other-datatypes\" class=\"headerlink\" title=\"Other datatypes\"></a>Other datatypes</h3><p><br></p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>   \n    <tbody>\n<!--CHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">CHAR [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--VARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">VARCHAR2 [(size [BYTE | CHAR]) ]</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n            <td style=\"text-align:center\">VARCHAR2</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">VARCHAR2(size [BYTE | CHAR])</td>\n            <td style=\"text-align:center\">VARCHAR2(size)</td>\n        </tr>\n<!--NCHAR -->\n        <tr>\n            <td style=\"text-align:center\" rowspan=\"2\">NCHAR [ (size) ]</td>\n            <td style=\"text-align:center\">NCHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">NCHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n<!--NVARCHAR2 -->\n        <tr>\n            <td style=\"text-align:center\">NVARCHAR2 (size)</td>\n            <td style=\"text-align:center\">NVARCHAR2(size)</td>\n            <td style=\"text-align:center\">VARCHAR(size)</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><br></p>\n<h2 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h2><h3 id=\"FUNCTION\"><a href=\"#FUNCTION\" class=\"headerlink\" title=\"FUNCTION\"></a>FUNCTION</h3><p><br></p>\n<h3 id=\"MATERIALIZED-VIEW\"><a href=\"#MATERIALIZED-VIEW\" class=\"headerlink\" title=\"MATERIALIZED VIEW\"></a>MATERIALIZED VIEW</h3><h4 id=\"CREATE\"><a href=\"#CREATE\" class=\"headerlink\" title=\"CREATE\"></a>CREATE</h4><ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<h4 id=\"ALTER\"><a href=\"#ALTER\" class=\"headerlink\" title=\"ALTER\"></a>ALTER</h4><ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<h4 id=\"DROP\"><a href=\"#DROP\" class=\"headerlink\" title=\"DROP\"></a>DROP</h4><ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<p><br></p>\n<h3 id=\"TABLE\"><a href=\"#TABLE\" class=\"headerlink\" title=\"TABLE\"></a>TABLE</h3><p>CREATE</p>\n<ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<p>ALTER</p>\n<ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<p>DROP</p>\n<ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<h3 id=\"TYPE\"><a href=\"#TYPE\" class=\"headerlink\" title=\"TYPE\"></a>TYPE</h3><h3 id=\"TYPE-BODY\"><a href=\"#TYPE-BODY\" class=\"headerlink\" title=\"TYPE BODY\"></a>TYPE BODY</h3><h3 id=\"PROCEDURE\"><a href=\"#PROCEDURE\" class=\"headerlink\" title=\"PROCEDURE\"></a>PROCEDURE</h3><h3 id=\"TRIGGER\"><a href=\"#TRIGGER\" class=\"headerlink\" title=\"TRIGGER\"></a>TRIGGER</h3><h3 id=\"VIEW\"><a href=\"#VIEW\" class=\"headerlink\" title=\"VIEW\"></a>VIEW</h3><h4 id=\"CREATE-1\"><a href=\"#CREATE-1\" class=\"headerlink\" title=\"CREATE\"></a>CREATE</h4><ul>\n<li>物理属性、字段属性等无关信息去掉</li>\n</ul>\n<h4 id=\"ALTER-1\"><a href=\"#ALTER-1\" class=\"headerlink\" title=\"ALTER\"></a>ALTER</h4><h4 id=\"DROP-1\"><a href=\"#DROP-1\" class=\"headerlink\" title=\"DROP\"></a>DROP</h4><p><br></p>\n<h2 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h2><h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><h3 id=\"INSERT\"><a href=\"#INSERT\" class=\"headerlink\" title=\"INSERT\"></a>INSERT</h3><h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><h3 id=\"UPDATE\"><a href=\"#UPDATE\" class=\"headerlink\" title=\"UPDATE\"></a>UPDATE</h3><hr>\n<p>参考</p>\n<ul>\n<li><a href=\"http://www.sqlines.com/oracle-to-postgresql\" target=\"_blank\" rel=\"noopener\">http://www.sqlines.com/oracle-to-postgresql</a></li>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html\" target=\"_blank\" rel=\"noopener\">Oracle官网文档</a></li>\n<li><a href=\"https://www.enterprisedb.com/edb-docs/d/edb-postgres-advanced-server/user-guides/database-compatibility-for-oracle-developers-guide/11/toc.html\" target=\"_blank\" rel=\"noopener\">EDB官网文档</a></li>\n</ul>\n"},{"title":"Markdown教程","date":"2012-08-31T17:01:01.000Z","_content":"\n<br/>\n### 标题\n\n\n<br/>\n### 表格\n\n<!-- more -->\n\n\n<br/>\n### 换行 `<br/>`\n\n在md文件中输入`<br/>`换行\n\n\n\n<br/>\n### 代码高亮显示语言\n\n\n| 名称\t|关键字\t|调用的js\t|说明   |\n| :--------   | :-----  | :----  | :---- |\n| AppleScript |\tapplescript\t| shBrushAppleScript.js\t| - |\n| ActionScript 3.0\t| actionscript3 , as3\t| shBrushAS3.js | - |\n| Shell |\tbash , shell\t| shBrushBash.js\t| - |\n| ColdFusion |\tcoldfusion , cf\t| shBrushColdFusion.js\t| - |\n| C\t| cpp , c\t| shBrushCpp.js\t| - |\n| C#\t| c# , c-sharp , csharp\t| shBrushCSharp.js\t| - |\n| CSS\t|css | shBrushCss.js\t| - |\n| Delphi\t| delphi , pascal , pas\t| shBrushDelphi.js\t| - |\n| diff&patch |\tdiff patch | shBrushDiff.js\t| 用代码版本库时,遇到代码冲突,其语法就是这个. |\n| Erlang |\terl , erlang\t| shBrushErlang.js\t| - |\n| Groovy |\tgroovy\t| shBrushGroovy.js\t| - |\n| Java |\tjava\t| shBrushJava.js\t| - |\n| JavaFX |\tjfx , javafx\t| shBrushJavaFX.js\t| - |\n| JavaScript |\tjs , jscript , javascript\t| shBrushJScript.js\t| - |\n| Perl |\tperl , pl , Perl\t| shBrushPerl.js\t| - |\n| PHP |\tphp\t| shBrushPhp.js\t\n| text |\ttext , plain\t| shBrushPlain.js\t| 就是普通文本.|\n| Python |\tpy , python\t| shBrushPython.js\t|\n| Ruby |\truby , rails , ror , rb |\tshBrushRuby.js\t| - |\n| SASS&SCSS\tsass , scss\t| shBrushSass.js | - |\n| Scala |\tscala\t| shBrushScala.js\t| - |\n| SQL |\tsql\t| shBrushSql.js\t|\n| Visual Basic\t| vb , vbnet\t| shBrushVb.js\t| - |\n| XML |\txml , xhtml , xslt , html\t| shBrushXml.js\t| - |\n| Objective C\t| objc , obj-c\t| shBrushObjectiveC.js\t| - |\n| F# |\tf# f-sharp , fsharp\t| shBrushFSharp.js\t| - |\n| - | xpp , dynamics-xpp\t| shBrushDynamics.js\t| - |\n| R\t| r , s , splus\t| shBrushR.js\t| - |\n| matlab |\tmatlab\t| shBrushMatlab.js | - |\t\n| swift |\tswift\t| shBrushSwift.js\t | - |\n| GO |\tgo , golang\t| shBrushGo.js\t | - |\n\n\n\n\n<br/>\n\n----\n参考\n\n[Github-Markdown](https://guides.github.com/features/mastering-markdown/)","source":"_posts/Markdown教程.md","raw":"---\ntitle: Markdown教程\ndate: 2012-09-01 01:01:01\ncategories: \n    - Markdown\ntags: \n    - Markdown\n---\n\n<br/>\n### 标题\n\n\n<br/>\n### 表格\n\n<!-- more -->\n\n\n<br/>\n### 换行 `<br/>`\n\n在md文件中输入`<br/>`换行\n\n\n\n<br/>\n### 代码高亮显示语言\n\n\n| 名称\t|关键字\t|调用的js\t|说明   |\n| :--------   | :-----  | :----  | :---- |\n| AppleScript |\tapplescript\t| shBrushAppleScript.js\t| - |\n| ActionScript 3.0\t| actionscript3 , as3\t| shBrushAS3.js | - |\n| Shell |\tbash , shell\t| shBrushBash.js\t| - |\n| ColdFusion |\tcoldfusion , cf\t| shBrushColdFusion.js\t| - |\n| C\t| cpp , c\t| shBrushCpp.js\t| - |\n| C#\t| c# , c-sharp , csharp\t| shBrushCSharp.js\t| - |\n| CSS\t|css | shBrushCss.js\t| - |\n| Delphi\t| delphi , pascal , pas\t| shBrushDelphi.js\t| - |\n| diff&patch |\tdiff patch | shBrushDiff.js\t| 用代码版本库时,遇到代码冲突,其语法就是这个. |\n| Erlang |\terl , erlang\t| shBrushErlang.js\t| - |\n| Groovy |\tgroovy\t| shBrushGroovy.js\t| - |\n| Java |\tjava\t| shBrushJava.js\t| - |\n| JavaFX |\tjfx , javafx\t| shBrushJavaFX.js\t| - |\n| JavaScript |\tjs , jscript , javascript\t| shBrushJScript.js\t| - |\n| Perl |\tperl , pl , Perl\t| shBrushPerl.js\t| - |\n| PHP |\tphp\t| shBrushPhp.js\t\n| text |\ttext , plain\t| shBrushPlain.js\t| 就是普通文本.|\n| Python |\tpy , python\t| shBrushPython.js\t|\n| Ruby |\truby , rails , ror , rb |\tshBrushRuby.js\t| - |\n| SASS&SCSS\tsass , scss\t| shBrushSass.js | - |\n| Scala |\tscala\t| shBrushScala.js\t| - |\n| SQL |\tsql\t| shBrushSql.js\t|\n| Visual Basic\t| vb , vbnet\t| shBrushVb.js\t| - |\n| XML |\txml , xhtml , xslt , html\t| shBrushXml.js\t| - |\n| Objective C\t| objc , obj-c\t| shBrushObjectiveC.js\t| - |\n| F# |\tf# f-sharp , fsharp\t| shBrushFSharp.js\t| - |\n| - | xpp , dynamics-xpp\t| shBrushDynamics.js\t| - |\n| R\t| r , s , splus\t| shBrushR.js\t| - |\n| matlab |\tmatlab\t| shBrushMatlab.js | - |\t\n| swift |\tswift\t| shBrushSwift.js\t | - |\n| GO |\tgo , golang\t| shBrushGo.js\t | - |\n\n\n\n\n<br/>\n\n----\n参考\n\n[Github-Markdown](https://guides.github.com/features/mastering-markdown/)","slug":"Markdown教程","published":1,"updated":"2019-11-02T07:12:18.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5t0034t6s69ci2qgr0","content":"<p><br></p>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p><br></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><a id=\"more\"></a>\n<p><br></p>\n<h3 id=\"换行-lt-br-gt\"><a href=\"#换行-lt-br-gt\" class=\"headerlink\" title=\"换行 &lt;br/&gt;\"></a>换行 <code>&lt;br/&gt;</code></h3><p>在md文件中输入<code>&lt;br/&gt;</code>换行</p>\n<p><br></p>\n<h3 id=\"代码高亮显示语言\"><a href=\"#代码高亮显示语言\" class=\"headerlink\" title=\"代码高亮显示语言\"></a>代码高亮显示语言</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">关键字</th>\n<th style=\"text-align:left\">调用的js</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AppleScript</td>\n<td style=\"text-align:left\">applescript</td>\n<td style=\"text-align:left\">shBrushAppleScript.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ActionScript 3.0</td>\n<td style=\"text-align:left\">actionscript3 , as3</td>\n<td style=\"text-align:left\">shBrushAS3.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Shell</td>\n<td style=\"text-align:left\">bash , shell</td>\n<td style=\"text-align:left\">shBrushBash.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ColdFusion</td>\n<td style=\"text-align:left\">coldfusion , cf</td>\n<td style=\"text-align:left\">shBrushColdFusion.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">C</td>\n<td style=\"text-align:left\">cpp , c</td>\n<td style=\"text-align:left\">shBrushCpp.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">C#</td>\n<td style=\"text-align:left\">c# , c-sharp , csharp</td>\n<td style=\"text-align:left\">shBrushCSharp.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CSS</td>\n<td style=\"text-align:left\">css</td>\n<td style=\"text-align:left\">shBrushCss.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Delphi</td>\n<td style=\"text-align:left\">delphi , pascal , pas</td>\n<td style=\"text-align:left\">shBrushDelphi.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">diff&amp;patch</td>\n<td style=\"text-align:left\">diff patch</td>\n<td style=\"text-align:left\">shBrushDiff.js</td>\n<td style=\"text-align:left\">用代码版本库时,遇到代码冲突,其语法就是这个.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Erlang</td>\n<td style=\"text-align:left\">erl , erlang</td>\n<td style=\"text-align:left\">shBrushErlang.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Groovy</td>\n<td style=\"text-align:left\">groovy</td>\n<td style=\"text-align:left\">shBrushGroovy.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Java</td>\n<td style=\"text-align:left\">java</td>\n<td style=\"text-align:left\">shBrushJava.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaFX</td>\n<td style=\"text-align:left\">jfx , javafx</td>\n<td style=\"text-align:left\">shBrushJavaFX.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaScript</td>\n<td style=\"text-align:left\">js , jscript , javascript</td>\n<td style=\"text-align:left\">shBrushJScript.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Perl</td>\n<td style=\"text-align:left\">perl , pl , Perl</td>\n<td style=\"text-align:left\">shBrushPerl.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PHP</td>\n<td style=\"text-align:left\">php</td>\n<td style=\"text-align:left\">shBrushPhp.js    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text</td>\n<td style=\"text-align:left\">text , plain</td>\n<td style=\"text-align:left\">shBrushPlain.js</td>\n<td style=\"text-align:left\">就是普通文本.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Python</td>\n<td style=\"text-align:left\">py , python</td>\n<td style=\"text-align:left\">shBrushPython.js</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ruby</td>\n<td style=\"text-align:left\">ruby , rails , ror , rb</td>\n<td style=\"text-align:left\">shBrushRuby.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SASS&amp;SCSS    sass , scss</td>\n<td style=\"text-align:left\">shBrushSass.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Scala</td>\n<td style=\"text-align:left\">scala</td>\n<td style=\"text-align:left\">shBrushScala.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SQL</td>\n<td style=\"text-align:left\">sql</td>\n<td style=\"text-align:left\">shBrushSql.js</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Visual Basic</td>\n<td style=\"text-align:left\">vb , vbnet</td>\n<td style=\"text-align:left\">shBrushVb.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XML</td>\n<td style=\"text-align:left\">xml , xhtml , xslt , html</td>\n<td style=\"text-align:left\">shBrushXml.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Objective C</td>\n<td style=\"text-align:left\">objc , obj-c</td>\n<td style=\"text-align:left\">shBrushObjectiveC.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F#</td>\n<td style=\"text-align:left\">f# f-sharp , fsharp</td>\n<td style=\"text-align:left\">shBrushFSharp.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">xpp , dynamics-xpp</td>\n<td style=\"text-align:left\">shBrushDynamics.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">R</td>\n<td style=\"text-align:left\">r , s , splus</td>\n<td style=\"text-align:left\">shBrushR.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">matlab</td>\n<td style=\"text-align:left\">matlab</td>\n<td style=\"text-align:left\">shBrushMatlab.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">swift</td>\n<td style=\"text-align:left\">swift</td>\n<td style=\"text-align:left\">shBrushSwift.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GO</td>\n<td style=\"text-align:left\">go , golang</td>\n<td style=\"text-align:left\">shBrushGo.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://guides.github.com/features/mastering-markdown/\" target=\"_blank\" rel=\"noopener\">Github-Markdown</a></p>\n","site":{"data":{}},"excerpt":"<p><br></p>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p><br></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3>","more":"<p><br></p>\n<h3 id=\"换行-lt-br-gt\"><a href=\"#换行-lt-br-gt\" class=\"headerlink\" title=\"换行 &lt;br/&gt;\"></a>换行 <code>&lt;br/&gt;</code></h3><p>在md文件中输入<code>&lt;br/&gt;</code>换行</p>\n<p><br></p>\n<h3 id=\"代码高亮显示语言\"><a href=\"#代码高亮显示语言\" class=\"headerlink\" title=\"代码高亮显示语言\"></a>代码高亮显示语言</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">关键字</th>\n<th style=\"text-align:left\">调用的js</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AppleScript</td>\n<td style=\"text-align:left\">applescript</td>\n<td style=\"text-align:left\">shBrushAppleScript.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ActionScript 3.0</td>\n<td style=\"text-align:left\">actionscript3 , as3</td>\n<td style=\"text-align:left\">shBrushAS3.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Shell</td>\n<td style=\"text-align:left\">bash , shell</td>\n<td style=\"text-align:left\">shBrushBash.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ColdFusion</td>\n<td style=\"text-align:left\">coldfusion , cf</td>\n<td style=\"text-align:left\">shBrushColdFusion.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">C</td>\n<td style=\"text-align:left\">cpp , c</td>\n<td style=\"text-align:left\">shBrushCpp.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">C#</td>\n<td style=\"text-align:left\">c# , c-sharp , csharp</td>\n<td style=\"text-align:left\">shBrushCSharp.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CSS</td>\n<td style=\"text-align:left\">css</td>\n<td style=\"text-align:left\">shBrushCss.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Delphi</td>\n<td style=\"text-align:left\">delphi , pascal , pas</td>\n<td style=\"text-align:left\">shBrushDelphi.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">diff&amp;patch</td>\n<td style=\"text-align:left\">diff patch</td>\n<td style=\"text-align:left\">shBrushDiff.js</td>\n<td style=\"text-align:left\">用代码版本库时,遇到代码冲突,其语法就是这个.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Erlang</td>\n<td style=\"text-align:left\">erl , erlang</td>\n<td style=\"text-align:left\">shBrushErlang.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Groovy</td>\n<td style=\"text-align:left\">groovy</td>\n<td style=\"text-align:left\">shBrushGroovy.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Java</td>\n<td style=\"text-align:left\">java</td>\n<td style=\"text-align:left\">shBrushJava.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaFX</td>\n<td style=\"text-align:left\">jfx , javafx</td>\n<td style=\"text-align:left\">shBrushJavaFX.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaScript</td>\n<td style=\"text-align:left\">js , jscript , javascript</td>\n<td style=\"text-align:left\">shBrushJScript.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Perl</td>\n<td style=\"text-align:left\">perl , pl , Perl</td>\n<td style=\"text-align:left\">shBrushPerl.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PHP</td>\n<td style=\"text-align:left\">php</td>\n<td style=\"text-align:left\">shBrushPhp.js    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text</td>\n<td style=\"text-align:left\">text , plain</td>\n<td style=\"text-align:left\">shBrushPlain.js</td>\n<td style=\"text-align:left\">就是普通文本.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Python</td>\n<td style=\"text-align:left\">py , python</td>\n<td style=\"text-align:left\">shBrushPython.js</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ruby</td>\n<td style=\"text-align:left\">ruby , rails , ror , rb</td>\n<td style=\"text-align:left\">shBrushRuby.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SASS&amp;SCSS    sass , scss</td>\n<td style=\"text-align:left\">shBrushSass.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Scala</td>\n<td style=\"text-align:left\">scala</td>\n<td style=\"text-align:left\">shBrushScala.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SQL</td>\n<td style=\"text-align:left\">sql</td>\n<td style=\"text-align:left\">shBrushSql.js</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Visual Basic</td>\n<td style=\"text-align:left\">vb , vbnet</td>\n<td style=\"text-align:left\">shBrushVb.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XML</td>\n<td style=\"text-align:left\">xml , xhtml , xslt , html</td>\n<td style=\"text-align:left\">shBrushXml.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Objective C</td>\n<td style=\"text-align:left\">objc , obj-c</td>\n<td style=\"text-align:left\">shBrushObjectiveC.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F#</td>\n<td style=\"text-align:left\">f# f-sharp , fsharp</td>\n<td style=\"text-align:left\">shBrushFSharp.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">xpp , dynamics-xpp</td>\n<td style=\"text-align:left\">shBrushDynamics.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">R</td>\n<td style=\"text-align:left\">r , s , splus</td>\n<td style=\"text-align:left\">shBrushR.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">matlab</td>\n<td style=\"text-align:left\">matlab</td>\n<td style=\"text-align:left\">shBrushMatlab.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">swift</td>\n<td style=\"text-align:left\">swift</td>\n<td style=\"text-align:left\">shBrushSwift.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GO</td>\n<td style=\"text-align:left\">go , golang</td>\n<td style=\"text-align:left\">shBrushGo.js</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://guides.github.com/features/mastering-markdown/\" target=\"_blank\" rel=\"noopener\">Github-Markdown</a></p>"},{"title":"Oracle转MySQL总结","date":"2019-08-15T15:26:56.000Z","_content":"\n\n## 数据类型\n\n### character datatypes\n\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--   -->    \n        <tr>\n            <td style=\"text-align:center\" rowspan=3>CHAR [ (size [ BYTE | CHAR ]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n        <tr>\n            <td style=\"text-align:center\">CHAR[256, )</td>\n            <td style=\"text-align:center\">CHAR[256, )</td>\n        </tr>\n<!--   -->  \n    </tbody>\n</table>\n{% endraw %}\n\n\n---\n参考\n- http://www.sqlines.com/oracle-to-postgresql\n- [Oracle官网文档](https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html)\n- [MySQL官网文档](https://dev.mysql.com/doc/refman/8.0/en/)","source":"_posts/Oracle转MySQL总结.md","raw":"---\ntitle: Oracle转MySQL总结\ndate: 2019-08-15 23:26:56\ncategories: \n    - SQL转换\ntags:\n    - SQL转换\n---\n\n\n## 数据类型\n\n### character datatypes\n\n{% raw %}\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--   -->    \n        <tr>\n            <td style=\"text-align:center\" rowspan=3>CHAR [ (size [ BYTE | CHAR ]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n        <tr>\n            <td style=\"text-align:center\">CHAR[256, )</td>\n            <td style=\"text-align:center\">CHAR[256, )</td>\n        </tr>\n<!--   -->  \n    </tbody>\n</table>\n{% endraw %}\n\n\n---\n参考\n- http://www.sqlines.com/oracle-to-postgresql\n- [Oracle官网文档](https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html)\n- [MySQL官网文档](https://dev.mysql.com/doc/refman/8.0/en/)","slug":"Oracle转MySQL总结","published":1,"updated":"2019-11-02T07:12:18.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5u0038t6s65snebbmt","content":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"character-datatypes\"><a href=\"#character-datatypes\" class=\"headerlink\" title=\"character datatypes\"></a>character datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--   -->    \n        <tr>\n            <td style=\"text-align:center\" rowspan=\"3\">CHAR [ (size [ BYTE | CHAR ]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n        <tr>\n            <td style=\"text-align:center\">CHAR[256, )</td>\n            <td style=\"text-align:center\">CHAR[256, )</td>\n        </tr>\n<!--   -->  \n    </tbody>\n</table>\n\n<hr>\n<p>参考</p>\n<ul>\n<li><a href=\"http://www.sqlines.com/oracle-to-postgresql\" target=\"_blank\" rel=\"noopener\">http://www.sqlines.com/oracle-to-postgresql</a></li>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html\" target=\"_blank\" rel=\"noopener\">Oracle官网文档</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/\" target=\"_blank\" rel=\"noopener\">MySQL官网文档</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"character-datatypes\"><a href=\"#character-datatypes\" class=\"headerlink\" title=\"character datatypes\"></a>character datatypes</h3>\n<table>\n    <thead>\n        <tr>\n            <th style=\"text-align:center\" colspan=\"2\">Oracle数据类型</th>\n            <th style=\"text-align:center\">EDB数据类型</th>\n        </tr>\n    </thead>    \n    <tbody>\n<!--   -->    \n        <tr>\n            <td style=\"text-align:center\" rowspan=\"3\">CHAR [ (size [ BYTE | CHAR ]) ]</td>\n            <td style=\"text-align:center\">CHAR</td>\n            <td style=\"text-align:center\">CHAR</td>\n        </tr>\n         <tr>\n            <td style=\"text-align:center\">CHAR(size)</td>\n            <td style=\"text-align:center\">CHAR(size)</td>\n        </tr>\n        <tr>\n            <td style=\"text-align:center\">CHAR[256, )</td>\n            <td style=\"text-align:center\">CHAR[256, )</td>\n        </tr>\n<!--   -->  \n    </tbody>\n</table>\n\n<hr>\n<p>参考</p>\n<ul>\n<li><a href=\"http://www.sqlines.com/oracle-to-postgresql\" target=\"_blank\" rel=\"noopener\">http://www.sqlines.com/oracle-to-postgresql</a></li>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html\" target=\"_blank\" rel=\"noopener\">Oracle官网文档</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/\" target=\"_blank\" rel=\"noopener\">MySQL官网文档</a></li>\n</ul>\n"},{"title":"Oracle转Postgresql总结","date":"2019-08-15T15:26:48.000Z","_content":"\n## 数据类型\nOracle数据类型  Postgresql数据类型\n\n\n## 方法\n\n\n\n---\n参考\n- http://www.sqlines.com/oracle-to-postgresql\n- [Oracle官网文档](https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html)\n- [Postgresql官网文档](https://www.postgresql.org/docs/devel/)","source":"_posts/Oracle转Postgresql总结.md","raw":"---\ntitle: Oracle转Postgresql总结\ndate: 2019-08-15 23:26:48\ncategories: \n    - SQL转换\ntags:\n    - SQL转换\n---\n\n## 数据类型\nOracle数据类型  Postgresql数据类型\n\n\n## 方法\n\n\n\n---\n参考\n- http://www.sqlines.com/oracle-to-postgresql\n- [Oracle官网文档](https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html)\n- [Postgresql官网文档](https://www.postgresql.org/docs/devel/)","slug":"Oracle转Postgresql总结","published":1,"updated":"2019-11-02T07:12:18.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5w003ct6s60848luxv","content":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>Oracle数据类型  Postgresql数据类型</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><hr>\n<p>参考</p>\n<ul>\n<li><a href=\"http://www.sqlines.com/oracle-to-postgresql\" target=\"_blank\" rel=\"noopener\">http://www.sqlines.com/oracle-to-postgresql</a></li>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html\" target=\"_blank\" rel=\"noopener\">Oracle官网文档</a></li>\n<li><a href=\"https://www.postgresql.org/docs/devel/\" target=\"_blank\" rel=\"noopener\">Postgresql官网文档</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>Oracle数据类型  Postgresql数据类型</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><hr>\n<p>参考</p>\n<ul>\n<li><a href=\"http://www.sqlines.com/oracle-to-postgresql\" target=\"_blank\" rel=\"noopener\">http://www.sqlines.com/oracle-to-postgresql</a></li>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/index.html\" target=\"_blank\" rel=\"noopener\">Oracle官网文档</a></li>\n<li><a href=\"https://www.postgresql.org/docs/devel/\" target=\"_blank\" rel=\"noopener\">Postgresql官网文档</a></li>\n</ul>\n"},{"title":"PyTorch教程","date":"2018-11-23T07:45:02.000Z","_content":"\nPyTorch是一个开源的Python机器学习库，基于Torch，应用于人工智能领域，如自然语言处理。 它最初由Facebook的人工智能研究团队开发，并且被用于Uber的概率编程软件\"Pyro\"。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n## \n\n## \n\n\n\n<br/>\n\n---\n参考\n[pytorch官网](https://pytorch.org/)\n[pytorch-Github](https://github.com/pytorch/pytorch)\n","source":"_posts/PyTorch教程.md","raw":"---\ntitle: PyTorch教程\ndate: 2018-11-23 15:45:02\ncategories: \n    - PyTorch\ntags:\n    - 机器学习\n    - 深度学习\n    - 深度学习框架\n    - PyTorch\n---\n\nPyTorch是一个开源的Python机器学习库，基于Torch，应用于人工智能领域，如自然语言处理。 它最初由Facebook的人工智能研究团队开发，并且被用于Uber的概率编程软件\"Pyro\"。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n## \n\n## \n\n\n\n<br/>\n\n---\n参考\n[pytorch官网](https://pytorch.org/)\n[pytorch-Github](https://github.com/pytorch/pytorch)\n","slug":"PyTorch教程","published":1,"updated":"2019-11-02T07:12:18.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5x003gt6s6nl3khmak","content":"<p>PyTorch是一个开源的Python机器学习库，基于Torch，应用于人工智能领域，如自然语言处理。 它最初由Facebook的人工智能研究团队开发，并且被用于Uber的概率编程软件”Pyro”。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<a id=\"more\"></a>\n<p>## </p>\n<p>## </p>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://pytorch.org/\" target=\"_blank\" rel=\"noopener\">pytorch官网</a>\n<a href=\"https://github.com/pytorch/pytorch\" target=\"_blank\" rel=\"noopener\">pytorch-Github</a></p>\n","site":{"data":{}},"excerpt":"<p>PyTorch是一个开源的Python机器学习库，基于Torch，应用于人工智能领域，如自然语言处理。 它最初由Facebook的人工智能研究团队开发，并且被用于Uber的概率编程软件”Pyro”。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>","more":"<p>## </p>\n<p>## </p>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://pytorch.org/\" target=\"_blank\" rel=\"noopener\">pytorch官网</a>\n<a href=\"https://github.com/pytorch/pytorch\" target=\"_blank\" rel=\"noopener\">pytorch-Github</a></p>"},{"title":"Redis安装","date":"2018-12-06T01:19:51.000Z","_content":"\n## MAC环境安装\n### 下载\n下载地址：http://www.redis.cn/download.html\n\n<br/>\n### 安装\n```bash\n# 进入下载目录 & 解压\n$ sudo tar -zxzf redis-xxx.tar.gz\n```\n\n<!-- more -->\n\n\n```bash\n# make test\n$ sudo make test\n\n[exception]: Executing test client: couldn't execute \"src/redis-benchmark\": no such file or directory.\ncouldn't execute \"src/redis-benchmark\": no such file or directory\n    while executing\n\"exec src/redis-benchmark -p $R_port(0) -n 10000000 -r 1000 incr __rand_int__ > /dev/null &\"\n    (\"uplevel\" body line 31)\n    invoked from within\n\"uplevel 1 $code \"\n    (procedure \"start_server\" line 3)\n    invoked from within\n\"start_server {} {\n    # Config\n    set debug_msg 0                 ; # Enable additional debug messages\n\n    set no_exit 0                   ; # Do no...\"\n    (\"uplevel\" body line 2)\n    invoked from within\n\"uplevel 1 $code \"\n    (procedure \"start_server\" line 3)\n    invoked from within\n\"start_server {} {\nstart_server {} {\n    # Config\n    set debug_msg 0                 ; # Enable additional debug messages\n\n    set no_exit 0          ...\"\n    (\"uplevel\" body line 2)\n    invoked from within\n\"uplevel 1 $code \"\n    (procedure \"start_server\" line 3)\n    invoked from within\n\"start_server {tags {\"psync2\"}} {\nstart_server {} {\nstart_server {} {\n    # Config\n    set debug_msg 0                 ; # Enable additional debug mess...\"\n    (file \"tests/integration/psync2-reg.tcl\" line 7)\n    invoked from within\n\"source $path\"\n    (procedure \"execute_tests\" line 4)\n    invoked from within\n\"execute_tests $data\"\n    (procedure \"test_client_main\" line 10)\n    invoked from within\n\"test_client_main $::test_server_port \"\nKilling still running Redis server 48649\nKilling still running Redis server 48648\nKilling still running Redis server 48663\nKilling still running Redis server 48661\nKilling still running Redis server 48660\nKilling still running Redis server 48856\nKilling still running Redis server 48884\nKilling still running Redis server 48894\nI/O error reading reply\n    while executing\n\"$r bzpopmax $k 2\"\n    (\"uplevel\" body line 2)\n    invoked from within\n\"uplevel 1 [lindex $args $path]\"\n    (procedure \"randpath\" line 3)\n    invoked from within\n\"randpath {\n            $r zadd $k [randomInt 10000] $v\n        } {\n            $r zadd $k [randomInt 10000] $v [randomInt 10000] $v2\n        } {\n     ...\"\n    (procedure \"bg_block_op\" line 30)\n    invoked from within\n\"bg_block_op [lindex $argv 0] [lindex $argv 1] [lindex $argv 2] [lindex $argv 3]\"\n    (file \"tests/helpers/bg_block_op.tcl\" line 52)\nI/O error reading reply\n    while executing\n\"$r bzpopmax $k 2\"\n    (\"uplevel\" body line 2)\n    invoked from within\n\"uplevel 1 [lindex $args $path]\"\n    (procedure \"randpath\" line 3)\n    invoked from within\n\"randpath {\n            $r zadd $k [randomInt 10000] $v\n        } {\n            $r zadd $k [randomInt 10000] $v [randomInt 10000] $v2\n        } {\n     ...\"\n    (procedure \"bg_block_op\" line 30)\n    invoked from within\n\"bg_block_op [lindex $argv 0] [lindex $argv 1] [lindex $argv 2] [lindex $argv 3]\"\n    (file \"tests/helpers/bg_block_op.tcl\" line 52)\nI/O error reading reply\n    while executing\n\"$r blpop $k $k2 2\"\n    (\"uplevel\" body line 2)\n    invoked from within\n\"uplevel 1 [lindex $args $path]\"\n    (procedure \"randpath\" line 3)\n    invoked from within\n\"randpath {\n            randpath {\n                $r rpush $k $v\n            } {\n                $r lpush $k $v\n            }\n        } {\n            ...\"\n    (procedure \"bg_block_op\" line 12)\n    invoked from within\n\"bg_block_op [lindex $argv 0] [lindex $argv 1] [lindex $argv 2] [lindex $argv 3]\"\n    (file \"tests/helpers/bg_block_op.tcl\" line 52)\nKilling still running Redis server 48948\nKilling still running Redis server 48956\nKilling still running Redis server 48969\nKilling still running Redis server 48975\nKilling still running Redis server 49228\nKilling still running Redis server 49238\nKilling still running Redis server 49251\nKilling still running Redis server 49263\nKilling still running Redis server 49278\nKilling still running Redis server 49295\nKilling still running Redis server 49469\nKilling still running Redis server 49482\nKilling still running Redis server 49501\nKilling still running Redis server 49509\nKilling still running Redis server 49520\nKilling still running Redis server 49535\nKilling still running Redis server 49540\nKilling still running Redis server 49563\nKilling still running Redis server 49566\nKilling still running Redis server 49578\nKilling still running Redis server 49587\nKilling still running Redis server 49648\nKilling still running Redis server 49660\nmake[1]: *** [test] Error 1\nmake: *** [test] Error 2\n```\n\n\n```bash\n# install（上面报错不影响安装）\n$ sudo make install\n\nNSTALL redis-sentinel\n    CC redis-cli.o\n    LINK redis-cli\n    CC redis-benchmark.o\n    LINK redis-benchmark\n    INSTALL redis-check-rdb\n\nHint: It's a good idea to run 'make test' ;)\n\n    INSTALL install\n    INSTALL install\n    INSTALL install\n    INSTALL install\n    INSTALL install\n```\n\n\n### 启动\n\n** 在`Library` 目录\b创建相应的`redis-xxx`目录 ** \n```bash\n$ cd /Library\n$ sudo mkdir redis-xxx\n```\n\n** 在`redis-xxx`目录下建立`bin`、`conf`、`data`和`log`目录 **\n\n```bash\n$ sudo mkdir bin\n$ sudo mkdir conf\n$ sudo mkdir data\n$ sudo mkdir log\n```\n\n** 把`make install`之后的`src`目录下的文件 : `mkreleasehdr.sh` `redis-benchmark` `redis-check-rdb` `redis-cli` `redis-server` 拷贝到上面 `bin` 目录 **\n```\ncp mkreleasehdr.sh /Library/redis-xxx/bin\ncp redis-check-rdb /Library/redis-xxx/bin\ncp redis-cli /Library/redis-xxx/bin\ncp redis-server /Library/redis-xxx/bin\n```\n\n\n```\n$ ./redis-server ../conf/redis.conf\n\n$ ./redis-cli\n\n```\n\n### 配置\n\n","source":"_posts/Redis安装.md","raw":"---\ntitle: Redis安装\ndate: 2018-12-06 09:19:51\ncategories: \n    - Redis\ntags:\n    - NoSQL\n    - Redis\n---\n\n## MAC环境安装\n### 下载\n下载地址：http://www.redis.cn/download.html\n\n<br/>\n### 安装\n```bash\n# 进入下载目录 & 解压\n$ sudo tar -zxzf redis-xxx.tar.gz\n```\n\n<!-- more -->\n\n\n```bash\n# make test\n$ sudo make test\n\n[exception]: Executing test client: couldn't execute \"src/redis-benchmark\": no such file or directory.\ncouldn't execute \"src/redis-benchmark\": no such file or directory\n    while executing\n\"exec src/redis-benchmark -p $R_port(0) -n 10000000 -r 1000 incr __rand_int__ > /dev/null &\"\n    (\"uplevel\" body line 31)\n    invoked from within\n\"uplevel 1 $code \"\n    (procedure \"start_server\" line 3)\n    invoked from within\n\"start_server {} {\n    # Config\n    set debug_msg 0                 ; # Enable additional debug messages\n\n    set no_exit 0                   ; # Do no...\"\n    (\"uplevel\" body line 2)\n    invoked from within\n\"uplevel 1 $code \"\n    (procedure \"start_server\" line 3)\n    invoked from within\n\"start_server {} {\nstart_server {} {\n    # Config\n    set debug_msg 0                 ; # Enable additional debug messages\n\n    set no_exit 0          ...\"\n    (\"uplevel\" body line 2)\n    invoked from within\n\"uplevel 1 $code \"\n    (procedure \"start_server\" line 3)\n    invoked from within\n\"start_server {tags {\"psync2\"}} {\nstart_server {} {\nstart_server {} {\n    # Config\n    set debug_msg 0                 ; # Enable additional debug mess...\"\n    (file \"tests/integration/psync2-reg.tcl\" line 7)\n    invoked from within\n\"source $path\"\n    (procedure \"execute_tests\" line 4)\n    invoked from within\n\"execute_tests $data\"\n    (procedure \"test_client_main\" line 10)\n    invoked from within\n\"test_client_main $::test_server_port \"\nKilling still running Redis server 48649\nKilling still running Redis server 48648\nKilling still running Redis server 48663\nKilling still running Redis server 48661\nKilling still running Redis server 48660\nKilling still running Redis server 48856\nKilling still running Redis server 48884\nKilling still running Redis server 48894\nI/O error reading reply\n    while executing\n\"$r bzpopmax $k 2\"\n    (\"uplevel\" body line 2)\n    invoked from within\n\"uplevel 1 [lindex $args $path]\"\n    (procedure \"randpath\" line 3)\n    invoked from within\n\"randpath {\n            $r zadd $k [randomInt 10000] $v\n        } {\n            $r zadd $k [randomInt 10000] $v [randomInt 10000] $v2\n        } {\n     ...\"\n    (procedure \"bg_block_op\" line 30)\n    invoked from within\n\"bg_block_op [lindex $argv 0] [lindex $argv 1] [lindex $argv 2] [lindex $argv 3]\"\n    (file \"tests/helpers/bg_block_op.tcl\" line 52)\nI/O error reading reply\n    while executing\n\"$r bzpopmax $k 2\"\n    (\"uplevel\" body line 2)\n    invoked from within\n\"uplevel 1 [lindex $args $path]\"\n    (procedure \"randpath\" line 3)\n    invoked from within\n\"randpath {\n            $r zadd $k [randomInt 10000] $v\n        } {\n            $r zadd $k [randomInt 10000] $v [randomInt 10000] $v2\n        } {\n     ...\"\n    (procedure \"bg_block_op\" line 30)\n    invoked from within\n\"bg_block_op [lindex $argv 0] [lindex $argv 1] [lindex $argv 2] [lindex $argv 3]\"\n    (file \"tests/helpers/bg_block_op.tcl\" line 52)\nI/O error reading reply\n    while executing\n\"$r blpop $k $k2 2\"\n    (\"uplevel\" body line 2)\n    invoked from within\n\"uplevel 1 [lindex $args $path]\"\n    (procedure \"randpath\" line 3)\n    invoked from within\n\"randpath {\n            randpath {\n                $r rpush $k $v\n            } {\n                $r lpush $k $v\n            }\n        } {\n            ...\"\n    (procedure \"bg_block_op\" line 12)\n    invoked from within\n\"bg_block_op [lindex $argv 0] [lindex $argv 1] [lindex $argv 2] [lindex $argv 3]\"\n    (file \"tests/helpers/bg_block_op.tcl\" line 52)\nKilling still running Redis server 48948\nKilling still running Redis server 48956\nKilling still running Redis server 48969\nKilling still running Redis server 48975\nKilling still running Redis server 49228\nKilling still running Redis server 49238\nKilling still running Redis server 49251\nKilling still running Redis server 49263\nKilling still running Redis server 49278\nKilling still running Redis server 49295\nKilling still running Redis server 49469\nKilling still running Redis server 49482\nKilling still running Redis server 49501\nKilling still running Redis server 49509\nKilling still running Redis server 49520\nKilling still running Redis server 49535\nKilling still running Redis server 49540\nKilling still running Redis server 49563\nKilling still running Redis server 49566\nKilling still running Redis server 49578\nKilling still running Redis server 49587\nKilling still running Redis server 49648\nKilling still running Redis server 49660\nmake[1]: *** [test] Error 1\nmake: *** [test] Error 2\n```\n\n\n```bash\n# install（上面报错不影响安装）\n$ sudo make install\n\nNSTALL redis-sentinel\n    CC redis-cli.o\n    LINK redis-cli\n    CC redis-benchmark.o\n    LINK redis-benchmark\n    INSTALL redis-check-rdb\n\nHint: It's a good idea to run 'make test' ;)\n\n    INSTALL install\n    INSTALL install\n    INSTALL install\n    INSTALL install\n    INSTALL install\n```\n\n\n### 启动\n\n** 在`Library` 目录\b创建相应的`redis-xxx`目录 ** \n```bash\n$ cd /Library\n$ sudo mkdir redis-xxx\n```\n\n** 在`redis-xxx`目录下建立`bin`、`conf`、`data`和`log`目录 **\n\n```bash\n$ sudo mkdir bin\n$ sudo mkdir conf\n$ sudo mkdir data\n$ sudo mkdir log\n```\n\n** 把`make install`之后的`src`目录下的文件 : `mkreleasehdr.sh` `redis-benchmark` `redis-check-rdb` `redis-cli` `redis-server` 拷贝到上面 `bin` 目录 **\n```\ncp mkreleasehdr.sh /Library/redis-xxx/bin\ncp redis-check-rdb /Library/redis-xxx/bin\ncp redis-cli /Library/redis-xxx/bin\ncp redis-server /Library/redis-xxx/bin\n```\n\n\n```\n$ ./redis-server ../conf/redis.conf\n\n$ ./redis-cli\n\n```\n\n### 配置\n\n","slug":"Redis安装","published":1,"updated":"2019-11-02T07:12:18.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5y003jt6s6ssv07rw2","content":"<h2 id=\"MAC环境安装\"><a href=\"#MAC环境安装\" class=\"headerlink\" title=\"MAC环境安装\"></a>MAC环境安装</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>下载地址：<a href=\"http://www.redis.cn/download.html\" target=\"_blank\" rel=\"noopener\">http://www.redis.cn/download.html</a></p>\n<p><br></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入下载目录 &amp; 解压</span></span><br><span class=\"line\">$ sudo tar -zxzf redis-xxx.tar.gz</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># make test</span></span><br><span class=\"line\">$ sudo make <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">[exception]: Executing <span class=\"built_in\">test</span> client: couldn<span class=\"string\">'t execute \"src/redis-benchmark\": no such file or directory.</span></span><br><span class=\"line\"><span class=\"string\">couldn'</span>t execute <span class=\"string\">\"src/redis-benchmark\"</span>: no such file or directory</span><br><span class=\"line\">    <span class=\"keyword\">while</span> executing</span><br><span class=\"line\"><span class=\"string\">\"exec src/redis-benchmark -p <span class=\"variable\">$R_port</span>(0) -n 10000000 -r 1000 incr __rand_int__ &gt; /dev/null &amp;\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 31)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 <span class=\"variable\">$code</span> \"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"start_server\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"start_server &#123;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    # Config</span></span><br><span class=\"line\"><span class=\"string\">    set debug_msg 0                 ; # Enable additional debug messages</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    set no_exit 0                   ; # Do no...\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 2)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 <span class=\"variable\">$code</span> \"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"start_server\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"start_server &#123;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">start_server &#123;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    # Config</span></span><br><span class=\"line\"><span class=\"string\">    set debug_msg 0                 ; # Enable additional debug messages</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    set no_exit 0          ...\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 2)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 <span class=\"variable\">$code</span> \"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"start_server\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"start_server &#123;tags &#123;\"</span>psync2<span class=\"string\">\"&#125;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">start_server &#123;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">start_server &#123;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    # Config</span></span><br><span class=\"line\"><span class=\"string\">    set debug_msg 0                 ; # Enable additional debug mess...\"</span></span><br><span class=\"line\">    (file <span class=\"string\">\"tests/integration/psync2-reg.tcl\"</span> line 7)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"source <span class=\"variable\">$path</span>\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"execute_tests\"</span> line 4)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"execute_tests <span class=\"variable\">$data</span>\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"test_client_main\"</span> line 10)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"test_client_main $::test_server_port \"</span></span><br><span class=\"line\">Killing still running Redis server 48649</span><br><span class=\"line\">Killing still running Redis server 48648</span><br><span class=\"line\">Killing still running Redis server 48663</span><br><span class=\"line\">Killing still running Redis server 48661</span><br><span class=\"line\">Killing still running Redis server 48660</span><br><span class=\"line\">Killing still running Redis server 48856</span><br><span class=\"line\">Killing still running Redis server 48884</span><br><span class=\"line\">Killing still running Redis server 48894</span><br><span class=\"line\">I/O error reading reply</span><br><span class=\"line\">    <span class=\"keyword\">while</span> executing</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$r</span> bzpopmax <span class=\"variable\">$k</span> 2\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 2)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 [lindex <span class=\"variable\">$args</span> <span class=\"variable\">$path</span>]\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"randpath\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"randpath &#123;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"variable\">$r</span> zadd <span class=\"variable\">$k</span> [randomInt 10000] <span class=\"variable\">$v</span></span></span><br><span class=\"line\"><span class=\"string\">        &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"variable\">$r</span> zadd <span class=\"variable\">$k</span> [randomInt 10000] <span class=\"variable\">$v</span> [randomInt 10000] <span class=\"variable\">$v2</span></span></span><br><span class=\"line\"><span class=\"string\">        &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">     ...\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"bg_block_op\"</span> line 30)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"bg_block_op [lindex <span class=\"variable\">$argv</span> 0] [lindex <span class=\"variable\">$argv</span> 1] [lindex <span class=\"variable\">$argv</span> 2] [lindex <span class=\"variable\">$argv</span> 3]\"</span></span><br><span class=\"line\">    (file <span class=\"string\">\"tests/helpers/bg_block_op.tcl\"</span> line 52)</span><br><span class=\"line\">I/O error reading reply</span><br><span class=\"line\">    <span class=\"keyword\">while</span> executing</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$r</span> bzpopmax <span class=\"variable\">$k</span> 2\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 2)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 [lindex <span class=\"variable\">$args</span> <span class=\"variable\">$path</span>]\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"randpath\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"randpath &#123;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"variable\">$r</span> zadd <span class=\"variable\">$k</span> [randomInt 10000] <span class=\"variable\">$v</span></span></span><br><span class=\"line\"><span class=\"string\">        &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"variable\">$r</span> zadd <span class=\"variable\">$k</span> [randomInt 10000] <span class=\"variable\">$v</span> [randomInt 10000] <span class=\"variable\">$v2</span></span></span><br><span class=\"line\"><span class=\"string\">        &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">     ...\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"bg_block_op\"</span> line 30)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"bg_block_op [lindex <span class=\"variable\">$argv</span> 0] [lindex <span class=\"variable\">$argv</span> 1] [lindex <span class=\"variable\">$argv</span> 2] [lindex <span class=\"variable\">$argv</span> 3]\"</span></span><br><span class=\"line\">    (file <span class=\"string\">\"tests/helpers/bg_block_op.tcl\"</span> line 52)</span><br><span class=\"line\">I/O error reading reply</span><br><span class=\"line\">    <span class=\"keyword\">while</span> executing</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$r</span> blpop <span class=\"variable\">$k</span> <span class=\"variable\">$k2</span> 2\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 2)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 [lindex <span class=\"variable\">$args</span> <span class=\"variable\">$path</span>]\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"randpath\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"randpath &#123;</span></span><br><span class=\"line\"><span class=\"string\">            randpath &#123;</span></span><br><span class=\"line\"><span class=\"string\">                <span class=\"variable\">$r</span> rpush <span class=\"variable\">$k</span> <span class=\"variable\">$v</span></span></span><br><span class=\"line\"><span class=\"string\">            &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                <span class=\"variable\">$r</span> lpush <span class=\"variable\">$k</span> <span class=\"variable\">$v</span></span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            ...\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"bg_block_op\"</span> line 12)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"bg_block_op [lindex <span class=\"variable\">$argv</span> 0] [lindex <span class=\"variable\">$argv</span> 1] [lindex <span class=\"variable\">$argv</span> 2] [lindex <span class=\"variable\">$argv</span> 3]\"</span></span><br><span class=\"line\">    (file <span class=\"string\">\"tests/helpers/bg_block_op.tcl\"</span> line 52)</span><br><span class=\"line\">Killing still running Redis server 48948</span><br><span class=\"line\">Killing still running Redis server 48956</span><br><span class=\"line\">Killing still running Redis server 48969</span><br><span class=\"line\">Killing still running Redis server 48975</span><br><span class=\"line\">Killing still running Redis server 49228</span><br><span class=\"line\">Killing still running Redis server 49238</span><br><span class=\"line\">Killing still running Redis server 49251</span><br><span class=\"line\">Killing still running Redis server 49263</span><br><span class=\"line\">Killing still running Redis server 49278</span><br><span class=\"line\">Killing still running Redis server 49295</span><br><span class=\"line\">Killing still running Redis server 49469</span><br><span class=\"line\">Killing still running Redis server 49482</span><br><span class=\"line\">Killing still running Redis server 49501</span><br><span class=\"line\">Killing still running Redis server 49509</span><br><span class=\"line\">Killing still running Redis server 49520</span><br><span class=\"line\">Killing still running Redis server 49535</span><br><span class=\"line\">Killing still running Redis server 49540</span><br><span class=\"line\">Killing still running Redis server 49563</span><br><span class=\"line\">Killing still running Redis server 49566</span><br><span class=\"line\">Killing still running Redis server 49578</span><br><span class=\"line\">Killing still running Redis server 49587</span><br><span class=\"line\">Killing still running Redis server 49648</span><br><span class=\"line\">Killing still running Redis server 49660</span><br><span class=\"line\">make[1]: *** [<span class=\"built_in\">test</span>] Error 1</span><br><span class=\"line\">make: *** [<span class=\"built_in\">test</span>] Error 2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># install（上面报错不影响安装）</span></span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\">NSTALL redis-sentinel</span><br><span class=\"line\">    CC redis-cli.o</span><br><span class=\"line\">    LINK redis-cli</span><br><span class=\"line\">    CC redis-benchmark.o</span><br><span class=\"line\">    LINK redis-benchmark</span><br><span class=\"line\">    INSTALL redis-check-rdb</span><br><span class=\"line\"></span><br><span class=\"line\">Hint: It<span class=\"string\">'s a good idea to run '</span>make <span class=\"built_in\">test</span><span class=\"string\">' ;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    INSTALL install</span></span><br><span class=\"line\"><span class=\"string\">    INSTALL install</span></span><br><span class=\"line\"><span class=\"string\">    INSTALL install</span></span><br><span class=\"line\"><span class=\"string\">    INSTALL install</span></span><br><span class=\"line\"><span class=\"string\">    INSTALL install</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p><strong> 在<code>Library</code> 目录\b创建相应的<code>redis-xxx</code>目录 </strong> \n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /Library</span><br><span class=\"line\">$ sudo mkdir redis-xxx</span><br></pre></td></tr></table></figure></p>\n<p><strong> 在<code>redis-xxx</code>目录下建立<code>bin</code>、<code>conf</code>、<code>data</code>和<code>log</code>目录 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir bin</span><br><span class=\"line\">$ sudo mkdir conf</span><br><span class=\"line\">$ sudo mkdir data</span><br><span class=\"line\">$ sudo mkdir <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p><strong> 把<code>make install</code>之后的<code>src</code>目录下的文件 : <code>mkreleasehdr.sh</code> <code>redis-benchmark</code> <code>redis-check-rdb</code> <code>redis-cli</code> <code>redis-server</code> 拷贝到上面 <code>bin</code> 目录 </strong>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp mkreleasehdr.sh /Library/redis-xxx/bin</span><br><span class=\"line\">cp redis-check-rdb /Library/redis-xxx/bin</span><br><span class=\"line\">cp redis-cli /Library/redis-xxx/bin</span><br><span class=\"line\">cp redis-server /Library/redis-xxx/bin</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./redis-server ../conf/redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./redis-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3>","site":{"data":{}},"excerpt":"<h2 id=\"MAC环境安装\"><a href=\"#MAC环境安装\" class=\"headerlink\" title=\"MAC环境安装\"></a>MAC环境安装</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>下载地址：<a href=\"http://www.redis.cn/download.html\" target=\"_blank\" rel=\"noopener\">http://www.redis.cn/download.html</a></p>\n<p><br></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入下载目录 &amp; 解压</span></span><br><span class=\"line\">$ sudo tar -zxzf redis-xxx.tar.gz</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># make test</span></span><br><span class=\"line\">$ sudo make <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">[exception]: Executing <span class=\"built_in\">test</span> client: couldn<span class=\"string\">'t execute \"src/redis-benchmark\": no such file or directory.</span></span><br><span class=\"line\"><span class=\"string\">couldn'</span>t execute <span class=\"string\">\"src/redis-benchmark\"</span>: no such file or directory</span><br><span class=\"line\">    <span class=\"keyword\">while</span> executing</span><br><span class=\"line\"><span class=\"string\">\"exec src/redis-benchmark -p <span class=\"variable\">$R_port</span>(0) -n 10000000 -r 1000 incr __rand_int__ &gt; /dev/null &amp;\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 31)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 <span class=\"variable\">$code</span> \"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"start_server\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"start_server &#123;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    # Config</span></span><br><span class=\"line\"><span class=\"string\">    set debug_msg 0                 ; # Enable additional debug messages</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    set no_exit 0                   ; # Do no...\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 2)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 <span class=\"variable\">$code</span> \"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"start_server\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"start_server &#123;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">start_server &#123;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    # Config</span></span><br><span class=\"line\"><span class=\"string\">    set debug_msg 0                 ; # Enable additional debug messages</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    set no_exit 0          ...\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 2)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 <span class=\"variable\">$code</span> \"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"start_server\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"start_server &#123;tags &#123;\"</span>psync2<span class=\"string\">\"&#125;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">start_server &#123;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">start_server &#123;&#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    # Config</span></span><br><span class=\"line\"><span class=\"string\">    set debug_msg 0                 ; # Enable additional debug mess...\"</span></span><br><span class=\"line\">    (file <span class=\"string\">\"tests/integration/psync2-reg.tcl\"</span> line 7)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"source <span class=\"variable\">$path</span>\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"execute_tests\"</span> line 4)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"execute_tests <span class=\"variable\">$data</span>\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"test_client_main\"</span> line 10)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"test_client_main $::test_server_port \"</span></span><br><span class=\"line\">Killing still running Redis server 48649</span><br><span class=\"line\">Killing still running Redis server 48648</span><br><span class=\"line\">Killing still running Redis server 48663</span><br><span class=\"line\">Killing still running Redis server 48661</span><br><span class=\"line\">Killing still running Redis server 48660</span><br><span class=\"line\">Killing still running Redis server 48856</span><br><span class=\"line\">Killing still running Redis server 48884</span><br><span class=\"line\">Killing still running Redis server 48894</span><br><span class=\"line\">I/O error reading reply</span><br><span class=\"line\">    <span class=\"keyword\">while</span> executing</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$r</span> bzpopmax <span class=\"variable\">$k</span> 2\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 2)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 [lindex <span class=\"variable\">$args</span> <span class=\"variable\">$path</span>]\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"randpath\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"randpath &#123;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"variable\">$r</span> zadd <span class=\"variable\">$k</span> [randomInt 10000] <span class=\"variable\">$v</span></span></span><br><span class=\"line\"><span class=\"string\">        &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"variable\">$r</span> zadd <span class=\"variable\">$k</span> [randomInt 10000] <span class=\"variable\">$v</span> [randomInt 10000] <span class=\"variable\">$v2</span></span></span><br><span class=\"line\"><span class=\"string\">        &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">     ...\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"bg_block_op\"</span> line 30)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"bg_block_op [lindex <span class=\"variable\">$argv</span> 0] [lindex <span class=\"variable\">$argv</span> 1] [lindex <span class=\"variable\">$argv</span> 2] [lindex <span class=\"variable\">$argv</span> 3]\"</span></span><br><span class=\"line\">    (file <span class=\"string\">\"tests/helpers/bg_block_op.tcl\"</span> line 52)</span><br><span class=\"line\">I/O error reading reply</span><br><span class=\"line\">    <span class=\"keyword\">while</span> executing</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$r</span> bzpopmax <span class=\"variable\">$k</span> 2\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 2)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 [lindex <span class=\"variable\">$args</span> <span class=\"variable\">$path</span>]\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"randpath\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"randpath &#123;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"variable\">$r</span> zadd <span class=\"variable\">$k</span> [randomInt 10000] <span class=\"variable\">$v</span></span></span><br><span class=\"line\"><span class=\"string\">        &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"variable\">$r</span> zadd <span class=\"variable\">$k</span> [randomInt 10000] <span class=\"variable\">$v</span> [randomInt 10000] <span class=\"variable\">$v2</span></span></span><br><span class=\"line\"><span class=\"string\">        &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">     ...\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"bg_block_op\"</span> line 30)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"bg_block_op [lindex <span class=\"variable\">$argv</span> 0] [lindex <span class=\"variable\">$argv</span> 1] [lindex <span class=\"variable\">$argv</span> 2] [lindex <span class=\"variable\">$argv</span> 3]\"</span></span><br><span class=\"line\">    (file <span class=\"string\">\"tests/helpers/bg_block_op.tcl\"</span> line 52)</span><br><span class=\"line\">I/O error reading reply</span><br><span class=\"line\">    <span class=\"keyword\">while</span> executing</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$r</span> blpop <span class=\"variable\">$k</span> <span class=\"variable\">$k2</span> 2\"</span></span><br><span class=\"line\">    (<span class=\"string\">\"uplevel\"</span> body line 2)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"uplevel 1 [lindex <span class=\"variable\">$args</span> <span class=\"variable\">$path</span>]\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"randpath\"</span> line 3)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"randpath &#123;</span></span><br><span class=\"line\"><span class=\"string\">            randpath &#123;</span></span><br><span class=\"line\"><span class=\"string\">                <span class=\"variable\">$r</span> rpush <span class=\"variable\">$k</span> <span class=\"variable\">$v</span></span></span><br><span class=\"line\"><span class=\"string\">            &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                <span class=\"variable\">$r</span> lpush <span class=\"variable\">$k</span> <span class=\"variable\">$v</span></span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            ...\"</span></span><br><span class=\"line\">    (procedure <span class=\"string\">\"bg_block_op\"</span> line 12)</span><br><span class=\"line\">    invoked from within</span><br><span class=\"line\"><span class=\"string\">\"bg_block_op [lindex <span class=\"variable\">$argv</span> 0] [lindex <span class=\"variable\">$argv</span> 1] [lindex <span class=\"variable\">$argv</span> 2] [lindex <span class=\"variable\">$argv</span> 3]\"</span></span><br><span class=\"line\">    (file <span class=\"string\">\"tests/helpers/bg_block_op.tcl\"</span> line 52)</span><br><span class=\"line\">Killing still running Redis server 48948</span><br><span class=\"line\">Killing still running Redis server 48956</span><br><span class=\"line\">Killing still running Redis server 48969</span><br><span class=\"line\">Killing still running Redis server 48975</span><br><span class=\"line\">Killing still running Redis server 49228</span><br><span class=\"line\">Killing still running Redis server 49238</span><br><span class=\"line\">Killing still running Redis server 49251</span><br><span class=\"line\">Killing still running Redis server 49263</span><br><span class=\"line\">Killing still running Redis server 49278</span><br><span class=\"line\">Killing still running Redis server 49295</span><br><span class=\"line\">Killing still running Redis server 49469</span><br><span class=\"line\">Killing still running Redis server 49482</span><br><span class=\"line\">Killing still running Redis server 49501</span><br><span class=\"line\">Killing still running Redis server 49509</span><br><span class=\"line\">Killing still running Redis server 49520</span><br><span class=\"line\">Killing still running Redis server 49535</span><br><span class=\"line\">Killing still running Redis server 49540</span><br><span class=\"line\">Killing still running Redis server 49563</span><br><span class=\"line\">Killing still running Redis server 49566</span><br><span class=\"line\">Killing still running Redis server 49578</span><br><span class=\"line\">Killing still running Redis server 49587</span><br><span class=\"line\">Killing still running Redis server 49648</span><br><span class=\"line\">Killing still running Redis server 49660</span><br><span class=\"line\">make[1]: *** [<span class=\"built_in\">test</span>] Error 1</span><br><span class=\"line\">make: *** [<span class=\"built_in\">test</span>] Error 2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># install（上面报错不影响安装）</span></span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\">NSTALL redis-sentinel</span><br><span class=\"line\">    CC redis-cli.o</span><br><span class=\"line\">    LINK redis-cli</span><br><span class=\"line\">    CC redis-benchmark.o</span><br><span class=\"line\">    LINK redis-benchmark</span><br><span class=\"line\">    INSTALL redis-check-rdb</span><br><span class=\"line\"></span><br><span class=\"line\">Hint: It<span class=\"string\">'s a good idea to run '</span>make <span class=\"built_in\">test</span><span class=\"string\">' ;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    INSTALL install</span></span><br><span class=\"line\"><span class=\"string\">    INSTALL install</span></span><br><span class=\"line\"><span class=\"string\">    INSTALL install</span></span><br><span class=\"line\"><span class=\"string\">    INSTALL install</span></span><br><span class=\"line\"><span class=\"string\">    INSTALL install</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p><strong> 在<code>Library</code> 目录\b创建相应的<code>redis-xxx</code>目录 </strong> \n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /Library</span><br><span class=\"line\">$ sudo mkdir redis-xxx</span><br></pre></td></tr></table></figure></p>\n<p><strong> 在<code>redis-xxx</code>目录下建立<code>bin</code>、<code>conf</code>、<code>data</code>和<code>log</code>目录 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir bin</span><br><span class=\"line\">$ sudo mkdir conf</span><br><span class=\"line\">$ sudo mkdir data</span><br><span class=\"line\">$ sudo mkdir <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p><strong> 把<code>make install</code>之后的<code>src</code>目录下的文件 : <code>mkreleasehdr.sh</code> <code>redis-benchmark</code> <code>redis-check-rdb</code> <code>redis-cli</code> <code>redis-server</code> 拷贝到上面 <code>bin</code> 目录 </strong>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp mkreleasehdr.sh /Library/redis-xxx/bin</span><br><span class=\"line\">cp redis-check-rdb /Library/redis-xxx/bin</span><br><span class=\"line\">cp redis-cli /Library/redis-xxx/bin</span><br><span class=\"line\">cp redis-server /Library/redis-xxx/bin</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./redis-server ../conf/redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./redis-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3>"},{"title":"Redis开发规范","date":"2018-12-06T12:09:48.000Z","_content":"\n## 阿里云Redis开发规范\n\n### 一、键值设计\n\n#### 1. key名设计\n##### (1)【建议】: 可读性和可管理性\n以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id\n```\nugc:video:1\n```\n\n<!-- more -->\n\n##### (2)【建议】：简洁性\n保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如：\n```\nuser:{uid}:friends:messages:{mid}简化为u:{uid}:fr:m:{mid}。\n```\n\n##### (3)【强制】：不要包含特殊字符\n** 反例：** 包含`空格`、`换行`、`单双引号`以及其他`转义字符`\n\n<br/>\n#### 2. value设计\n##### (1)【强制】：拒绝bigkey(防止网卡流量、慢查询)\n`string`类型控制在10KB以内，`hash`、`list`、`set`、`zset`元素个数不要超过`5000`。\n\n** 反例：** `一个包含200万个元素的list。`\n\n非字符串的bigkey，不要使用del删除，使用`hscan`、`sscan`、`zscan`方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作不会不出现在慢查询中(latency可查))，[#查找方法](#2-【推荐】：big-key搜索)和[#删除方法](#五、附录：删除bigkey)\n\n##### (2)【推荐】：选择适合的数据类型。\n例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)\n\n** 反例：**\n```bash\nset user:1:name tom\nset user:1:age 19\nset user:1:favor football\n```\n\n** 正例: **\n```bash\nhmset user:1 name tom age 19 favor football\n```\n\n<br/>\n##### 3.【推荐】：控制key的生命周期，redis不是垃圾桶。\n建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime。\n\n\n<br/>\n### 二、命令使用\n#### 1.【推荐】 O(N)命令关注N的数量\n例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。\n\n#### 2.【推荐】：禁用命令\n禁止线上使用`keys`、`flushall`、`flushdb`等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。\n\n#### 3.【推荐】合理使用select\nredis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。\n\n#### 4.【推荐】使用批量操作提高效率\n原生命令：例如`mget`、`mset`。\n非原生命令：可以使用`pipeline`提高效率。\n但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。\n\n** 注意两者不同：**\n\n> 1. 原生是原子操作，pipeline是非原子操作。\n> 2. pipeline可以打包不同的命令，原生做不到\n> 3. pipeline需要客户端和服务端同时支持。\n\n#### 5.【建议】Redis事务功能较弱，不建议过多使用\nRedis的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)\n\n#### 6.【建议】Redis集群版本在使用Lua上有特殊要求：\n\n1.所有key都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的redis命令，key的位置，必须是KEYS array, 否则直接返回error，\"-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS array\\r\\n\"\n\n2.所有key，必须在1个slot上，否则直接返回error, \"-ERR eval/evalsha command keys must in same slot\\r\\n\"\n\n#### 7.【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\n\n<br/>\n### 三、客户端使用\n#### 1.【推荐】\n避免多个应用使用一个Redis实例\n\n正例：不相干的业务拆分，公共数据做服务化。\n\n#### 2.【推荐】\n使用带有连接池的数据库，可以有效控制连接，同时提高效率，标准使用方式：\n\n执行命令如下：\n```java\nJedis jedis = null;\ntry {\n    jedis = jedisPool.getResource();\n    //具体的命令\n    jedis.executeCommand();\n} catch (Exception e) {\n    logger.error(\"op key {} error: \" + e.getMessage(), key, e);\n} finally {\n    //注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。\n    if (jedis != null) jedis.close();\n}\n```\n\n下面是JedisPool优化方法的文章:\n\n[Jedis常见异常汇总](https://yq.aliyun.com/articles/236384)\n[JedisPool资源池优化](https://yq.aliyun.com/articles/236383)\n\n\n#### 3.【建议】\n高并发下建议客户端添加熔断功能(例如netflix hystrix)\n\n#### 4.【推荐】\n设置合理的密码，如有必要可以使用SSL加密访问（阿里云Redis支持）\n\n#### 5.【建议】\n根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。\n\n默认策略是volatile-lru，即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。\n\n其他策略如下：\n> `allkeys-lru`：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。\n> `allkeys-random`：随机删除所有键，直到腾出足够空间为止。\n> `volatile-random`: 随机删除过期键，直到腾出足够空间为止。\n> `volatile-ttl`：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。\n> `noeviction`：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息\"(error) OOM command not allowed when used memory\"，此时Redis只响应读操作。\n\n<br/>\n### 四、相关工具\n#### 1.【推荐】：数据同步\nredis间数据同步可以使用：redis-port\n\n#### 2.【推荐】：big key搜索\n[redis大key搜索工具](https://yq.aliyun.com/articles/117042)\n\n#### 3.【推荐】：热点key寻找(内部实现使用monitor，所以建议短时间使用)\n[facebook的redis-faina](https://github.com/facebookarchive/redis-faina)\n\n<br/>\n### 五、附录：删除bigkey\n\n> 1. 下面操作可以使用pipeline加速。 2. redis 4.0已经支持key的异步删除，欢迎使用。\n\n#### 1. Hash删除: hscan + hdel\n```java\npublic void delBigHash(String host, int port, String password, String bigHashKey) { \n    Jedis jedis = new Jedis(host, port); \n    if (password != null && !\"\".equals(password)) {\n        jedis.auth(password); \n    } \n    ScanParams scanParams = new ScanParams().count(100); \n    String cursor = \"0\"; \n    do { \n        ScanResult<Entry<String, String>> scanResult = jedis.hscan(bigHashKey, cursor, scanParams);\n        List<Entry<String, String>> entryList = scanResult.getResult(); \n        if (entryList != null && !entryList.isEmpty()) {\n            for (Entry<String, String> entry : entryList) {\n                jedis.hdel(bigHashKey, entry.getKey()); \n            } \n        } \n        cursor = scanResult.getStringCursor(); \n    } while (!\"0\".equals(cursor)); \n    //删除bigkey \n    jedis.del(bigHashKey); \n}\n```\n\n<br/>\n#### 2. List删除: ltrim\n```java\npublic void delBigList(String host, int port, String password, String bigListKey) { \n    Jedis jedis = new Jedis(host, port); \n    if (password != null && !\"\".equals(password)) {\n        jedis.auth(password); \n    } \n    long llen = jedis.llen(bigListKey);\n    int counter = 0; int left = 100;\n    while (counter < llen) {\n        //每次从左侧截掉100个 \n        jedis.ltrim(bigListKey, left, llen); counter += left; \n    }\n    //最终删除key \n    jedis.del(bigListKey); \n}\n```\n\n<br/>\n#### 3. Set删除: sscan + srem\n```java\npublic void delBigSet(String host, int port, String password, String bigSetKey) { \n    Jedis jedis = new Jedis(host, port); \n    if (password != null && !\"\".equals(password)) { \n        jedis.auth(password); \n    } \n    ScanParams scanParams = new ScanParams().count(100); \n    String cursor = \"0\"; \n    do { \n        ScanResult<String> scanResult = jedis.sscan(bigSetKey, cursor, scanParams); \n        List<String> memberList = scanResult.getResult(); \n        if (memberList != null && !memberList.isEmpty()) { \n            for (String member : memberList) { \n                jedis.srem(bigSetKey, member); \n            } \n        } \n        cursor = scanResult.getStringCursor(); \n    } while (!\"0\".equals(cursor)); \n    //删除bigkey \n    jedis.del(bigSetKey); \n}\n```\n\n<br/>\n#### 4. SortedSet删除: zscan + zrem\n```java\npublic void delBigZset(String host, int port, String password, String bigZsetKey) { \n    Jedis jedis = new Jedis(host, port); \n    if (password != null && !\"\".equals(password)) { \n        jedis.auth(password); \n    } \n    ScanParams scanParams = new ScanParams().count(100); \n    String cursor = \"0\"; \n    do { \n        ScanResult<Tuple> scanResult = jedis.zscan(bigZsetKey, cursor, scanParams); \n        List<Tuple> tupleList = scanResult.getResult(); \n        if (tupleList != null && !tupleList.isEmpty()) { \n            for (Tuple tuple : tupleList) { \n                jedis.zrem(bigZsetKey, tuple.getElement()); \n            } \n        } \n        cursor = scanResult.getStringCursor(); \n    } while (!\"0\".equals(cursor)); \n    //删除bigkey \n    jedis.del(bigZsetKey); \n}\n```\n\n\n\n<br/>\n\n---\n参考\nhttps://yq.aliyun.com/articles/531067","source":"_posts/Redis开发规范.md","raw":"---\ntitle: Redis开发规范\ndate: 2018-12-06 20:09:48\ncategories: \n    - Redis\ntags:\n    - NoSQL\n    - Redis\n---\n\n## 阿里云Redis开发规范\n\n### 一、键值设计\n\n#### 1. key名设计\n##### (1)【建议】: 可读性和可管理性\n以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id\n```\nugc:video:1\n```\n\n<!-- more -->\n\n##### (2)【建议】：简洁性\n保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如：\n```\nuser:{uid}:friends:messages:{mid}简化为u:{uid}:fr:m:{mid}。\n```\n\n##### (3)【强制】：不要包含特殊字符\n** 反例：** 包含`空格`、`换行`、`单双引号`以及其他`转义字符`\n\n<br/>\n#### 2. value设计\n##### (1)【强制】：拒绝bigkey(防止网卡流量、慢查询)\n`string`类型控制在10KB以内，`hash`、`list`、`set`、`zset`元素个数不要超过`5000`。\n\n** 反例：** `一个包含200万个元素的list。`\n\n非字符串的bigkey，不要使用del删除，使用`hscan`、`sscan`、`zscan`方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作不会不出现在慢查询中(latency可查))，[#查找方法](#2-【推荐】：big-key搜索)和[#删除方法](#五、附录：删除bigkey)\n\n##### (2)【推荐】：选择适合的数据类型。\n例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)\n\n** 反例：**\n```bash\nset user:1:name tom\nset user:1:age 19\nset user:1:favor football\n```\n\n** 正例: **\n```bash\nhmset user:1 name tom age 19 favor football\n```\n\n<br/>\n##### 3.【推荐】：控制key的生命周期，redis不是垃圾桶。\n建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime。\n\n\n<br/>\n### 二、命令使用\n#### 1.【推荐】 O(N)命令关注N的数量\n例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。\n\n#### 2.【推荐】：禁用命令\n禁止线上使用`keys`、`flushall`、`flushdb`等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。\n\n#### 3.【推荐】合理使用select\nredis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。\n\n#### 4.【推荐】使用批量操作提高效率\n原生命令：例如`mget`、`mset`。\n非原生命令：可以使用`pipeline`提高效率。\n但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。\n\n** 注意两者不同：**\n\n> 1. 原生是原子操作，pipeline是非原子操作。\n> 2. pipeline可以打包不同的命令，原生做不到\n> 3. pipeline需要客户端和服务端同时支持。\n\n#### 5.【建议】Redis事务功能较弱，不建议过多使用\nRedis的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)\n\n#### 6.【建议】Redis集群版本在使用Lua上有特殊要求：\n\n1.所有key都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的redis命令，key的位置，必须是KEYS array, 否则直接返回error，\"-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS array\\r\\n\"\n\n2.所有key，必须在1个slot上，否则直接返回error, \"-ERR eval/evalsha command keys must in same slot\\r\\n\"\n\n#### 7.【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\n\n<br/>\n### 三、客户端使用\n#### 1.【推荐】\n避免多个应用使用一个Redis实例\n\n正例：不相干的业务拆分，公共数据做服务化。\n\n#### 2.【推荐】\n使用带有连接池的数据库，可以有效控制连接，同时提高效率，标准使用方式：\n\n执行命令如下：\n```java\nJedis jedis = null;\ntry {\n    jedis = jedisPool.getResource();\n    //具体的命令\n    jedis.executeCommand();\n} catch (Exception e) {\n    logger.error(\"op key {} error: \" + e.getMessage(), key, e);\n} finally {\n    //注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。\n    if (jedis != null) jedis.close();\n}\n```\n\n下面是JedisPool优化方法的文章:\n\n[Jedis常见异常汇总](https://yq.aliyun.com/articles/236384)\n[JedisPool资源池优化](https://yq.aliyun.com/articles/236383)\n\n\n#### 3.【建议】\n高并发下建议客户端添加熔断功能(例如netflix hystrix)\n\n#### 4.【推荐】\n设置合理的密码，如有必要可以使用SSL加密访问（阿里云Redis支持）\n\n#### 5.【建议】\n根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。\n\n默认策略是volatile-lru，即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。\n\n其他策略如下：\n> `allkeys-lru`：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。\n> `allkeys-random`：随机删除所有键，直到腾出足够空间为止。\n> `volatile-random`: 随机删除过期键，直到腾出足够空间为止。\n> `volatile-ttl`：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。\n> `noeviction`：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息\"(error) OOM command not allowed when used memory\"，此时Redis只响应读操作。\n\n<br/>\n### 四、相关工具\n#### 1.【推荐】：数据同步\nredis间数据同步可以使用：redis-port\n\n#### 2.【推荐】：big key搜索\n[redis大key搜索工具](https://yq.aliyun.com/articles/117042)\n\n#### 3.【推荐】：热点key寻找(内部实现使用monitor，所以建议短时间使用)\n[facebook的redis-faina](https://github.com/facebookarchive/redis-faina)\n\n<br/>\n### 五、附录：删除bigkey\n\n> 1. 下面操作可以使用pipeline加速。 2. redis 4.0已经支持key的异步删除，欢迎使用。\n\n#### 1. Hash删除: hscan + hdel\n```java\npublic void delBigHash(String host, int port, String password, String bigHashKey) { \n    Jedis jedis = new Jedis(host, port); \n    if (password != null && !\"\".equals(password)) {\n        jedis.auth(password); \n    } \n    ScanParams scanParams = new ScanParams().count(100); \n    String cursor = \"0\"; \n    do { \n        ScanResult<Entry<String, String>> scanResult = jedis.hscan(bigHashKey, cursor, scanParams);\n        List<Entry<String, String>> entryList = scanResult.getResult(); \n        if (entryList != null && !entryList.isEmpty()) {\n            for (Entry<String, String> entry : entryList) {\n                jedis.hdel(bigHashKey, entry.getKey()); \n            } \n        } \n        cursor = scanResult.getStringCursor(); \n    } while (!\"0\".equals(cursor)); \n    //删除bigkey \n    jedis.del(bigHashKey); \n}\n```\n\n<br/>\n#### 2. List删除: ltrim\n```java\npublic void delBigList(String host, int port, String password, String bigListKey) { \n    Jedis jedis = new Jedis(host, port); \n    if (password != null && !\"\".equals(password)) {\n        jedis.auth(password); \n    } \n    long llen = jedis.llen(bigListKey);\n    int counter = 0; int left = 100;\n    while (counter < llen) {\n        //每次从左侧截掉100个 \n        jedis.ltrim(bigListKey, left, llen); counter += left; \n    }\n    //最终删除key \n    jedis.del(bigListKey); \n}\n```\n\n<br/>\n#### 3. Set删除: sscan + srem\n```java\npublic void delBigSet(String host, int port, String password, String bigSetKey) { \n    Jedis jedis = new Jedis(host, port); \n    if (password != null && !\"\".equals(password)) { \n        jedis.auth(password); \n    } \n    ScanParams scanParams = new ScanParams().count(100); \n    String cursor = \"0\"; \n    do { \n        ScanResult<String> scanResult = jedis.sscan(bigSetKey, cursor, scanParams); \n        List<String> memberList = scanResult.getResult(); \n        if (memberList != null && !memberList.isEmpty()) { \n            for (String member : memberList) { \n                jedis.srem(bigSetKey, member); \n            } \n        } \n        cursor = scanResult.getStringCursor(); \n    } while (!\"0\".equals(cursor)); \n    //删除bigkey \n    jedis.del(bigSetKey); \n}\n```\n\n<br/>\n#### 4. SortedSet删除: zscan + zrem\n```java\npublic void delBigZset(String host, int port, String password, String bigZsetKey) { \n    Jedis jedis = new Jedis(host, port); \n    if (password != null && !\"\".equals(password)) { \n        jedis.auth(password); \n    } \n    ScanParams scanParams = new ScanParams().count(100); \n    String cursor = \"0\"; \n    do { \n        ScanResult<Tuple> scanResult = jedis.zscan(bigZsetKey, cursor, scanParams); \n        List<Tuple> tupleList = scanResult.getResult(); \n        if (tupleList != null && !tupleList.isEmpty()) { \n            for (Tuple tuple : tupleList) { \n                jedis.zrem(bigZsetKey, tuple.getElement()); \n            } \n        } \n        cursor = scanResult.getStringCursor(); \n    } while (!\"0\".equals(cursor)); \n    //删除bigkey \n    jedis.del(bigZsetKey); \n}\n```\n\n\n\n<br/>\n\n---\n参考\nhttps://yq.aliyun.com/articles/531067","slug":"Redis开发规范","published":1,"updated":"2019-11-02T07:12:18.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y5z003nt6s6l4jf6g5y","content":"<h2 id=\"阿里云Redis开发规范\"><a href=\"#阿里云Redis开发规范\" class=\"headerlink\" title=\"阿里云Redis开发规范\"></a>阿里云Redis开发规范</h2><h3 id=\"一、键值设计\"><a href=\"#一、键值设计\" class=\"headerlink\" title=\"一、键值设计\"></a>一、键值设计</h3><h4 id=\"1-key名设计\"><a href=\"#1-key名设计\" class=\"headerlink\" title=\"1. key名设计\"></a>1. key名设计</h4><h5 id=\"1-【建议】-可读性和可管理性\"><a href=\"#1-【建议】-可读性和可管理性\" class=\"headerlink\" title=\"(1)【建议】: 可读性和可管理性\"></a>(1)【建议】: 可读性和可管理性</h5><p>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ugc:video:1</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h5 id=\"2-【建议】：简洁性\"><a href=\"#2-【建议】：简洁性\" class=\"headerlink\" title=\"(2)【建议】：简洁性\"></a>(2)【建议】：简洁性</h5><p>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user:&#123;uid&#125;:friends:messages:&#123;mid&#125;简化为u:&#123;uid&#125;:fr:m:&#123;mid&#125;。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-【强制】：不要包含特殊字符\"><a href=\"#3-【强制】：不要包含特殊字符\" class=\"headerlink\" title=\"(3)【强制】：不要包含特殊字符\"></a>(3)【强制】：不要包含特殊字符</h5><p><strong> 反例：</strong> 包含<code>空格</code>、<code>换行</code>、<code>单双引号</code>以及其他<code>转义字符</code></p>\n<p><br></p>\n<h4 id=\"2-value设计\"><a href=\"#2-value设计\" class=\"headerlink\" title=\"2. value设计\"></a>2. value设计</h4><h5 id=\"1-【强制】：拒绝bigkey-防止网卡流量、慢查询\"><a href=\"#1-【强制】：拒绝bigkey-防止网卡流量、慢查询\" class=\"headerlink\" title=\"(1)【强制】：拒绝bigkey(防止网卡流量、慢查询)\"></a>(1)【强制】：拒绝bigkey(防止网卡流量、慢查询)</h5><p><code>string</code>类型控制在10KB以内，<code>hash</code>、<code>list</code>、<code>set</code>、<code>zset</code>元素个数不要超过<code>5000</code>。</p>\n<p><strong> 反例：</strong> <code>一个包含200万个元素的list。</code></p>\n<p>非字符串的bigkey，不要使用del删除，使用<code>hscan</code>、<code>sscan</code>、<code>zscan</code>方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作不会不出现在慢查询中(latency可查))，<a href=\"#2-【推荐】：big-key搜索\">#查找方法</a>和<a href=\"#五、附录：删除bigkey\">#删除方法</a></p>\n<h5 id=\"2-【推荐】：选择适合的数据类型。\"><a href=\"#2-【推荐】：选择适合的数据类型。\" class=\"headerlink\" title=\"(2)【推荐】：选择适合的数据类型。\"></a>(2)【推荐】：选择适合的数据类型。</h5><p>例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)</p>\n<p><strong> 反例：</strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> user:1:name tom</span><br><span class=\"line\"><span class=\"built_in\">set</span> user:1:age 19</span><br><span class=\"line\"><span class=\"built_in\">set</span> user:1:favor football</span><br></pre></td></tr></table></figure></p>\n<p><strong> 正例: </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hmset user:1 name tom age 19 favor football</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"3-【推荐】：控制key的生命周期，redis不是垃圾桶。\"><a href=\"#3-【推荐】：控制key的生命周期，redis不是垃圾桶。\" class=\"headerlink\" title=\"3.【推荐】：控制key的生命周期，redis不是垃圾桶。\"></a>3.【推荐】：控制key的生命周期，redis不是垃圾桶。</h5><p>建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime。</p>\n<p><br></p>\n<h3 id=\"二、命令使用\"><a href=\"#二、命令使用\" class=\"headerlink\" title=\"二、命令使用\"></a>二、命令使用</h3><h4 id=\"1-【推荐】-O-N-命令关注N的数量\"><a href=\"#1-【推荐】-O-N-命令关注N的数量\" class=\"headerlink\" title=\"1.【推荐】 O(N)命令关注N的数量\"></a>1.【推荐】 O(N)命令关注N的数量</h4><p>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。</p>\n<h4 id=\"2-【推荐】：禁用命令\"><a href=\"#2-【推荐】：禁用命令\" class=\"headerlink\" title=\"2.【推荐】：禁用命令\"></a>2.【推荐】：禁用命令</h4><p>禁止线上使用<code>keys</code>、<code>flushall</code>、<code>flushdb</code>等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。</p>\n<h4 id=\"3-【推荐】合理使用select\"><a href=\"#3-【推荐】合理使用select\" class=\"headerlink\" title=\"3.【推荐】合理使用select\"></a>3.【推荐】合理使用select</h4><p>redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。</p>\n<h4 id=\"4-【推荐】使用批量操作提高效率\"><a href=\"#4-【推荐】使用批量操作提高效率\" class=\"headerlink\" title=\"4.【推荐】使用批量操作提高效率\"></a>4.【推荐】使用批量操作提高效率</h4><p>原生命令：例如<code>mget</code>、<code>mset</code>。\n非原生命令：可以使用<code>pipeline</code>提高效率。\n但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。</p>\n<p><strong> 注意两者不同：</strong></p>\n<blockquote>\n<ol>\n<li>原生是原子操作，pipeline是非原子操作。</li>\n<li>pipeline可以打包不同的命令，原生做不到</li>\n<li>pipeline需要客户端和服务端同时支持。</li>\n</ol>\n</blockquote>\n<h4 id=\"5-【建议】Redis事务功能较弱，不建议过多使用\"><a href=\"#5-【建议】Redis事务功能较弱，不建议过多使用\" class=\"headerlink\" title=\"5.【建议】Redis事务功能较弱，不建议过多使用\"></a>5.【建议】Redis事务功能较弱，不建议过多使用</h4><p>Redis的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)</p>\n<h4 id=\"6-【建议】Redis集群版本在使用Lua上有特殊要求：\"><a href=\"#6-【建议】Redis集群版本在使用Lua上有特殊要求：\" class=\"headerlink\" title=\"6.【建议】Redis集群版本在使用Lua上有特殊要求：\"></a>6.【建议】Redis集群版本在使用Lua上有特殊要求：</h4><p>1.所有key都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的redis命令，key的位置，必须是KEYS array, 否则直接返回error，”-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS array\\r\\n”</p>\n<p>2.所有key，必须在1个slot上，否则直接返回error, “-ERR eval/evalsha command keys must in same slot\\r\\n”</p>\n<h4 id=\"7-【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\"><a href=\"#7-【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\" class=\"headerlink\" title=\"7.【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\"></a>7.【建议】必要情况下使用monitor命令时，要注意不要长时间使用。</h4><p><br></p>\n<h3 id=\"三、客户端使用\"><a href=\"#三、客户端使用\" class=\"headerlink\" title=\"三、客户端使用\"></a>三、客户端使用</h3><h4 id=\"1-【推荐】\"><a href=\"#1-【推荐】\" class=\"headerlink\" title=\"1.【推荐】\"></a>1.【推荐】</h4><p>避免多个应用使用一个Redis实例</p>\n<p>正例：不相干的业务拆分，公共数据做服务化。</p>\n<h4 id=\"2-【推荐】\"><a href=\"#2-【推荐】\" class=\"headerlink\" title=\"2.【推荐】\"></a>2.【推荐】</h4><p>使用带有连接池的数据库，可以有效控制连接，同时提高效率，标准使用方式：</p>\n<p>执行命令如下：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jedis jedis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    jedis = jedisPool.getResource();</span><br><span class=\"line\">    <span class=\"comment\">//具体的命令</span></span><br><span class=\"line\">    jedis.executeCommand();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    logger.error(<span class=\"string\">\"op key &#123;&#125; error: \"</span> + e.getMessage(), key, e);</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jedis != <span class=\"keyword\">null</span>) jedis.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是JedisPool优化方法的文章:</p>\n<p><a href=\"https://yq.aliyun.com/articles/236384\" target=\"_blank\" rel=\"noopener\">Jedis常见异常汇总</a>\n<a href=\"https://yq.aliyun.com/articles/236383\" target=\"_blank\" rel=\"noopener\">JedisPool资源池优化</a></p>\n<h4 id=\"3-【建议】\"><a href=\"#3-【建议】\" class=\"headerlink\" title=\"3.【建议】\"></a>3.【建议】</h4><p>高并发下建议客户端添加熔断功能(例如netflix hystrix)</p>\n<h4 id=\"4-【推荐】\"><a href=\"#4-【推荐】\" class=\"headerlink\" title=\"4.【推荐】\"></a>4.【推荐】</h4><p>设置合理的密码，如有必要可以使用SSL加密访问（阿里云Redis支持）</p>\n<h4 id=\"5-【建议】\"><a href=\"#5-【建议】\" class=\"headerlink\" title=\"5.【建议】\"></a>5.【建议】</h4><p>根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。</p>\n<p>默认策略是volatile-lru，即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。</p>\n<p>其他策略如下：</p>\n<blockquote>\n<p><code>allkeys-lru</code>：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。\n<code>allkeys-random</code>：随机删除所有键，直到腾出足够空间为止。\n<code>volatile-random</code>: 随机删除过期键，直到腾出足够空间为止。\n<code>volatile-ttl</code>：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。\n<code>noeviction</code>：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息”(error) OOM command not allowed when used memory”，此时Redis只响应读操作。</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"四、相关工具\"><a href=\"#四、相关工具\" class=\"headerlink\" title=\"四、相关工具\"></a>四、相关工具</h3><h4 id=\"1-【推荐】：数据同步\"><a href=\"#1-【推荐】：数据同步\" class=\"headerlink\" title=\"1.【推荐】：数据同步\"></a>1.【推荐】：数据同步</h4><p>redis间数据同步可以使用：redis-port</p>\n<h4 id=\"2-【推荐】：big-key搜索\"><a href=\"#2-【推荐】：big-key搜索\" class=\"headerlink\" title=\"2.【推荐】：big key搜索\"></a>2.【推荐】：big key搜索</h4><p><a href=\"https://yq.aliyun.com/articles/117042\" target=\"_blank\" rel=\"noopener\">redis大key搜索工具</a></p>\n<h4 id=\"3-【推荐】：热点key寻找-内部实现使用monitor，所以建议短时间使用\"><a href=\"#3-【推荐】：热点key寻找-内部实现使用monitor，所以建议短时间使用\" class=\"headerlink\" title=\"3.【推荐】：热点key寻找(内部实现使用monitor，所以建议短时间使用)\"></a>3.【推荐】：热点key寻找(内部实现使用monitor，所以建议短时间使用)</h4><p><a href=\"https://github.com/facebookarchive/redis-faina\" target=\"_blank\" rel=\"noopener\">facebook的redis-faina</a></p>\n<p><br></p>\n<h3 id=\"五、附录：删除bigkey\"><a href=\"#五、附录：删除bigkey\" class=\"headerlink\" title=\"五、附录：删除bigkey\"></a>五、附录：删除bigkey</h3><blockquote>\n<ol>\n<li>下面操作可以使用pipeline加速。 2. redis 4.0已经支持key的异步删除，欢迎使用。</li>\n</ol>\n</blockquote>\n<h4 id=\"1-Hash删除-hscan-hdel\"><a href=\"#1-Hash删除-hscan-hdel\" class=\"headerlink\" title=\"1. Hash删除: hscan + hdel\"></a>1. Hash删除: hscan + hdel</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigHash</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String password, String bigHashKey)</span> </span>&#123; </span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(host, port); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(password)) &#123;</span><br><span class=\"line\">        jedis.auth(password); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ScanParams scanParams = <span class=\"keyword\">new</span> ScanParams().count(<span class=\"number\">100</span>); </span><br><span class=\"line\">    String cursor = <span class=\"string\">\"0\"</span>; </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123; </span><br><span class=\"line\">        ScanResult&lt;Entry&lt;String, String&gt;&gt; scanResult = jedis.hscan(bigHashKey, cursor, scanParams);</span><br><span class=\"line\">        List&lt;Entry&lt;String, String&gt;&gt; entryList = scanResult.getResult(); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entryList != <span class=\"keyword\">null</span> &amp;&amp; !entryList.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Entry&lt;String, String&gt; entry : entryList) &#123;</span><br><span class=\"line\">                jedis.hdel(bigHashKey, entry.getKey()); </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        cursor = scanResult.getStringCursor(); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"string\">\"0\"</span>.equals(cursor)); </span><br><span class=\"line\">    <span class=\"comment\">//删除bigkey </span></span><br><span class=\"line\">    jedis.del(bigHashKey); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"2-List删除-ltrim\"><a href=\"#2-List删除-ltrim\" class=\"headerlink\" title=\"2. List删除: ltrim\"></a>2. List删除: ltrim</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigList</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String password, String bigListKey)</span> </span>&#123; </span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(host, port); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(password)) &#123;</span><br><span class=\"line\">        jedis.auth(password); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">long</span> llen = jedis.llen(bigListKey);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>; <span class=\"keyword\">int</span> left = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (counter &lt; llen) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//每次从左侧截掉100个 </span></span><br><span class=\"line\">        jedis.ltrim(bigListKey, left, llen); counter += left; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//最终删除key </span></span><br><span class=\"line\">    jedis.del(bigListKey); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"3-Set删除-sscan-srem\"><a href=\"#3-Set删除-sscan-srem\" class=\"headerlink\" title=\"3. Set删除: sscan + srem\"></a>3. Set删除: sscan + srem</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigSet</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String password, String bigSetKey)</span> </span>&#123; </span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(host, port); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(password)) &#123; </span><br><span class=\"line\">        jedis.auth(password); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ScanParams scanParams = <span class=\"keyword\">new</span> ScanParams().count(<span class=\"number\">100</span>); </span><br><span class=\"line\">    String cursor = <span class=\"string\">\"0\"</span>; </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123; </span><br><span class=\"line\">        ScanResult&lt;String&gt; scanResult = jedis.sscan(bigSetKey, cursor, scanParams); </span><br><span class=\"line\">        List&lt;String&gt; memberList = scanResult.getResult(); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (memberList != <span class=\"keyword\">null</span> &amp;&amp; !memberList.isEmpty()) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String member : memberList) &#123; </span><br><span class=\"line\">                jedis.srem(bigSetKey, member); </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        cursor = scanResult.getStringCursor(); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"string\">\"0\"</span>.equals(cursor)); </span><br><span class=\"line\">    <span class=\"comment\">//删除bigkey </span></span><br><span class=\"line\">    jedis.del(bigSetKey); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"4-SortedSet删除-zscan-zrem\"><a href=\"#4-SortedSet删除-zscan-zrem\" class=\"headerlink\" title=\"4. SortedSet删除: zscan + zrem\"></a>4. SortedSet删除: zscan + zrem</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigZset</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String password, String bigZsetKey)</span> </span>&#123; </span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(host, port); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(password)) &#123; </span><br><span class=\"line\">        jedis.auth(password); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ScanParams scanParams = <span class=\"keyword\">new</span> ScanParams().count(<span class=\"number\">100</span>); </span><br><span class=\"line\">    String cursor = <span class=\"string\">\"0\"</span>; </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123; </span><br><span class=\"line\">        ScanResult&lt;Tuple&gt; scanResult = jedis.zscan(bigZsetKey, cursor, scanParams); </span><br><span class=\"line\">        List&lt;Tuple&gt; tupleList = scanResult.getResult(); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tupleList != <span class=\"keyword\">null</span> &amp;&amp; !tupleList.isEmpty()) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Tuple tuple : tupleList) &#123; </span><br><span class=\"line\">                jedis.zrem(bigZsetKey, tuple.getElement()); </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        cursor = scanResult.getStringCursor(); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"string\">\"0\"</span>.equals(cursor)); </span><br><span class=\"line\">    <span class=\"comment\">//删除bigkey </span></span><br><span class=\"line\">    jedis.del(bigZsetKey); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://yq.aliyun.com/articles/531067\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/531067</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"阿里云Redis开发规范\"><a href=\"#阿里云Redis开发规范\" class=\"headerlink\" title=\"阿里云Redis开发规范\"></a>阿里云Redis开发规范</h2><h3 id=\"一、键值设计\"><a href=\"#一、键值设计\" class=\"headerlink\" title=\"一、键值设计\"></a>一、键值设计</h3><h4 id=\"1-key名设计\"><a href=\"#1-key名设计\" class=\"headerlink\" title=\"1. key名设计\"></a>1. key名设计</h4><h5 id=\"1-【建议】-可读性和可管理性\"><a href=\"#1-【建议】-可读性和可管理性\" class=\"headerlink\" title=\"(1)【建议】: 可读性和可管理性\"></a>(1)【建议】: 可读性和可管理性</h5><p>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ugc:video:1</span><br></pre></td></tr></table></figure></p>","more":"<h5 id=\"2-【建议】：简洁性\"><a href=\"#2-【建议】：简洁性\" class=\"headerlink\" title=\"(2)【建议】：简洁性\"></a>(2)【建议】：简洁性</h5><p>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user:&#123;uid&#125;:friends:messages:&#123;mid&#125;简化为u:&#123;uid&#125;:fr:m:&#123;mid&#125;。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-【强制】：不要包含特殊字符\"><a href=\"#3-【强制】：不要包含特殊字符\" class=\"headerlink\" title=\"(3)【强制】：不要包含特殊字符\"></a>(3)【强制】：不要包含特殊字符</h5><p><strong> 反例：</strong> 包含<code>空格</code>、<code>换行</code>、<code>单双引号</code>以及其他<code>转义字符</code></p>\n<p><br></p>\n<h4 id=\"2-value设计\"><a href=\"#2-value设计\" class=\"headerlink\" title=\"2. value设计\"></a>2. value设计</h4><h5 id=\"1-【强制】：拒绝bigkey-防止网卡流量、慢查询\"><a href=\"#1-【强制】：拒绝bigkey-防止网卡流量、慢查询\" class=\"headerlink\" title=\"(1)【强制】：拒绝bigkey(防止网卡流量、慢查询)\"></a>(1)【强制】：拒绝bigkey(防止网卡流量、慢查询)</h5><p><code>string</code>类型控制在10KB以内，<code>hash</code>、<code>list</code>、<code>set</code>、<code>zset</code>元素个数不要超过<code>5000</code>。</p>\n<p><strong> 反例：</strong> <code>一个包含200万个元素的list。</code></p>\n<p>非字符串的bigkey，不要使用del删除，使用<code>hscan</code>、<code>sscan</code>、<code>zscan</code>方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作不会不出现在慢查询中(latency可查))，<a href=\"#2-【推荐】：big-key搜索\">#查找方法</a>和<a href=\"#五、附录：删除bigkey\">#删除方法</a></p>\n<h5 id=\"2-【推荐】：选择适合的数据类型。\"><a href=\"#2-【推荐】：选择适合的数据类型。\" class=\"headerlink\" title=\"(2)【推荐】：选择适合的数据类型。\"></a>(2)【推荐】：选择适合的数据类型。</h5><p>例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)</p>\n<p><strong> 反例：</strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> user:1:name tom</span><br><span class=\"line\"><span class=\"built_in\">set</span> user:1:age 19</span><br><span class=\"line\"><span class=\"built_in\">set</span> user:1:favor football</span><br></pre></td></tr></table></figure></p>\n<p><strong> 正例: </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hmset user:1 name tom age 19 favor football</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"3-【推荐】：控制key的生命周期，redis不是垃圾桶。\"><a href=\"#3-【推荐】：控制key的生命周期，redis不是垃圾桶。\" class=\"headerlink\" title=\"3.【推荐】：控制key的生命周期，redis不是垃圾桶。\"></a>3.【推荐】：控制key的生命周期，redis不是垃圾桶。</h5><p>建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime。</p>\n<p><br></p>\n<h3 id=\"二、命令使用\"><a href=\"#二、命令使用\" class=\"headerlink\" title=\"二、命令使用\"></a>二、命令使用</h3><h4 id=\"1-【推荐】-O-N-命令关注N的数量\"><a href=\"#1-【推荐】-O-N-命令关注N的数量\" class=\"headerlink\" title=\"1.【推荐】 O(N)命令关注N的数量\"></a>1.【推荐】 O(N)命令关注N的数量</h4><p>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。</p>\n<h4 id=\"2-【推荐】：禁用命令\"><a href=\"#2-【推荐】：禁用命令\" class=\"headerlink\" title=\"2.【推荐】：禁用命令\"></a>2.【推荐】：禁用命令</h4><p>禁止线上使用<code>keys</code>、<code>flushall</code>、<code>flushdb</code>等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。</p>\n<h4 id=\"3-【推荐】合理使用select\"><a href=\"#3-【推荐】合理使用select\" class=\"headerlink\" title=\"3.【推荐】合理使用select\"></a>3.【推荐】合理使用select</h4><p>redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。</p>\n<h4 id=\"4-【推荐】使用批量操作提高效率\"><a href=\"#4-【推荐】使用批量操作提高效率\" class=\"headerlink\" title=\"4.【推荐】使用批量操作提高效率\"></a>4.【推荐】使用批量操作提高效率</h4><p>原生命令：例如<code>mget</code>、<code>mset</code>。\n非原生命令：可以使用<code>pipeline</code>提高效率。\n但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。</p>\n<p><strong> 注意两者不同：</strong></p>\n<blockquote>\n<ol>\n<li>原生是原子操作，pipeline是非原子操作。</li>\n<li>pipeline可以打包不同的命令，原生做不到</li>\n<li>pipeline需要客户端和服务端同时支持。</li>\n</ol>\n</blockquote>\n<h4 id=\"5-【建议】Redis事务功能较弱，不建议过多使用\"><a href=\"#5-【建议】Redis事务功能较弱，不建议过多使用\" class=\"headerlink\" title=\"5.【建议】Redis事务功能较弱，不建议过多使用\"></a>5.【建议】Redis事务功能较弱，不建议过多使用</h4><p>Redis的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)</p>\n<h4 id=\"6-【建议】Redis集群版本在使用Lua上有特殊要求：\"><a href=\"#6-【建议】Redis集群版本在使用Lua上有特殊要求：\" class=\"headerlink\" title=\"6.【建议】Redis集群版本在使用Lua上有特殊要求：\"></a>6.【建议】Redis集群版本在使用Lua上有特殊要求：</h4><p>1.所有key都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的redis命令，key的位置，必须是KEYS array, 否则直接返回error，”-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS array\\r\\n”</p>\n<p>2.所有key，必须在1个slot上，否则直接返回error, “-ERR eval/evalsha command keys must in same slot\\r\\n”</p>\n<h4 id=\"7-【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\"><a href=\"#7-【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\" class=\"headerlink\" title=\"7.【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\"></a>7.【建议】必要情况下使用monitor命令时，要注意不要长时间使用。</h4><p><br></p>\n<h3 id=\"三、客户端使用\"><a href=\"#三、客户端使用\" class=\"headerlink\" title=\"三、客户端使用\"></a>三、客户端使用</h3><h4 id=\"1-【推荐】\"><a href=\"#1-【推荐】\" class=\"headerlink\" title=\"1.【推荐】\"></a>1.【推荐】</h4><p>避免多个应用使用一个Redis实例</p>\n<p>正例：不相干的业务拆分，公共数据做服务化。</p>\n<h4 id=\"2-【推荐】\"><a href=\"#2-【推荐】\" class=\"headerlink\" title=\"2.【推荐】\"></a>2.【推荐】</h4><p>使用带有连接池的数据库，可以有效控制连接，同时提高效率，标准使用方式：</p>\n<p>执行命令如下：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jedis jedis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    jedis = jedisPool.getResource();</span><br><span class=\"line\">    <span class=\"comment\">//具体的命令</span></span><br><span class=\"line\">    jedis.executeCommand();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    logger.error(<span class=\"string\">\"op key &#123;&#125; error: \"</span> + e.getMessage(), key, e);</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jedis != <span class=\"keyword\">null</span>) jedis.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是JedisPool优化方法的文章:</p>\n<p><a href=\"https://yq.aliyun.com/articles/236384\" target=\"_blank\" rel=\"noopener\">Jedis常见异常汇总</a>\n<a href=\"https://yq.aliyun.com/articles/236383\" target=\"_blank\" rel=\"noopener\">JedisPool资源池优化</a></p>\n<h4 id=\"3-【建议】\"><a href=\"#3-【建议】\" class=\"headerlink\" title=\"3.【建议】\"></a>3.【建议】</h4><p>高并发下建议客户端添加熔断功能(例如netflix hystrix)</p>\n<h4 id=\"4-【推荐】\"><a href=\"#4-【推荐】\" class=\"headerlink\" title=\"4.【推荐】\"></a>4.【推荐】</h4><p>设置合理的密码，如有必要可以使用SSL加密访问（阿里云Redis支持）</p>\n<h4 id=\"5-【建议】\"><a href=\"#5-【建议】\" class=\"headerlink\" title=\"5.【建议】\"></a>5.【建议】</h4><p>根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。</p>\n<p>默认策略是volatile-lru，即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。</p>\n<p>其他策略如下：</p>\n<blockquote>\n<p><code>allkeys-lru</code>：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。\n<code>allkeys-random</code>：随机删除所有键，直到腾出足够空间为止。\n<code>volatile-random</code>: 随机删除过期键，直到腾出足够空间为止。\n<code>volatile-ttl</code>：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。\n<code>noeviction</code>：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息”(error) OOM command not allowed when used memory”，此时Redis只响应读操作。</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"四、相关工具\"><a href=\"#四、相关工具\" class=\"headerlink\" title=\"四、相关工具\"></a>四、相关工具</h3><h4 id=\"1-【推荐】：数据同步\"><a href=\"#1-【推荐】：数据同步\" class=\"headerlink\" title=\"1.【推荐】：数据同步\"></a>1.【推荐】：数据同步</h4><p>redis间数据同步可以使用：redis-port</p>\n<h4 id=\"2-【推荐】：big-key搜索\"><a href=\"#2-【推荐】：big-key搜索\" class=\"headerlink\" title=\"2.【推荐】：big key搜索\"></a>2.【推荐】：big key搜索</h4><p><a href=\"https://yq.aliyun.com/articles/117042\" target=\"_blank\" rel=\"noopener\">redis大key搜索工具</a></p>\n<h4 id=\"3-【推荐】：热点key寻找-内部实现使用monitor，所以建议短时间使用\"><a href=\"#3-【推荐】：热点key寻找-内部实现使用monitor，所以建议短时间使用\" class=\"headerlink\" title=\"3.【推荐】：热点key寻找(内部实现使用monitor，所以建议短时间使用)\"></a>3.【推荐】：热点key寻找(内部实现使用monitor，所以建议短时间使用)</h4><p><a href=\"https://github.com/facebookarchive/redis-faina\" target=\"_blank\" rel=\"noopener\">facebook的redis-faina</a></p>\n<p><br></p>\n<h3 id=\"五、附录：删除bigkey\"><a href=\"#五、附录：删除bigkey\" class=\"headerlink\" title=\"五、附录：删除bigkey\"></a>五、附录：删除bigkey</h3><blockquote>\n<ol>\n<li>下面操作可以使用pipeline加速。 2. redis 4.0已经支持key的异步删除，欢迎使用。</li>\n</ol>\n</blockquote>\n<h4 id=\"1-Hash删除-hscan-hdel\"><a href=\"#1-Hash删除-hscan-hdel\" class=\"headerlink\" title=\"1. Hash删除: hscan + hdel\"></a>1. Hash删除: hscan + hdel</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigHash</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String password, String bigHashKey)</span> </span>&#123; </span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(host, port); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(password)) &#123;</span><br><span class=\"line\">        jedis.auth(password); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ScanParams scanParams = <span class=\"keyword\">new</span> ScanParams().count(<span class=\"number\">100</span>); </span><br><span class=\"line\">    String cursor = <span class=\"string\">\"0\"</span>; </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123; </span><br><span class=\"line\">        ScanResult&lt;Entry&lt;String, String&gt;&gt; scanResult = jedis.hscan(bigHashKey, cursor, scanParams);</span><br><span class=\"line\">        List&lt;Entry&lt;String, String&gt;&gt; entryList = scanResult.getResult(); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entryList != <span class=\"keyword\">null</span> &amp;&amp; !entryList.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Entry&lt;String, String&gt; entry : entryList) &#123;</span><br><span class=\"line\">                jedis.hdel(bigHashKey, entry.getKey()); </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        cursor = scanResult.getStringCursor(); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"string\">\"0\"</span>.equals(cursor)); </span><br><span class=\"line\">    <span class=\"comment\">//删除bigkey </span></span><br><span class=\"line\">    jedis.del(bigHashKey); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"2-List删除-ltrim\"><a href=\"#2-List删除-ltrim\" class=\"headerlink\" title=\"2. List删除: ltrim\"></a>2. List删除: ltrim</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigList</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String password, String bigListKey)</span> </span>&#123; </span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(host, port); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(password)) &#123;</span><br><span class=\"line\">        jedis.auth(password); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">long</span> llen = jedis.llen(bigListKey);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>; <span class=\"keyword\">int</span> left = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (counter &lt; llen) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//每次从左侧截掉100个 </span></span><br><span class=\"line\">        jedis.ltrim(bigListKey, left, llen); counter += left; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//最终删除key </span></span><br><span class=\"line\">    jedis.del(bigListKey); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"3-Set删除-sscan-srem\"><a href=\"#3-Set删除-sscan-srem\" class=\"headerlink\" title=\"3. Set删除: sscan + srem\"></a>3. Set删除: sscan + srem</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigSet</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String password, String bigSetKey)</span> </span>&#123; </span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(host, port); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(password)) &#123; </span><br><span class=\"line\">        jedis.auth(password); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ScanParams scanParams = <span class=\"keyword\">new</span> ScanParams().count(<span class=\"number\">100</span>); </span><br><span class=\"line\">    String cursor = <span class=\"string\">\"0\"</span>; </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123; </span><br><span class=\"line\">        ScanResult&lt;String&gt; scanResult = jedis.sscan(bigSetKey, cursor, scanParams); </span><br><span class=\"line\">        List&lt;String&gt; memberList = scanResult.getResult(); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (memberList != <span class=\"keyword\">null</span> &amp;&amp; !memberList.isEmpty()) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String member : memberList) &#123; </span><br><span class=\"line\">                jedis.srem(bigSetKey, member); </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        cursor = scanResult.getStringCursor(); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"string\">\"0\"</span>.equals(cursor)); </span><br><span class=\"line\">    <span class=\"comment\">//删除bigkey </span></span><br><span class=\"line\">    jedis.del(bigSetKey); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"4-SortedSet删除-zscan-zrem\"><a href=\"#4-SortedSet删除-zscan-zrem\" class=\"headerlink\" title=\"4. SortedSet删除: zscan + zrem\"></a>4. SortedSet删除: zscan + zrem</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigZset</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String password, String bigZsetKey)</span> </span>&#123; </span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(host, port); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(password)) &#123; </span><br><span class=\"line\">        jedis.auth(password); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ScanParams scanParams = <span class=\"keyword\">new</span> ScanParams().count(<span class=\"number\">100</span>); </span><br><span class=\"line\">    String cursor = <span class=\"string\">\"0\"</span>; </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123; </span><br><span class=\"line\">        ScanResult&lt;Tuple&gt; scanResult = jedis.zscan(bigZsetKey, cursor, scanParams); </span><br><span class=\"line\">        List&lt;Tuple&gt; tupleList = scanResult.getResult(); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tupleList != <span class=\"keyword\">null</span> &amp;&amp; !tupleList.isEmpty()) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Tuple tuple : tupleList) &#123; </span><br><span class=\"line\">                jedis.zrem(bigZsetKey, tuple.getElement()); </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        cursor = scanResult.getStringCursor(); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"string\">\"0\"</span>.equals(cursor)); </span><br><span class=\"line\">    <span class=\"comment\">//删除bigkey </span></span><br><span class=\"line\">    jedis.del(bigZsetKey); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://yq.aliyun.com/articles/531067\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/531067</a></p>"},{"title":"Redis教程","date":"2018-12-05T02:59:05.000Z","_content":"\n\nRedis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 `字符串（strings）`， `散列（hashes）`， `列表（lists）`， `集合（sets）`， `有序集合（sorted sets）` 与范围查询， `bitmaps`， `hyperloglogs` 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。\n\n\n<!-- more -->\n---\n\n<br/>\n\n如果自己本地没有安装Redis，可以使用在线Reids。\nRedis 在线测试：http://try.redis.io/\n\n<br/>\n### 数据类型\nRedis支持五种数据类型：`string`（字符串）、`list`（列表）、`hash`（哈希）、`set`（集合）及`zset`(sorted set：有序集合)。\n\n\n** 1、String（字符串） **\n```\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> GET mykey\n\"Hello\"\n```\n\n\n** 2、List（列表）** \n```bash\nredis> LPUSH mylist \"world\"\n(integer) 1\nredis> LPUSH mylist \"hello\"\n(integer) 2\nredis> LRANGE mylist 0 -1\n1) \"hello\"\n2) \"world\"\n```\n\n列表的最大长度为`2^32 - 1`个元素(`4294967295`，每个列表可容纳超过`40亿`个元素)\n\n** 3、Hash（哈希）**\n```bash\nredis> HMSET myhash field1 \"Hello\" field2 \"World\"\n\"OK\"\nredis> HGET myhash field1\n\"Hello\"\nredis> HGET myhash field2\n\"World\"\n```\n\n\n** 4、Set（集合）**\n```bash\nredis> SADD myset \"Hello\"\n(integer) 1\nredis> SADD myset \"World\"\n(integer) 1\nredis> SADD myset \"World\"\n(integer) 0\nredis> SMEMBERS myset\n1) \"World\"\n2) \"Hello\"\n```\n\n** 5、ZSET(sorted set：有序集合)**\n```bash\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 1 \"uno\"\n(integer) 1\nredis> ZADD myzset 2 \"two\" 3 \"three\"\n(integer) 2\nredis> ZRANGE myzset 0 -1 WITHSCORES\n1) \"one\"\n2) \"1\"\n3) \"uno\"\n4) \"1\"\n5) \"two\"\n6) \"2\"\n7) \"three\"\n8) \"3\"\n```\n\n\n### 命令\b汇总\n\n\n\n### 事物\n\n\n\n### 发布/订阅\n\n![]()\n![]()\n\n\n\n\n\n\n\n<br/>\n\n---\n参考\nRedis官网：https://redis.io\nhttps://redisbook.readthedocs.io/en/latest/feature/pubsub.html","source":"_posts/Redis教程.md","raw":"---\ntitle: Redis教程\ndate: 2018-12-05 10:59:05\ncategories: \n    - Redis\ntags:\n    - NoSQL\n    - Redis\n---\n\n\nRedis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 `字符串（strings）`， `散列（hashes）`， `列表（lists）`， `集合（sets）`， `有序集合（sorted sets）` 与范围查询， `bitmaps`， `hyperloglogs` 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。\n\n\n<!-- more -->\n---\n\n<br/>\n\n如果自己本地没有安装Redis，可以使用在线Reids。\nRedis 在线测试：http://try.redis.io/\n\n<br/>\n### 数据类型\nRedis支持五种数据类型：`string`（字符串）、`list`（列表）、`hash`（哈希）、`set`（集合）及`zset`(sorted set：有序集合)。\n\n\n** 1、String（字符串） **\n```\nredis> SET mykey \"Hello\"\n\"OK\"\nredis> GET mykey\n\"Hello\"\n```\n\n\n** 2、List（列表）** \n```bash\nredis> LPUSH mylist \"world\"\n(integer) 1\nredis> LPUSH mylist \"hello\"\n(integer) 2\nredis> LRANGE mylist 0 -1\n1) \"hello\"\n2) \"world\"\n```\n\n列表的最大长度为`2^32 - 1`个元素(`4294967295`，每个列表可容纳超过`40亿`个元素)\n\n** 3、Hash（哈希）**\n```bash\nredis> HMSET myhash field1 \"Hello\" field2 \"World\"\n\"OK\"\nredis> HGET myhash field1\n\"Hello\"\nredis> HGET myhash field2\n\"World\"\n```\n\n\n** 4、Set（集合）**\n```bash\nredis> SADD myset \"Hello\"\n(integer) 1\nredis> SADD myset \"World\"\n(integer) 1\nredis> SADD myset \"World\"\n(integer) 0\nredis> SMEMBERS myset\n1) \"World\"\n2) \"Hello\"\n```\n\n** 5、ZSET(sorted set：有序集合)**\n```bash\nredis> ZADD myzset 1 \"one\"\n(integer) 1\nredis> ZADD myzset 1 \"uno\"\n(integer) 1\nredis> ZADD myzset 2 \"two\" 3 \"three\"\n(integer) 2\nredis> ZRANGE myzset 0 -1 WITHSCORES\n1) \"one\"\n2) \"1\"\n3) \"uno\"\n4) \"1\"\n5) \"two\"\n6) \"2\"\n7) \"three\"\n8) \"3\"\n```\n\n\n### 命令\b汇总\n\n\n\n### 事物\n\n\n\n### 发布/订阅\n\n![]()\n![]()\n\n\n\n\n\n\n\n<br/>\n\n---\n参考\nRedis官网：https://redis.io\nhttps://redisbook.readthedocs.io/en/latest/feature/pubsub.html","slug":"Redis教程","published":1,"updated":"2019-11-02T07:12:18.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y61003ot6s6upzwelp5","content":"<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <code>字符串（strings）</code>， <code>散列（hashes）</code>， <code>列表（lists）</code>， <code>集合（sets）</code>， <code>有序集合（sorted sets）</code> 与范围查询， <code>bitmaps</code>， <code>hyperloglogs</code> 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>\n<a id=\"more\"></a>\n<hr>\n<p><br></p>\n<p>如果自己本地没有安装Redis，可以使用在线Reids。\nRedis 在线测试：<a href=\"http://try.redis.io/\" target=\"_blank\" rel=\"noopener\">http://try.redis.io/</a></p>\n<p><br></p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>Redis支持五种数据类型：<code>string</code>（字符串）、<code>list</code>（列表）、<code>hash</code>（哈希）、<code>set</code>（集合）及<code>zset</code>(sorted set：有序集合)。</p>\n<p><strong> 1、String（字符串） </strong>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; SET mykey &quot;Hello&quot;</span><br><span class=\"line\">&quot;OK&quot;</span><br><span class=\"line\">redis&gt; GET mykey</span><br><span class=\"line\">&quot;Hello&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 2、List（列表）</strong> \n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; LPUSH mylist <span class=\"string\">\"world\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; LPUSH mylist <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">redis&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"world\"</span></span><br></pre></td></tr></table></figure></p>\n<p>列表的最大长度为<code>2^32 - 1</code>个元素(<code>4294967295</code>，每个列表可容纳超过<code>40亿</code>个元素)</p>\n<p><strong> 3、Hash（哈希）</strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; HMSET myhash field1 <span class=\"string\">\"Hello\"</span> field2 <span class=\"string\">\"World\"</span></span><br><span class=\"line\"><span class=\"string\">\"OK\"</span></span><br><span class=\"line\">redis&gt; HGET myhash field1</span><br><span class=\"line\"><span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">redis&gt; HGET myhash field2</span><br><span class=\"line\"><span class=\"string\">\"World\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong> 4、Set（集合）</strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; SADD myset <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; SADD myset <span class=\"string\">\"World\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; SADD myset <span class=\"string\">\"World\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">redis&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">\"World\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"Hello\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong> 5、ZSET(sorted set：有序集合)</strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; ZADD myzset 1 <span class=\"string\">\"one\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; ZADD myzset 1 <span class=\"string\">\"uno\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; ZADD myzset 2 <span class=\"string\">\"two\"</span> 3 <span class=\"string\">\"three\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">redis&gt; ZRANGE myzset 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">\"one\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"uno\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"two\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">7) <span class=\"string\">\"three\"</span></span><br><span class=\"line\">8) <span class=\"string\">\"3\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"命令汇总\"><a href=\"#命令汇总\" class=\"headerlink\" title=\"命令\b汇总\"></a>命令\b汇总</h3><h3 id=\"事物\"><a href=\"#事物\" class=\"headerlink\" title=\"事物\"></a>事物</h3><h3 id=\"发布-订阅\"><a href=\"#发布-订阅\" class=\"headerlink\" title=\"发布/订阅\"></a>发布/订阅</h3><p><img src alt>\n<img src alt></p>\n<p><br></p>\n<hr>\n<p>参考\nRedis官网：<a href=\"https://redis.io\" target=\"_blank\" rel=\"noopener\">https://redis.io</a>\n<a href=\"https://redisbook.readthedocs.io/en/latest/feature/pubsub.html\" target=\"_blank\" rel=\"noopener\">https://redisbook.readthedocs.io/en/latest/feature/pubsub.html</a></p>\n","site":{"data":{}},"excerpt":"<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <code>字符串（strings）</code>， <code>散列（hashes）</code>， <code>列表（lists）</code>， <code>集合（sets）</code>， <code>有序集合（sorted sets）</code> 与范围查询， <code>bitmaps</code>， <code>hyperloglogs</code> 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>","more":"<hr>\n<p><br></p>\n<p>如果自己本地没有安装Redis，可以使用在线Reids。\nRedis 在线测试：<a href=\"http://try.redis.io/\" target=\"_blank\" rel=\"noopener\">http://try.redis.io/</a></p>\n<p><br></p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>Redis支持五种数据类型：<code>string</code>（字符串）、<code>list</code>（列表）、<code>hash</code>（哈希）、<code>set</code>（集合）及<code>zset</code>(sorted set：有序集合)。</p>\n<p><strong> 1、String（字符串） </strong>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; SET mykey &quot;Hello&quot;</span><br><span class=\"line\">&quot;OK&quot;</span><br><span class=\"line\">redis&gt; GET mykey</span><br><span class=\"line\">&quot;Hello&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 2、List（列表）</strong> \n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; LPUSH mylist <span class=\"string\">\"world\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; LPUSH mylist <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">redis&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"world\"</span></span><br></pre></td></tr></table></figure></p>\n<p>列表的最大长度为<code>2^32 - 1</code>个元素(<code>4294967295</code>，每个列表可容纳超过<code>40亿</code>个元素)</p>\n<p><strong> 3、Hash（哈希）</strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; HMSET myhash field1 <span class=\"string\">\"Hello\"</span> field2 <span class=\"string\">\"World\"</span></span><br><span class=\"line\"><span class=\"string\">\"OK\"</span></span><br><span class=\"line\">redis&gt; HGET myhash field1</span><br><span class=\"line\"><span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">redis&gt; HGET myhash field2</span><br><span class=\"line\"><span class=\"string\">\"World\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong> 4、Set（集合）</strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; SADD myset <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; SADD myset <span class=\"string\">\"World\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; SADD myset <span class=\"string\">\"World\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">redis&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">\"World\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"Hello\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong> 5、ZSET(sorted set：有序集合)</strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; ZADD myzset 1 <span class=\"string\">\"one\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; ZADD myzset 1 <span class=\"string\">\"uno\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; ZADD myzset 2 <span class=\"string\">\"two\"</span> 3 <span class=\"string\">\"three\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">redis&gt; ZRANGE myzset 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">\"one\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"uno\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"two\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">7) <span class=\"string\">\"three\"</span></span><br><span class=\"line\">8) <span class=\"string\">\"3\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"命令汇总\"><a href=\"#命令汇总\" class=\"headerlink\" title=\"命令\b汇总\"></a>命令\b汇总</h3><h3 id=\"事物\"><a href=\"#事物\" class=\"headerlink\" title=\"事物\"></a>事物</h3><h3 id=\"发布-订阅\"><a href=\"#发布-订阅\" class=\"headerlink\" title=\"发布/订阅\"></a>发布/订阅</h3><p><img src alt>\n<img src alt></p>\n<p><br></p>\n<hr>\n<p>参考\nRedis官网：<a href=\"https://redis.io\" target=\"_blank\" rel=\"noopener\">https://redis.io</a>\n<a href=\"https://redisbook.readthedocs.io/en/latest/feature/pubsub.html\" target=\"_blank\" rel=\"noopener\">https://redisbook.readthedocs.io/en/latest/feature/pubsub.html</a></p>"},{"title":"Redis设计与实现","date":"2018-12-06T02:19:30.000Z","_content":"\n\n## 数据结构\n\n`Redis`键值对都是`对象(object)`组成，理解对象所使用的数据结构，你更加好理解和使用`Redis`\n\n下面剖析对象所使用的`数据结构`：`简单动态字符串` `链表` `字典` `跳跃表` `整数集合` `压缩列表` 6种数据结构\n\n<!-- more -->\n\n<br/>\n### 简单动态字符串(simple dynamic string, SDS)\n\n#### 源码解析\n```c\nstruct sdshdr {\n\n    // 记录 buf 数组中已使用字节的数量\n    // 等于 SDS 所保存字符串的长度\n    int len;\n\n    // 记录 buf 数组中未使用字节的数量\n    int free;\n\n    // 字节数组，用于保存字符串\n    char buf[];\n};\n```\n\n- `free` 属性的值为 0 ， 表示这个 SDS 没有分配任何未使用空间。\n- `len` 属性的值为 5 ， 表示这个 SDS 保存了一个五字节长的字符串。\n- `buf` 属性是一个 char 类型的数组， 数组的前五个字节分别保存了 'R' 、 'e' 、 'd' 、 'i' 、 's' 五个字符， 而最后一个字节则保存了空字符 '\\0' 。\n\n![](graphviz-72760f6945c3742eca0df91a91cc379168eda82d.png)\n\n\n#### `SDS`比`C`字符串区别\n\n| C 字符串\t| SDS | \n| :--------: | :-----: |\n| 获取字符串长度的复杂度为 O(N)  | 获取字符串长度的复杂度为 O(1) |\n| API 是不安全的，可能会造成缓冲区溢出 |\tAPI 是安全的，不会造成缓冲区溢出|\n| 修改字符串长度 N 次必然需要执行 N 次内存重分配 | 修改字符串长度 N 次最多需要执行 N 次内存重分配 |\n| 只能保存文本数据 | 可以保存文本或者二进制数据 |\n| 可以使用所有 <string.h> 库中的函数 |\t可以使用一部分 <string.h> 库中的函数|\n\n\n<br/>\n### 链表(Linked List)\n#### 源码解析\n```c\n\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n} list;\n\n```\n\n![](graphviz-167adfc2e52e078d4c0e3c8a9eddec54551602fb.png)\n![](graphviz-5f4d8b6177061ac52d0ae05ef357fceb52e9cb90.png)\n\n\n** 特性总结 **\n> `双端：` 链表节点带有 prev 和 next 指针， 获取某个节点的前置节点和后置节点的复杂度都是 O(1) 。\n> `无环：` 表头节点的 prev 指针和表尾节点的 next 指针都指向 NULL ， 对链表的访问以 NULL 为终点。\n> `带表头指针和表尾指针：` 通过 list 结构的 head 指针和 tail 指针， 程序获取链表的表头节点和表尾节点的复杂度为 O(1) 。\n> `带链表长度计数器：` 程序使用 list 结构的 len 属性来对 list 持有的链表节点进行计数， 程序获取链表中节点数量的复杂度为 O(1) 。\n> `多态：` 链表节点使用 void* 指针来保存节点值， 并且可以通过 list 结构的 dup 、 free 、 match 三个属性为节点值设置类型特定函数， 所以链表可以用于保存各种不同类型的值。\n\n\n\n<br/>\n### 字典(Dict)\n#### 源码解析\n```c\ntypedef struct dictht {\n\n    // 哈希表数组\n    dictEntry **table;\n\n    // 哈希表大小\n    unsigned long size;\n\n    // 哈希表大小掩码，用于计算索引值\n    // 总是等于 size - 1\n    unsigned long sizemask;\n\n    // 该哈希表已有节点的数量\n    unsigned long used;\n\n} dictht;\n\ntypedef struct dictEntry {\n\n    // 键\n    void *key;\n\n    // 值\n    union {\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n    } v;\n\n    // 指向下个哈希表节点，形成链表\n    struct dictEntry *next;\n\n} dictEntry;\n```\n\n![](graphviz-bd3eecd927a4d8fc33b4a1c7f5957c52d67c5021.png)\n\n\n<br/>\n### 跳跃表(Skip List)\n#### 源码解析\n```c\ntypedef struct zskiplistNode {\n\n    // 后退指针\n    struct zskiplistNode *backward;\n\n    // 分值\n    double score;\n\n    // 成员对象\n    robj *obj;\n\n    // 层\n    struct zskiplistLevel {\n\n        // 前进指针\n        struct zskiplistNode *forward;\n\n        // 跨度\n        unsigned int span;\n\n    } level[];\n\n} zskiplistNode;\n```\n\n![](graphviz-8fc5de396a5b52c3d0b1991a1e09558ad055dd86.png)\n\n\n<br/>\n### 整数集合(Int Set)\n#### 源码解析\n```c\ntypedef struct intset {\n\n    // 编码方式\n    uint32_t encoding;\n\n    // 集合包含的元素数量\n    uint32_t length;\n\n    // 保存元素的数组\n    int8_t contents[];\n\n} intset;\n```\n\n![](graphviz-acf7fe010d7b09c5d2500c72eb555863e67ad74f)\n\n\n<br/>\n### 压缩列表(Zip List)\n#### 源码解析\n```c\n\n```\n\n\n## 过期（Expires）\n\n<!-- more -->\n\n\n## LRU\n\n** 1、需要设置最大内存限制，如：**\n```bash\nmaxmemory 100mb\n```\n\n** 2、选择策略 **\n```bash\nmaxmemory-policy noeviction\n```\n\n\n<br/>\n### Redis淘汰机制(Eviction policies)\n\n`noeviction`: 默认策略，不淘汰，如果内存已满，添加数据报错。 \n`allkeys-lru`: 在所有键中，选取最近最少使用的数据抛弃。\n`volatile-lru`: 在设置了过期时间的所有键中，选取最近最少使用的数据抛弃。\n`allkeys-random`: 在所有键中，随机抛弃。\n`volatile-random`: 在设置了过期时间的所有键，随机抛弃。\n`volatile-ttl`: 在设置了过期时间的所有键，抛弃存活时间最短的数据。\n\n\n\n\n![LRU Comparison](lru_comparison.png)\n\n\n\n<br/>\n\n---\n参考\nRedis官网：https://redis.io\n《Redis设计与实现》：http://redisbook.com/","source":"_posts/Redis设计与实现.md","raw":"---\ntitle: Redis设计与实现\ndate: 2018-12-06 10:19:30\ncategories: \n    - Redis\ntags:\n    - NoSQL\n    - Redis\n---\n\n\n## 数据结构\n\n`Redis`键值对都是`对象(object)`组成，理解对象所使用的数据结构，你更加好理解和使用`Redis`\n\n下面剖析对象所使用的`数据结构`：`简单动态字符串` `链表` `字典` `跳跃表` `整数集合` `压缩列表` 6种数据结构\n\n<!-- more -->\n\n<br/>\n### 简单动态字符串(simple dynamic string, SDS)\n\n#### 源码解析\n```c\nstruct sdshdr {\n\n    // 记录 buf 数组中已使用字节的数量\n    // 等于 SDS 所保存字符串的长度\n    int len;\n\n    // 记录 buf 数组中未使用字节的数量\n    int free;\n\n    // 字节数组，用于保存字符串\n    char buf[];\n};\n```\n\n- `free` 属性的值为 0 ， 表示这个 SDS 没有分配任何未使用空间。\n- `len` 属性的值为 5 ， 表示这个 SDS 保存了一个五字节长的字符串。\n- `buf` 属性是一个 char 类型的数组， 数组的前五个字节分别保存了 'R' 、 'e' 、 'd' 、 'i' 、 's' 五个字符， 而最后一个字节则保存了空字符 '\\0' 。\n\n![](graphviz-72760f6945c3742eca0df91a91cc379168eda82d.png)\n\n\n#### `SDS`比`C`字符串区别\n\n| C 字符串\t| SDS | \n| :--------: | :-----: |\n| 获取字符串长度的复杂度为 O(N)  | 获取字符串长度的复杂度为 O(1) |\n| API 是不安全的，可能会造成缓冲区溢出 |\tAPI 是安全的，不会造成缓冲区溢出|\n| 修改字符串长度 N 次必然需要执行 N 次内存重分配 | 修改字符串长度 N 次最多需要执行 N 次内存重分配 |\n| 只能保存文本数据 | 可以保存文本或者二进制数据 |\n| 可以使用所有 <string.h> 库中的函数 |\t可以使用一部分 <string.h> 库中的函数|\n\n\n<br/>\n### 链表(Linked List)\n#### 源码解析\n```c\n\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n} list;\n\n```\n\n![](graphviz-167adfc2e52e078d4c0e3c8a9eddec54551602fb.png)\n![](graphviz-5f4d8b6177061ac52d0ae05ef357fceb52e9cb90.png)\n\n\n** 特性总结 **\n> `双端：` 链表节点带有 prev 和 next 指针， 获取某个节点的前置节点和后置节点的复杂度都是 O(1) 。\n> `无环：` 表头节点的 prev 指针和表尾节点的 next 指针都指向 NULL ， 对链表的访问以 NULL 为终点。\n> `带表头指针和表尾指针：` 通过 list 结构的 head 指针和 tail 指针， 程序获取链表的表头节点和表尾节点的复杂度为 O(1) 。\n> `带链表长度计数器：` 程序使用 list 结构的 len 属性来对 list 持有的链表节点进行计数， 程序获取链表中节点数量的复杂度为 O(1) 。\n> `多态：` 链表节点使用 void* 指针来保存节点值， 并且可以通过 list 结构的 dup 、 free 、 match 三个属性为节点值设置类型特定函数， 所以链表可以用于保存各种不同类型的值。\n\n\n\n<br/>\n### 字典(Dict)\n#### 源码解析\n```c\ntypedef struct dictht {\n\n    // 哈希表数组\n    dictEntry **table;\n\n    // 哈希表大小\n    unsigned long size;\n\n    // 哈希表大小掩码，用于计算索引值\n    // 总是等于 size - 1\n    unsigned long sizemask;\n\n    // 该哈希表已有节点的数量\n    unsigned long used;\n\n} dictht;\n\ntypedef struct dictEntry {\n\n    // 键\n    void *key;\n\n    // 值\n    union {\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n    } v;\n\n    // 指向下个哈希表节点，形成链表\n    struct dictEntry *next;\n\n} dictEntry;\n```\n\n![](graphviz-bd3eecd927a4d8fc33b4a1c7f5957c52d67c5021.png)\n\n\n<br/>\n### 跳跃表(Skip List)\n#### 源码解析\n```c\ntypedef struct zskiplistNode {\n\n    // 后退指针\n    struct zskiplistNode *backward;\n\n    // 分值\n    double score;\n\n    // 成员对象\n    robj *obj;\n\n    // 层\n    struct zskiplistLevel {\n\n        // 前进指针\n        struct zskiplistNode *forward;\n\n        // 跨度\n        unsigned int span;\n\n    } level[];\n\n} zskiplistNode;\n```\n\n![](graphviz-8fc5de396a5b52c3d0b1991a1e09558ad055dd86.png)\n\n\n<br/>\n### 整数集合(Int Set)\n#### 源码解析\n```c\ntypedef struct intset {\n\n    // 编码方式\n    uint32_t encoding;\n\n    // 集合包含的元素数量\n    uint32_t length;\n\n    // 保存元素的数组\n    int8_t contents[];\n\n} intset;\n```\n\n![](graphviz-acf7fe010d7b09c5d2500c72eb555863e67ad74f)\n\n\n<br/>\n### 压缩列表(Zip List)\n#### 源码解析\n```c\n\n```\n\n\n## 过期（Expires）\n\n<!-- more -->\n\n\n## LRU\n\n** 1、需要设置最大内存限制，如：**\n```bash\nmaxmemory 100mb\n```\n\n** 2、选择策略 **\n```bash\nmaxmemory-policy noeviction\n```\n\n\n<br/>\n### Redis淘汰机制(Eviction policies)\n\n`noeviction`: 默认策略，不淘汰，如果内存已满，添加数据报错。 \n`allkeys-lru`: 在所有键中，选取最近最少使用的数据抛弃。\n`volatile-lru`: 在设置了过期时间的所有键中，选取最近最少使用的数据抛弃。\n`allkeys-random`: 在所有键中，随机抛弃。\n`volatile-random`: 在设置了过期时间的所有键，随机抛弃。\n`volatile-ttl`: 在设置了过期时间的所有键，抛弃存活时间最短的数据。\n\n\n\n\n![LRU Comparison](lru_comparison.png)\n\n\n\n<br/>\n\n---\n参考\nRedis官网：https://redis.io\n《Redis设计与实现》：http://redisbook.com/","slug":"Redis设计与实现","published":1,"updated":"2019-11-02T07:12:18.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y62003st6s6cqxzrh81","content":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p><code>Redis</code>键值对都是<code>对象(object)</code>组成，理解对象所使用的数据结构，你更加好理解和使用<code>Redis</code></p>\n<p>下面剖析对象所使用的<code>数据结构</code>：<code>简单动态字符串</code> <code>链表</code> <code>字典</code> <code>跳跃表</code> <code>整数集合</code> <code>压缩列表</code> 6种数据结构</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h3 id=\"简单动态字符串-simple-dynamic-string-SDS\"><a href=\"#简单动态字符串-simple-dynamic-string-SDS\" class=\"headerlink\" title=\"简单动态字符串(simple dynamic string, SDS)\"></a>简单动态字符串(simple dynamic string, SDS)</h3><h4 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录 buf 数组中已使用字节的数量</span></span><br><span class=\"line\">    <span class=\"comment\">// 等于 SDS 所保存字符串的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录 buf 数组中未使用字节的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 字节数组，用于保存字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>free</code> 属性的值为 0 ， 表示这个 SDS 没有分配任何未使用空间。</li>\n<li><code>len</code> 属性的值为 5 ， 表示这个 SDS 保存了一个五字节长的字符串。</li>\n<li><code>buf</code> 属性是一个 char 类型的数组， 数组的前五个字节分别保存了 ‘R’ 、 ‘e’ 、 ‘d’ 、 ‘i’ 、 ‘s’ 五个字符， 而最后一个字节则保存了空字符 ‘\\0’ 。</li>\n</ul>\n<p><img src=\"graphviz-72760f6945c3742eca0df91a91cc379168eda82d.png\" alt></p>\n<h4 id=\"SDS比C字符串区别\"><a href=\"#SDS比C字符串区别\" class=\"headerlink\" title=\"SDS比C字符串区别\"></a><code>SDS</code>比<code>C</code>字符串区别</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">C 字符串</th>\n<th style=\"text-align:center\">SDS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">获取字符串长度的复杂度为 O(N)</td>\n<td style=\"text-align:center\">获取字符串长度的复杂度为 O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">API 是不安全的，可能会造成缓冲区溢出</td>\n<td style=\"text-align:center\">API 是安全的，不会造成缓冲区溢出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">修改字符串长度 N 次必然需要执行 N 次内存重分配</td>\n<td style=\"text-align:center\">修改字符串长度 N 次最多需要执行 N 次内存重分配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">只能保存文本数据</td>\n<td style=\"text-align:center\">可以保存文本或者二进制数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可以使用所有 &lt;string.h&gt; 库中的函数</td>\n<td style=\"text-align:center\">可以使用一部分 &lt;string.h&gt; 库中的函数</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"链表-Linked-List\"><a href=\"#链表-Linked-List\" class=\"headerlink\" title=\"链表(Linked List)\"></a>链表(Linked List)</h3><h4 id=\"源码解析-1\"><a href=\"#源码解析-1\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表所包含的节点数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值释放函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值对比函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"graphviz-167adfc2e52e078d4c0e3c8a9eddec54551602fb.png\" alt>\n<img src=\"graphviz-5f4d8b6177061ac52d0ae05ef357fceb52e9cb90.png\" alt></p>\n<p><strong> 特性总结 </strong></p>\n<blockquote>\n<p><code>双端：</code> 链表节点带有 prev 和 next 指针， 获取某个节点的前置节点和后置节点的复杂度都是 O(1) 。\n<code>无环：</code> 表头节点的 prev 指针和表尾节点的 next 指针都指向 NULL ， 对链表的访问以 NULL 为终点。\n<code>带表头指针和表尾指针：</code> 通过 list 结构的 head 指针和 tail 指针， 程序获取链表的表头节点和表尾节点的复杂度为 O(1) 。\n<code>带链表长度计数器：</code> 程序使用 list 结构的 len 属性来对 list 持有的链表节点进行计数， 程序获取链表中节点数量的复杂度为 O(1) 。\n<code>多态：</code> 链表节点使用 void* 指针来保存节点值， 并且可以通过 list 结构的 dup 、 free 、 match 三个属性为节点值设置类型特定函数， 所以链表可以用于保存各种不同类型的值。</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"字典-Dict\"><a href=\"#字典-Dict\" class=\"headerlink\" title=\"字典(Dict)\"></a>字典(Dict)</h3><h4 id=\"源码解析-2\"><a href=\"#源码解析-2\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictht</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 哈希表数组</span></span><br><span class=\"line\">    dictEntry **table;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 哈希表大小</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 哈希表大小掩码，用于计算索引值</span></span><br><span class=\"line\">    <span class=\"comment\">// 总是等于 size - 1</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sizemask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该哈希表已有节点的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> used;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; dictht;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 键</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 值</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *val;</span><br><span class=\"line\">        <span class=\"keyword\">uint64_t</span> u64;</span><br><span class=\"line\">        <span class=\"keyword\">int64_t</span> s64;</span><br><span class=\"line\">    &#125; v;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向下个哈希表节点，形成链表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; dictEntry;</span><br></pre></td></tr></table></figure>\n<p><img src=\"graphviz-bd3eecd927a4d8fc33b4a1c7f5957c52d67c5021.png\" alt></p>\n<p><br></p>\n<h3 id=\"跳跃表-Skip-List\"><a href=\"#跳跃表-Skip-List\" class=\"headerlink\" title=\"跳跃表(Skip List)\"></a>跳跃表(Skip List)</h3><h4 id=\"源码解析-3\"><a href=\"#源码解析-3\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后退指针</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> *<span class=\"title\">backward</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分值</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> score;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 成员对象</span></span><br><span class=\"line\">    robj *obj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 层</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistLevel</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 前进指针</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> *<span class=\"title\">forward</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 跨度</span></span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> span;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; level[];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure>\n<p><img src=\"graphviz-8fc5de396a5b52c3d0b1991a1e09558ad055dd86.png\" alt></p>\n<p><br></p>\n<h3 id=\"整数集合-Int-Set\"><a href=\"#整数集合-Int-Set\" class=\"headerlink\" title=\"整数集合(Int Set)\"></a>整数集合(Int Set)</h3><h4 id=\"源码解析-4\"><a href=\"#源码解析-4\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">intset</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 编码方式</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> encoding;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 集合包含的元素数量</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存元素的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int8_t</span> contents[];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; intset;</span><br></pre></td></tr></table></figure>\n<p><img src=\"graphviz-acf7fe010d7b09c5d2500c72eb555863e67ad74f\" alt></p>\n<p><br></p>\n<h3 id=\"压缩列表-Zip-List\"><a href=\"#压缩列表-Zip-List\" class=\"headerlink\" title=\"压缩列表(Zip List)\"></a>压缩列表(Zip List)</h3><h4 id=\"源码解析-5\"><a href=\"#源码解析-5\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"过期（Expires）\"><a href=\"#过期（Expires）\" class=\"headerlink\" title=\"过期（Expires）\"></a>过期（Expires）</h2><!-- more -->\n<h2 id=\"LRU\"><a href=\"#LRU\" class=\"headerlink\" title=\"LRU\"></a>LRU</h2><p><strong> 1、需要设置最大内存限制，如：</strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxmemory 100mb</span><br></pre></td></tr></table></figure></p>\n<p><strong> 2、选择策略 </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxmemory-policy noeviction</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Redis淘汰机制-Eviction-policies\"><a href=\"#Redis淘汰机制-Eviction-policies\" class=\"headerlink\" title=\"Redis淘汰机制(Eviction policies)\"></a>Redis淘汰机制(Eviction policies)</h3><p><code>noeviction</code>: 默认策略，不淘汰，如果内存已满，添加数据报错。 \n<code>allkeys-lru</code>: 在所有键中，选取最近最少使用的数据抛弃。\n<code>volatile-lru</code>: 在设置了过期时间的所有键中，选取最近最少使用的数据抛弃。\n<code>allkeys-random</code>: 在所有键中，随机抛弃。\n<code>volatile-random</code>: 在设置了过期时间的所有键，随机抛弃。\n<code>volatile-ttl</code>: 在设置了过期时间的所有键，抛弃存活时间最短的数据。</p>\n<p><img src=\"lru_comparison.png\" alt=\"LRU Comparison\"></p>\n<p><br></p>\n<hr>\n<p>参考\nRedis官网：<a href=\"https://redis.io\" target=\"_blank\" rel=\"noopener\">https://redis.io</a>\n《Redis设计与实现》：<a href=\"http://redisbook.com/\" target=\"_blank\" rel=\"noopener\">http://redisbook.com/</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p><code>Redis</code>键值对都是<code>对象(object)</code>组成，理解对象所使用的数据结构，你更加好理解和使用<code>Redis</code></p>\n<p>下面剖析对象所使用的<code>数据结构</code>：<code>简单动态字符串</code> <code>链表</code> <code>字典</code> <code>跳跃表</code> <code>整数集合</code> <code>压缩列表</code> 6种数据结构</p>","more":"<p><br></p>\n<h3 id=\"简单动态字符串-simple-dynamic-string-SDS\"><a href=\"#简单动态字符串-simple-dynamic-string-SDS\" class=\"headerlink\" title=\"简单动态字符串(simple dynamic string, SDS)\"></a>简单动态字符串(simple dynamic string, SDS)</h3><h4 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录 buf 数组中已使用字节的数量</span></span><br><span class=\"line\">    <span class=\"comment\">// 等于 SDS 所保存字符串的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录 buf 数组中未使用字节的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 字节数组，用于保存字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>free</code> 属性的值为 0 ， 表示这个 SDS 没有分配任何未使用空间。</li>\n<li><code>len</code> 属性的值为 5 ， 表示这个 SDS 保存了一个五字节长的字符串。</li>\n<li><code>buf</code> 属性是一个 char 类型的数组， 数组的前五个字节分别保存了 ‘R’ 、 ‘e’ 、 ‘d’ 、 ‘i’ 、 ‘s’ 五个字符， 而最后一个字节则保存了空字符 ‘\\0’ 。</li>\n</ul>\n<p><img src=\"graphviz-72760f6945c3742eca0df91a91cc379168eda82d.png\" alt></p>\n<h4 id=\"SDS比C字符串区别\"><a href=\"#SDS比C字符串区别\" class=\"headerlink\" title=\"SDS比C字符串区别\"></a><code>SDS</code>比<code>C</code>字符串区别</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">C 字符串</th>\n<th style=\"text-align:center\">SDS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">获取字符串长度的复杂度为 O(N)</td>\n<td style=\"text-align:center\">获取字符串长度的复杂度为 O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">API 是不安全的，可能会造成缓冲区溢出</td>\n<td style=\"text-align:center\">API 是安全的，不会造成缓冲区溢出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">修改字符串长度 N 次必然需要执行 N 次内存重分配</td>\n<td style=\"text-align:center\">修改字符串长度 N 次最多需要执行 N 次内存重分配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">只能保存文本数据</td>\n<td style=\"text-align:center\">可以保存文本或者二进制数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可以使用所有 &lt;string.h&gt; 库中的函数</td>\n<td style=\"text-align:center\">可以使用一部分 &lt;string.h&gt; 库中的函数</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"链表-Linked-List\"><a href=\"#链表-Linked-List\" class=\"headerlink\" title=\"链表(Linked List)\"></a>链表(Linked List)</h3><h4 id=\"源码解析-1\"><a href=\"#源码解析-1\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表所包含的节点数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值释放函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值对比函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"graphviz-167adfc2e52e078d4c0e3c8a9eddec54551602fb.png\" alt>\n<img src=\"graphviz-5f4d8b6177061ac52d0ae05ef357fceb52e9cb90.png\" alt></p>\n<p><strong> 特性总结 </strong></p>\n<blockquote>\n<p><code>双端：</code> 链表节点带有 prev 和 next 指针， 获取某个节点的前置节点和后置节点的复杂度都是 O(1) 。\n<code>无环：</code> 表头节点的 prev 指针和表尾节点的 next 指针都指向 NULL ， 对链表的访问以 NULL 为终点。\n<code>带表头指针和表尾指针：</code> 通过 list 结构的 head 指针和 tail 指针， 程序获取链表的表头节点和表尾节点的复杂度为 O(1) 。\n<code>带链表长度计数器：</code> 程序使用 list 结构的 len 属性来对 list 持有的链表节点进行计数， 程序获取链表中节点数量的复杂度为 O(1) 。\n<code>多态：</code> 链表节点使用 void* 指针来保存节点值， 并且可以通过 list 结构的 dup 、 free 、 match 三个属性为节点值设置类型特定函数， 所以链表可以用于保存各种不同类型的值。</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"字典-Dict\"><a href=\"#字典-Dict\" class=\"headerlink\" title=\"字典(Dict)\"></a>字典(Dict)</h3><h4 id=\"源码解析-2\"><a href=\"#源码解析-2\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictht</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 哈希表数组</span></span><br><span class=\"line\">    dictEntry **table;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 哈希表大小</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 哈希表大小掩码，用于计算索引值</span></span><br><span class=\"line\">    <span class=\"comment\">// 总是等于 size - 1</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sizemask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该哈希表已有节点的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> used;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; dictht;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 键</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 值</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *val;</span><br><span class=\"line\">        <span class=\"keyword\">uint64_t</span> u64;</span><br><span class=\"line\">        <span class=\"keyword\">int64_t</span> s64;</span><br><span class=\"line\">    &#125; v;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向下个哈希表节点，形成链表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; dictEntry;</span><br></pre></td></tr></table></figure>\n<p><img src=\"graphviz-bd3eecd927a4d8fc33b4a1c7f5957c52d67c5021.png\" alt></p>\n<p><br></p>\n<h3 id=\"跳跃表-Skip-List\"><a href=\"#跳跃表-Skip-List\" class=\"headerlink\" title=\"跳跃表(Skip List)\"></a>跳跃表(Skip List)</h3><h4 id=\"源码解析-3\"><a href=\"#源码解析-3\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后退指针</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> *<span class=\"title\">backward</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分值</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> score;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 成员对象</span></span><br><span class=\"line\">    robj *obj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 层</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistLevel</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 前进指针</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> *<span class=\"title\">forward</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 跨度</span></span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> span;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; level[];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure>\n<p><img src=\"graphviz-8fc5de396a5b52c3d0b1991a1e09558ad055dd86.png\" alt></p>\n<p><br></p>\n<h3 id=\"整数集合-Int-Set\"><a href=\"#整数集合-Int-Set\" class=\"headerlink\" title=\"整数集合(Int Set)\"></a>整数集合(Int Set)</h3><h4 id=\"源码解析-4\"><a href=\"#源码解析-4\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">intset</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 编码方式</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> encoding;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 集合包含的元素数量</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存元素的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int8_t</span> contents[];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; intset;</span><br></pre></td></tr></table></figure>\n<p><img src=\"graphviz-acf7fe010d7b09c5d2500c72eb555863e67ad74f\" alt></p>\n<p><br></p>\n<h3 id=\"压缩列表-Zip-List\"><a href=\"#压缩列表-Zip-List\" class=\"headerlink\" title=\"压缩列表(Zip List)\"></a>压缩列表(Zip List)</h3><h4 id=\"源码解析-5\"><a href=\"#源码解析-5\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"过期（Expires）\"><a href=\"#过期（Expires）\" class=\"headerlink\" title=\"过期（Expires）\"></a>过期（Expires）</h2><!-- more -->\n<h2 id=\"LRU\"><a href=\"#LRU\" class=\"headerlink\" title=\"LRU\"></a>LRU</h2><p><strong> 1、需要设置最大内存限制，如：</strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxmemory 100mb</span><br></pre></td></tr></table></figure></p>\n<p><strong> 2、选择策略 </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxmemory-policy noeviction</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Redis淘汰机制-Eviction-policies\"><a href=\"#Redis淘汰机制-Eviction-policies\" class=\"headerlink\" title=\"Redis淘汰机制(Eviction policies)\"></a>Redis淘汰机制(Eviction policies)</h3><p><code>noeviction</code>: 默认策略，不淘汰，如果内存已满，添加数据报错。 \n<code>allkeys-lru</code>: 在所有键中，选取最近最少使用的数据抛弃。\n<code>volatile-lru</code>: 在设置了过期时间的所有键中，选取最近最少使用的数据抛弃。\n<code>allkeys-random</code>: 在所有键中，随机抛弃。\n<code>volatile-random</code>: 在设置了过期时间的所有键，随机抛弃。\n<code>volatile-ttl</code>: 在设置了过期时间的所有键，抛弃存活时间最短的数据。</p>\n<p><img src=\"lru_comparison.png\" alt=\"LRU Comparison\"></p>\n<p><br></p>\n<hr>\n<p>参考\nRedis官网：<a href=\"https://redis.io\" target=\"_blank\" rel=\"noopener\">https://redis.io</a>\n《Redis设计与实现》：<a href=\"http://redisbook.com/\" target=\"_blank\" rel=\"noopener\">http://redisbook.com/</a></p>"},{"title":"SQL词法分析器问题总结","date":"2019-07-18T03:04:07.000Z","_content":"\n\n## 运算符优先级\n左递归 转换成 右递归\n```\nE: T (+、-) T (+、-) T ...\nT: X (*、/、mod) X\n```\n\n## +、-\n+、- 后面是数字\n需要判断前面`Token`\n\n## Literal\n字符需要贪婪匹配算法拿到 字符串\n\n## \n\n\n","source":"_posts/SQL词法分析器问题总结.md","raw":"---\ntitle: SQL词法分析器问题总结\ndate: 2019-07-18 11:04:07\ncategories: \n    - 词法分析\ntags:\n    - 词法分析\n---\n\n\n## 运算符优先级\n左递归 转换成 右递归\n```\nE: T (+、-) T (+、-) T ...\nT: X (*、/、mod) X\n```\n\n## +、-\n+、- 后面是数字\n需要判断前面`Token`\n\n## Literal\n字符需要贪婪匹配算法拿到 字符串\n\n## \n\n\n","slug":"SQL词法分析器问题总结","published":1,"updated":"2019-11-02T07:12:18.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y63003vt6s6p0o7kbs1","content":"<h2 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h2><p>左递归 转换成 右递归\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E: T (+、-) T (+、-) T ...</span><br><span class=\"line\">T: X (*、/、mod) X</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"、\"><a href=\"#、\" class=\"headerlink\" title=\"+、-\"></a>+、-</h2><p>+、- 后面是数字\n需要判断前面<code>Token</code></p>\n<h2 id=\"Literal\"><a href=\"#Literal\" class=\"headerlink\" title=\"Literal\"></a>Literal</h2><p>字符需要贪婪匹配算法拿到 字符串</p>\n<p>## </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h2><p>左递归 转换成 右递归\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E: T (+、-) T (+、-) T ...</span><br><span class=\"line\">T: X (*、/、mod) X</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"、\"><a href=\"#、\" class=\"headerlink\" title=\"+、-\"></a>+、-</h2><p>+、- 后面是数字\n需要判断前面<code>Token</code></p>\n<h2 id=\"Literal\"><a href=\"#Literal\" class=\"headerlink\" title=\"Literal\"></a>Literal</h2><p>字符需要贪婪匹配算法拿到 字符串</p>\n<p>## </p>\n"},{"title":"SQL运算符优先级","date":"2019-06-21T08:34:56.000Z","_content":"\n\n### MySQL\n\n级别 | 运算符\n---|----\n1   |   INTERVAL\n2   |   BINARY, COLLATE\n3   |   !\n4   |   - (unary minus), ~ (unary bit inversion)\n5   |   ^\n6   |   *, /, DIV, %, MOD\n7   |   -, +\n8   |   <<, >>\n9   |   &\n10  |   &#124;  \n11  |   = (comparison), <=>, >=, >, <=, <, <>, !=, IS, LIKE, REGEXP, IN\n12  |   BETWEEN, CASE, WHEN, THEN, ELSE\n13  |   NOT\n14  |   AND, &&\n15  |   XOR\n16  |   OR, &#124;&#124;\n17  |   = (assignment), :=\n\n\n<br/>\n### Oracle\n级别   |   运算符  |   Purpose\n------|-------|--------\n1   |   +, - (as unary operators), PRIOR, CONNECT_BY_ROOT, COLLATE  |   Identity, negation, location in hierarchy\n2   |   *, /    |   Multiplication, division\n3   |   +, - (as binary operators), &#124;&#124;  |   Addition, subtraction, concatenation    \n4   |   =, !=, <, >, <=, >= |   comparison\n5   |   IS [NOT] NULL, LIKE, [NOT] BETWEEN, [NOT] IN, EXISTS, IS OF type    |   comparison\n6   |   NOT |   exponentiation, logical negation\n7   |   AND |   conjunction\n8   |   OR  |   disjunction\n\n<br/>\n### PostgreSQL\n级别    |   Operator/Element    |   Associativity   |   Description\n-------|------------------------|------------------|---------\n1   |   .   |   left    |   table/column name separator\n2   |   ::  |   left    |   PostgreSQL-style typecast\n3   |   [ ]\t|   left\t|   array element selection\n4   |   + -\t|   right\t|   unary plus, unary minus\n5   |   ^   |   left\t|   exponentiation\n6   |   * / %   |\tleft\t|   multiplication, division, modulo\n7   |   + - |   left\t|   addition, subtraction\n8   |   (any other operator)\t|   left\t|   all other native and user-defined operators\n9   |   BETWEEN IN LIKE ILIKE SIMILAR\t \t|   |   range containment, set membership, string matching\n10  |   < > = <= >= <>\t \t|   |   comparison operators\n11  |   IS ISNULL NOTNULL   |   |   IS TRUE, IS FALSE, IS NULL, IS DISTINCT FROM, etc\n12  |   NOT\t|   right\t|   logical negation\n13  |   AND\t|   left\t|   logical conjunction\n14  |   OR\t|   left\t|   logical disjunction\n\n<br/>\n### Transact-SQL\n级别 | 运算符\n---|----\n1 | ~（位非）\n2 | *（乘）、/（除）、%（取模）\n3 | +（正）、-（负）、+（加）、+（串联）、-（减）、&（位与）、^（位异或）、&#124;（位或）\n4 | =、>、<、>=、<=、<>、!=、!>、!<（比较运算符）\n5 | NOT\n6 | 和\n7 | ALL、ANY、BETWEEN、IN、LIKE、OR、SOME\n8 | =（赋值）\n\n---\n参考\n[MySQL运算符优先级](https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html)\n[Oracle运算符优先级1](https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/About-SQL-Operators.html)\n[Oracle运算符优先级2](https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/About-SQL-Conditions.html)\n[PostgreSQL运算符优先级](https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-PRECEDENCE)\n[Transact-SQL运算符优先级](https://docs.microsoft.com/zh-cn/sql/t-sql/language-elements/operator-precedence-transact-sql?view=sql-server-ver15)\n","source":"_posts/SQL运算符优先级.md","raw":"---\ntitle: SQL运算符优先级\ndate: 2019-06-21 16:34:56\ncategories: \n    - SQL\ntags:\n    - SQL\n---\n\n\n### MySQL\n\n级别 | 运算符\n---|----\n1   |   INTERVAL\n2   |   BINARY, COLLATE\n3   |   !\n4   |   - (unary minus), ~ (unary bit inversion)\n5   |   ^\n6   |   *, /, DIV, %, MOD\n7   |   -, +\n8   |   <<, >>\n9   |   &\n10  |   &#124;  \n11  |   = (comparison), <=>, >=, >, <=, <, <>, !=, IS, LIKE, REGEXP, IN\n12  |   BETWEEN, CASE, WHEN, THEN, ELSE\n13  |   NOT\n14  |   AND, &&\n15  |   XOR\n16  |   OR, &#124;&#124;\n17  |   = (assignment), :=\n\n\n<br/>\n### Oracle\n级别   |   运算符  |   Purpose\n------|-------|--------\n1   |   +, - (as unary operators), PRIOR, CONNECT_BY_ROOT, COLLATE  |   Identity, negation, location in hierarchy\n2   |   *, /    |   Multiplication, division\n3   |   +, - (as binary operators), &#124;&#124;  |   Addition, subtraction, concatenation    \n4   |   =, !=, <, >, <=, >= |   comparison\n5   |   IS [NOT] NULL, LIKE, [NOT] BETWEEN, [NOT] IN, EXISTS, IS OF type    |   comparison\n6   |   NOT |   exponentiation, logical negation\n7   |   AND |   conjunction\n8   |   OR  |   disjunction\n\n<br/>\n### PostgreSQL\n级别    |   Operator/Element    |   Associativity   |   Description\n-------|------------------------|------------------|---------\n1   |   .   |   left    |   table/column name separator\n2   |   ::  |   left    |   PostgreSQL-style typecast\n3   |   [ ]\t|   left\t|   array element selection\n4   |   + -\t|   right\t|   unary plus, unary minus\n5   |   ^   |   left\t|   exponentiation\n6   |   * / %   |\tleft\t|   multiplication, division, modulo\n7   |   + - |   left\t|   addition, subtraction\n8   |   (any other operator)\t|   left\t|   all other native and user-defined operators\n9   |   BETWEEN IN LIKE ILIKE SIMILAR\t \t|   |   range containment, set membership, string matching\n10  |   < > = <= >= <>\t \t|   |   comparison operators\n11  |   IS ISNULL NOTNULL   |   |   IS TRUE, IS FALSE, IS NULL, IS DISTINCT FROM, etc\n12  |   NOT\t|   right\t|   logical negation\n13  |   AND\t|   left\t|   logical conjunction\n14  |   OR\t|   left\t|   logical disjunction\n\n<br/>\n### Transact-SQL\n级别 | 运算符\n---|----\n1 | ~（位非）\n2 | *（乘）、/（除）、%（取模）\n3 | +（正）、-（负）、+（加）、+（串联）、-（减）、&（位与）、^（位异或）、&#124;（位或）\n4 | =、>、<、>=、<=、<>、!=、!>、!<（比较运算符）\n5 | NOT\n6 | 和\n7 | ALL、ANY、BETWEEN、IN、LIKE、OR、SOME\n8 | =（赋值）\n\n---\n参考\n[MySQL运算符优先级](https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html)\n[Oracle运算符优先级1](https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/About-SQL-Operators.html)\n[Oracle运算符优先级2](https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/About-SQL-Conditions.html)\n[PostgreSQL运算符优先级](https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-PRECEDENCE)\n[Transact-SQL运算符优先级](https://docs.microsoft.com/zh-cn/sql/t-sql/language-elements/operator-precedence-transact-sql?view=sql-server-ver15)\n","slug":"SQL运算符优先级","published":1,"updated":"2019-11-02T07:12:18.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y660040t6s6i66fvw1k","content":"<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><table>\n<thead>\n<tr>\n<th>级别</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>INTERVAL</td>\n</tr>\n<tr>\n<td>2</td>\n<td>BINARY, COLLATE</td>\n</tr>\n<tr>\n<td>3</td>\n<td>!</td>\n</tr>\n<tr>\n<td>4</td>\n<td>- (unary minus), ~ (unary bit inversion)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>^</td>\n</tr>\n<tr>\n<td>6</td>\n<td>*, /, DIV, %, MOD</td>\n</tr>\n<tr>\n<td>7</td>\n<td>-, +</td>\n</tr>\n<tr>\n<td>8</td>\n<td>&lt;&lt;, &gt;&gt;</td>\n</tr>\n<tr>\n<td>9</td>\n<td>&amp;</td>\n</tr>\n<tr>\n<td>10</td>\n<td>&#124;  </td>\n</tr>\n<tr>\n<td>11</td>\n<td>= (comparison), &lt;=&gt;, &gt;=, &gt;, &lt;=, &lt;, &lt;&gt;, !=, IS, LIKE, REGEXP, IN</td>\n</tr>\n<tr>\n<td>12</td>\n<td>BETWEEN, CASE, WHEN, THEN, ELSE</td>\n</tr>\n<tr>\n<td>13</td>\n<td>NOT</td>\n</tr>\n<tr>\n<td>14</td>\n<td>AND, &amp;&amp;</td>\n</tr>\n<tr>\n<td>15</td>\n<td>XOR</td>\n</tr>\n<tr>\n<td>16</td>\n<td>OR, &#124;&#124;</td>\n</tr>\n<tr>\n<td>17</td>\n<td>= (assignment), :=</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h3><table>\n<thead>\n<tr>\n<th>级别</th>\n<th>运算符</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>+, - (as unary operators), PRIOR, CONNECT_BY_ROOT, COLLATE</td>\n<td>Identity, negation, location in hierarchy</td>\n</tr>\n<tr>\n<td>2</td>\n<td>*, /</td>\n<td>Multiplication, division</td>\n</tr>\n<tr>\n<td>3</td>\n<td>+, - (as binary operators), &#124;&#124;</td>\n<td>Addition, subtraction, concatenation    </td>\n</tr>\n<tr>\n<td>4</td>\n<td>=, !=, &lt;, &gt;, &lt;=, &gt;=</td>\n<td>comparison</td>\n</tr>\n<tr>\n<td>5</td>\n<td>IS [NOT] NULL, LIKE, [NOT] BETWEEN, [NOT] IN, EXISTS, IS OF type</td>\n<td>comparison</td>\n</tr>\n<tr>\n<td>6</td>\n<td>NOT</td>\n<td>exponentiation, logical negation</td>\n</tr>\n<tr>\n<td>7</td>\n<td>AND</td>\n<td>conjunction</td>\n</tr>\n<tr>\n<td>8</td>\n<td>OR</td>\n<td>disjunction</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h3><table>\n<thead>\n<tr>\n<th>级别</th>\n<th>Operator/Element</th>\n<th>Associativity</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>.</td>\n<td>left</td>\n<td>table/column name separator</td>\n</tr>\n<tr>\n<td>2</td>\n<td>::</td>\n<td>left</td>\n<td>PostgreSQL-style typecast</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[ ]</td>\n<td>left</td>\n<td>array element selection</td>\n</tr>\n<tr>\n<td>4</td>\n<td>+ -</td>\n<td>right</td>\n<td>unary plus, unary minus</td>\n</tr>\n<tr>\n<td>5</td>\n<td>^</td>\n<td>left</td>\n<td>exponentiation</td>\n</tr>\n<tr>\n<td>6</td>\n<td>* / %</td>\n<td>left</td>\n<td>multiplication, division, modulo</td>\n</tr>\n<tr>\n<td>7</td>\n<td>+ -</td>\n<td>left</td>\n<td>addition, subtraction</td>\n</tr>\n<tr>\n<td>8</td>\n<td>(any other operator)</td>\n<td>left</td>\n<td>all other native and user-defined operators</td>\n</tr>\n<tr>\n<td>9</td>\n<td>BETWEEN IN LIKE ILIKE SIMILAR</td>\n<td></td>\n<td>range containment, set membership, string matching</td>\n</tr>\n<tr>\n<td>10</td>\n<td>&lt; &gt; = &lt;= &gt;= &lt;&gt;</td>\n<td></td>\n<td>comparison operators</td>\n</tr>\n<tr>\n<td>11</td>\n<td>IS ISNULL NOTNULL</td>\n<td></td>\n<td>IS TRUE, IS FALSE, IS NULL, IS DISTINCT FROM, etc</td>\n</tr>\n<tr>\n<td>12</td>\n<td>NOT</td>\n<td>right</td>\n<td>logical negation</td>\n</tr>\n<tr>\n<td>13</td>\n<td>AND</td>\n<td>left</td>\n<td>logical conjunction</td>\n</tr>\n<tr>\n<td>14</td>\n<td>OR</td>\n<td>left</td>\n<td>logical disjunction</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"Transact-SQL\"><a href=\"#Transact-SQL\" class=\"headerlink\" title=\"Transact-SQL\"></a>Transact-SQL</h3><table>\n<thead>\n<tr>\n<th>级别</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>~（位非）</td>\n</tr>\n<tr>\n<td>2</td>\n<td>*（乘）、/（除）、%（取模）</td>\n</tr>\n<tr>\n<td>3</td>\n<td>+（正）、-（负）、+（加）、+（串联）、-（减）、&amp;（位与）、^（位异或）、&#124;（位或）</td>\n</tr>\n<tr>\n<td>4</td>\n<td>=、&gt;、&lt;、&gt;=、&lt;=、&lt;&gt;、!=、!&gt;、!&lt;（比较运算符）</td>\n</tr>\n<tr>\n<td>5</td>\n<td>NOT</td>\n</tr>\n<tr>\n<td>6</td>\n<td>和</td>\n</tr>\n<tr>\n<td>7</td>\n<td>ALL、ANY、BETWEEN、IN、LIKE、OR、SOME</td>\n</tr>\n<tr>\n<td>8</td>\n<td>=（赋值）</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>参考\n<a href=\"https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html\" target=\"_blank\" rel=\"noopener\">MySQL运算符优先级</a>\n<a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/About-SQL-Operators.html\" target=\"_blank\" rel=\"noopener\">Oracle运算符优先级1</a>\n<a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/About-SQL-Conditions.html\" target=\"_blank\" rel=\"noopener\">Oracle运算符优先级2</a>\n<a href=\"https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-PRECEDENCE\" target=\"_blank\" rel=\"noopener\">PostgreSQL运算符优先级</a>\n<a href=\"https://docs.microsoft.com/zh-cn/sql/t-sql/language-elements/operator-precedence-transact-sql?view=sql-server-ver15\" target=\"_blank\" rel=\"noopener\">Transact-SQL运算符优先级</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><table>\n<thead>\n<tr>\n<th>级别</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>INTERVAL</td>\n</tr>\n<tr>\n<td>2</td>\n<td>BINARY, COLLATE</td>\n</tr>\n<tr>\n<td>3</td>\n<td>!</td>\n</tr>\n<tr>\n<td>4</td>\n<td>- (unary minus), ~ (unary bit inversion)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>^</td>\n</tr>\n<tr>\n<td>6</td>\n<td>*, /, DIV, %, MOD</td>\n</tr>\n<tr>\n<td>7</td>\n<td>-, +</td>\n</tr>\n<tr>\n<td>8</td>\n<td>&lt;&lt;, &gt;&gt;</td>\n</tr>\n<tr>\n<td>9</td>\n<td>&amp;</td>\n</tr>\n<tr>\n<td>10</td>\n<td>&#124;  </td>\n</tr>\n<tr>\n<td>11</td>\n<td>= (comparison), &lt;=&gt;, &gt;=, &gt;, &lt;=, &lt;, &lt;&gt;, !=, IS, LIKE, REGEXP, IN</td>\n</tr>\n<tr>\n<td>12</td>\n<td>BETWEEN, CASE, WHEN, THEN, ELSE</td>\n</tr>\n<tr>\n<td>13</td>\n<td>NOT</td>\n</tr>\n<tr>\n<td>14</td>\n<td>AND, &amp;&amp;</td>\n</tr>\n<tr>\n<td>15</td>\n<td>XOR</td>\n</tr>\n<tr>\n<td>16</td>\n<td>OR, &#124;&#124;</td>\n</tr>\n<tr>\n<td>17</td>\n<td>= (assignment), :=</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h3><table>\n<thead>\n<tr>\n<th>级别</th>\n<th>运算符</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>+, - (as unary operators), PRIOR, CONNECT_BY_ROOT, COLLATE</td>\n<td>Identity, negation, location in hierarchy</td>\n</tr>\n<tr>\n<td>2</td>\n<td>*, /</td>\n<td>Multiplication, division</td>\n</tr>\n<tr>\n<td>3</td>\n<td>+, - (as binary operators), &#124;&#124;</td>\n<td>Addition, subtraction, concatenation    </td>\n</tr>\n<tr>\n<td>4</td>\n<td>=, !=, &lt;, &gt;, &lt;=, &gt;=</td>\n<td>comparison</td>\n</tr>\n<tr>\n<td>5</td>\n<td>IS [NOT] NULL, LIKE, [NOT] BETWEEN, [NOT] IN, EXISTS, IS OF type</td>\n<td>comparison</td>\n</tr>\n<tr>\n<td>6</td>\n<td>NOT</td>\n<td>exponentiation, logical negation</td>\n</tr>\n<tr>\n<td>7</td>\n<td>AND</td>\n<td>conjunction</td>\n</tr>\n<tr>\n<td>8</td>\n<td>OR</td>\n<td>disjunction</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h3><table>\n<thead>\n<tr>\n<th>级别</th>\n<th>Operator/Element</th>\n<th>Associativity</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>.</td>\n<td>left</td>\n<td>table/column name separator</td>\n</tr>\n<tr>\n<td>2</td>\n<td>::</td>\n<td>left</td>\n<td>PostgreSQL-style typecast</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[ ]</td>\n<td>left</td>\n<td>array element selection</td>\n</tr>\n<tr>\n<td>4</td>\n<td>+ -</td>\n<td>right</td>\n<td>unary plus, unary minus</td>\n</tr>\n<tr>\n<td>5</td>\n<td>^</td>\n<td>left</td>\n<td>exponentiation</td>\n</tr>\n<tr>\n<td>6</td>\n<td>* / %</td>\n<td>left</td>\n<td>multiplication, division, modulo</td>\n</tr>\n<tr>\n<td>7</td>\n<td>+ -</td>\n<td>left</td>\n<td>addition, subtraction</td>\n</tr>\n<tr>\n<td>8</td>\n<td>(any other operator)</td>\n<td>left</td>\n<td>all other native and user-defined operators</td>\n</tr>\n<tr>\n<td>9</td>\n<td>BETWEEN IN LIKE ILIKE SIMILAR</td>\n<td></td>\n<td>range containment, set membership, string matching</td>\n</tr>\n<tr>\n<td>10</td>\n<td>&lt; &gt; = &lt;= &gt;= &lt;&gt;</td>\n<td></td>\n<td>comparison operators</td>\n</tr>\n<tr>\n<td>11</td>\n<td>IS ISNULL NOTNULL</td>\n<td></td>\n<td>IS TRUE, IS FALSE, IS NULL, IS DISTINCT FROM, etc</td>\n</tr>\n<tr>\n<td>12</td>\n<td>NOT</td>\n<td>right</td>\n<td>logical negation</td>\n</tr>\n<tr>\n<td>13</td>\n<td>AND</td>\n<td>left</td>\n<td>logical conjunction</td>\n</tr>\n<tr>\n<td>14</td>\n<td>OR</td>\n<td>left</td>\n<td>logical disjunction</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"Transact-SQL\"><a href=\"#Transact-SQL\" class=\"headerlink\" title=\"Transact-SQL\"></a>Transact-SQL</h3><table>\n<thead>\n<tr>\n<th>级别</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>~（位非）</td>\n</tr>\n<tr>\n<td>2</td>\n<td>*（乘）、/（除）、%（取模）</td>\n</tr>\n<tr>\n<td>3</td>\n<td>+（正）、-（负）、+（加）、+（串联）、-（减）、&amp;（位与）、^（位异或）、&#124;（位或）</td>\n</tr>\n<tr>\n<td>4</td>\n<td>=、&gt;、&lt;、&gt;=、&lt;=、&lt;&gt;、!=、!&gt;、!&lt;（比较运算符）</td>\n</tr>\n<tr>\n<td>5</td>\n<td>NOT</td>\n</tr>\n<tr>\n<td>6</td>\n<td>和</td>\n</tr>\n<tr>\n<td>7</td>\n<td>ALL、ANY、BETWEEN、IN、LIKE、OR、SOME</td>\n</tr>\n<tr>\n<td>8</td>\n<td>=（赋值）</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>参考\n<a href=\"https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html\" target=\"_blank\" rel=\"noopener\">MySQL运算符优先级</a>\n<a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/About-SQL-Operators.html\" target=\"_blank\" rel=\"noopener\">Oracle运算符优先级1</a>\n<a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/About-SQL-Conditions.html\" target=\"_blank\" rel=\"noopener\">Oracle运算符优先级2</a>\n<a href=\"https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-PRECEDENCE\" target=\"_blank\" rel=\"noopener\">PostgreSQL运算符优先级</a>\n<a href=\"https://docs.microsoft.com/zh-cn/sql/t-sql/language-elements/operator-precedence-transact-sql?view=sql-server-ver15\" target=\"_blank\" rel=\"noopener\">Transact-SQL运算符优先级</a></p>\n"},{"title":"SpringBoot应用启动原理分析","date":"2017-06-01T00:01:01.000Z","_content":"\n\nidea：\n\n```java\n├── BOOT-INF\n│   ├── classes\n│   │   ├── application.properties\n│   │   └── com\n│   │       └── example\n│   │           └── demo\n│   │               └── DemoApplication.class\n│   └── lib\n│       ├── classmate-1.3.4.jar\n│       ├── hibernate-validator-6.0.13.Final.jar\n│       ├── ...\n├── META-INF\n│   ├── MANIFEST.MF\n│   └── maven\n│       └── com.example\n│           └── demo\n│               ├── pom.properties\n│               └── pom.xml\n└── org\n    └── springframework\n        └── boot\n            └── loader\n                ├── ExecutableArchiveLauncher.class\n                ├── JarLauncher.class\n                ├── LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration.class\n                ├── LaunchedURLClassLoader.class\n                ├── Launcher.class\n                ├── MainMethodRunner.class\n                ├── PropertiesLauncher$1.class\n                ├── PropertiesLauncher$ArchiveEntryFilter.class\n                ├── PropertiesLauncher$PrefixMatchingArchiveFilter.class\n                ├── PropertiesLauncher.class\n                ├── WarLauncher.class\n                ├── archive\n                │   ├── Archive$Entry.class\n                │   ├── Archive$EntryFilter.class\n                │   ├── Archive.class\n                │   ├── ExplodedArchive$1.class\n                │   ├── ExplodedArchive$FileEntry.class\n                │   ├── ExplodedArchive$FileEntryIterator$EntryComparator.class\n                │   ├── ExplodedArchive$FileEntryIterator.class\n                │   ├── ExplodedArchive.class\n                │   ├── JarFileArchive$EntryIterator.class\n                │   ├── JarFileArchive$JarFileEntry.class\n                │   └── JarFileArchive.class\n                ├── data\n                │   ├── RandomAccessData.class\n                │   ├── RandomAccessDataFile$1.class\n                │   ├── RandomAccessDataFile$DataInputStream.class\n                │   ├── RandomAccessDataFile$FileAccess.class\n                │   └── RandomAccessDataFile.class\n                ├── jar\n                │   ├── AsciiBytes.class\n                │   ├── Bytes.class\n                │   ├── CentralDirectoryEndRecord.class\n                │   ├── CentralDirectoryFileHeader.class\n                │   ├── CentralDirectoryParser.class\n                │   ├── CentralDirectoryVisitor.class\n                │   ├── FileHeader.class\n                │   ├── Handler.class\n                │   ├── JarEntry.class\n                │   ├── JarEntryFilter.class\n                │   ├── JarFile$1.class\n                │   ├── JarFile$2.class\n                │   ├── JarFile$JarFileType.class\n                │   ├── JarFile.class\n                │   ├── JarFileEntries$1.class\n                │   ├── JarFileEntries$EntryIterator.class\n                │   ├── JarFileEntries.class\n                │   ├── JarURLConnection$1.class\n                │   ├── JarURLConnection$JarEntryName.class\n                │   ├── JarURLConnection.class\n                │   ├── StringSequence.class\n                │   └── ZipInflaterInputStream.class\n                └── util\n                    └── SystemPropertyUtils.class\n```","source":"_posts/SpringBoot应用启动原理分析.md","raw":"---\ntitle: SpringBoot应用启动原理分析\ndate: 2017-06-01 08:01:01\ncategories:\n    - SpringBoot\ntags:\n    - SpringBoot\n---\n\n\nidea：\n\n```java\n├── BOOT-INF\n│   ├── classes\n│   │   ├── application.properties\n│   │   └── com\n│   │       └── example\n│   │           └── demo\n│   │               └── DemoApplication.class\n│   └── lib\n│       ├── classmate-1.3.4.jar\n│       ├── hibernate-validator-6.0.13.Final.jar\n│       ├── ...\n├── META-INF\n│   ├── MANIFEST.MF\n│   └── maven\n│       └── com.example\n│           └── demo\n│               ├── pom.properties\n│               └── pom.xml\n└── org\n    └── springframework\n        └── boot\n            └── loader\n                ├── ExecutableArchiveLauncher.class\n                ├── JarLauncher.class\n                ├── LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration.class\n                ├── LaunchedURLClassLoader.class\n                ├── Launcher.class\n                ├── MainMethodRunner.class\n                ├── PropertiesLauncher$1.class\n                ├── PropertiesLauncher$ArchiveEntryFilter.class\n                ├── PropertiesLauncher$PrefixMatchingArchiveFilter.class\n                ├── PropertiesLauncher.class\n                ├── WarLauncher.class\n                ├── archive\n                │   ├── Archive$Entry.class\n                │   ├── Archive$EntryFilter.class\n                │   ├── Archive.class\n                │   ├── ExplodedArchive$1.class\n                │   ├── ExplodedArchive$FileEntry.class\n                │   ├── ExplodedArchive$FileEntryIterator$EntryComparator.class\n                │   ├── ExplodedArchive$FileEntryIterator.class\n                │   ├── ExplodedArchive.class\n                │   ├── JarFileArchive$EntryIterator.class\n                │   ├── JarFileArchive$JarFileEntry.class\n                │   └── JarFileArchive.class\n                ├── data\n                │   ├── RandomAccessData.class\n                │   ├── RandomAccessDataFile$1.class\n                │   ├── RandomAccessDataFile$DataInputStream.class\n                │   ├── RandomAccessDataFile$FileAccess.class\n                │   └── RandomAccessDataFile.class\n                ├── jar\n                │   ├── AsciiBytes.class\n                │   ├── Bytes.class\n                │   ├── CentralDirectoryEndRecord.class\n                │   ├── CentralDirectoryFileHeader.class\n                │   ├── CentralDirectoryParser.class\n                │   ├── CentralDirectoryVisitor.class\n                │   ├── FileHeader.class\n                │   ├── Handler.class\n                │   ├── JarEntry.class\n                │   ├── JarEntryFilter.class\n                │   ├── JarFile$1.class\n                │   ├── JarFile$2.class\n                │   ├── JarFile$JarFileType.class\n                │   ├── JarFile.class\n                │   ├── JarFileEntries$1.class\n                │   ├── JarFileEntries$EntryIterator.class\n                │   ├── JarFileEntries.class\n                │   ├── JarURLConnection$1.class\n                │   ├── JarURLConnection$JarEntryName.class\n                │   ├── JarURLConnection.class\n                │   ├── StringSequence.class\n                │   └── ZipInflaterInputStream.class\n                └── util\n                    └── SystemPropertyUtils.class\n```","slug":"SpringBoot应用启动原理分析","published":1,"updated":"2019-11-02T07:12:18.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y670042t6s6tckshw0c","content":"<p>idea：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── BOOT-INF</span><br><span class=\"line\">│   ├── classes</span><br><span class=\"line\">│   │   ├── application.properties</span><br><span class=\"line\">│   │   └── com</span><br><span class=\"line\">│   │       └── example</span><br><span class=\"line\">│   │           └── demo</span><br><span class=\"line\">│   │               └── DemoApplication<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\">│   └── <span class=\"title\">lib</span></span></span><br><span class=\"line\"><span class=\"class\">│       ├── <span class=\"title\">classmate</span>-1.3.4.<span class=\"title\">jar</span></span></span><br><span class=\"line\"><span class=\"class\">│       ├── <span class=\"title\">hibernate</span>-<span class=\"title\">validator</span>-6.0.13.<span class=\"title\">Final</span>.<span class=\"title\">jar</span></span></span><br><span class=\"line\"><span class=\"class\">│       ├── ...</span></span><br><span class=\"line\"><span class=\"class\">├── <span class=\"title\">META</span>-<span class=\"title\">INF</span></span></span><br><span class=\"line\"><span class=\"class\">│   ├── <span class=\"title\">MANIFEST</span>.<span class=\"title\">MF</span></span></span><br><span class=\"line\"><span class=\"class\">│   └── <span class=\"title\">maven</span></span></span><br><span class=\"line\"><span class=\"class\">│       └── <span class=\"title\">com</span>.<span class=\"title\">example</span></span></span><br><span class=\"line\"><span class=\"class\">│           └── <span class=\"title\">demo</span></span></span><br><span class=\"line\"><span class=\"class\">│               ├── <span class=\"title\">pom</span>.<span class=\"title\">properties</span></span></span><br><span class=\"line\"><span class=\"class\">│               └── <span class=\"title\">pom</span>.<span class=\"title\">xml</span></span></span><br><span class=\"line\"><span class=\"class\">└── <span class=\"title\">org</span></span></span><br><span class=\"line\"><span class=\"class\">    └── <span class=\"title\">springframework</span></span></span><br><span class=\"line\"><span class=\"class\">        └── <span class=\"title\">boot</span></span></span><br><span class=\"line\"><span class=\"class\">            └── <span class=\"title\">loader</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">ExecutableArchiveLauncher</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">JarLauncher</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">LaunchedURLClassLoader</span>$<span class=\"title\">UseFastConnectionExceptionsEnumeration</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">LaunchedURLClassLoader</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">Launcher</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">MainMethodRunner</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">PropertiesLauncher</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">PropertiesLauncher</span>$<span class=\"title\">ArchiveEntryFilter</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">PropertiesLauncher</span>$<span class=\"title\">PrefixMatchingArchiveFilter</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">PropertiesLauncher</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">WarLauncher</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">archive</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">Archive</span>$<span class=\"title\">Entry</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">Archive</span>$<span class=\"title\">EntryFilter</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">Archive</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">ExplodedArchive</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">ExplodedArchive</span>$<span class=\"title\">FileEntry</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">ExplodedArchive</span>$<span class=\"title\">FileEntryIterator</span>$<span class=\"title\">EntryComparator</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">ExplodedArchive</span>$<span class=\"title\">FileEntryIterator</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">ExplodedArchive</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFileArchive</span>$<span class=\"title\">EntryIterator</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFileArchive</span>$<span class=\"title\">JarFileEntry</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   └── <span class=\"title\">JarFileArchive</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">data</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">RandomAccessData</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">RandomAccessDataFile</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">RandomAccessDataFile</span>$<span class=\"title\">DataInputStream</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">RandomAccessDataFile</span>$<span class=\"title\">FileAccess</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   └── <span class=\"title\">RandomAccessDataFile</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">jar</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">AsciiBytes</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">Bytes</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">CentralDirectoryEndRecord</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">CentralDirectoryFileHeader</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">CentralDirectoryParser</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">CentralDirectoryVisitor</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">FileHeader</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">Handler</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarEntry</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarEntryFilter</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFile</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFile</span>$2.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFile</span>$<span class=\"title\">JarFileType</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFile</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFileEntries</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFileEntries</span>$<span class=\"title\">EntryIterator</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFileEntries</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarURLConnection</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarURLConnection</span>$<span class=\"title\">JarEntryName</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarURLConnection</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">StringSequence</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   └── <span class=\"title\">ZipInflaterInputStream</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                └── <span class=\"title\">util</span></span></span><br><span class=\"line\"><span class=\"class\">                    └── <span class=\"title\">SystemPropertyUtils</span>.<span class=\"title\">class</span></span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>idea：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── BOOT-INF</span><br><span class=\"line\">│   ├── classes</span><br><span class=\"line\">│   │   ├── application.properties</span><br><span class=\"line\">│   │   └── com</span><br><span class=\"line\">│   │       └── example</span><br><span class=\"line\">│   │           └── demo</span><br><span class=\"line\">│   │               └── DemoApplication<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\">│   └── <span class=\"title\">lib</span></span></span><br><span class=\"line\"><span class=\"class\">│       ├── <span class=\"title\">classmate</span>-1.3.4.<span class=\"title\">jar</span></span></span><br><span class=\"line\"><span class=\"class\">│       ├── <span class=\"title\">hibernate</span>-<span class=\"title\">validator</span>-6.0.13.<span class=\"title\">Final</span>.<span class=\"title\">jar</span></span></span><br><span class=\"line\"><span class=\"class\">│       ├── ...</span></span><br><span class=\"line\"><span class=\"class\">├── <span class=\"title\">META</span>-<span class=\"title\">INF</span></span></span><br><span class=\"line\"><span class=\"class\">│   ├── <span class=\"title\">MANIFEST</span>.<span class=\"title\">MF</span></span></span><br><span class=\"line\"><span class=\"class\">│   └── <span class=\"title\">maven</span></span></span><br><span class=\"line\"><span class=\"class\">│       └── <span class=\"title\">com</span>.<span class=\"title\">example</span></span></span><br><span class=\"line\"><span class=\"class\">│           └── <span class=\"title\">demo</span></span></span><br><span class=\"line\"><span class=\"class\">│               ├── <span class=\"title\">pom</span>.<span class=\"title\">properties</span></span></span><br><span class=\"line\"><span class=\"class\">│               └── <span class=\"title\">pom</span>.<span class=\"title\">xml</span></span></span><br><span class=\"line\"><span class=\"class\">└── <span class=\"title\">org</span></span></span><br><span class=\"line\"><span class=\"class\">    └── <span class=\"title\">springframework</span></span></span><br><span class=\"line\"><span class=\"class\">        └── <span class=\"title\">boot</span></span></span><br><span class=\"line\"><span class=\"class\">            └── <span class=\"title\">loader</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">ExecutableArchiveLauncher</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">JarLauncher</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">LaunchedURLClassLoader</span>$<span class=\"title\">UseFastConnectionExceptionsEnumeration</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">LaunchedURLClassLoader</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">Launcher</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">MainMethodRunner</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">PropertiesLauncher</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">PropertiesLauncher</span>$<span class=\"title\">ArchiveEntryFilter</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">PropertiesLauncher</span>$<span class=\"title\">PrefixMatchingArchiveFilter</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">PropertiesLauncher</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">WarLauncher</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">archive</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">Archive</span>$<span class=\"title\">Entry</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">Archive</span>$<span class=\"title\">EntryFilter</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">Archive</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">ExplodedArchive</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">ExplodedArchive</span>$<span class=\"title\">FileEntry</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">ExplodedArchive</span>$<span class=\"title\">FileEntryIterator</span>$<span class=\"title\">EntryComparator</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">ExplodedArchive</span>$<span class=\"title\">FileEntryIterator</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">ExplodedArchive</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFileArchive</span>$<span class=\"title\">EntryIterator</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFileArchive</span>$<span class=\"title\">JarFileEntry</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   └── <span class=\"title\">JarFileArchive</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">data</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">RandomAccessData</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">RandomAccessDataFile</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">RandomAccessDataFile</span>$<span class=\"title\">DataInputStream</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">RandomAccessDataFile</span>$<span class=\"title\">FileAccess</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   └── <span class=\"title\">RandomAccessDataFile</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                ├── <span class=\"title\">jar</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">AsciiBytes</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">Bytes</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">CentralDirectoryEndRecord</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">CentralDirectoryFileHeader</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">CentralDirectoryParser</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">CentralDirectoryVisitor</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">FileHeader</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">Handler</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarEntry</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarEntryFilter</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFile</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFile</span>$2.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFile</span>$<span class=\"title\">JarFileType</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFile</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFileEntries</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFileEntries</span>$<span class=\"title\">EntryIterator</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarFileEntries</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarURLConnection</span>$1.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarURLConnection</span>$<span class=\"title\">JarEntryName</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">JarURLConnection</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   ├── <span class=\"title\">StringSequence</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                │   └── <span class=\"title\">ZipInflaterInputStream</span>.<span class=\"title\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                └── <span class=\"title\">util</span></span></span><br><span class=\"line\"><span class=\"class\">                    └── <span class=\"title\">SystemPropertyUtils</span>.<span class=\"title\">class</span></span></span><br></pre></td></tr></table></figure>"},{"title":"SpringBoot集成Elasticsearch","date":"2019-01-17T03:17:49.000Z","_content":"\n\n\n---\n\n原本是采用 transportClient 来写的，但是一个是官方说明在5.x以后的版本就不怎么支持了，二是因为实际环境上使用了加密，无法通过 transportclient 的方式进行查询了，所以综合了一下采用了 High-level-rest-client 的方式。同时在使用 High-level-rest-client 的方式创建 client 的时候务必注意版本的情况，我这里使用的是5.6版本的，不同版本之间创建 client 的方式的差别还是比较大的。\n\n\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch -->\n<dependency>\n    <groupId>org.elasticsearch</groupId>\n    <artifactId>elasticsearch</artifactId>\n    <version>${org.elasticsearch.version}</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.elasticsearch.client/transport -->\n<dependency>\n    <groupId>org.elasticsearch.client</groupId>\n    <artifactId>transport</artifactId>\n    <version>${org.elasticsearch.version}</version>\n</dependency>\n```\n\n\n## 问题：\n\n### 问题详情\n```\n2019-01-17 15:47:56.134  WARN 45208 --- [ent_boss][T#10]] o.e.transport.netty4.Netty4Transport     : exception caught on transport layer [NettyTcpChannel{localAddress=/127.0.0.1:54984, remoteAddress=/127.0.0.1:9200}], closing connection\n\nio.netty.handler.codec.DecoderException: java.io.StreamCorruptedException: invalid internal transport message format, got (48,54,54,50)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:472) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:405) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:372) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:355) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.handler.logging.LoggingHandler.channelInactive(LoggingHandler.java:167) [netty-handler-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1429) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:947) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:822) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) [netty-common-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) [netty-common-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897) [netty-common-4.1.30.Final.jar:4.1.30.Final]\n\tat java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]\nCaused by: java.io.StreamCorruptedException: invalid internal transport message format, got (48,54,54,50)\n\tat org.elasticsearch.transport.TcpTransport.validateMessageHeader(TcpTransport.java:1072) ~[elasticsearch-6.5.4.jar:6.5.4]\n\tat org.elasticsearch.transport.netty4.Netty4SizeHeaderFrameDecoder.decode(Netty4SizeHeaderFrameDecoder.java:36) ~[transport-netty4-client-6.5.4.jar:6.5.4]\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\t... 20 common frames omitted\n```\n### 解决方案\n\n\n---\n参考","source":"_posts/SpringBoot集成Elasticsearch.md","raw":"---\ntitle: SpringBoot集成Elasticsearch\ndate: 2019-01-17 11:17:49\ncategories: \n    - Elasticsearch\ntags:\n    - 全文搜索\n    - SpringBoot\n    - Elasticsearch\n---\n\n\n\n---\n\n原本是采用 transportClient 来写的，但是一个是官方说明在5.x以后的版本就不怎么支持了，二是因为实际环境上使用了加密，无法通过 transportclient 的方式进行查询了，所以综合了一下采用了 High-level-rest-client 的方式。同时在使用 High-level-rest-client 的方式创建 client 的时候务必注意版本的情况，我这里使用的是5.6版本的，不同版本之间创建 client 的方式的差别还是比较大的。\n\n\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch -->\n<dependency>\n    <groupId>org.elasticsearch</groupId>\n    <artifactId>elasticsearch</artifactId>\n    <version>${org.elasticsearch.version}</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.elasticsearch.client/transport -->\n<dependency>\n    <groupId>org.elasticsearch.client</groupId>\n    <artifactId>transport</artifactId>\n    <version>${org.elasticsearch.version}</version>\n</dependency>\n```\n\n\n## 问题：\n\n### 问题详情\n```\n2019-01-17 15:47:56.134  WARN 45208 --- [ent_boss][T#10]] o.e.transport.netty4.Netty4Transport     : exception caught on transport layer [NettyTcpChannel{localAddress=/127.0.0.1:54984, remoteAddress=/127.0.0.1:9200}], closing connection\n\nio.netty.handler.codec.DecoderException: java.io.StreamCorruptedException: invalid internal transport message format, got (48,54,54,50)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:472) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:405) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:372) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:355) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.handler.logging.LoggingHandler.channelInactive(LoggingHandler.java:167) [netty-handler-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1429) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:947) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:822) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) [netty-common-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) [netty-common-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462) [netty-transport-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897) [netty-common-4.1.30.Final.jar:4.1.30.Final]\n\tat java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]\nCaused by: java.io.StreamCorruptedException: invalid internal transport message format, got (48,54,54,50)\n\tat org.elasticsearch.transport.TcpTransport.validateMessageHeader(TcpTransport.java:1072) ~[elasticsearch-6.5.4.jar:6.5.4]\n\tat org.elasticsearch.transport.netty4.Netty4SizeHeaderFrameDecoder.decode(Netty4SizeHeaderFrameDecoder.java:36) ~[transport-netty4-client-6.5.4.jar:6.5.4]\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]\n\t... 20 common frames omitted\n```\n### 解决方案\n\n\n---\n参考","slug":"SpringBoot集成Elasticsearch","published":1,"updated":"2019-11-02T07:12:18.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y680045t6s6yc4oacjh","content":"<hr>\n<p>原本是采用 transportClient 来写的，但是一个是官方说明在5.x以后的版本就不怎么支持了，二是因为实际环境上使用了加密，无法通过 transportclient 的方式进行查询了，所以综合了一下采用了 High-level-rest-client 的方式。同时在使用 High-level-rest-client 的方式创建 client 的时候务必注意版本的情况，我这里使用的是5.6版本的，不同版本之间创建 client 的方式的差别还是比较大的。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.elasticsearch<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>elasticsearch<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.elasticsearch.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.elasticsearch.client/transport --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.elasticsearch.client<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>transport<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.elasticsearch.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><h3 id=\"问题详情\"><a href=\"#问题详情\" class=\"headerlink\" title=\"问题详情\"></a>问题详情</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-01-17 15:47:56.134  WARN 45208 --- [ent_boss][T#10]] o.e.transport.netty4.Netty4Transport     : exception caught on transport layer [NettyTcpChannel&#123;localAddress=/127.0.0.1:54984, remoteAddress=/127.0.0.1:9200&#125;], closing connection</span><br><span class=\"line\"></span><br><span class=\"line\">io.netty.handler.codec.DecoderException: java.io.StreamCorruptedException: invalid internal transport message format, got (48,54,54,50)</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:472) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:405) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:372) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:355) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.handler.logging.LoggingHandler.channelInactive(LoggingHandler.java:167) [netty-handler-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1429) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:947) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:822) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) [netty-common-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) [netty-common-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897) [netty-common-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]</span><br><span class=\"line\">Caused by: java.io.StreamCorruptedException: invalid internal transport message format, got (48,54,54,50)</span><br><span class=\"line\">\tat org.elasticsearch.transport.TcpTransport.validateMessageHeader(TcpTransport.java:1072) ~[elasticsearch-6.5.4.jar:6.5.4]</span><br><span class=\"line\">\tat org.elasticsearch.transport.netty4.Netty4SizeHeaderFrameDecoder.decode(Netty4SizeHeaderFrameDecoder.java:36) ~[transport-netty4-client-6.5.4.jar:6.5.4]</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\t... 20 common frames omitted</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><hr>\n<p>参考</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>原本是采用 transportClient 来写的，但是一个是官方说明在5.x以后的版本就不怎么支持了，二是因为实际环境上使用了加密，无法通过 transportclient 的方式进行查询了，所以综合了一下采用了 High-level-rest-client 的方式。同时在使用 High-level-rest-client 的方式创建 client 的时候务必注意版本的情况，我这里使用的是5.6版本的，不同版本之间创建 client 的方式的差别还是比较大的。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.elasticsearch<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>elasticsearch<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.elasticsearch.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.elasticsearch.client/transport --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.elasticsearch.client<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>transport<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.elasticsearch.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><h3 id=\"问题详情\"><a href=\"#问题详情\" class=\"headerlink\" title=\"问题详情\"></a>问题详情</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-01-17 15:47:56.134  WARN 45208 --- [ent_boss][T#10]] o.e.transport.netty4.Netty4Transport     : exception caught on transport layer [NettyTcpChannel&#123;localAddress=/127.0.0.1:54984, remoteAddress=/127.0.0.1:9200&#125;], closing connection</span><br><span class=\"line\"></span><br><span class=\"line\">io.netty.handler.codec.DecoderException: java.io.StreamCorruptedException: invalid internal transport message format, got (48,54,54,50)</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:472) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:405) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:372) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:355) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.handler.logging.LoggingHandler.channelInactive(LoggingHandler.java:167) [netty-handler-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1429) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:947) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:822) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) [netty-common-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) [netty-common-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462) [netty-transport-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897) [netty-common-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]</span><br><span class=\"line\">Caused by: java.io.StreamCorruptedException: invalid internal transport message format, got (48,54,54,50)</span><br><span class=\"line\">\tat org.elasticsearch.transport.TcpTransport.validateMessageHeader(TcpTransport.java:1072) ~[elasticsearch-6.5.4.jar:6.5.4]</span><br><span class=\"line\">\tat org.elasticsearch.transport.netty4.Netty4SizeHeaderFrameDecoder.decode(Netty4SizeHeaderFrameDecoder.java:36) ~[transport-netty4-client-6.5.4.jar:6.5.4]</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441) ~[netty-codec-4.1.30.Final.jar:4.1.30.Final]</span><br><span class=\"line\">\t... 20 common frames omitted</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><hr>\n<p>参考</p>\n"},{"title":"ZooKeeper安装","date":"2019-01-09T10:27:23.000Z","_content":"\nZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《百度百科》\n<!-- more -->\n\n\n## 下载\n\n下载地址：https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/\n\n## 安装\n\n```\n$ cd /Library\n$ tar -zxf zookeeper-3.4.13.tar.gz\n$ cd zookeeper-3.4.13\n$ mkdir data\n```\n\n### 配置\n```\ntickTime = 2000\ndataDir = /Library/zookeeper-3.4.13/data\nclientPort = 2181\ninitLimit = 5\nsyncLimit = 2\n```\n\n### 单机\n\n### 集群\n\n\n\n---\n\n\n\n\n---\n参考\n官网：https://zookeeper.apache.org/\nGithub：\n","source":"_posts/ZooKeeper安装.md","raw":"---\ntitle: ZooKeeper安装\ndate: 2019-01-09 18:27:23\ncategories: \n    - ZooKeeper\ntags:\n    - ZooKeeper\n---\n\nZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《百度百科》\n<!-- more -->\n\n\n## 下载\n\n下载地址：https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/\n\n## 安装\n\n```\n$ cd /Library\n$ tar -zxf zookeeper-3.4.13.tar.gz\n$ cd zookeeper-3.4.13\n$ mkdir data\n```\n\n### 配置\n```\ntickTime = 2000\ndataDir = /Library/zookeeper-3.4.13/data\nclientPort = 2181\ninitLimit = 5\nsyncLimit = 2\n```\n\n### 单机\n\n### 集群\n\n\n\n---\n\n\n\n\n---\n参考\n官网：https://zookeeper.apache.org/\nGithub：\n","slug":"ZooKeeper安装","published":1,"updated":"2019-11-02T07:12:18.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y690049t6s6vhrli18u","content":"<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《百度百科》\n<a id=\"more\"></a></p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载地址：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /Library</span><br><span class=\"line\">$ tar -zxf zookeeper-3.4.13.tar.gz</span><br><span class=\"line\">$ cd zookeeper-3.4.13</span><br><span class=\"line\">$ mkdir data</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tickTime = 2000</span><br><span class=\"line\">dataDir = /Library/zookeeper-3.4.13/data</span><br><span class=\"line\">clientPort = 2181</span><br><span class=\"line\">initLimit = 5</span><br><span class=\"line\">syncLimit = 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"单机\"><a href=\"#单机\" class=\"headerlink\" title=\"单机\"></a>单机</h3><h3 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h3><hr>\n<hr>\n<p>参考\n官网：<a href=\"https://zookeeper.apache.org/\" target=\"_blank\" rel=\"noopener\">https://zookeeper.apache.org/</a>\nGithub：</p>\n","site":{"data":{}},"excerpt":"<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《百度百科》","more":"</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载地址：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /Library</span><br><span class=\"line\">$ tar -zxf zookeeper-3.4.13.tar.gz</span><br><span class=\"line\">$ cd zookeeper-3.4.13</span><br><span class=\"line\">$ mkdir data</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tickTime = 2000</span><br><span class=\"line\">dataDir = /Library/zookeeper-3.4.13/data</span><br><span class=\"line\">clientPort = 2181</span><br><span class=\"line\">initLimit = 5</span><br><span class=\"line\">syncLimit = 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"单机\"><a href=\"#单机\" class=\"headerlink\" title=\"单机\"></a>单机</h3><h3 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h3><hr>\n<hr>\n<p>参考\n官网：<a href=\"https://zookeeper.apache.org/\" target=\"_blank\" rel=\"noopener\">https://zookeeper.apache.org/</a>\nGithub：</p>"},{"title":"iterm2总结","date":"2015-08-30T01:01:01.000Z","_content":"\niTerm2是Mac终端的替代品，也是iTerm的继承者。 它适用于使用macOS 10.10或更高版本的Mac。\n\n官网：https://www.iterm2.com/index.html\n\n---\n<!-- more -->\n\n![iterm2](logo2x.jpg)\n\n\n<br/>\n## 安装\n\n### 下载 \n下载地址：https://www.iterm2.com/downloads.html\n\n### 安装\n解压文件把iterm2 copy到应用程序\n\n\n<br/>\n## 安装 Powerline 字体\nzsh有些主题需要Powerline 字体，Github：https://github.com/powerline/fonts\n** 1、安装 **\n```bash\ngit clone https://github.com/powerline/fonts.git --depth=1\ncd fonts\n./install.sh\ncd ..\nrm -rf fonts\n```\n** 2、配置 **\n![配置](1543202719106.jpg)\n\n\n<br/>\n## Zsh\n\nhttps://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH\n\n### Zsh\n```bash\n# 先查看是否安装\nzsh --version\n# 安装\nbrew install zsh zsh-completions\n```\n\n<br/>\n### Oh My Zsh\n** 1、安装 **\n```bash\n# 安装有两种方式，随意用那种\n# curl 安装方式\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n\n# wget 安装方式\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n\n** 2、配置 **\n```\nsudo vim ~/.zshrc\n```\n`修改生效：source ~/.zshrc`\n\n** 3、主题 **\nhttps://github.com/robbyrussell/oh-my-zsh/wiki/themes\n\nOh My Zsh 默认自带了一些默认主题，存放在 `~/.oh-my-zsh/themes` 目录中。我们可以查看这些主题\n\n```bash\ncd ~/.oh-my-zsh/themes\nll\n```\n\n```bash\n# 打开配置\nsudo vim ~/.zshrc\n# 配置主题\nZSH_THEME=agnoster\n```\n`修改生效：source ~/.zshrc`\n\n** 4、卸载 **\n```bash\nuninstall_oh_my_zsh\n```\n\n\n<br/>\n## 配色\n![config](1543213263217.jpg)\n\n\n\n<br/>\n\n---\n参考\n[iterm2-官网](https://www.iterm2.com/index.html) \n[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH)","source":"_posts/iterm2总结.md","raw":"---\ntitle: iterm2总结\ndate: 2015-08-30 09:01:01\ncategories: \n    - Mac\ntags:\n    - Mac\n    - Iterm2\n---\n\niTerm2是Mac终端的替代品，也是iTerm的继承者。 它适用于使用macOS 10.10或更高版本的Mac。\n\n官网：https://www.iterm2.com/index.html\n\n---\n<!-- more -->\n\n![iterm2](logo2x.jpg)\n\n\n<br/>\n## 安装\n\n### 下载 \n下载地址：https://www.iterm2.com/downloads.html\n\n### 安装\n解压文件把iterm2 copy到应用程序\n\n\n<br/>\n## 安装 Powerline 字体\nzsh有些主题需要Powerline 字体，Github：https://github.com/powerline/fonts\n** 1、安装 **\n```bash\ngit clone https://github.com/powerline/fonts.git --depth=1\ncd fonts\n./install.sh\ncd ..\nrm -rf fonts\n```\n** 2、配置 **\n![配置](1543202719106.jpg)\n\n\n<br/>\n## Zsh\n\nhttps://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH\n\n### Zsh\n```bash\n# 先查看是否安装\nzsh --version\n# 安装\nbrew install zsh zsh-completions\n```\n\n<br/>\n### Oh My Zsh\n** 1、安装 **\n```bash\n# 安装有两种方式，随意用那种\n# curl 安装方式\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n\n# wget 安装方式\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n\n** 2、配置 **\n```\nsudo vim ~/.zshrc\n```\n`修改生效：source ~/.zshrc`\n\n** 3、主题 **\nhttps://github.com/robbyrussell/oh-my-zsh/wiki/themes\n\nOh My Zsh 默认自带了一些默认主题，存放在 `~/.oh-my-zsh/themes` 目录中。我们可以查看这些主题\n\n```bash\ncd ~/.oh-my-zsh/themes\nll\n```\n\n```bash\n# 打开配置\nsudo vim ~/.zshrc\n# 配置主题\nZSH_THEME=agnoster\n```\n`修改生效：source ~/.zshrc`\n\n** 4、卸载 **\n```bash\nuninstall_oh_my_zsh\n```\n\n\n<br/>\n## 配色\n![config](1543213263217.jpg)\n\n\n\n<br/>\n\n---\n参考\n[iterm2-官网](https://www.iterm2.com/index.html) \n[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH)","slug":"iterm2总结","published":1,"updated":"2019-11-02T07:12:18.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6b004ct6s6s8yk22id","content":"<p>iTerm2是Mac终端的替代品，也是iTerm的继承者。 它适用于使用macOS 10.10或更高版本的Mac。</p>\n<p>官网：<a href=\"https://www.iterm2.com/index.html\" target=\"_blank\" rel=\"noopener\">https://www.iterm2.com/index.html</a></p>\n<hr>\n<a id=\"more\"></a>\n<p><img src=\"logo2x.jpg\" alt=\"iterm2\"></p>\n<p><br></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>下载地址：<a href=\"https://www.iterm2.com/downloads.html\" target=\"_blank\" rel=\"noopener\">https://www.iterm2.com/downloads.html</a></p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>解压文件把iterm2 copy到应用程序</p>\n<p><br></p>\n<h2 id=\"安装-Powerline-字体\"><a href=\"#安装-Powerline-字体\" class=\"headerlink\" title=\"安装 Powerline 字体\"></a>安装 Powerline 字体</h2><p>zsh有些主题需要Powerline 字体，Github：<a href=\"https://github.com/powerline/fonts\" target=\"_blank\" rel=\"noopener\">https://github.com/powerline/fonts</a>\n<strong> 1、安装 </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class=\"line\"><span class=\"built_in\">cd</span> fonts</span><br><span class=\"line\">./install.sh</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">rm -rf fonts</span><br></pre></td></tr></table></figure></p>\n<p><strong> 2、配置 </strong>\n<img src=\"1543202719106.jpg\" alt=\"配置\"></p>\n<p><br></p>\n<h2 id=\"Zsh\"><a href=\"#Zsh\" class=\"headerlink\" title=\"Zsh\"></a>Zsh</h2><p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH</a></p>\n<h3 id=\"Zsh-1\"><a href=\"#Zsh-1\" class=\"headerlink\" title=\"Zsh\"></a>Zsh</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先查看是否安装</span></span><br><span class=\"line\">zsh --version</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">brew install zsh zsh-completions</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Oh-My-Zsh\"><a href=\"#Oh-My-Zsh\" class=\"headerlink\" title=\"Oh My Zsh\"></a>Oh My Zsh</h3><p><strong> 1、安装 </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装有两种方式，随意用那种</span></span><br><span class=\"line\"><span class=\"comment\"># curl 安装方式</span></span><br><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wget 安装方式</span></span><br><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong> 2、配置 </strong>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim ~/.zshrc</span><br></pre></td></tr></table></figure></p>\n<p><code>修改生效：source ~/.zshrc</code></p>\n<p><strong> 3、主题 </strong>\n<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>\n<p>Oh My Zsh 默认自带了一些默认主题，存放在 <code>~/.oh-my-zsh/themes</code> 目录中。我们可以查看这些主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/themes</span><br><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开配置</span></span><br><span class=\"line\">sudo vim ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># 配置主题</span></span><br><span class=\"line\">ZSH_THEME=agnoster</span><br></pre></td></tr></table></figure>\n<p><code>修改生效：source ~/.zshrc</code></p>\n<p><strong> 4、卸载 </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uninstall_oh_my_zsh</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"配色\"><a href=\"#配色\" class=\"headerlink\" title=\"配色\"></a>配色</h2><p><img src=\"1543213263217.jpg\" alt=\"config\"></p>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://www.iterm2.com/index.html\" target=\"_blank\" rel=\"noopener\">iterm2-官网</a> \n<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH\" target=\"_blank\" rel=\"noopener\">oh-my-zsh</a></p>\n","site":{"data":{}},"excerpt":"<p>iTerm2是Mac终端的替代品，也是iTerm的继承者。 它适用于使用macOS 10.10或更高版本的Mac。</p>\n<p>官网：<a href=\"https://www.iterm2.com/index.html\" target=\"_blank\" rel=\"noopener\">https://www.iterm2.com/index.html</a></p>\n<hr>","more":"<p><img src=\"logo2x.jpg\" alt=\"iterm2\"></p>\n<p><br></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>下载地址：<a href=\"https://www.iterm2.com/downloads.html\" target=\"_blank\" rel=\"noopener\">https://www.iterm2.com/downloads.html</a></p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>解压文件把iterm2 copy到应用程序</p>\n<p><br></p>\n<h2 id=\"安装-Powerline-字体\"><a href=\"#安装-Powerline-字体\" class=\"headerlink\" title=\"安装 Powerline 字体\"></a>安装 Powerline 字体</h2><p>zsh有些主题需要Powerline 字体，Github：<a href=\"https://github.com/powerline/fonts\" target=\"_blank\" rel=\"noopener\">https://github.com/powerline/fonts</a>\n<strong> 1、安装 </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class=\"line\"><span class=\"built_in\">cd</span> fonts</span><br><span class=\"line\">./install.sh</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">rm -rf fonts</span><br></pre></td></tr></table></figure></p>\n<p><strong> 2、配置 </strong>\n<img src=\"1543202719106.jpg\" alt=\"配置\"></p>\n<p><br></p>\n<h2 id=\"Zsh\"><a href=\"#Zsh\" class=\"headerlink\" title=\"Zsh\"></a>Zsh</h2><p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH</a></p>\n<h3 id=\"Zsh-1\"><a href=\"#Zsh-1\" class=\"headerlink\" title=\"Zsh\"></a>Zsh</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先查看是否安装</span></span><br><span class=\"line\">zsh --version</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">brew install zsh zsh-completions</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Oh-My-Zsh\"><a href=\"#Oh-My-Zsh\" class=\"headerlink\" title=\"Oh My Zsh\"></a>Oh My Zsh</h3><p><strong> 1、安装 </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装有两种方式，随意用那种</span></span><br><span class=\"line\"><span class=\"comment\"># curl 安装方式</span></span><br><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wget 安装方式</span></span><br><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong> 2、配置 </strong>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim ~/.zshrc</span><br></pre></td></tr></table></figure></p>\n<p><code>修改生效：source ~/.zshrc</code></p>\n<p><strong> 3、主题 </strong>\n<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>\n<p>Oh My Zsh 默认自带了一些默认主题，存放在 <code>~/.oh-my-zsh/themes</code> 目录中。我们可以查看这些主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/themes</span><br><span class=\"line\">ll</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开配置</span></span><br><span class=\"line\">sudo vim ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># 配置主题</span></span><br><span class=\"line\">ZSH_THEME=agnoster</span><br></pre></td></tr></table></figure>\n<p><code>修改生效：source ~/.zshrc</code></p>\n<p><strong> 4、卸载 </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uninstall_oh_my_zsh</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"配色\"><a href=\"#配色\" class=\"headerlink\" title=\"配色\"></a>配色</h2><p><img src=\"1543213263217.jpg\" alt=\"config\"></p>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://www.iterm2.com/index.html\" target=\"_blank\" rel=\"noopener\">iterm2-官网</a> \n<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH\" target=\"_blank\" rel=\"noopener\">oh-my-zsh</a></p>"},{"title":"python教程","date":"2018-11-24T11:16:00.000Z","_content":"\nPython（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/），是一种动态的、面向对象的脚本语言。\n\n目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的，因为现在Python正在朝着3.x版本进化，本文基于python3\b。\n\n<!-- more -->\n---\n\n<br/>\n## 安装\n\n官网下载地址：https://www.python.org/downloads/\n\n#### MAC\n\n\n\n```bash\n# 先查看是否安装，如果显示版本号 表明已经安装: \npython3 --version\n```\n\n\n- 安装程序\n上面地址下载，双击运行并安装\n- 命令安装\n```\nbrew install python3\n```\n\n\n\n<br/>\n## 语法\n\n\n\n### \n\n\n<br/>\n\n---\n参考\n[官网](https://www.python.org/)","source":"_posts/python教程.md","raw":"---\ntitle: python教程\ndate: 2018-11-24 19:16:00\ncategories: \n    - Python\ntags:\n    - Python\n---\n\nPython（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/），是一种动态的、面向对象的脚本语言。\n\n目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的，因为现在Python正在朝着3.x版本进化，本文基于python3\b。\n\n<!-- more -->\n---\n\n<br/>\n## 安装\n\n官网下载地址：https://www.python.org/downloads/\n\n#### MAC\n\n\n\n```bash\n# 先查看是否安装，如果显示版本号 表明已经安装: \npython3 --version\n```\n\n\n- 安装程序\n上面地址下载，双击运行并安装\n- 命令安装\n```\nbrew install python3\n```\n\n\n\n<br/>\n## 语法\n\n\n\n### \n\n\n<br/>\n\n---\n参考\n[官网](https://www.python.org/)","slug":"python教程","published":1,"updated":"2019-11-02T07:12:18.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6d004gt6s6wgxwsjrc","content":"<p>Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/），是一种动态的、面向对象的脚本语言。</p>\n<p>目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的，因为现在Python正在朝着3.x版本进化，本文基于python3\b。</p>\n<a id=\"more\"></a>\n<hr>\n<p><br></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>官网下载地址：<a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/downloads/</a></p>\n<h4 id=\"MAC\"><a href=\"#MAC\" class=\"headerlink\" title=\"MAC\"></a>MAC</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先查看是否安装，如果显示版本号 表明已经安装: </span></span><br><span class=\"line\">python3 --version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装程序\n上面地址下载，双击运行并安装</li>\n<li>命令安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install python3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>### </p>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://www.python.org/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n","site":{"data":{}},"excerpt":"<p>Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/），是一种动态的、面向对象的脚本语言。</p>\n<p>目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的，因为现在Python正在朝着3.x版本进化，本文基于python3\b。</p>","more":"<hr>\n<p><br></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>官网下载地址：<a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/downloads/</a></p>\n<h4 id=\"MAC\"><a href=\"#MAC\" class=\"headerlink\" title=\"MAC\"></a>MAC</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先查看是否安装，如果显示版本号 表明已经安装: </span></span><br><span class=\"line\">python3 --version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装程序\n上面地址下载，双击运行并安装</li>\n<li>命令安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install python3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>### </p>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://www.python.org/\" target=\"_blank\" rel=\"noopener\">官网</a></p>"},{"title":"tensorflow教程","date":"2018-11-22T09:42:36.000Z","_content":"\nTensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。\nTensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《tensorflow.google.cn》\n\n<!-- more -->\n\n\n![tensors_flowing](tensors_flowing.gif)\n<br/>\n\n## 安装\n官网：https://tensorflow.google.cn/install/\n\n现在tensorflow在以下系统进行测试和支持：\n- Ubuntu 16.04 or later\n- Windows 7 or later\n- macOS 10.12.6 (Sierra) or later (no GPU support)\n- Raspbian 9.0 or later\n\ntensorflow有多种安装方式:\n- [Pip 安装](https://tensorflow.google.cn/install/pip)\n- [Docker 安装](https://tensorflow.google.cn/install/docker)\n- [从源代码安装](https://tensorflow.google.cn/install/source)\n\n\n本教程使用 pip 在MAC系统的安装方式：https://tensorflow.google.cn/install/pip\n\n<br/>\n### MacOS\n** 1、安装python、pip、virtualenv **\n\n`要求 Python 3.4, 3.5, or 3.6`\n\n```bash\npython3 --version\npip3 --version\nvirtualenv --version\n```\n\n```bash\n# 升级pip\nsudo python3 -m pip install -U pip\n\n# 安装virtualenv\nsudo pip3 install -U virtualenv  # system-wide install\n```\n\n** 2、安装 tensorflow（CPU 版） **\n`Tensorflow 已经不再支持 mac 的 GPU 版了`\n```\n# python 3+ 的用户:\n$ pip3 install --upgrade tensorflow\n\n# 删除tensorflow原有的版本\n$ pip3 uninstall tensorflow\n```\n\n** 3、验证Tensorflow是否安装成功 **\n在python编译器运行下面代码：\n```\nimport tensorflow as tf\nprint(tf.__version__)\n```\n\n\n<br/>\n## 教程\n\n\n\n\n\n<br/>\n\n---\n参考\n[tensorflow官网](https://tensorflow.google.cn/)\n[tensorflow官网例子](https://www.tensorflow.org/tutorials/)\nhttp://www.tensorfly.cn/tfdoc/get_started/introduction.html\nhttps://morvanzhou.github.io/tutorials/machine-learning/tensorflow\n","source":"_posts/tensorflow教程.md","raw":"---\ntitle: tensorflow教程\ndate: 2018-11-22 17:42:36\ncategories: \n    - Tensorflow\ntags:\n    - 机器学习\n    - 深度学习\n    - 深度学习框架\n    - Tensorflow\n---\n\nTensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。\nTensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《tensorflow.google.cn》\n\n<!-- more -->\n\n\n![tensors_flowing](tensors_flowing.gif)\n<br/>\n\n## 安装\n官网：https://tensorflow.google.cn/install/\n\n现在tensorflow在以下系统进行测试和支持：\n- Ubuntu 16.04 or later\n- Windows 7 or later\n- macOS 10.12.6 (Sierra) or later (no GPU support)\n- Raspbian 9.0 or later\n\ntensorflow有多种安装方式:\n- [Pip 安装](https://tensorflow.google.cn/install/pip)\n- [Docker 安装](https://tensorflow.google.cn/install/docker)\n- [从源代码安装](https://tensorflow.google.cn/install/source)\n\n\n本教程使用 pip 在MAC系统的安装方式：https://tensorflow.google.cn/install/pip\n\n<br/>\n### MacOS\n** 1、安装python、pip、virtualenv **\n\n`要求 Python 3.4, 3.5, or 3.6`\n\n```bash\npython3 --version\npip3 --version\nvirtualenv --version\n```\n\n```bash\n# 升级pip\nsudo python3 -m pip install -U pip\n\n# 安装virtualenv\nsudo pip3 install -U virtualenv  # system-wide install\n```\n\n** 2、安装 tensorflow（CPU 版） **\n`Tensorflow 已经不再支持 mac 的 GPU 版了`\n```\n# python 3+ 的用户:\n$ pip3 install --upgrade tensorflow\n\n# 删除tensorflow原有的版本\n$ pip3 uninstall tensorflow\n```\n\n** 3、验证Tensorflow是否安装成功 **\n在python编译器运行下面代码：\n```\nimport tensorflow as tf\nprint(tf.__version__)\n```\n\n\n<br/>\n## 教程\n\n\n\n\n\n<br/>\n\n---\n参考\n[tensorflow官网](https://tensorflow.google.cn/)\n[tensorflow官网例子](https://www.tensorflow.org/tutorials/)\nhttp://www.tensorfly.cn/tfdoc/get_started/introduction.html\nhttps://morvanzhou.github.io/tutorials/machine-learning/tensorflow\n","slug":"tensorflow教程","published":1,"updated":"2019-11-02T07:12:18.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6e004jt6s6lal46zmh","content":"<p>TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。\nTensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《tensorflow.google.cn》</p>\n<a id=\"more\"></a>\n<p><img src=\"tensors_flowing.gif\" alt=\"tensors_flowing\">\n<br></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>官网：<a href=\"https://tensorflow.google.cn/install/\" target=\"_blank\" rel=\"noopener\">https://tensorflow.google.cn/install/</a></p>\n<p>现在tensorflow在以下系统进行测试和支持：</p>\n<ul>\n<li>Ubuntu 16.04 or later</li>\n<li>Windows 7 or later</li>\n<li>macOS 10.12.6 (Sierra) or later (no GPU support)</li>\n<li>Raspbian 9.0 or later</li>\n</ul>\n<p>tensorflow有多种安装方式:</p>\n<ul>\n<li><a href=\"https://tensorflow.google.cn/install/pip\" target=\"_blank\" rel=\"noopener\">Pip 安装</a></li>\n<li><a href=\"https://tensorflow.google.cn/install/docker\" target=\"_blank\" rel=\"noopener\">Docker 安装</a></li>\n<li><a href=\"https://tensorflow.google.cn/install/source\" target=\"_blank\" rel=\"noopener\">从源代码安装</a></li>\n</ul>\n<p>本教程使用 pip 在MAC系统的安装方式：<a href=\"https://tensorflow.google.cn/install/pip\" target=\"_blank\" rel=\"noopener\">https://tensorflow.google.cn/install/pip</a></p>\n<p><br></p>\n<h3 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><p><strong> 1、安装python、pip、virtualenv </strong></p>\n<p><code>要求 Python 3.4, 3.5, or 3.6</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 --version</span><br><span class=\"line\">pip3 --version</span><br><span class=\"line\">virtualenv --version</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 升级pip</span></span><br><span class=\"line\">sudo python3 -m pip install -U pip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装virtualenv</span></span><br><span class=\"line\">sudo pip3 install -U virtualenv  <span class=\"comment\"># system-wide install</span></span><br></pre></td></tr></table></figure>\n<p><strong> 2、安装 tensorflow（CPU 版） </strong>\n<code>Tensorflow 已经不再支持 mac 的 GPU 版了</code>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># python 3+ 的用户:</span><br><span class=\"line\">$ pip3 install --upgrade tensorflow</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除tensorflow原有的版本</span><br><span class=\"line\">$ pip3 uninstall tensorflow</span><br></pre></td></tr></table></figure></p>\n<p><strong> 3、验证Tensorflow是否安装成功 </strong>\n在python编译器运行下面代码：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\">print(tf.__version__)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h2><p><br></p>\n<hr>\n<p>参考\n<a href=\"https://tensorflow.google.cn/\" target=\"_blank\" rel=\"noopener\">tensorflow官网</a>\n<a href=\"https://www.tensorflow.org/tutorials/\" target=\"_blank\" rel=\"noopener\">tensorflow官网例子</a>\n<a href=\"http://www.tensorfly.cn/tfdoc/get_started/introduction.html\" target=\"_blank\" rel=\"noopener\">http://www.tensorfly.cn/tfdoc/get_started/introduction.html</a>\n<a href=\"https://morvanzhou.github.io/tutorials/machine-learning/tensorflow\" target=\"_blank\" rel=\"noopener\">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow</a></p>\n","site":{"data":{}},"excerpt":"<p>TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。\nTensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《tensorflow.google.cn》</p>","more":"<p><img src=\"tensors_flowing.gif\" alt=\"tensors_flowing\">\n<br></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>官网：<a href=\"https://tensorflow.google.cn/install/\" target=\"_blank\" rel=\"noopener\">https://tensorflow.google.cn/install/</a></p>\n<p>现在tensorflow在以下系统进行测试和支持：</p>\n<ul>\n<li>Ubuntu 16.04 or later</li>\n<li>Windows 7 or later</li>\n<li>macOS 10.12.6 (Sierra) or later (no GPU support)</li>\n<li>Raspbian 9.0 or later</li>\n</ul>\n<p>tensorflow有多种安装方式:</p>\n<ul>\n<li><a href=\"https://tensorflow.google.cn/install/pip\" target=\"_blank\" rel=\"noopener\">Pip 安装</a></li>\n<li><a href=\"https://tensorflow.google.cn/install/docker\" target=\"_blank\" rel=\"noopener\">Docker 安装</a></li>\n<li><a href=\"https://tensorflow.google.cn/install/source\" target=\"_blank\" rel=\"noopener\">从源代码安装</a></li>\n</ul>\n<p>本教程使用 pip 在MAC系统的安装方式：<a href=\"https://tensorflow.google.cn/install/pip\" target=\"_blank\" rel=\"noopener\">https://tensorflow.google.cn/install/pip</a></p>\n<p><br></p>\n<h3 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><p><strong> 1、安装python、pip、virtualenv </strong></p>\n<p><code>要求 Python 3.4, 3.5, or 3.6</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 --version</span><br><span class=\"line\">pip3 --version</span><br><span class=\"line\">virtualenv --version</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 升级pip</span></span><br><span class=\"line\">sudo python3 -m pip install -U pip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装virtualenv</span></span><br><span class=\"line\">sudo pip3 install -U virtualenv  <span class=\"comment\"># system-wide install</span></span><br></pre></td></tr></table></figure>\n<p><strong> 2、安装 tensorflow（CPU 版） </strong>\n<code>Tensorflow 已经不再支持 mac 的 GPU 版了</code>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># python 3+ 的用户:</span><br><span class=\"line\">$ pip3 install --upgrade tensorflow</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除tensorflow原有的版本</span><br><span class=\"line\">$ pip3 uninstall tensorflow</span><br></pre></td></tr></table></figure></p>\n<p><strong> 3、验证Tensorflow是否安装成功 </strong>\n在python编译器运行下面代码：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\">print(tf.__version__)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h2><p><br></p>\n<hr>\n<p>参考\n<a href=\"https://tensorflow.google.cn/\" target=\"_blank\" rel=\"noopener\">tensorflow官网</a>\n<a href=\"https://www.tensorflow.org/tutorials/\" target=\"_blank\" rel=\"noopener\">tensorflow官网例子</a>\n<a href=\"http://www.tensorfly.cn/tfdoc/get_started/introduction.html\" target=\"_blank\" rel=\"noopener\">http://www.tensorfly.cn/tfdoc/get_started/introduction.html</a>\n<a href=\"https://morvanzhou.github.io/tutorials/machine-learning/tensorflow\" target=\"_blank\" rel=\"noopener\">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow</a></p>"},{"title":"thrift教程","date":"2018-11-23T09:32:06.000Z","_content":"\n Apache Thrift 采用接口描述语言定义并创建服务，支持可扩展的跨语言服务开发，所包含的代码生成引擎可以在多种语言中，如 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk 等创建高效的、无缝的服务，其传输数据采用二进制格式，相对 XML 和 JSON 体积更小，对于高并发、大数据量和多语言的环境更有优势\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《thrift.apache.org》\n<!-- more -->\n\n---\n\n<br/>\n### 介绍\nThrift通过IDL（Interface Definition Language，接口定义语言）来定义RPC（Remote Procedure Call，远程过程调用）的接口和数据类型，然后通过thrift编译器生成不同语言的代码，并由生成的代码负责RPC协议层和传输层的实现。\n\n\n![thrift-layers](thrift-layers.png)\n\n<br/>\n### 安装\n现下载：https://thrift.apache.org/download\n官网安装：https://thrift.apache.org/docs/install/\n\n<br/>\n#### 快速安装\n\n```bash\n# 安装命令\nbrew install thrift\n# 卸载命令\nbrew uninstall thrift\n```\n\n<br/>\n#### 源安装\n\n** 1、Install Boost **\nBoost 下载地址：https://www.boost.org/\n```bash\n./bootstrap.sh\nsudo ./b2 threading=multi address-model=64 variant=release stage install\n```\n\n** 2、Install libevent **\nlibevent 下载地址：http://libevent.org/\n```bash\n./configure --prefix=/usr/local\nmake\nsudo make install\n```\n\n** 3、Building Apache Thrift **\n```bash\n./configure --prefix=/usr/local/ --with-boost=/usr/local --with-libevent=/usr/local\n```\n\n\n<br/>\n### 使用\n\n1、pom文件导入thrift依赖\n```xml\n<!-- https://mvnrepository.com/artifact/org.apache.thrift/libthrift -->\n<dependency>\n    <groupId>org.apache.thrift</groupId>\n    <artifactId>libthrift</artifactId>\n    <version>0.11.0</version>\n    <type>pom</type>\n</dependency>\n```\n\n\n```java\n\n```\n\n\n\n\n\n<br/>\n### 源码分析\n\n\n\n\n\n\n<br/>\n\n---\n参考\n[thrift官网](https://thrift.apache.org/)\n[thrift-Github](https://github.com/apache/thrift)\nhttps://www.kancloud.cn/digest/thrift/","source":"_posts/thrift教程.md","raw":"---\ntitle: thrift教程\ndate: 2018-11-23 17:32:06\ncategories:\n    - Thrift\ntags:\n    - RPC\n    - Thrift\n---\n\n Apache Thrift 采用接口描述语言定义并创建服务，支持可扩展的跨语言服务开发，所包含的代码生成引擎可以在多种语言中，如 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk 等创建高效的、无缝的服务，其传输数据采用二进制格式，相对 XML 和 JSON 体积更小，对于高并发、大数据量和多语言的环境更有优势\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《thrift.apache.org》\n<!-- more -->\n\n---\n\n<br/>\n### 介绍\nThrift通过IDL（Interface Definition Language，接口定义语言）来定义RPC（Remote Procedure Call，远程过程调用）的接口和数据类型，然后通过thrift编译器生成不同语言的代码，并由生成的代码负责RPC协议层和传输层的实现。\n\n\n![thrift-layers](thrift-layers.png)\n\n<br/>\n### 安装\n现下载：https://thrift.apache.org/download\n官网安装：https://thrift.apache.org/docs/install/\n\n<br/>\n#### 快速安装\n\n```bash\n# 安装命令\nbrew install thrift\n# 卸载命令\nbrew uninstall thrift\n```\n\n<br/>\n#### 源安装\n\n** 1、Install Boost **\nBoost 下载地址：https://www.boost.org/\n```bash\n./bootstrap.sh\nsudo ./b2 threading=multi address-model=64 variant=release stage install\n```\n\n** 2、Install libevent **\nlibevent 下载地址：http://libevent.org/\n```bash\n./configure --prefix=/usr/local\nmake\nsudo make install\n```\n\n** 3、Building Apache Thrift **\n```bash\n./configure --prefix=/usr/local/ --with-boost=/usr/local --with-libevent=/usr/local\n```\n\n\n<br/>\n### 使用\n\n1、pom文件导入thrift依赖\n```xml\n<!-- https://mvnrepository.com/artifact/org.apache.thrift/libthrift -->\n<dependency>\n    <groupId>org.apache.thrift</groupId>\n    <artifactId>libthrift</artifactId>\n    <version>0.11.0</version>\n    <type>pom</type>\n</dependency>\n```\n\n\n```java\n\n```\n\n\n\n\n\n<br/>\n### 源码分析\n\n\n\n\n\n\n<br/>\n\n---\n参考\n[thrift官网](https://thrift.apache.org/)\n[thrift-Github](https://github.com/apache/thrift)\nhttps://www.kancloud.cn/digest/thrift/","slug":"thrift教程","published":1,"updated":"2019-11-02T07:12:18.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6h004nt6s6wvhtm2xl","content":"<p> Apache Thrift 采用接口描述语言定义并创建服务，支持可扩展的跨语言服务开发，所包含的代码生成引擎可以在多种语言中，如 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk 等创建高效的、无缝的服务，其传输数据采用二进制格式，相对 XML 和 JSON 体积更小，对于高并发、大数据量和多语言的环境更有优势</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《thrift.apache.org》\n<a id=\"more\"></a></p>\n<hr>\n<p><br></p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Thrift通过IDL（Interface Definition Language，接口定义语言）来定义RPC（Remote Procedure Call，远程过程调用）的接口和数据类型，然后通过thrift编译器生成不同语言的代码，并由生成的代码负责RPC协议层和传输层的实现。</p>\n<p><img src=\"thrift-layers.png\" alt=\"thrift-layers\"></p>\n<p><br></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>现下载：<a href=\"https://thrift.apache.org/download\" target=\"_blank\" rel=\"noopener\">https://thrift.apache.org/download</a>\n官网安装：<a href=\"https://thrift.apache.org/docs/install/\" target=\"_blank\" rel=\"noopener\">https://thrift.apache.org/docs/install/</a></p>\n<p><br></p>\n<h4 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a>快速安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装命令</span></span><br><span class=\"line\">brew install thrift</span><br><span class=\"line\"><span class=\"comment\"># 卸载命令</span></span><br><span class=\"line\">brew uninstall thrift</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"源安装\"><a href=\"#源安装\" class=\"headerlink\" title=\"源安装\"></a>源安装</h4><p><strong> 1、Install Boost </strong>\nBoost 下载地址：<a href=\"https://www.boost.org/\" target=\"_blank\" rel=\"noopener\">https://www.boost.org/</a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bootstrap.sh</span><br><span class=\"line\">sudo ./b2 threading=multi address-model=64 variant=release stage install</span><br></pre></td></tr></table></figure></p>\n<p><strong> 2、Install libevent </strong>\nlibevent 下载地址：<a href=\"http://libevent.org/\" target=\"_blank\" rel=\"noopener\">http://libevent.org/</a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span></span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure></p>\n<p><strong> 3、Building Apache Thrift </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/ --with-boost=/usr/<span class=\"built_in\">local</span> --with-libevent=/usr/<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>1、pom文件导入thrift依赖\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.thrift/libthrift --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.thrift<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>libthrift<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.11.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p><br></p>\n<hr>\n<p>参考\n<a href=\"https://thrift.apache.org/\" target=\"_blank\" rel=\"noopener\">thrift官网</a>\n<a href=\"https://github.com/apache/thrift\" target=\"_blank\" rel=\"noopener\">thrift-Github</a>\n<a href=\"https://www.kancloud.cn/digest/thrift/\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/digest/thrift/</a></p>\n","site":{"data":{}},"excerpt":"<p> Apache Thrift 采用接口描述语言定义并创建服务，支持可扩展的跨语言服务开发，所包含的代码生成引擎可以在多种语言中，如 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk 等创建高效的、无缝的服务，其传输数据采用二进制格式，相对 XML 和 JSON 体积更小，对于高并发、大数据量和多语言的环境更有优势</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《thrift.apache.org》","more":"</p>\n<hr>\n<p><br></p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Thrift通过IDL（Interface Definition Language，接口定义语言）来定义RPC（Remote Procedure Call，远程过程调用）的接口和数据类型，然后通过thrift编译器生成不同语言的代码，并由生成的代码负责RPC协议层和传输层的实现。</p>\n<p><img src=\"thrift-layers.png\" alt=\"thrift-layers\"></p>\n<p><br></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>现下载：<a href=\"https://thrift.apache.org/download\" target=\"_blank\" rel=\"noopener\">https://thrift.apache.org/download</a>\n官网安装：<a href=\"https://thrift.apache.org/docs/install/\" target=\"_blank\" rel=\"noopener\">https://thrift.apache.org/docs/install/</a></p>\n<p><br></p>\n<h4 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a>快速安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装命令</span></span><br><span class=\"line\">brew install thrift</span><br><span class=\"line\"><span class=\"comment\"># 卸载命令</span></span><br><span class=\"line\">brew uninstall thrift</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"源安装\"><a href=\"#源安装\" class=\"headerlink\" title=\"源安装\"></a>源安装</h4><p><strong> 1、Install Boost </strong>\nBoost 下载地址：<a href=\"https://www.boost.org/\" target=\"_blank\" rel=\"noopener\">https://www.boost.org/</a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bootstrap.sh</span><br><span class=\"line\">sudo ./b2 threading=multi address-model=64 variant=release stage install</span><br></pre></td></tr></table></figure></p>\n<p><strong> 2、Install libevent </strong>\nlibevent 下载地址：<a href=\"http://libevent.org/\" target=\"_blank\" rel=\"noopener\">http://libevent.org/</a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span></span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure></p>\n<p><strong> 3、Building Apache Thrift </strong>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/ --with-boost=/usr/<span class=\"built_in\">local</span> --with-libevent=/usr/<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>1、pom文件导入thrift依赖\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.thrift/libthrift --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.thrift<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>libthrift<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.11.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p><br></p>\n<hr>\n<p>参考\n<a href=\"https://thrift.apache.org/\" target=\"_blank\" rel=\"noopener\">thrift官网</a>\n<a href=\"https://github.com/apache/thrift\" target=\"_blank\" rel=\"noopener\">thrift-Github</a>\n<a href=\"https://www.kancloud.cn/digest/thrift/\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/digest/thrift/</a></p>"},{"title":"中文分词","date":"2018-12-03T11:31:35.000Z","_content":"\n\n","source":"_posts/中文分词.md","raw":"---\ntitle: 中文分词\ndate: 2018-12-03 19:31:35\ncategories: \n    - 机器学习\n    - 自然语言处理\ntags:\n    - 机器学习\n    - 自然语言处理\n    - 中文分词\n    - 深度学习\n---\n\n\n","slug":"中文分词","published":1,"updated":"2019-11-02T07:12:18.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6i004pt6s66o03qisf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"交叉熵","date":"2018-11-10T00:01:01.000Z","_content":"\n\n熵（英语：entropy）是接收的每条消息中包含的信息的平均量。\n\n熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量\n\n`结论：熵越大不确定性越大`\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n### 公式\n\n$$H(p,q)=- \\sum_{x} p(x) \\log q(x)$$\n\n<br/>\n\n---\n参考\n\n[wikipedia-交叉熵](https://en.wikipedia.org/wiki/Cross_entropy)\n[baike-交叉熵](https://baike.baidu.com/item/%E4%BA%A4%E5%8F%89%E7%86%B5)\n","source":"_posts/交叉熵.md","raw":"---\ntitle: 交叉熵\ndate: 2018-11-10 08:01:01\ncategories: \n    - 信息论\ntags:\n    - 算法\n    - 机器学习\n    - 信息论\n    - 信息熵\n---\n\n\n熵（英语：entropy）是接收的每条消息中包含的信息的平均量。\n\n熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量\n\n`结论：熵越大不确定性越大`\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n### 公式\n\n$$H(p,q)=- \\sum_{x} p(x) \\log q(x)$$\n\n<br/>\n\n---\n参考\n\n[wikipedia-交叉熵](https://en.wikipedia.org/wiki/Cross_entropy)\n[baike-交叉熵](https://baike.baidu.com/item/%E4%BA%A4%E5%8F%89%E7%86%B5)\n","slug":"交叉熵","published":1,"updated":"2019-11-02T07:12:18.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6k004tt6s6gmkm28b9","content":"<p>熵（英语：entropy）是接收的每条消息中包含的信息的平均量。</p>\n<p>熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量</p>\n<p><code>结论：熵越大不确定性越大</code>\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<a id=\"more\"></a>\n<h3 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h3><p>$$H(p,q)=- \\sum_{x} p(x) \\log q(x)$$</p>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Cross_entropy\" target=\"_blank\" rel=\"noopener\">wikipedia-交叉熵</a>\n<a href=\"https://baike.baidu.com/item/%E4%BA%A4%E5%8F%89%E7%86%B5\" target=\"_blank\" rel=\"noopener\">baike-交叉熵</a></p>\n","site":{"data":{}},"excerpt":"<p>熵（英语：entropy）是接收的每条消息中包含的信息的平均量。</p>\n<p>熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量</p>\n<p><code>结论：熵越大不确定性越大</code>\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>","more":"<h3 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h3><p>$$H(p,q)=- \\sum_{x} p(x) \\log q(x)$$</p>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Cross_entropy\" target=\"_blank\" rel=\"noopener\">wikipedia-交叉熵</a>\n<a href=\"https://baike.baidu.com/item/%E4%BA%A4%E5%8F%89%E7%86%B5\" target=\"_blank\" rel=\"noopener\">baike-交叉熵</a></p>"},{"title":"人工神经网络","date":"2018-12-01T06:52:06.000Z","_content":"\n`人工神经网络`（英语：Artificial Neural Network，ANN），简称`神经网络`（Neural Network，NN）或`类神经网络`，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。\n神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种`自适应系统`，通俗的讲就是具备学习功能。现代神经网络是一种非线性统计性数据建模工具。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n---\n\n<br/>\n\n`神经网络`是由具有`适应性`的`神经元`组成的广泛并行互联的网络，它的组织能够模拟生物神经系统对真实世界物体所作出的`交互反应`\n\n\n<br/>\n## 神经元\n神经网络最基本的成分是`神经元`模型\n\n![M-P神经元模型](1543648111947.jpg)\n\n\n\n\n<br/>\n## 组成\n\n<br/>\n### 激励函数\n\n#### 阶跃函数（sgn）\n$$\nsgn(x)= \\begin{cases} 1 & x \\geq 0 \\\\\\ 0 & x \\lt 0 \\end{cases}\n$$\n\n#### Sigmoid函数（sigmoid）\n$$\nsigmoid(x) = \\frac{1}{1+e^{-x}}\n$$\n\n#### tanh函数（tanh）\n$$\ntanh(x) = \\frac{e^x - e^{-x}}{e^x+e^{-x}}\n$$\n\n#### Relu函数（Relu）\n$$\nrelu(x)= \\begin{cases} 1 & x \\geq 0 \\\\\\ 0 & x \\lt 0 \\end{cases}\n$$\n\n\n\n<br/>\n## 分类\n\n### 依学习策略\n- 监督式学习网络（Supervised Learning Network）为主\n- 无监督式学习网络（Unsupervised Learning Network）\n- 混合式学习网络（Hybrid Learning Network）\n- 联想式学习网络（Associate Learning Network）\n- 最适化学习网络（Optimization Application Network）\n\n### 依网络架构\n- 前馈神经网络（Feed Forward Network）\n- 递归神经网络（Recurrent Network）\n- 强化式架构（Reinforcement Network）\n\n\n\n\n\n\n\n\n\n<br/>\n\n---\n参考\n\n[wikipedia-人工神经网络](https://en.wikipedia.org/wiki/Artificial_neural_network)\n周志华《机器学习》\n","source":"_posts/人工神经网络.md","raw":"---\ntitle: 人工神经网络\ndate: 2018-12-01 14:52:06\ncategories: \n    - 神经网络\ntags:\n    - 人工智能\n    - 神经网络\n---\n\n`人工神经网络`（英语：Artificial Neural Network，ANN），简称`神经网络`（Neural Network，NN）或`类神经网络`，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。\n神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种`自适应系统`，通俗的讲就是具备学习功能。现代神经网络是一种非线性统计性数据建模工具。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n---\n\n<br/>\n\n`神经网络`是由具有`适应性`的`神经元`组成的广泛并行互联的网络，它的组织能够模拟生物神经系统对真实世界物体所作出的`交互反应`\n\n\n<br/>\n## 神经元\n神经网络最基本的成分是`神经元`模型\n\n![M-P神经元模型](1543648111947.jpg)\n\n\n\n\n<br/>\n## 组成\n\n<br/>\n### 激励函数\n\n#### 阶跃函数（sgn）\n$$\nsgn(x)= \\begin{cases} 1 & x \\geq 0 \\\\\\ 0 & x \\lt 0 \\end{cases}\n$$\n\n#### Sigmoid函数（sigmoid）\n$$\nsigmoid(x) = \\frac{1}{1+e^{-x}}\n$$\n\n#### tanh函数（tanh）\n$$\ntanh(x) = \\frac{e^x - e^{-x}}{e^x+e^{-x}}\n$$\n\n#### Relu函数（Relu）\n$$\nrelu(x)= \\begin{cases} 1 & x \\geq 0 \\\\\\ 0 & x \\lt 0 \\end{cases}\n$$\n\n\n\n<br/>\n## 分类\n\n### 依学习策略\n- 监督式学习网络（Supervised Learning Network）为主\n- 无监督式学习网络（Unsupervised Learning Network）\n- 混合式学习网络（Hybrid Learning Network）\n- 联想式学习网络（Associate Learning Network）\n- 最适化学习网络（Optimization Application Network）\n\n### 依网络架构\n- 前馈神经网络（Feed Forward Network）\n- 递归神经网络（Recurrent Network）\n- 强化式架构（Reinforcement Network）\n\n\n\n\n\n\n\n\n\n<br/>\n\n---\n参考\n\n[wikipedia-人工神经网络](https://en.wikipedia.org/wiki/Artificial_neural_network)\n周志华《机器学习》\n","slug":"人工神经网络","published":1,"updated":"2019-11-02T07:12:18.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6m004vt6s6edwdj5yi","content":"<p><code>人工神经网络</code>（英语：Artificial Neural Network，ANN），简称<code>神经网络</code>（Neural Network，NN）或<code>类神经网络</code>，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。\n神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种<code>自适应系统</code>，通俗的讲就是具备学习功能。现代神经网络是一种非线性统计性数据建模工具。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<a id=\"more\"></a>\n<hr>\n<p><br></p>\n<p><code>神经网络</code>是由具有<code>适应性</code>的<code>神经元</code>组成的广泛并行互联的网络，它的组织能够模拟生物神经系统对真实世界物体所作出的<code>交互反应</code></p>\n<p><br></p>\n<h2 id=\"神经元\"><a href=\"#神经元\" class=\"headerlink\" title=\"神经元\"></a>神经元</h2><p>神经网络最基本的成分是<code>神经元</code>模型</p>\n<p><img src=\"1543648111947.jpg\" alt=\"M-P神经元模型\"></p>\n<p><br></p>\n<h2 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h2><p><br></p>\n<h3 id=\"激励函数\"><a href=\"#激励函数\" class=\"headerlink\" title=\"激励函数\"></a>激励函数</h3><h4 id=\"阶跃函数（sgn）\"><a href=\"#阶跃函数（sgn）\" class=\"headerlink\" title=\"阶跃函数（sgn）\"></a>阶跃函数（sgn）</h4><p>$$\nsgn(x)= \\begin{cases} 1 &amp; x \\geq 0 \\\\ 0 &amp; x \\lt 0 \\end{cases}\n$$</p>\n<h4 id=\"Sigmoid函数（sigmoid）\"><a href=\"#Sigmoid函数（sigmoid）\" class=\"headerlink\" title=\"Sigmoid函数（sigmoid）\"></a>Sigmoid函数（sigmoid）</h4><p>$$\nsigmoid(x) = \\frac{1}{1+e^{-x}}\n$$</p>\n<h4 id=\"tanh函数（tanh）\"><a href=\"#tanh函数（tanh）\" class=\"headerlink\" title=\"tanh函数（tanh）\"></a>tanh函数（tanh）</h4><p>$$\ntanh(x) = \\frac{e^x - e^{-x}}{e^x+e^{-x}}\n$$</p>\n<h4 id=\"Relu函数（Relu）\"><a href=\"#Relu函数（Relu）\" class=\"headerlink\" title=\"Relu函数（Relu）\"></a>Relu函数（Relu）</h4><p>$$\nrelu(x)= \\begin{cases} 1 &amp; x \\geq 0 \\\\ 0 &amp; x \\lt 0 \\end{cases}\n$$</p>\n<p><br></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><h3 id=\"依学习策略\"><a href=\"#依学习策略\" class=\"headerlink\" title=\"依学习策略\"></a>依学习策略</h3><ul>\n<li>监督式学习网络（Supervised Learning Network）为主</li>\n<li>无监督式学习网络（Unsupervised Learning Network）</li>\n<li>混合式学习网络（Hybrid Learning Network）</li>\n<li>联想式学习网络（Associate Learning Network）</li>\n<li>最适化学习网络（Optimization Application Network）</li>\n</ul>\n<h3 id=\"依网络架构\"><a href=\"#依网络架构\" class=\"headerlink\" title=\"依网络架构\"></a>依网络架构</h3><ul>\n<li>前馈神经网络（Feed Forward Network）</li>\n<li>递归神经网络（Recurrent Network）</li>\n<li>强化式架构（Reinforcement Network）</li>\n</ul>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\" target=\"_blank\" rel=\"noopener\">wikipedia-人工神经网络</a>\n周志华《机器学习》</p>\n","site":{"data":{}},"excerpt":"<p><code>人工神经网络</code>（英语：Artificial Neural Network，ANN），简称<code>神经网络</code>（Neural Network，NN）或<code>类神经网络</code>，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。\n神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种<code>自适应系统</code>，通俗的讲就是具备学习功能。现代神经网络是一种非线性统计性数据建模工具。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>","more":"<hr>\n<p><br></p>\n<p><code>神经网络</code>是由具有<code>适应性</code>的<code>神经元</code>组成的广泛并行互联的网络，它的组织能够模拟生物神经系统对真实世界物体所作出的<code>交互反应</code></p>\n<p><br></p>\n<h2 id=\"神经元\"><a href=\"#神经元\" class=\"headerlink\" title=\"神经元\"></a>神经元</h2><p>神经网络最基本的成分是<code>神经元</code>模型</p>\n<p><img src=\"1543648111947.jpg\" alt=\"M-P神经元模型\"></p>\n<p><br></p>\n<h2 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h2><p><br></p>\n<h3 id=\"激励函数\"><a href=\"#激励函数\" class=\"headerlink\" title=\"激励函数\"></a>激励函数</h3><h4 id=\"阶跃函数（sgn）\"><a href=\"#阶跃函数（sgn）\" class=\"headerlink\" title=\"阶跃函数（sgn）\"></a>阶跃函数（sgn）</h4><p>$$\nsgn(x)= \\begin{cases} 1 &amp; x \\geq 0 \\\\ 0 &amp; x \\lt 0 \\end{cases}\n$$</p>\n<h4 id=\"Sigmoid函数（sigmoid）\"><a href=\"#Sigmoid函数（sigmoid）\" class=\"headerlink\" title=\"Sigmoid函数（sigmoid）\"></a>Sigmoid函数（sigmoid）</h4><p>$$\nsigmoid(x) = \\frac{1}{1+e^{-x}}\n$$</p>\n<h4 id=\"tanh函数（tanh）\"><a href=\"#tanh函数（tanh）\" class=\"headerlink\" title=\"tanh函数（tanh）\"></a>tanh函数（tanh）</h4><p>$$\ntanh(x) = \\frac{e^x - e^{-x}}{e^x+e^{-x}}\n$$</p>\n<h4 id=\"Relu函数（Relu）\"><a href=\"#Relu函数（Relu）\" class=\"headerlink\" title=\"Relu函数（Relu）\"></a>Relu函数（Relu）</h4><p>$$\nrelu(x)= \\begin{cases} 1 &amp; x \\geq 0 \\\\ 0 &amp; x \\lt 0 \\end{cases}\n$$</p>\n<p><br></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><h3 id=\"依学习策略\"><a href=\"#依学习策略\" class=\"headerlink\" title=\"依学习策略\"></a>依学习策略</h3><ul>\n<li>监督式学习网络（Supervised Learning Network）为主</li>\n<li>无监督式学习网络（Unsupervised Learning Network）</li>\n<li>混合式学习网络（Hybrid Learning Network）</li>\n<li>联想式学习网络（Associate Learning Network）</li>\n<li>最适化学习网络（Optimization Application Network）</li>\n</ul>\n<h3 id=\"依网络架构\"><a href=\"#依网络架构\" class=\"headerlink\" title=\"依网络架构\"></a>依网络架构</h3><ul>\n<li>前馈神经网络（Feed Forward Network）</li>\n<li>递归神经网络（Recurrent Network）</li>\n<li>强化式架构（Reinforcement Network）</li>\n</ul>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\" target=\"_blank\" rel=\"noopener\">wikipedia-人工神经网络</a>\n周志华《机器学习》</p>"},{"title":"信息熵","date":"2018-11-10T00:01:01.000Z","_content":"\n\n熵（英语：entropy）是接收的每条消息中包含的信息的平均量。\n\n熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量\n\n`结论：熵越大不确定性越大，熵最小是0`\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n<br/>\n<br/>\n\n### 公式\n\n$$\nH(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})\n$$\n\n其中，$P(X_{i})$为$X=X_{i}$的概率\n在这里b是对数所使用的底，通常是2、自然常数e或是10。当b = 2，熵的单位是bit；当b = e，熵的单位是nat；而当b = 10，熵的单位是Hart。\n\n<br/>\n### 范例\n\n1、随机投掷一枚硬笔，假设两面不相同且出现正面、反面概率都一样，为$\\frac{1}{2}$。信息熵为：\n\n$$\nH(X)= -\\sum_{i=1}^2 \\frac{1}{2} \\log_2 \\frac{1}{2} = - (\\frac{1}{2} \\log_2 \\frac{1}{2} + \\frac{1}{2} \\log_2 \\frac{1}{2}) = 1\n$$\n\n但是如果一枚硬币的两面完全相同，信息熵：0\n\n2、\n\n\n<br/>\n### 应用场景\n\n[ID3算法](../ID3算法) [C4.5算法](../C4.5算法)\n\n\n<br/>\n\n--- \n参考\n[wikipedia-信息熵](https://en.wikipedia.org/wiki/Entropy_(information_theory)\n[百度百科-信息熵](https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E7%86%B5)","source":"_posts/信息熵.md","raw":"---\ntitle: 信息熵\ndate: 2018-11-10 08:01:01\ncategories: \n    - 信息论\ntags:\n    - 数学\n    - 算法\n    - 机器学习\n    - 信息论\n    - 信息熵\n---\n\n\n熵（英语：entropy）是接收的每条消息中包含的信息的平均量。\n\n熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量\n\n`结论：熵越大不确定性越大，熵最小是0`\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n<br/>\n<br/>\n\n### 公式\n\n$$\nH(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})\n$$\n\n其中，$P(X_{i})$为$X=X_{i}$的概率\n在这里b是对数所使用的底，通常是2、自然常数e或是10。当b = 2，熵的单位是bit；当b = e，熵的单位是nat；而当b = 10，熵的单位是Hart。\n\n<br/>\n### 范例\n\n1、随机投掷一枚硬笔，假设两面不相同且出现正面、反面概率都一样，为$\\frac{1}{2}$。信息熵为：\n\n$$\nH(X)= -\\sum_{i=1}^2 \\frac{1}{2} \\log_2 \\frac{1}{2} = - (\\frac{1}{2} \\log_2 \\frac{1}{2} + \\frac{1}{2} \\log_2 \\frac{1}{2}) = 1\n$$\n\n但是如果一枚硬币的两面完全相同，信息熵：0\n\n2、\n\n\n<br/>\n### 应用场景\n\n[ID3算法](../ID3算法) [C4.5算法](../C4.5算法)\n\n\n<br/>\n\n--- \n参考\n[wikipedia-信息熵](https://en.wikipedia.org/wiki/Entropy_(information_theory)\n[百度百科-信息熵](https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E7%86%B5)","slug":"信息熵","published":1,"updated":"2019-11-02T07:12:18.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6n004zt6s6tkm7eia2","content":"<p>熵（英语：entropy）是接收的每条消息中包含的信息的平均量。</p>\n<p>熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量</p>\n<p><code>结论：熵越大不确定性越大，熵最小是0</code>\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<a id=\"more\"></a>\n<p><br>\n<br></p>\n<h3 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h3><p>$$\nH(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})\n$$</p>\n<p>其中，$P(X_{i})$为$X=X_{i}$的概率\n在这里b是对数所使用的底，通常是2、自然常数e或是10。当b = 2，熵的单位是bit；当b = e，熵的单位是nat；而当b = 10，熵的单位是Hart。</p>\n<p><br></p>\n<h3 id=\"范例\"><a href=\"#范例\" class=\"headerlink\" title=\"范例\"></a>范例</h3><p>1、随机投掷一枚硬笔，假设两面不相同且出现正面、反面概率都一样，为$\\frac{1}{2}$。信息熵为：</p>\n<p>$$\nH(X)= -\\sum_{i=1}^2 \\frac{1}{2} \\log_2 \\frac{1}{2} = - (\\frac{1}{2} \\log_2 \\frac{1}{2} + \\frac{1}{2} \\log_2 \\frac{1}{2}) = 1\n$$</p>\n<p>但是如果一枚硬币的两面完全相同，信息熵：0</p>\n<p>2、</p>\n<p><br></p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p><a href=\"../ID3算法\">ID3算法</a> <a href=\"../C4.5算法\">C4.5算法</a></p>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://en.wikipedia.org/wiki/Entropy_(information_theory\" target=\"_blank\" rel=\"noopener\">wikipedia-信息熵</a>\n<a href=\"https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E7%86%B5\" target=\"_blank\" rel=\"noopener\">百度百科-信息熵</a></p>\n","site":{"data":{}},"excerpt":"<p>熵（英语：entropy）是接收的每条消息中包含的信息的平均量。</p>\n<p>熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量</p>\n<p><code>结论：熵越大不确定性越大，熵最小是0</code>\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>","more":"<p><br>\n<br></p>\n<h3 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h3><p>$$\nH(X)=-\\sum_{i=0} P(X_{i}) \\log_b P(X_{i})\n$$</p>\n<p>其中，$P(X_{i})$为$X=X_{i}$的概率\n在这里b是对数所使用的底，通常是2、自然常数e或是10。当b = 2，熵的单位是bit；当b = e，熵的单位是nat；而当b = 10，熵的单位是Hart。</p>\n<p><br></p>\n<h3 id=\"范例\"><a href=\"#范例\" class=\"headerlink\" title=\"范例\"></a>范例</h3><p>1、随机投掷一枚硬笔，假设两面不相同且出现正面、反面概率都一样，为$\\frac{1}{2}$。信息熵为：</p>\n<p>$$\nH(X)= -\\sum_{i=1}^2 \\frac{1}{2} \\log_2 \\frac{1}{2} = - (\\frac{1}{2} \\log_2 \\frac{1}{2} + \\frac{1}{2} \\log_2 \\frac{1}{2}) = 1\n$$</p>\n<p>但是如果一枚硬币的两面完全相同，信息熵：0</p>\n<p>2、</p>\n<p><br></p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p><a href=\"../ID3算法\">ID3算法</a> <a href=\"../C4.5算法\">C4.5算法</a></p>\n<p><br></p>\n<hr>\n<p>参考\n<a href=\"https://en.wikipedia.org/wiki/Entropy_(information_theory\" target=\"_blank\" rel=\"noopener\">wikipedia-信息熵</a>\n<a href=\"https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E7%86%B5\" target=\"_blank\" rel=\"noopener\">百度百科-信息熵</a></p>"},{"title":"创建SecureRandom过慢问题","date":"2018-12-13T12:14:30.000Z","_content":"\nLinux 环境Tomcat启动项目 创建SecureRandom过慢，报如下警告信息\n```\n o.a.c.util.SessionIdGeneratorBase        : Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [28,420] milliseconds.\n```\n\n这个问题很多人遇到过，tomcat的wiki里面还单独列出来作为加速启动的一个方面：\nhttps://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source\n\n\ntomcat7/tomcat8的session id的生成主要通过`java.security.SecureRandom`生成随机数来实现，随机数算法使用的是`SHA1PRNG`\n\n在sun/oracle的jdk里，这个算法的提供者在底层依赖到操作系统提供的随机数据，在linux上，与之相关的是`/dev/random`和`/dev/urandom` \n** /dev/random **\n```\n在读取时，/dev/random设备会返回小于熵池噪声总数的随机字节。\n/dev/random可生成高随机性的公钥或一次性密码本。\n若熵池空了，对/dev/random的读操作将会被阻塞，直到收集到了足够的环境噪声为止\n```\n\n** /dev/urandom 则是一个非阻塞的发生器 **\n```\ndev/random的一个副本是/dev/urandom （”unlocked”，非阻塞的随机数发生器），它会重复使用熵池中的数据以产生伪随机数据。\n这表示对/dev/urandom的读取操作不会产生阻塞，但其输出的熵可能小于/dev/random的。\n它可以作为生成较低强度密码的伪随机数生成器，不建议用于生成高强度长期密码。\n```\n\n<!-- more -->\n\n** 解决方法：**\n\n采用非阻塞的熵源(entropy source)\n\n```\n系统属性:\n-Djava.security.egd=file:/dev/./urandom\n\n文件修改：$JAVA_HOME/jre/lib/security/java.security\nsecurerandom.source=file:/dev/urandom\n```","source":"_posts/创建SecureRandom过慢问题.md","raw":"---\ntitle: 创建SecureRandom过慢问题\ndate: 2018-12-13 20:14:30\ncategories: \n    - Tomcat\ntags:\n    - Java\n    - Tomcat\n    - Slow\n---\n\nLinux 环境Tomcat启动项目 创建SecureRandom过慢，报如下警告信息\n```\n o.a.c.util.SessionIdGeneratorBase        : Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [28,420] milliseconds.\n```\n\n这个问题很多人遇到过，tomcat的wiki里面还单独列出来作为加速启动的一个方面：\nhttps://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source\n\n\ntomcat7/tomcat8的session id的生成主要通过`java.security.SecureRandom`生成随机数来实现，随机数算法使用的是`SHA1PRNG`\n\n在sun/oracle的jdk里，这个算法的提供者在底层依赖到操作系统提供的随机数据，在linux上，与之相关的是`/dev/random`和`/dev/urandom` \n** /dev/random **\n```\n在读取时，/dev/random设备会返回小于熵池噪声总数的随机字节。\n/dev/random可生成高随机性的公钥或一次性密码本。\n若熵池空了，对/dev/random的读操作将会被阻塞，直到收集到了足够的环境噪声为止\n```\n\n** /dev/urandom 则是一个非阻塞的发生器 **\n```\ndev/random的一个副本是/dev/urandom （”unlocked”，非阻塞的随机数发生器），它会重复使用熵池中的数据以产生伪随机数据。\n这表示对/dev/urandom的读取操作不会产生阻塞，但其输出的熵可能小于/dev/random的。\n它可以作为生成较低强度密码的伪随机数生成器，不建议用于生成高强度长期密码。\n```\n\n<!-- more -->\n\n** 解决方法：**\n\n采用非阻塞的熵源(entropy source)\n\n```\n系统属性:\n-Djava.security.egd=file:/dev/./urandom\n\n文件修改：$JAVA_HOME/jre/lib/security/java.security\nsecurerandom.source=file:/dev/urandom\n```","slug":"创建SecureRandom过慢问题","published":1,"updated":"2019-11-02T07:12:18.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6o0051t6s6q1sawkej","content":"<p>Linux 环境Tomcat启动项目 创建SecureRandom过慢，报如下警告信息\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o.a.c.util.SessionIdGeneratorBase        : Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [28,420] milliseconds.</span><br></pre></td></tr></table></figure></p>\n<p>这个问题很多人遇到过，tomcat的wiki里面还单独列出来作为加速启动的一个方面：\n<a href=\"https://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source\" target=\"_blank\" rel=\"noopener\">https://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source</a></p>\n<p>tomcat7/tomcat8的session id的生成主要通过<code>java.security.SecureRandom</code>生成随机数来实现，随机数算法使用的是<code>SHA1PRNG</code></p>\n<p>在sun/oracle的jdk里，这个算法的提供者在底层依赖到操作系统提供的随机数据，在linux上，与之相关的是<code>/dev/random</code>和<code>/dev/urandom</code> \n<strong> /dev/random </strong>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在读取时，/dev/random设备会返回小于熵池噪声总数的随机字节。</span><br><span class=\"line\">/dev/random可生成高随机性的公钥或一次性密码本。</span><br><span class=\"line\">若熵池空了，对/dev/random的读操作将会被阻塞，直到收集到了足够的环境噪声为止</span><br></pre></td></tr></table></figure></p>\n<p><strong> /dev/urandom 则是一个非阻塞的发生器 </strong>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev/random的一个副本是/dev/urandom （”unlocked”，非阻塞的随机数发生器），它会重复使用熵池中的数据以产生伪随机数据。</span><br><span class=\"line\">这表示对/dev/urandom的读取操作不会产生阻塞，但其输出的熵可能小于/dev/random的。</span><br><span class=\"line\">它可以作为生成较低强度密码的伪随机数生成器，不建议用于生成高强度长期密码。</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><strong> 解决方法：</strong></p>\n<p>采用非阻塞的熵源(entropy source)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统属性:</span><br><span class=\"line\">-Djava.security.egd=file:/dev/./urandom</span><br><span class=\"line\"></span><br><span class=\"line\">文件修改：$JAVA_HOME/jre/lib/security/java.security</span><br><span class=\"line\">securerandom.source=file:/dev/urandom</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Linux 环境Tomcat启动项目 创建SecureRandom过慢，报如下警告信息\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o.a.c.util.SessionIdGeneratorBase        : Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [28,420] milliseconds.</span><br></pre></td></tr></table></figure></p>\n<p>这个问题很多人遇到过，tomcat的wiki里面还单独列出来作为加速启动的一个方面：\n<a href=\"https://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source\" target=\"_blank\" rel=\"noopener\">https://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source</a></p>\n<p>tomcat7/tomcat8的session id的生成主要通过<code>java.security.SecureRandom</code>生成随机数来实现，随机数算法使用的是<code>SHA1PRNG</code></p>\n<p>在sun/oracle的jdk里，这个算法的提供者在底层依赖到操作系统提供的随机数据，在linux上，与之相关的是<code>/dev/random</code>和<code>/dev/urandom</code> \n<strong> /dev/random </strong>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在读取时，/dev/random设备会返回小于熵池噪声总数的随机字节。</span><br><span class=\"line\">/dev/random可生成高随机性的公钥或一次性密码本。</span><br><span class=\"line\">若熵池空了，对/dev/random的读操作将会被阻塞，直到收集到了足够的环境噪声为止</span><br></pre></td></tr></table></figure></p>\n<p><strong> /dev/urandom 则是一个非阻塞的发生器 </strong>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev/random的一个副本是/dev/urandom （”unlocked”，非阻塞的随机数发生器），它会重复使用熵池中的数据以产生伪随机数据。</span><br><span class=\"line\">这表示对/dev/urandom的读取操作不会产生阻塞，但其输出的熵可能小于/dev/random的。</span><br><span class=\"line\">它可以作为生成较低强度密码的伪随机数生成器，不建议用于生成高强度长期密码。</span><br></pre></td></tr></table></figure></p>","more":"<p><strong> 解决方法：</strong></p>\n<p>采用非阻塞的熵源(entropy source)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统属性:</span><br><span class=\"line\">-Djava.security.egd=file:/dev/./urandom</span><br><span class=\"line\"></span><br><span class=\"line\">文件修改：$JAVA_HOME/jre/lib/security/java.security</span><br><span class=\"line\">securerandom.source=file:/dev/urandom</span><br></pre></td></tr></table></figure>"},{"title":"前馈神经网络","date":"2018-12-01T07:20:24.000Z","_content":"\n\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n<br/>\n\n---\n参考\n\n[wikipedia-人工神经网络](https://en.wikipedia.org/wiki/Artificial_neural_network)\n周志华《机器学习》\n","source":"_posts/前馈神经网络.md","raw":"---\ntitle: 前馈神经网络\ndate: 2018-12-01 15:20:24\ncategories: \n    - 神经网络\ntags:\n    - 人工智能\n    - 神经网络\n---\n\n\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n<br/>\n\n---\n参考\n\n[wikipedia-人工神经网络](https://en.wikipedia.org/wiki/Artificial_neural_network)\n周志华《机器学习》\n","slug":"前馈神经网络","published":1,"updated":"2019-11-02T07:12:18.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6p0056t6s619td3va4","content":"<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<a id=\"more\"></a>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\" target=\"_blank\" rel=\"noopener\">wikipedia-人工神经网络</a>\n周志华《机器学习》</p>\n","site":{"data":{}},"excerpt":"<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>","more":"<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\" target=\"_blank\" rel=\"noopener\">wikipedia-人工神经网络</a>\n周志华《机器学习》</p>"},{"title":"半朴素贝叶斯算法","date":"2018-11-13T02:41:11.000Z","_content":"\n\n\n\n<!-- more -->","source":"_posts/半朴素贝叶斯算法.md","raw":"---\ntitle: 半朴素贝叶斯算法\ndate: 2018-11-13 10:41:11\ncategories: \n    - 机器学习\ntags: \n    - 算法\n    - 机器学习\n    - 监督学习\n    - 贝叶斯\n---\n\n\n\n\n<!-- more -->","slug":"半朴素贝叶斯算法","published":1,"updated":"2019-11-02T07:12:18.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6q0058t6s6sya61n5h","content":"<a id=\"more\"></a>","site":{"data":{}},"excerpt":"","more":""},{"title":"协方差","date":"2012-10-01T00:01:04.000Z","_content":"\n在概率论和统计学中，一个离散性随机变量的期望值是试验中每次可能的结果乘以其结果概率的总和\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n---\n\n\n<!-- more -->\n\n\n<br/>\n### 定义\n\n\n$$$$\n\n\n\n<br/>\n\n---\n参考\n\n[wikipedia-协方差](https://en.wikipedia.org/wiki/Covariance)","source":"_posts/协方差.md","raw":"---\ntitle: 协方差\ndate: 2012-10-01 08:01:04\ncategories: \n    - 概率与统计\ntags: \n    - 数学\n    - 概率与统计\n    - 方差\n---\n\n在概率论和统计学中，一个离散性随机变量的期望值是试验中每次可能的结果乘以其结果概率的总和\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n---\n\n\n<!-- more -->\n\n\n<br/>\n### 定义\n\n\n$$$$\n\n\n\n<br/>\n\n---\n参考\n\n[wikipedia-协方差](https://en.wikipedia.org/wiki/Covariance)","slug":"协方差","published":1,"updated":"2019-11-02T07:12:18.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6s005ct6s6y2ms3u8c","content":"<p>在概率论和统计学中，一个离散性随机变量的期望值是试验中每次可能的结果乘以其结果概率的总和</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>\n<a id=\"more\"></a>\n<p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>$$$$</p>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Covariance\" target=\"_blank\" rel=\"noopener\">wikipedia-协方差</a></p>\n","site":{"data":{}},"excerpt":"<p>在概率论和统计学中，一个离散性随机变量的期望值是试验中每次可能的结果乘以其结果概率的总和</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>","more":"<p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>$$$$</p>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Covariance\" target=\"_blank\" rel=\"noopener\">wikipedia-协方差</a></p>"},{"title":"卷积神经网络(CNN)","date":"2018-12-01T07:22:04.000Z","_content":"\n`卷积神经网络`（Convolutional Neural Network, `CNN`）是一种`前馈神经网络`，它的人工神经元可以响应一部分覆盖范围内的周围单元，对于大型图像处理有出色表现。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n---\n\n\n\n\n### 应用\n图片识别\n视频识别\n自然语言处理\n围棋\n\n<br/>\n\n---\n参考\n\n","source":"_posts/卷积神经网络.md","raw":"---\ntitle: 卷积神经网络(CNN)\ndate: 2018-12-01 15:22:04\ncategories: \n    - 神经网络\ntags:\n    - 人工智能\n    - 神经网络\n    - 前馈神经网络\n    - 卷积神经网络\n---\n\n`卷积神经网络`（Convolutional Neural Network, `CNN`）是一种`前馈神经网络`，它的人工神经元可以响应一部分覆盖范围内的周围单元，对于大型图像处理有出色表现。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n---\n\n\n\n\n### 应用\n图片识别\n视频识别\n自然语言处理\n围棋\n\n<br/>\n\n---\n参考\n\n","slug":"卷积神经网络","published":1,"updated":"2019-11-02T07:12:18.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6t005ft6s6e9gqzegv","content":"<p><code>卷积神经网络</code>（Convolutional Neural Network, <code>CNN</code>）是一种<code>前馈神经网络</code>，它的人工神经元可以响应一部分覆盖范围内的周围单元，对于大型图像处理有出色表现。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>图片识别\n视频识别\n自然语言处理\n围棋</p>\n<p><br></p>\n<hr>\n<p>参考</p>\n","site":{"data":{}},"excerpt":"<p><code>卷积神经网络</code>（Convolutional Neural Network, <code>CNN</code>）是一种<code>前馈神经网络</code>，它的人工神经元可以响应一部分覆盖范围内的周围单元，对于大型图像处理有出色表现。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>","more":"<hr>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>图片识别\n视频识别\n自然语言处理\n围棋</p>\n<p><br></p>\n<hr>\n<p>参考</p>"},{"title":"哈希(Hash)函数汇总","date":"2019-06-14T06:00:22.000Z","_content":"\n\n<br/>\n## Fnv\n\n### FNV-1 hash\n```c\n    hash = FNV_offset_basis\n    for each byte_of_data to be hashed\n   \t    hash = hash × FNV_prime\n   \t    hash = hash XOR byte_of_data\n    return hash\n```\n\n### FNV-1a hash\n```c\n    hash = FNV_offset_basis\n    for each byte_of_data to be hashed\n   \t    hash = hash XOR byte_of_data\n   \t    hash = hash × FNV_prime\n    return hash\n```\n\n### FNV-0 hash (Deprecated)\n```c\n    hash = 0\n    for each byte_of_data to be hashed\n   \t    hash = hash × FNV_prime\n   \t    hash = hash XOR octet_of_data\n    return hash\n```\n\n### FNV parameters\nSize in bits | FNV prime | FNV offset basis\n:-------------:|:-----------:|:-----------------:\n32  |   224 + 28 + 0x93 = <br/>16777619 | 2166136261 = <br/>0x811c9dc5\n64  |   240 + 28 + 0xb3 = <br/>1099511628211 | 14695981039346656037 = <br/>0xcbf29ce484222325\n128 |\t288 + 28 + 0x3b = <br/>309485009821345068724781371   | 144066263297769815596495629667062367629 <br/>= <br/>0x6c62272e07bb014262b821756295c58d\n256 |\t2168 + 28 + 0x63 = <br/>374144419156711147060143317<br/>175368453031918731002211  | 100029257958052580907070968620625704837<br/>092796014241193945225284501741471925557 <br/>= <br/>0xdd268dbcaac550362d98c384c4e576ccc8b153<br/>6847b6bbb31023b4c8caee0535\n512 |\t2344 + 28 + 0x57 = <br/>358359158748448673689190764<br/>890951084499463279557543925<br/>26094039892345713852759 |   965930312949666949800943540071631046609<br/>041874567263789610837432943446265799458<br/>293219771643844981305189220653980578449<br/>5328239340083876191928701583869517785 = <br/>0xb86db0b1171f4416dca1e50f309990acac87d0<br/>59c90000000000000000000d21e948f68a34c192<br/>f62ea79bc942dbe7ce182036415f56e34bac982a<br/>ac4afe9fd9\n1024    |   2680 + 28 + 0x8d = <br/>501645651011311865543459881<br/>103527895503076534540479074<br/>430301752383111205510814745<br/>150915769222029538271616265<br/>187852689524938529229181652<br/>437508374669137180409427187<br/>316048473796672026038921768<br/>4476157468082573 |   14197795064947621068722070641403218320<br/>88062279544193396087847491461758272325<br/>22967323037177221508640965212023555493<br/>65628174669108571814760471015076148029<br/>75596980407732015769245856300321530495<br/>71501574036444603635505054127112859663<br/>61610267868082893823963790439336411086<br/>884584107735010676915 <br/> = <br/>0x0000000000000000 005f7a76758ecc4d 32e56d5a591028b7 4b29fc4223fdada1 <br/>6c3bf34eda3674da 9a21d90000000000 0000000000000000 0000000000000000 <br/>0000000000000000 0000000000000000 0000000000000000 000000000004c6d7 <br/>eb6e73802734510a 555f256cc005ae55 6bde8cc9c6a93b21 aff4b16c71ee90b3\n\n\n### 具体列子\n```java\npublic static long fnv_1a_64(String value) {\n        if (value == null) {\n            return 0;\n        }\n        long hash = FNV_1A_64_BASIC;\n        for (int i = 0; i < value.length(); i++) {\n            char c = value.charAt(i);\n            hash ^= c;\n            hash *= FNV_1A_64_PRIME;\n        }\n\n        return hash;\n    }\n\n    public static long fnv_1a_64_lower(String key) {\n        long hash = FNV_1A_64_BASIC;\n        for (int i = 0; i < key.length(); ++i) {\n            char c = key.charAt(i);\n\n            if (c >= 'A' && c <= 'Z') {\n                c = (char) (c + 32);\n            }\n\n            hash ^= c;\n            hash *= FNV_1A_64_PRIME;\n        }\n\n        return hash;\n    }\n```\n\n\n## MurmurHash3\n```c++\n//-----------------------------------------------------------------------------\n// MurmurHash3 was written by Austin Appleby, and is placed in the public\n// domain. The author hereby disclaims copyright to this source code.\n\n// Note - The x86 and x64 versions do _not_ produce the same results, as the\n// algorithms are optimized for their respective platforms. You can still\n// compile and run any of them on any platform, but your performance with the\n// non-native version will be less than optimal.\n\n#include \"MurmurHash3.h\"\n\n//-----------------------------------------------------------------------------\n// Platform-specific functions and macros\n\n// Microsoft Visual Studio\n\n#if defined(_MSC_VER)\n\n#define FORCE_INLINE\t__forceinline\n\n#include <stdlib.h>\n\n#define ROTL32(x,y)\t_rotl(x,y)\n#define ROTL64(x,y)\t_rotl64(x,y)\n\n#define BIG_CONSTANT(x) (x)\n\n// Other compilers\n\n#else\t// defined(_MSC_VER)\n\n#define\tFORCE_INLINE inline __attribute__((always_inline))\n\ninline uint32_t rotl32 ( uint32_t x, int8_t r )\n{\n  return (x << r) | (x >> (32 - r));\n}\n\ninline uint64_t rotl64 ( uint64_t x, int8_t r )\n{\n  return (x << r) | (x >> (64 - r));\n}\n\n#define\tROTL32(x,y)\trotl32(x,y)\n#define ROTL64(x,y)\trotl64(x,y)\n\n#define BIG_CONSTANT(x) (x##LLU)\n\n#endif // !defined(_MSC_VER)\n\n//-----------------------------------------------------------------------------\n// Block read - if your platform needs to do endian-swapping or can only\n// handle aligned reads, do the conversion here\n\nFORCE_INLINE uint32_t getblock32 ( const uint32_t * p, int i )\n{\n  return p[i];\n}\n\nFORCE_INLINE uint64_t getblock64 ( const uint64_t * p, int i )\n{\n  return p[i];\n}\n\n//-----------------------------------------------------------------------------\n// Finalization mix - force all bits of a hash block to avalanche\n\nFORCE_INLINE uint32_t fmix32 ( uint32_t h )\n{\n  h ^= h >> 16;\n  h *= 0x85ebca6b;\n  h ^= h >> 13;\n  h *= 0xc2b2ae35;\n  h ^= h >> 16;\n\n  return h;\n}\n\n//----------\n\nFORCE_INLINE uint64_t fmix64 ( uint64_t k )\n{\n  k ^= k >> 33;\n  k *= BIG_CONSTANT(0xff51afd7ed558ccd);\n  k ^= k >> 33;\n  k *= BIG_CONSTANT(0xc4ceb9fe1a85ec53);\n  k ^= k >> 33;\n\n  return k;\n}\n\n//-----------------------------------------------------------------------------\n\nvoid MurmurHash3_x86_32 ( const void * key, int len,\n                          uint32_t seed, void * out )\n{\n  const uint8_t * data = (const uint8_t*)key;\n  const int nblocks = len / 4;\n\n  uint32_t h1 = seed;\n\n  const uint32_t c1 = 0xcc9e2d51;\n  const uint32_t c2 = 0x1b873593;\n\n  //----------\n  // body\n\n  const uint32_t * blocks = (const uint32_t *)(data + nblocks*4);\n\n  for(int i = -nblocks; i; i++)\n  {\n    uint32_t k1 = getblock32(blocks,i);\n\n    k1 *= c1;\n    k1 = ROTL32(k1,15);\n    k1 *= c2;\n    \n    h1 ^= k1;\n    h1 = ROTL32(h1,13); \n    h1 = h1*5+0xe6546b64;\n  }\n\n  //----------\n  // tail\n\n  const uint8_t * tail = (const uint8_t*)(data + nblocks*4);\n\n  uint32_t k1 = 0;\n\n  switch(len & 3)\n  {\n  case 3: k1 ^= tail[2] << 16;\n  case 2: k1 ^= tail[1] << 8;\n  case 1: k1 ^= tail[0];\n          k1 *= c1; k1 = ROTL32(k1,15); k1 *= c2; h1 ^= k1;\n  };\n\n  //----------\n  // finalization\n\n  h1 ^= len;\n\n  h1 = fmix32(h1);\n\n  *(uint32_t*)out = h1;\n} \n\n//-----------------------------------------------------------------------------\n\nvoid MurmurHash3_x86_128 ( const void * key, const int len,\n                           uint32_t seed, void * out )\n{\n  const uint8_t * data = (const uint8_t*)key;\n  const int nblocks = len / 16;\n\n  uint32_t h1 = seed;\n  uint32_t h2 = seed;\n  uint32_t h3 = seed;\n  uint32_t h4 = seed;\n\n  const uint32_t c1 = 0x239b961b; \n  const uint32_t c2 = 0xab0e9789;\n  const uint32_t c3 = 0x38b34ae5; \n  const uint32_t c4 = 0xa1e38b93;\n\n  //----------\n  // body\n\n  const uint32_t * blocks = (const uint32_t *)(data + nblocks*16);\n\n  for(int i = -nblocks; i; i++)\n  {\n    uint32_t k1 = getblock32(blocks,i*4+0);\n    uint32_t k2 = getblock32(blocks,i*4+1);\n    uint32_t k3 = getblock32(blocks,i*4+2);\n    uint32_t k4 = getblock32(blocks,i*4+3);\n\n    k1 *= c1; k1  = ROTL32(k1,15); k1 *= c2; h1 ^= k1;\n\n    h1 = ROTL32(h1,19); h1 += h2; h1 = h1*5+0x561ccd1b;\n\n    k2 *= c2; k2  = ROTL32(k2,16); k2 *= c3; h2 ^= k2;\n\n    h2 = ROTL32(h2,17); h2 += h3; h2 = h2*5+0x0bcaa747;\n\n    k3 *= c3; k3  = ROTL32(k3,17); k3 *= c4; h3 ^= k3;\n\n    h3 = ROTL32(h3,15); h3 += h4; h3 = h3*5+0x96cd1c35;\n\n    k4 *= c4; k4  = ROTL32(k4,18); k4 *= c1; h4 ^= k4;\n\n    h4 = ROTL32(h4,13); h4 += h1; h4 = h4*5+0x32ac3b17;\n  }\n\n  //----------\n  // tail\n\n  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);\n\n  uint32_t k1 = 0;\n  uint32_t k2 = 0;\n  uint32_t k3 = 0;\n  uint32_t k4 = 0;\n\n  switch(len & 15)\n  {\n  case 15: k4 ^= tail[14] << 16;\n  case 14: k4 ^= tail[13] << 8;\n  case 13: k4 ^= tail[12] << 0;\n           k4 *= c4; k4  = ROTL32(k4,18); k4 *= c1; h4 ^= k4;\n\n  case 12: k3 ^= tail[11] << 24;\n  case 11: k3 ^= tail[10] << 16;\n  case 10: k3 ^= tail[ 9] << 8;\n  case  9: k3 ^= tail[ 8] << 0;\n           k3 *= c3; k3  = ROTL32(k3,17); k3 *= c4; h3 ^= k3;\n\n  case  8: k2 ^= tail[ 7] << 24;\n  case  7: k2 ^= tail[ 6] << 16;\n  case  6: k2 ^= tail[ 5] << 8;\n  case  5: k2 ^= tail[ 4] << 0;\n           k2 *= c2; k2  = ROTL32(k2,16); k2 *= c3; h2 ^= k2;\n\n  case  4: k1 ^= tail[ 3] << 24;\n  case  3: k1 ^= tail[ 2] << 16;\n  case  2: k1 ^= tail[ 1] << 8;\n  case  1: k1 ^= tail[ 0] << 0;\n           k1 *= c1; k1  = ROTL32(k1,15); k1 *= c2; h1 ^= k1;\n  };\n\n  //----------\n  // finalization\n\n  h1 ^= len; h2 ^= len; h3 ^= len; h4 ^= len;\n\n  h1 += h2; h1 += h3; h1 += h4;\n  h2 += h1; h3 += h1; h4 += h1;\n\n  h1 = fmix32(h1);\n  h2 = fmix32(h2);\n  h3 = fmix32(h3);\n  h4 = fmix32(h4);\n\n  h1 += h2; h1 += h3; h1 += h4;\n  h2 += h1; h3 += h1; h4 += h1;\n\n  ((uint32_t*)out)[0] = h1;\n  ((uint32_t*)out)[1] = h2;\n  ((uint32_t*)out)[2] = h3;\n  ((uint32_t*)out)[3] = h4;\n}\n\n//-----------------------------------------------------------------------------\n\nvoid MurmurHash3_x64_128 ( const void * key, const int len,\n                           const uint32_t seed, void * out )\n{\n  const uint8_t * data = (const uint8_t*)key;\n  const int nblocks = len / 16;\n\n  uint64_t h1 = seed;\n  uint64_t h2 = seed;\n\n  const uint64_t c1 = BIG_CONSTANT(0x87c37b91114253d5);\n  const uint64_t c2 = BIG_CONSTANT(0x4cf5ad432745937f);\n\n  //----------\n  // body\n\n  const uint64_t * blocks = (const uint64_t *)(data);\n\n  for(int i = 0; i < nblocks; i++)\n  {\n    uint64_t k1 = getblock64(blocks,i*2+0);\n    uint64_t k2 = getblock64(blocks,i*2+1);\n\n    k1 *= c1; k1  = ROTL64(k1,31); k1 *= c2; h1 ^= k1;\n\n    h1 = ROTL64(h1,27); h1 += h2; h1 = h1*5+0x52dce729;\n\n    k2 *= c2; k2  = ROTL64(k2,33); k2 *= c1; h2 ^= k2;\n\n    h2 = ROTL64(h2,31); h2 += h1; h2 = h2*5+0x38495ab5;\n  }\n\n  //----------\n  // tail\n\n  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);\n\n  uint64_t k1 = 0;\n  uint64_t k2 = 0;\n\n  switch(len & 15)\n  {\n  case 15: k2 ^= ((uint64_t)tail[14]) << 48;\n  case 14: k2 ^= ((uint64_t)tail[13]) << 40;\n  case 13: k2 ^= ((uint64_t)tail[12]) << 32;\n  case 12: k2 ^= ((uint64_t)tail[11]) << 24;\n  case 11: k2 ^= ((uint64_t)tail[10]) << 16;\n  case 10: k2 ^= ((uint64_t)tail[ 9]) << 8;\n  case  9: k2 ^= ((uint64_t)tail[ 8]) << 0;\n           k2 *= c2; k2  = ROTL64(k2,33); k2 *= c1; h2 ^= k2;\n\n  case  8: k1 ^= ((uint64_t)tail[ 7]) << 56;\n  case  7: k1 ^= ((uint64_t)tail[ 6]) << 48;\n  case  6: k1 ^= ((uint64_t)tail[ 5]) << 40;\n  case  5: k1 ^= ((uint64_t)tail[ 4]) << 32;\n  case  4: k1 ^= ((uint64_t)tail[ 3]) << 24;\n  case  3: k1 ^= ((uint64_t)tail[ 2]) << 16;\n  case  2: k1 ^= ((uint64_t)tail[ 1]) << 8;\n  case  1: k1 ^= ((uint64_t)tail[ 0]) << 0;\n           k1 *= c1; k1  = ROTL64(k1,31); k1 *= c2; h1 ^= k1;\n  };\n\n  //----------\n  // finalization\n\n  h1 ^= len; h2 ^= len;\n\n  h1 += h2;\n  h2 += h1;\n\n  h1 = fmix64(h1);\n  h2 = fmix64(h2);\n\n  h1 += h2;\n  h2 += h1;\n\n  ((uint64_t*)out)[0] = h1;\n  ((uint64_t*)out)[1] = h2;\n}\n\n//-----------------------------------------------------------------------------\n```\n\n\n---\n\n<br/>\n**参考**\n[Fvn Hash Funciton wikipedia](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function)\nhttps://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp","source":"_posts/哈希-Hash-函数汇总.md","raw":"---\ntitle: 哈希(Hash)函数汇总\ndate: 2019-06-14 14:00:22\ncategories: \n    - Algorithm\ntags:\n    - Algorithm\n    - Hash\n---\n\n\n<br/>\n## Fnv\n\n### FNV-1 hash\n```c\n    hash = FNV_offset_basis\n    for each byte_of_data to be hashed\n   \t    hash = hash × FNV_prime\n   \t    hash = hash XOR byte_of_data\n    return hash\n```\n\n### FNV-1a hash\n```c\n    hash = FNV_offset_basis\n    for each byte_of_data to be hashed\n   \t    hash = hash XOR byte_of_data\n   \t    hash = hash × FNV_prime\n    return hash\n```\n\n### FNV-0 hash (Deprecated)\n```c\n    hash = 0\n    for each byte_of_data to be hashed\n   \t    hash = hash × FNV_prime\n   \t    hash = hash XOR octet_of_data\n    return hash\n```\n\n### FNV parameters\nSize in bits | FNV prime | FNV offset basis\n:-------------:|:-----------:|:-----------------:\n32  |   224 + 28 + 0x93 = <br/>16777619 | 2166136261 = <br/>0x811c9dc5\n64  |   240 + 28 + 0xb3 = <br/>1099511628211 | 14695981039346656037 = <br/>0xcbf29ce484222325\n128 |\t288 + 28 + 0x3b = <br/>309485009821345068724781371   | 144066263297769815596495629667062367629 <br/>= <br/>0x6c62272e07bb014262b821756295c58d\n256 |\t2168 + 28 + 0x63 = <br/>374144419156711147060143317<br/>175368453031918731002211  | 100029257958052580907070968620625704837<br/>092796014241193945225284501741471925557 <br/>= <br/>0xdd268dbcaac550362d98c384c4e576ccc8b153<br/>6847b6bbb31023b4c8caee0535\n512 |\t2344 + 28 + 0x57 = <br/>358359158748448673689190764<br/>890951084499463279557543925<br/>26094039892345713852759 |   965930312949666949800943540071631046609<br/>041874567263789610837432943446265799458<br/>293219771643844981305189220653980578449<br/>5328239340083876191928701583869517785 = <br/>0xb86db0b1171f4416dca1e50f309990acac87d0<br/>59c90000000000000000000d21e948f68a34c192<br/>f62ea79bc942dbe7ce182036415f56e34bac982a<br/>ac4afe9fd9\n1024    |   2680 + 28 + 0x8d = <br/>501645651011311865543459881<br/>103527895503076534540479074<br/>430301752383111205510814745<br/>150915769222029538271616265<br/>187852689524938529229181652<br/>437508374669137180409427187<br/>316048473796672026038921768<br/>4476157468082573 |   14197795064947621068722070641403218320<br/>88062279544193396087847491461758272325<br/>22967323037177221508640965212023555493<br/>65628174669108571814760471015076148029<br/>75596980407732015769245856300321530495<br/>71501574036444603635505054127112859663<br/>61610267868082893823963790439336411086<br/>884584107735010676915 <br/> = <br/>0x0000000000000000 005f7a76758ecc4d 32e56d5a591028b7 4b29fc4223fdada1 <br/>6c3bf34eda3674da 9a21d90000000000 0000000000000000 0000000000000000 <br/>0000000000000000 0000000000000000 0000000000000000 000000000004c6d7 <br/>eb6e73802734510a 555f256cc005ae55 6bde8cc9c6a93b21 aff4b16c71ee90b3\n\n\n### 具体列子\n```java\npublic static long fnv_1a_64(String value) {\n        if (value == null) {\n            return 0;\n        }\n        long hash = FNV_1A_64_BASIC;\n        for (int i = 0; i < value.length(); i++) {\n            char c = value.charAt(i);\n            hash ^= c;\n            hash *= FNV_1A_64_PRIME;\n        }\n\n        return hash;\n    }\n\n    public static long fnv_1a_64_lower(String key) {\n        long hash = FNV_1A_64_BASIC;\n        for (int i = 0; i < key.length(); ++i) {\n            char c = key.charAt(i);\n\n            if (c >= 'A' && c <= 'Z') {\n                c = (char) (c + 32);\n            }\n\n            hash ^= c;\n            hash *= FNV_1A_64_PRIME;\n        }\n\n        return hash;\n    }\n```\n\n\n## MurmurHash3\n```c++\n//-----------------------------------------------------------------------------\n// MurmurHash3 was written by Austin Appleby, and is placed in the public\n// domain. The author hereby disclaims copyright to this source code.\n\n// Note - The x86 and x64 versions do _not_ produce the same results, as the\n// algorithms are optimized for their respective platforms. You can still\n// compile and run any of them on any platform, but your performance with the\n// non-native version will be less than optimal.\n\n#include \"MurmurHash3.h\"\n\n//-----------------------------------------------------------------------------\n// Platform-specific functions and macros\n\n// Microsoft Visual Studio\n\n#if defined(_MSC_VER)\n\n#define FORCE_INLINE\t__forceinline\n\n#include <stdlib.h>\n\n#define ROTL32(x,y)\t_rotl(x,y)\n#define ROTL64(x,y)\t_rotl64(x,y)\n\n#define BIG_CONSTANT(x) (x)\n\n// Other compilers\n\n#else\t// defined(_MSC_VER)\n\n#define\tFORCE_INLINE inline __attribute__((always_inline))\n\ninline uint32_t rotl32 ( uint32_t x, int8_t r )\n{\n  return (x << r) | (x >> (32 - r));\n}\n\ninline uint64_t rotl64 ( uint64_t x, int8_t r )\n{\n  return (x << r) | (x >> (64 - r));\n}\n\n#define\tROTL32(x,y)\trotl32(x,y)\n#define ROTL64(x,y)\trotl64(x,y)\n\n#define BIG_CONSTANT(x) (x##LLU)\n\n#endif // !defined(_MSC_VER)\n\n//-----------------------------------------------------------------------------\n// Block read - if your platform needs to do endian-swapping or can only\n// handle aligned reads, do the conversion here\n\nFORCE_INLINE uint32_t getblock32 ( const uint32_t * p, int i )\n{\n  return p[i];\n}\n\nFORCE_INLINE uint64_t getblock64 ( const uint64_t * p, int i )\n{\n  return p[i];\n}\n\n//-----------------------------------------------------------------------------\n// Finalization mix - force all bits of a hash block to avalanche\n\nFORCE_INLINE uint32_t fmix32 ( uint32_t h )\n{\n  h ^= h >> 16;\n  h *= 0x85ebca6b;\n  h ^= h >> 13;\n  h *= 0xc2b2ae35;\n  h ^= h >> 16;\n\n  return h;\n}\n\n//----------\n\nFORCE_INLINE uint64_t fmix64 ( uint64_t k )\n{\n  k ^= k >> 33;\n  k *= BIG_CONSTANT(0xff51afd7ed558ccd);\n  k ^= k >> 33;\n  k *= BIG_CONSTANT(0xc4ceb9fe1a85ec53);\n  k ^= k >> 33;\n\n  return k;\n}\n\n//-----------------------------------------------------------------------------\n\nvoid MurmurHash3_x86_32 ( const void * key, int len,\n                          uint32_t seed, void * out )\n{\n  const uint8_t * data = (const uint8_t*)key;\n  const int nblocks = len / 4;\n\n  uint32_t h1 = seed;\n\n  const uint32_t c1 = 0xcc9e2d51;\n  const uint32_t c2 = 0x1b873593;\n\n  //----------\n  // body\n\n  const uint32_t * blocks = (const uint32_t *)(data + nblocks*4);\n\n  for(int i = -nblocks; i; i++)\n  {\n    uint32_t k1 = getblock32(blocks,i);\n\n    k1 *= c1;\n    k1 = ROTL32(k1,15);\n    k1 *= c2;\n    \n    h1 ^= k1;\n    h1 = ROTL32(h1,13); \n    h1 = h1*5+0xe6546b64;\n  }\n\n  //----------\n  // tail\n\n  const uint8_t * tail = (const uint8_t*)(data + nblocks*4);\n\n  uint32_t k1 = 0;\n\n  switch(len & 3)\n  {\n  case 3: k1 ^= tail[2] << 16;\n  case 2: k1 ^= tail[1] << 8;\n  case 1: k1 ^= tail[0];\n          k1 *= c1; k1 = ROTL32(k1,15); k1 *= c2; h1 ^= k1;\n  };\n\n  //----------\n  // finalization\n\n  h1 ^= len;\n\n  h1 = fmix32(h1);\n\n  *(uint32_t*)out = h1;\n} \n\n//-----------------------------------------------------------------------------\n\nvoid MurmurHash3_x86_128 ( const void * key, const int len,\n                           uint32_t seed, void * out )\n{\n  const uint8_t * data = (const uint8_t*)key;\n  const int nblocks = len / 16;\n\n  uint32_t h1 = seed;\n  uint32_t h2 = seed;\n  uint32_t h3 = seed;\n  uint32_t h4 = seed;\n\n  const uint32_t c1 = 0x239b961b; \n  const uint32_t c2 = 0xab0e9789;\n  const uint32_t c3 = 0x38b34ae5; \n  const uint32_t c4 = 0xa1e38b93;\n\n  //----------\n  // body\n\n  const uint32_t * blocks = (const uint32_t *)(data + nblocks*16);\n\n  for(int i = -nblocks; i; i++)\n  {\n    uint32_t k1 = getblock32(blocks,i*4+0);\n    uint32_t k2 = getblock32(blocks,i*4+1);\n    uint32_t k3 = getblock32(blocks,i*4+2);\n    uint32_t k4 = getblock32(blocks,i*4+3);\n\n    k1 *= c1; k1  = ROTL32(k1,15); k1 *= c2; h1 ^= k1;\n\n    h1 = ROTL32(h1,19); h1 += h2; h1 = h1*5+0x561ccd1b;\n\n    k2 *= c2; k2  = ROTL32(k2,16); k2 *= c3; h2 ^= k2;\n\n    h2 = ROTL32(h2,17); h2 += h3; h2 = h2*5+0x0bcaa747;\n\n    k3 *= c3; k3  = ROTL32(k3,17); k3 *= c4; h3 ^= k3;\n\n    h3 = ROTL32(h3,15); h3 += h4; h3 = h3*5+0x96cd1c35;\n\n    k4 *= c4; k4  = ROTL32(k4,18); k4 *= c1; h4 ^= k4;\n\n    h4 = ROTL32(h4,13); h4 += h1; h4 = h4*5+0x32ac3b17;\n  }\n\n  //----------\n  // tail\n\n  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);\n\n  uint32_t k1 = 0;\n  uint32_t k2 = 0;\n  uint32_t k3 = 0;\n  uint32_t k4 = 0;\n\n  switch(len & 15)\n  {\n  case 15: k4 ^= tail[14] << 16;\n  case 14: k4 ^= tail[13] << 8;\n  case 13: k4 ^= tail[12] << 0;\n           k4 *= c4; k4  = ROTL32(k4,18); k4 *= c1; h4 ^= k4;\n\n  case 12: k3 ^= tail[11] << 24;\n  case 11: k3 ^= tail[10] << 16;\n  case 10: k3 ^= tail[ 9] << 8;\n  case  9: k3 ^= tail[ 8] << 0;\n           k3 *= c3; k3  = ROTL32(k3,17); k3 *= c4; h3 ^= k3;\n\n  case  8: k2 ^= tail[ 7] << 24;\n  case  7: k2 ^= tail[ 6] << 16;\n  case  6: k2 ^= tail[ 5] << 8;\n  case  5: k2 ^= tail[ 4] << 0;\n           k2 *= c2; k2  = ROTL32(k2,16); k2 *= c3; h2 ^= k2;\n\n  case  4: k1 ^= tail[ 3] << 24;\n  case  3: k1 ^= tail[ 2] << 16;\n  case  2: k1 ^= tail[ 1] << 8;\n  case  1: k1 ^= tail[ 0] << 0;\n           k1 *= c1; k1  = ROTL32(k1,15); k1 *= c2; h1 ^= k1;\n  };\n\n  //----------\n  // finalization\n\n  h1 ^= len; h2 ^= len; h3 ^= len; h4 ^= len;\n\n  h1 += h2; h1 += h3; h1 += h4;\n  h2 += h1; h3 += h1; h4 += h1;\n\n  h1 = fmix32(h1);\n  h2 = fmix32(h2);\n  h3 = fmix32(h3);\n  h4 = fmix32(h4);\n\n  h1 += h2; h1 += h3; h1 += h4;\n  h2 += h1; h3 += h1; h4 += h1;\n\n  ((uint32_t*)out)[0] = h1;\n  ((uint32_t*)out)[1] = h2;\n  ((uint32_t*)out)[2] = h3;\n  ((uint32_t*)out)[3] = h4;\n}\n\n//-----------------------------------------------------------------------------\n\nvoid MurmurHash3_x64_128 ( const void * key, const int len,\n                           const uint32_t seed, void * out )\n{\n  const uint8_t * data = (const uint8_t*)key;\n  const int nblocks = len / 16;\n\n  uint64_t h1 = seed;\n  uint64_t h2 = seed;\n\n  const uint64_t c1 = BIG_CONSTANT(0x87c37b91114253d5);\n  const uint64_t c2 = BIG_CONSTANT(0x4cf5ad432745937f);\n\n  //----------\n  // body\n\n  const uint64_t * blocks = (const uint64_t *)(data);\n\n  for(int i = 0; i < nblocks; i++)\n  {\n    uint64_t k1 = getblock64(blocks,i*2+0);\n    uint64_t k2 = getblock64(blocks,i*2+1);\n\n    k1 *= c1; k1  = ROTL64(k1,31); k1 *= c2; h1 ^= k1;\n\n    h1 = ROTL64(h1,27); h1 += h2; h1 = h1*5+0x52dce729;\n\n    k2 *= c2; k2  = ROTL64(k2,33); k2 *= c1; h2 ^= k2;\n\n    h2 = ROTL64(h2,31); h2 += h1; h2 = h2*5+0x38495ab5;\n  }\n\n  //----------\n  // tail\n\n  const uint8_t * tail = (const uint8_t*)(data + nblocks*16);\n\n  uint64_t k1 = 0;\n  uint64_t k2 = 0;\n\n  switch(len & 15)\n  {\n  case 15: k2 ^= ((uint64_t)tail[14]) << 48;\n  case 14: k2 ^= ((uint64_t)tail[13]) << 40;\n  case 13: k2 ^= ((uint64_t)tail[12]) << 32;\n  case 12: k2 ^= ((uint64_t)tail[11]) << 24;\n  case 11: k2 ^= ((uint64_t)tail[10]) << 16;\n  case 10: k2 ^= ((uint64_t)tail[ 9]) << 8;\n  case  9: k2 ^= ((uint64_t)tail[ 8]) << 0;\n           k2 *= c2; k2  = ROTL64(k2,33); k2 *= c1; h2 ^= k2;\n\n  case  8: k1 ^= ((uint64_t)tail[ 7]) << 56;\n  case  7: k1 ^= ((uint64_t)tail[ 6]) << 48;\n  case  6: k1 ^= ((uint64_t)tail[ 5]) << 40;\n  case  5: k1 ^= ((uint64_t)tail[ 4]) << 32;\n  case  4: k1 ^= ((uint64_t)tail[ 3]) << 24;\n  case  3: k1 ^= ((uint64_t)tail[ 2]) << 16;\n  case  2: k1 ^= ((uint64_t)tail[ 1]) << 8;\n  case  1: k1 ^= ((uint64_t)tail[ 0]) << 0;\n           k1 *= c1; k1  = ROTL64(k1,31); k1 *= c2; h1 ^= k1;\n  };\n\n  //----------\n  // finalization\n\n  h1 ^= len; h2 ^= len;\n\n  h1 += h2;\n  h2 += h1;\n\n  h1 = fmix64(h1);\n  h2 = fmix64(h2);\n\n  h1 += h2;\n  h2 += h1;\n\n  ((uint64_t*)out)[0] = h1;\n  ((uint64_t*)out)[1] = h2;\n}\n\n//-----------------------------------------------------------------------------\n```\n\n\n---\n\n<br/>\n**参考**\n[Fvn Hash Funciton wikipedia](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function)\nhttps://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp","slug":"哈希-Hash-函数汇总","published":1,"updated":"2019-11-02T07:12:18.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6u005it6s6a1ji0vbe","content":"<p><br></p>\n<h2 id=\"Fnv\"><a href=\"#Fnv\" class=\"headerlink\" title=\"Fnv\"></a>Fnv</h2><h3 id=\"FNV-1-hash\"><a href=\"#FNV-1-hash\" class=\"headerlink\" title=\"FNV-1 hash\"></a>FNV-1 hash</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = FNV_offset_basis</span><br><span class=\"line\"><span class=\"keyword\">for</span> each byte_of_data to be hashed</span><br><span class=\"line\">    hash = hash × FNV_prime</span><br><span class=\"line\">    hash = hash XOR byte_of_data</span><br><span class=\"line\"><span class=\"keyword\">return</span> hash</span><br></pre></td></tr></table></figure>\n<h3 id=\"FNV-1a-hash\"><a href=\"#FNV-1a-hash\" class=\"headerlink\" title=\"FNV-1a hash\"></a>FNV-1a hash</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = FNV_offset_basis</span><br><span class=\"line\"><span class=\"keyword\">for</span> each byte_of_data to be hashed</span><br><span class=\"line\">    hash = hash XOR byte_of_data</span><br><span class=\"line\">    hash = hash × FNV_prime</span><br><span class=\"line\"><span class=\"keyword\">return</span> hash</span><br></pre></td></tr></table></figure>\n<h3 id=\"FNV-0-hash-Deprecated\"><a href=\"#FNV-0-hash-Deprecated\" class=\"headerlink\" title=\"FNV-0 hash (Deprecated)\"></a>FNV-0 hash (Deprecated)</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> each byte_of_data to be hashed</span><br><span class=\"line\">    hash = hash × FNV_prime</span><br><span class=\"line\">    hash = hash XOR octet_of_data</span><br><span class=\"line\"><span class=\"keyword\">return</span> hash</span><br></pre></td></tr></table></figure>\n<h3 id=\"FNV-parameters\"><a href=\"#FNV-parameters\" class=\"headerlink\" title=\"FNV parameters\"></a>FNV parameters</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Size in bits</th>\n<th style=\"text-align:center\">FNV prime</th>\n<th style=\"text-align:center\">FNV offset basis</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:center\">224 + 28 + 0x93 = <br>16777619</td>\n<td style=\"text-align:center\">2166136261 = <br>0x811c9dc5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">240 + 28 + 0xb3 = <br>1099511628211</td>\n<td style=\"text-align:center\">14695981039346656037 = <br>0xcbf29ce484222325</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">128</td>\n<td style=\"text-align:center\">288 + 28 + 0x3b = <br>309485009821345068724781371</td>\n<td style=\"text-align:center\">144066263297769815596495629667062367629 <br>= <br>0x6c62272e07bb014262b821756295c58d</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">256</td>\n<td style=\"text-align:center\">2168 + 28 + 0x63 = <br>374144419156711147060143317<br>175368453031918731002211</td>\n<td style=\"text-align:center\">100029257958052580907070968620625704837<br>092796014241193945225284501741471925557 <br>= <br>0xdd268dbcaac550362d98c384c4e576ccc8b153<br>6847b6bbb31023b4c8caee0535</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">512</td>\n<td style=\"text-align:center\">2344 + 28 + 0x57 = <br>358359158748448673689190764<br>890951084499463279557543925<br>26094039892345713852759</td>\n<td style=\"text-align:center\">965930312949666949800943540071631046609<br>041874567263789610837432943446265799458<br>293219771643844981305189220653980578449<br>5328239340083876191928701583869517785 = <br>0xb86db0b1171f4416dca1e50f309990acac87d0<br>59c90000000000000000000d21e948f68a34c192<br>f62ea79bc942dbe7ce182036415f56e34bac982a<br>ac4afe9fd9</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1024</td>\n<td style=\"text-align:center\">2680 + 28 + 0x8d = <br>501645651011311865543459881<br>103527895503076534540479074<br>430301752383111205510814745<br>150915769222029538271616265<br>187852689524938529229181652<br>437508374669137180409427187<br>316048473796672026038921768<br>4476157468082573</td>\n<td style=\"text-align:center\">14197795064947621068722070641403218320<br>88062279544193396087847491461758272325<br>22967323037177221508640965212023555493<br>65628174669108571814760471015076148029<br>75596980407732015769245856300321530495<br>71501574036444603635505054127112859663<br>61610267868082893823963790439336411086<br>884584107735010676915 <br> = <br>0x0000000000000000 005f7a76758ecc4d 32e56d5a591028b7 4b29fc4223fdada1 <br>6c3bf34eda3674da 9a21d90000000000 0000000000000000 0000000000000000 <br>0000000000000000 0000000000000000 0000000000000000 000000000004c6d7 <br>eb6e73802734510a 555f256cc005ae55 6bde8cc9c6a93b21 aff4b16c71ee90b3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"具体列子\"><a href=\"#具体列子\" class=\"headerlink\" title=\"具体列子\"></a>具体列子</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">fnv_1a_64</span><span class=\"params\">(String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> hash = FNV_1A_64_BASIC;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; value.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = value.charAt(i);</span><br><span class=\"line\">            hash ^= c;</span><br><span class=\"line\">            hash *= FNV_1A_64_PRIME;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">fnv_1a_64_lower</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> hash = FNV_1A_64_BASIC;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; key.length(); ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = key.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">'A'</span> &amp;&amp; c &lt;= <span class=\"string\">'Z'</span>) &#123;</span><br><span class=\"line\">                c = (<span class=\"keyword\">char</span>) (c + <span class=\"number\">32</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            hash ^= c;</span><br><span class=\"line\">            hash *= FNV_1A_64_PRIME;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MurmurHash3\"><a href=\"#MurmurHash3\" class=\"headerlink\" title=\"MurmurHash3\"></a>MurmurHash3</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// MurmurHash3 was written by Austin Appleby, and is placed in the public</span></span><br><span class=\"line\"><span class=\"comment\">// domain. The author hereby disclaims copyright to this source code.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Note - The x86 and x64 versions do _not_ produce the same results, as the</span></span><br><span class=\"line\"><span class=\"comment\">// algorithms are optimized for their respective platforms. You can still</span></span><br><span class=\"line\"><span class=\"comment\">// compile and run any of them on any platform, but your performance with the</span></span><br><span class=\"line\"><span class=\"comment\">// non-native version will be less than optimal.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"MurmurHash3.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Platform-specific functions and macros</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Microsoft Visual Studio</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(_MSC_VER)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FORCE_INLINE\t__forceinline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ROTL32(x,y)\t_rotl(x,y)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ROTL64(x,y)\t_rotl64(x,y)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BIG_CONSTANT(x) (x)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Other compilers</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>\t<span class=\"comment\">// defined(_MSC_VER)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>\tFORCE_INLINE inline __attribute__((always_inline))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> uint32_t <span class=\"title\">rotl32</span> <span class=\"params\">( <span class=\"keyword\">uint32_t</span> x, <span class=\"keyword\">int8_t</span> r )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x &lt;&lt; r) | (x &gt;&gt; (<span class=\"number\">32</span> - r));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> uint64_t <span class=\"title\">rotl64</span> <span class=\"params\">( <span class=\"keyword\">uint64_t</span> x, <span class=\"keyword\">int8_t</span> r )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x &lt;&lt; r) | (x &gt;&gt; (<span class=\"number\">64</span> - r));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>\tROTL32(x,y)\trotl32(x,y)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ROTL64(x,y)\trotl64(x,y)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BIG_CONSTANT(x) (x##LLU)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// !defined(_MSC_VER)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Block read - if your platform needs to do endian-swapping or can only</span></span><br><span class=\"line\"><span class=\"comment\">// handle aligned reads, do the conversion here</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FORCE_INLINE uint32_t <span class=\"title\">getblock32</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> * p, <span class=\"keyword\">int</span> i )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FORCE_INLINE uint64_t <span class=\"title\">getblock64</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> * p, <span class=\"keyword\">int</span> i )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Finalization mix - force all bits of a hash block to avalanche</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FORCE_INLINE uint32_t <span class=\"title\">fmix32</span> <span class=\"params\">( <span class=\"keyword\">uint32_t</span> h )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  h ^= h &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  h *= <span class=\"number\">0x85ebca6b</span>;</span><br><span class=\"line\">  h ^= h &gt;&gt; <span class=\"number\">13</span>;</span><br><span class=\"line\">  h *= <span class=\"number\">0xc2b2ae35</span>;</span><br><span class=\"line\">  h ^= h &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//----------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FORCE_INLINE uint64_t <span class=\"title\">fmix64</span> <span class=\"params\">( <span class=\"keyword\">uint64_t</span> k )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  k ^= k &gt;&gt; <span class=\"number\">33</span>;</span><br><span class=\"line\">  k *= BIG_CONSTANT(<span class=\"number\">0xff51afd7ed558ccd</span>);</span><br><span class=\"line\">  k ^= k &gt;&gt; <span class=\"number\">33</span>;</span><br><span class=\"line\">  k *= BIG_CONSTANT(<span class=\"number\">0xc4ceb9fe1a85ec53</span>);</span><br><span class=\"line\">  k ^= k &gt;&gt; <span class=\"number\">33</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MurmurHash3_x86_32</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * key, <span class=\"keyword\">int</span> len,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">uint32_t</span> seed, <span class=\"keyword\">void</span> * out )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * data = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)key;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> nblocks = len / <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> h1 = seed;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c1 = <span class=\"number\">0xcc9e2d51</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c2 = <span class=\"number\">0x1b873593</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// body</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> * blocks = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> *)(data + nblocks*<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = -nblocks; i; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> k1 = getblock32(blocks,i);</span><br><span class=\"line\"></span><br><span class=\"line\">    k1 *= c1;</span><br><span class=\"line\">    k1 = ROTL32(k1,<span class=\"number\">15</span>);</span><br><span class=\"line\">    k1 *= c2;</span><br><span class=\"line\">    </span><br><span class=\"line\">    h1 ^= k1;</span><br><span class=\"line\">    h1 = ROTL32(h1,<span class=\"number\">13</span>); </span><br><span class=\"line\">    h1 = h1*<span class=\"number\">5</span>+<span class=\"number\">0xe6546b64</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// tail</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * tail = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)(data + nblocks*<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> k1 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(len &amp; <span class=\"number\">3</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>: k1 ^= tail[<span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>: k1 ^= tail[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>: k1 ^= tail[<span class=\"number\">0</span>];</span><br><span class=\"line\">          k1 *= c1; k1 = ROTL32(k1,<span class=\"number\">15</span>); k1 *= c2; h1 ^= k1;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// finalization</span></span><br><span class=\"line\"></span><br><span class=\"line\">  h1 ^= len;</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 = fmix32(h1);</span><br><span class=\"line\"></span><br><span class=\"line\">  *(<span class=\"keyword\">uint32_t</span>*)out = h1;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MurmurHash3_x86_128</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> len,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">uint32_t</span> seed, <span class=\"keyword\">void</span> * out )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * data = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)key;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> nblocks = len / <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> h1 = seed;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> h2 = seed;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> h3 = seed;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> h4 = seed;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c1 = <span class=\"number\">0x239b961b</span>; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c2 = <span class=\"number\">0xab0e9789</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c3 = <span class=\"number\">0x38b34ae5</span>; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c4 = <span class=\"number\">0xa1e38b93</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// body</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> * blocks = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> *)(data + nblocks*<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = -nblocks; i; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> k1 = getblock32(blocks,i*<span class=\"number\">4</span>+<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> k2 = getblock32(blocks,i*<span class=\"number\">4</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> k3 = getblock32(blocks,i*<span class=\"number\">4</span>+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> k4 = getblock32(blocks,i*<span class=\"number\">4</span>+<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    k1 *= c1; k1  = ROTL32(k1,<span class=\"number\">15</span>); k1 *= c2; h1 ^= k1;</span><br><span class=\"line\"></span><br><span class=\"line\">    h1 = ROTL32(h1,<span class=\"number\">19</span>); h1 += h2; h1 = h1*<span class=\"number\">5</span>+<span class=\"number\">0x561ccd1b</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    k2 *= c2; k2  = ROTL32(k2,<span class=\"number\">16</span>); k2 *= c3; h2 ^= k2;</span><br><span class=\"line\"></span><br><span class=\"line\">    h2 = ROTL32(h2,<span class=\"number\">17</span>); h2 += h3; h2 = h2*<span class=\"number\">5</span>+<span class=\"number\">0x0bcaa747</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    k3 *= c3; k3  = ROTL32(k3,<span class=\"number\">17</span>); k3 *= c4; h3 ^= k3;</span><br><span class=\"line\"></span><br><span class=\"line\">    h3 = ROTL32(h3,<span class=\"number\">15</span>); h3 += h4; h3 = h3*<span class=\"number\">5</span>+<span class=\"number\">0x96cd1c35</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    k4 *= c4; k4  = ROTL32(k4,<span class=\"number\">18</span>); k4 *= c1; h4 ^= k4;</span><br><span class=\"line\"></span><br><span class=\"line\">    h4 = ROTL32(h4,<span class=\"number\">13</span>); h4 += h1; h4 = h4*<span class=\"number\">5</span>+<span class=\"number\">0x32ac3b17</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// tail</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * tail = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)(data + nblocks*<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> k1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> k2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> k3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> k4 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(len &amp; <span class=\"number\">15</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">15</span>: k4 ^= tail[<span class=\"number\">14</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">14</span>: k4 ^= tail[<span class=\"number\">13</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">13</span>: k4 ^= tail[<span class=\"number\">12</span>] &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k4 *= c4; k4  = ROTL32(k4,<span class=\"number\">18</span>); k4 *= c1; h4 ^= k4;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">12</span>: k3 ^= tail[<span class=\"number\">11</span>] &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">11</span>: k3 ^= tail[<span class=\"number\">10</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">10</span>: k3 ^= tail[ <span class=\"number\">9</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">9</span>: k3 ^= tail[ <span class=\"number\">8</span>] &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k3 *= c3; k3  = ROTL32(k3,<span class=\"number\">17</span>); k3 *= c4; h3 ^= k3;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">8</span>: k2 ^= tail[ <span class=\"number\">7</span>] &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">7</span>: k2 ^= tail[ <span class=\"number\">6</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">6</span>: k2 ^= tail[ <span class=\"number\">5</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">5</span>: k2 ^= tail[ <span class=\"number\">4</span>] &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k2 *= c2; k2  = ROTL32(k2,<span class=\"number\">16</span>); k2 *= c3; h2 ^= k2;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">4</span>: k1 ^= tail[ <span class=\"number\">3</span>] &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">3</span>: k1 ^= tail[ <span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">2</span>: k1 ^= tail[ <span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">1</span>: k1 ^= tail[ <span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k1 *= c1; k1  = ROTL32(k1,<span class=\"number\">15</span>); k1 *= c2; h1 ^= k1;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// finalization</span></span><br><span class=\"line\"></span><br><span class=\"line\">  h1 ^= len; h2 ^= len; h3 ^= len; h4 ^= len;</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 += h2; h1 += h3; h1 += h4;</span><br><span class=\"line\">  h2 += h1; h3 += h1; h4 += h1;</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 = fmix32(h1);</span><br><span class=\"line\">  h2 = fmix32(h2);</span><br><span class=\"line\">  h3 = fmix32(h3);</span><br><span class=\"line\">  h4 = fmix32(h4);</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 += h2; h1 += h3; h1 += h4;</span><br><span class=\"line\">  h2 += h1; h3 += h1; h4 += h1;</span><br><span class=\"line\"></span><br><span class=\"line\">  ((<span class=\"keyword\">uint32_t</span>*)out)[<span class=\"number\">0</span>] = h1;</span><br><span class=\"line\">  ((<span class=\"keyword\">uint32_t</span>*)out)[<span class=\"number\">1</span>] = h2;</span><br><span class=\"line\">  ((<span class=\"keyword\">uint32_t</span>*)out)[<span class=\"number\">2</span>] = h3;</span><br><span class=\"line\">  ((<span class=\"keyword\">uint32_t</span>*)out)[<span class=\"number\">3</span>] = h4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MurmurHash3_x64_128</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> len,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> seed, <span class=\"keyword\">void</span> * out )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * data = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)key;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> nblocks = len / <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> h1 = seed;</span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> h2 = seed;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> c1 = BIG_CONSTANT(<span class=\"number\">0x87c37b91114253d5</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> c2 = BIG_CONSTANT(<span class=\"number\">0x4cf5ad432745937f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// body</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> * blocks = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> *)(data);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nblocks; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> k1 = getblock64(blocks,i*<span class=\"number\">2</span>+<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> k2 = getblock64(blocks,i*<span class=\"number\">2</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    k1 *= c1; k1  = ROTL64(k1,<span class=\"number\">31</span>); k1 *= c2; h1 ^= k1;</span><br><span class=\"line\"></span><br><span class=\"line\">    h1 = ROTL64(h1,<span class=\"number\">27</span>); h1 += h2; h1 = h1*<span class=\"number\">5</span>+<span class=\"number\">0x52dce729</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    k2 *= c2; k2  = ROTL64(k2,<span class=\"number\">33</span>); k2 *= c1; h2 ^= k2;</span><br><span class=\"line\"></span><br><span class=\"line\">    h2 = ROTL64(h2,<span class=\"number\">31</span>); h2 += h1; h2 = h2*<span class=\"number\">5</span>+<span class=\"number\">0x38495ab5</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// tail</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * tail = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)(data + nblocks*<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> k1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> k2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(len &amp; <span class=\"number\">15</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">15</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[<span class=\"number\">14</span>]) &lt;&lt; <span class=\"number\">48</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">14</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[<span class=\"number\">13</span>]) &lt;&lt; <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">13</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[<span class=\"number\">12</span>]) &lt;&lt; <span class=\"number\">32</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">12</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[<span class=\"number\">11</span>]) &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">11</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[<span class=\"number\">10</span>]) &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">10</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">9</span>]) &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">9</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">8</span>]) &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k2 *= c2; k2  = ROTL64(k2,<span class=\"number\">33</span>); k2 *= c1; h2 ^= k2;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">8</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">7</span>]) &lt;&lt; <span class=\"number\">56</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">7</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">6</span>]) &lt;&lt; <span class=\"number\">48</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">6</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">5</span>]) &lt;&lt; <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">5</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">4</span>]) &lt;&lt; <span class=\"number\">32</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">4</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">3</span>]) &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">3</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">2</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">1</span>]) &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">1</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">0</span>]) &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k1 *= c1; k1  = ROTL64(k1,<span class=\"number\">31</span>); k1 *= c2; h1 ^= k1;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// finalization</span></span><br><span class=\"line\"></span><br><span class=\"line\">  h1 ^= len; h2 ^= len;</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 += h2;</span><br><span class=\"line\">  h2 += h1;</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 = fmix64(h1);</span><br><span class=\"line\">  h2 = fmix64(h2);</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 += h2;</span><br><span class=\"line\">  h2 += h1;</span><br><span class=\"line\"></span><br><span class=\"line\">  ((<span class=\"keyword\">uint64_t</span>*)out)[<span class=\"number\">0</span>] = h1;</span><br><span class=\"line\">  ((<span class=\"keyword\">uint64_t</span>*)out)[<span class=\"number\">1</span>] = h2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p><br>\n<strong>参考</strong>\n<a href=\"https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\" target=\"_blank\" rel=\"noopener\">Fvn Hash Funciton wikipedia</a>\n<a href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\" target=\"_blank\" rel=\"noopener\">https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><br></p>\n<h2 id=\"Fnv\"><a href=\"#Fnv\" class=\"headerlink\" title=\"Fnv\"></a>Fnv</h2><h3 id=\"FNV-1-hash\"><a href=\"#FNV-1-hash\" class=\"headerlink\" title=\"FNV-1 hash\"></a>FNV-1 hash</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = FNV_offset_basis</span><br><span class=\"line\"><span class=\"keyword\">for</span> each byte_of_data to be hashed</span><br><span class=\"line\">    hash = hash × FNV_prime</span><br><span class=\"line\">    hash = hash XOR byte_of_data</span><br><span class=\"line\"><span class=\"keyword\">return</span> hash</span><br></pre></td></tr></table></figure>\n<h3 id=\"FNV-1a-hash\"><a href=\"#FNV-1a-hash\" class=\"headerlink\" title=\"FNV-1a hash\"></a>FNV-1a hash</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = FNV_offset_basis</span><br><span class=\"line\"><span class=\"keyword\">for</span> each byte_of_data to be hashed</span><br><span class=\"line\">    hash = hash XOR byte_of_data</span><br><span class=\"line\">    hash = hash × FNV_prime</span><br><span class=\"line\"><span class=\"keyword\">return</span> hash</span><br></pre></td></tr></table></figure>\n<h3 id=\"FNV-0-hash-Deprecated\"><a href=\"#FNV-0-hash-Deprecated\" class=\"headerlink\" title=\"FNV-0 hash (Deprecated)\"></a>FNV-0 hash (Deprecated)</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> each byte_of_data to be hashed</span><br><span class=\"line\">    hash = hash × FNV_prime</span><br><span class=\"line\">    hash = hash XOR octet_of_data</span><br><span class=\"line\"><span class=\"keyword\">return</span> hash</span><br></pre></td></tr></table></figure>\n<h3 id=\"FNV-parameters\"><a href=\"#FNV-parameters\" class=\"headerlink\" title=\"FNV parameters\"></a>FNV parameters</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Size in bits</th>\n<th style=\"text-align:center\">FNV prime</th>\n<th style=\"text-align:center\">FNV offset basis</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:center\">224 + 28 + 0x93 = <br>16777619</td>\n<td style=\"text-align:center\">2166136261 = <br>0x811c9dc5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">240 + 28 + 0xb3 = <br>1099511628211</td>\n<td style=\"text-align:center\">14695981039346656037 = <br>0xcbf29ce484222325</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">128</td>\n<td style=\"text-align:center\">288 + 28 + 0x3b = <br>309485009821345068724781371</td>\n<td style=\"text-align:center\">144066263297769815596495629667062367629 <br>= <br>0x6c62272e07bb014262b821756295c58d</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">256</td>\n<td style=\"text-align:center\">2168 + 28 + 0x63 = <br>374144419156711147060143317<br>175368453031918731002211</td>\n<td style=\"text-align:center\">100029257958052580907070968620625704837<br>092796014241193945225284501741471925557 <br>= <br>0xdd268dbcaac550362d98c384c4e576ccc8b153<br>6847b6bbb31023b4c8caee0535</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">512</td>\n<td style=\"text-align:center\">2344 + 28 + 0x57 = <br>358359158748448673689190764<br>890951084499463279557543925<br>26094039892345713852759</td>\n<td style=\"text-align:center\">965930312949666949800943540071631046609<br>041874567263789610837432943446265799458<br>293219771643844981305189220653980578449<br>5328239340083876191928701583869517785 = <br>0xb86db0b1171f4416dca1e50f309990acac87d0<br>59c90000000000000000000d21e948f68a34c192<br>f62ea79bc942dbe7ce182036415f56e34bac982a<br>ac4afe9fd9</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1024</td>\n<td style=\"text-align:center\">2680 + 28 + 0x8d = <br>501645651011311865543459881<br>103527895503076534540479074<br>430301752383111205510814745<br>150915769222029538271616265<br>187852689524938529229181652<br>437508374669137180409427187<br>316048473796672026038921768<br>4476157468082573</td>\n<td style=\"text-align:center\">14197795064947621068722070641403218320<br>88062279544193396087847491461758272325<br>22967323037177221508640965212023555493<br>65628174669108571814760471015076148029<br>75596980407732015769245856300321530495<br>71501574036444603635505054127112859663<br>61610267868082893823963790439336411086<br>884584107735010676915 <br> = <br>0x0000000000000000 005f7a76758ecc4d 32e56d5a591028b7 4b29fc4223fdada1 <br>6c3bf34eda3674da 9a21d90000000000 0000000000000000 0000000000000000 <br>0000000000000000 0000000000000000 0000000000000000 000000000004c6d7 <br>eb6e73802734510a 555f256cc005ae55 6bde8cc9c6a93b21 aff4b16c71ee90b3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"具体列子\"><a href=\"#具体列子\" class=\"headerlink\" title=\"具体列子\"></a>具体列子</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">fnv_1a_64</span><span class=\"params\">(String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> hash = FNV_1A_64_BASIC;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; value.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = value.charAt(i);</span><br><span class=\"line\">            hash ^= c;</span><br><span class=\"line\">            hash *= FNV_1A_64_PRIME;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">fnv_1a_64_lower</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> hash = FNV_1A_64_BASIC;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; key.length(); ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = key.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">'A'</span> &amp;&amp; c &lt;= <span class=\"string\">'Z'</span>) &#123;</span><br><span class=\"line\">                c = (<span class=\"keyword\">char</span>) (c + <span class=\"number\">32</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            hash ^= c;</span><br><span class=\"line\">            hash *= FNV_1A_64_PRIME;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MurmurHash3\"><a href=\"#MurmurHash3\" class=\"headerlink\" title=\"MurmurHash3\"></a>MurmurHash3</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// MurmurHash3 was written by Austin Appleby, and is placed in the public</span></span><br><span class=\"line\"><span class=\"comment\">// domain. The author hereby disclaims copyright to this source code.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Note - The x86 and x64 versions do _not_ produce the same results, as the</span></span><br><span class=\"line\"><span class=\"comment\">// algorithms are optimized for their respective platforms. You can still</span></span><br><span class=\"line\"><span class=\"comment\">// compile and run any of them on any platform, but your performance with the</span></span><br><span class=\"line\"><span class=\"comment\">// non-native version will be less than optimal.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"MurmurHash3.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Platform-specific functions and macros</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Microsoft Visual Studio</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(_MSC_VER)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FORCE_INLINE\t__forceinline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ROTL32(x,y)\t_rotl(x,y)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ROTL64(x,y)\t_rotl64(x,y)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BIG_CONSTANT(x) (x)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Other compilers</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>\t<span class=\"comment\">// defined(_MSC_VER)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>\tFORCE_INLINE inline __attribute__((always_inline))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> uint32_t <span class=\"title\">rotl32</span> <span class=\"params\">( <span class=\"keyword\">uint32_t</span> x, <span class=\"keyword\">int8_t</span> r )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x &lt;&lt; r) | (x &gt;&gt; (<span class=\"number\">32</span> - r));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> uint64_t <span class=\"title\">rotl64</span> <span class=\"params\">( <span class=\"keyword\">uint64_t</span> x, <span class=\"keyword\">int8_t</span> r )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x &lt;&lt; r) | (x &gt;&gt; (<span class=\"number\">64</span> - r));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>\tROTL32(x,y)\trotl32(x,y)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ROTL64(x,y)\trotl64(x,y)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BIG_CONSTANT(x) (x##LLU)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// !defined(_MSC_VER)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Block read - if your platform needs to do endian-swapping or can only</span></span><br><span class=\"line\"><span class=\"comment\">// handle aligned reads, do the conversion here</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FORCE_INLINE uint32_t <span class=\"title\">getblock32</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> * p, <span class=\"keyword\">int</span> i )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FORCE_INLINE uint64_t <span class=\"title\">getblock64</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> * p, <span class=\"keyword\">int</span> i )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Finalization mix - force all bits of a hash block to avalanche</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FORCE_INLINE uint32_t <span class=\"title\">fmix32</span> <span class=\"params\">( <span class=\"keyword\">uint32_t</span> h )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  h ^= h &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  h *= <span class=\"number\">0x85ebca6b</span>;</span><br><span class=\"line\">  h ^= h &gt;&gt; <span class=\"number\">13</span>;</span><br><span class=\"line\">  h *= <span class=\"number\">0xc2b2ae35</span>;</span><br><span class=\"line\">  h ^= h &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//----------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FORCE_INLINE uint64_t <span class=\"title\">fmix64</span> <span class=\"params\">( <span class=\"keyword\">uint64_t</span> k )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  k ^= k &gt;&gt; <span class=\"number\">33</span>;</span><br><span class=\"line\">  k *= BIG_CONSTANT(<span class=\"number\">0xff51afd7ed558ccd</span>);</span><br><span class=\"line\">  k ^= k &gt;&gt; <span class=\"number\">33</span>;</span><br><span class=\"line\">  k *= BIG_CONSTANT(<span class=\"number\">0xc4ceb9fe1a85ec53</span>);</span><br><span class=\"line\">  k ^= k &gt;&gt; <span class=\"number\">33</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MurmurHash3_x86_32</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * key, <span class=\"keyword\">int</span> len,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">uint32_t</span> seed, <span class=\"keyword\">void</span> * out )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * data = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)key;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> nblocks = len / <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> h1 = seed;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c1 = <span class=\"number\">0xcc9e2d51</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c2 = <span class=\"number\">0x1b873593</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// body</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> * blocks = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> *)(data + nblocks*<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = -nblocks; i; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> k1 = getblock32(blocks,i);</span><br><span class=\"line\"></span><br><span class=\"line\">    k1 *= c1;</span><br><span class=\"line\">    k1 = ROTL32(k1,<span class=\"number\">15</span>);</span><br><span class=\"line\">    k1 *= c2;</span><br><span class=\"line\">    </span><br><span class=\"line\">    h1 ^= k1;</span><br><span class=\"line\">    h1 = ROTL32(h1,<span class=\"number\">13</span>); </span><br><span class=\"line\">    h1 = h1*<span class=\"number\">5</span>+<span class=\"number\">0xe6546b64</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// tail</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * tail = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)(data + nblocks*<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> k1 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(len &amp; <span class=\"number\">3</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>: k1 ^= tail[<span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>: k1 ^= tail[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>: k1 ^= tail[<span class=\"number\">0</span>];</span><br><span class=\"line\">          k1 *= c1; k1 = ROTL32(k1,<span class=\"number\">15</span>); k1 *= c2; h1 ^= k1;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// finalization</span></span><br><span class=\"line\"></span><br><span class=\"line\">  h1 ^= len;</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 = fmix32(h1);</span><br><span class=\"line\"></span><br><span class=\"line\">  *(<span class=\"keyword\">uint32_t</span>*)out = h1;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MurmurHash3_x86_128</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> len,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">uint32_t</span> seed, <span class=\"keyword\">void</span> * out )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * data = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)key;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> nblocks = len / <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> h1 = seed;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> h2 = seed;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> h3 = seed;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> h4 = seed;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c1 = <span class=\"number\">0x239b961b</span>; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c2 = <span class=\"number\">0xab0e9789</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c3 = <span class=\"number\">0x38b34ae5</span>; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> c4 = <span class=\"number\">0xa1e38b93</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// body</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> * blocks = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> *)(data + nblocks*<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = -nblocks; i; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> k1 = getblock32(blocks,i*<span class=\"number\">4</span>+<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> k2 = getblock32(blocks,i*<span class=\"number\">4</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> k3 = getblock32(blocks,i*<span class=\"number\">4</span>+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> k4 = getblock32(blocks,i*<span class=\"number\">4</span>+<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    k1 *= c1; k1  = ROTL32(k1,<span class=\"number\">15</span>); k1 *= c2; h1 ^= k1;</span><br><span class=\"line\"></span><br><span class=\"line\">    h1 = ROTL32(h1,<span class=\"number\">19</span>); h1 += h2; h1 = h1*<span class=\"number\">5</span>+<span class=\"number\">0x561ccd1b</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    k2 *= c2; k2  = ROTL32(k2,<span class=\"number\">16</span>); k2 *= c3; h2 ^= k2;</span><br><span class=\"line\"></span><br><span class=\"line\">    h2 = ROTL32(h2,<span class=\"number\">17</span>); h2 += h3; h2 = h2*<span class=\"number\">5</span>+<span class=\"number\">0x0bcaa747</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    k3 *= c3; k3  = ROTL32(k3,<span class=\"number\">17</span>); k3 *= c4; h3 ^= k3;</span><br><span class=\"line\"></span><br><span class=\"line\">    h3 = ROTL32(h3,<span class=\"number\">15</span>); h3 += h4; h3 = h3*<span class=\"number\">5</span>+<span class=\"number\">0x96cd1c35</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    k4 *= c4; k4  = ROTL32(k4,<span class=\"number\">18</span>); k4 *= c1; h4 ^= k4;</span><br><span class=\"line\"></span><br><span class=\"line\">    h4 = ROTL32(h4,<span class=\"number\">13</span>); h4 += h1; h4 = h4*<span class=\"number\">5</span>+<span class=\"number\">0x32ac3b17</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// tail</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * tail = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)(data + nblocks*<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> k1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> k2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> k3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> k4 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(len &amp; <span class=\"number\">15</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">15</span>: k4 ^= tail[<span class=\"number\">14</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">14</span>: k4 ^= tail[<span class=\"number\">13</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">13</span>: k4 ^= tail[<span class=\"number\">12</span>] &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k4 *= c4; k4  = ROTL32(k4,<span class=\"number\">18</span>); k4 *= c1; h4 ^= k4;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">12</span>: k3 ^= tail[<span class=\"number\">11</span>] &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">11</span>: k3 ^= tail[<span class=\"number\">10</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">10</span>: k3 ^= tail[ <span class=\"number\">9</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">9</span>: k3 ^= tail[ <span class=\"number\">8</span>] &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k3 *= c3; k3  = ROTL32(k3,<span class=\"number\">17</span>); k3 *= c4; h3 ^= k3;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">8</span>: k2 ^= tail[ <span class=\"number\">7</span>] &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">7</span>: k2 ^= tail[ <span class=\"number\">6</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">6</span>: k2 ^= tail[ <span class=\"number\">5</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">5</span>: k2 ^= tail[ <span class=\"number\">4</span>] &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k2 *= c2; k2  = ROTL32(k2,<span class=\"number\">16</span>); k2 *= c3; h2 ^= k2;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">4</span>: k1 ^= tail[ <span class=\"number\">3</span>] &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">3</span>: k1 ^= tail[ <span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">2</span>: k1 ^= tail[ <span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">1</span>: k1 ^= tail[ <span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k1 *= c1; k1  = ROTL32(k1,<span class=\"number\">15</span>); k1 *= c2; h1 ^= k1;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// finalization</span></span><br><span class=\"line\"></span><br><span class=\"line\">  h1 ^= len; h2 ^= len; h3 ^= len; h4 ^= len;</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 += h2; h1 += h3; h1 += h4;</span><br><span class=\"line\">  h2 += h1; h3 += h1; h4 += h1;</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 = fmix32(h1);</span><br><span class=\"line\">  h2 = fmix32(h2);</span><br><span class=\"line\">  h3 = fmix32(h3);</span><br><span class=\"line\">  h4 = fmix32(h4);</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 += h2; h1 += h3; h1 += h4;</span><br><span class=\"line\">  h2 += h1; h3 += h1; h4 += h1;</span><br><span class=\"line\"></span><br><span class=\"line\">  ((<span class=\"keyword\">uint32_t</span>*)out)[<span class=\"number\">0</span>] = h1;</span><br><span class=\"line\">  ((<span class=\"keyword\">uint32_t</span>*)out)[<span class=\"number\">1</span>] = h2;</span><br><span class=\"line\">  ((<span class=\"keyword\">uint32_t</span>*)out)[<span class=\"number\">2</span>] = h3;</span><br><span class=\"line\">  ((<span class=\"keyword\">uint32_t</span>*)out)[<span class=\"number\">3</span>] = h4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MurmurHash3_x64_128</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> len,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> seed, <span class=\"keyword\">void</span> * out )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * data = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)key;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> nblocks = len / <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> h1 = seed;</span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> h2 = seed;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> c1 = BIG_CONSTANT(<span class=\"number\">0x87c37b91114253d5</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> c2 = BIG_CONSTANT(<span class=\"number\">0x4cf5ad432745937f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// body</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> * blocks = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint64_t</span> *)(data);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nblocks; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> k1 = getblock64(blocks,i*<span class=\"number\">2</span>+<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> k2 = getblock64(blocks,i*<span class=\"number\">2</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    k1 *= c1; k1  = ROTL64(k1,<span class=\"number\">31</span>); k1 *= c2; h1 ^= k1;</span><br><span class=\"line\"></span><br><span class=\"line\">    h1 = ROTL64(h1,<span class=\"number\">27</span>); h1 += h2; h1 = h1*<span class=\"number\">5</span>+<span class=\"number\">0x52dce729</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    k2 *= c2; k2  = ROTL64(k2,<span class=\"number\">33</span>); k2 *= c1; h2 ^= k2;</span><br><span class=\"line\"></span><br><span class=\"line\">    h2 = ROTL64(h2,<span class=\"number\">31</span>); h2 += h1; h2 = h2*<span class=\"number\">5</span>+<span class=\"number\">0x38495ab5</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// tail</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * tail = (<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)(data + nblocks*<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> k1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> k2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(len &amp; <span class=\"number\">15</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">15</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[<span class=\"number\">14</span>]) &lt;&lt; <span class=\"number\">48</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">14</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[<span class=\"number\">13</span>]) &lt;&lt; <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">13</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[<span class=\"number\">12</span>]) &lt;&lt; <span class=\"number\">32</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">12</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[<span class=\"number\">11</span>]) &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">11</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[<span class=\"number\">10</span>]) &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">10</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">9</span>]) &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">9</span>: k2 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">8</span>]) &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k2 *= c2; k2  = ROTL64(k2,<span class=\"number\">33</span>); k2 *= c1; h2 ^= k2;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">8</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">7</span>]) &lt;&lt; <span class=\"number\">56</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">7</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">6</span>]) &lt;&lt; <span class=\"number\">48</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">6</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">5</span>]) &lt;&lt; <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">5</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">4</span>]) &lt;&lt; <span class=\"number\">32</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">4</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">3</span>]) &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">3</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">2</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">1</span>]) &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span>  <span class=\"number\">1</span>: k1 ^= ((<span class=\"keyword\">uint64_t</span>)tail[ <span class=\"number\">0</span>]) &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">           k1 *= c1; k1  = ROTL64(k1,<span class=\"number\">31</span>); k1 *= c2; h1 ^= k1;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//----------</span></span><br><span class=\"line\">  <span class=\"comment\">// finalization</span></span><br><span class=\"line\"></span><br><span class=\"line\">  h1 ^= len; h2 ^= len;</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 += h2;</span><br><span class=\"line\">  h2 += h1;</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 = fmix64(h1);</span><br><span class=\"line\">  h2 = fmix64(h2);</span><br><span class=\"line\"></span><br><span class=\"line\">  h1 += h2;</span><br><span class=\"line\">  h2 += h1;</span><br><span class=\"line\"></span><br><span class=\"line\">  ((<span class=\"keyword\">uint64_t</span>*)out)[<span class=\"number\">0</span>] = h1;</span><br><span class=\"line\">  ((<span class=\"keyword\">uint64_t</span>*)out)[<span class=\"number\">1</span>] = h2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p><br>\n<strong>参考</strong>\n<a href=\"https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\" target=\"_blank\" rel=\"noopener\">Fvn Hash Funciton wikipedia</a>\n<a href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\" target=\"_blank\" rel=\"noopener\">https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp</a></p>\n"},{"title":"微积分","date":"2008-09-01T00:01:02.000Z","_content":"\n极限是现代数学特别是分析学中的基础概念之一。极限可以用来描述一个序列的指标愈来愈大时，序列中元素的性质变化的趋势。极限也可以描述函数的自变量接近某一个值的时候，相对应的函数值变化的趋势。作为微积分和数学分析的其他分支最基本的概念之一，连续和导数的概念都是通过极限来定义的。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n## 导数\n\n### 基本求导公式\n\n### 导数四则运算\n\n\n## 微分\n\n## 定积分\n\n## 不定积分\n\n\n<br/>\n\n---\n参考\n","source":"_posts/微积分.md","raw":"---\ntitle: 微积分\ndate: 2008-09-01 08:01:02\ncategories:\n    - 数学\ntags:\n    - 数学\n    - 高等数学\n    - 极限\n    - 微积分\n---\n\n极限是现代数学特别是分析学中的基础概念之一。极限可以用来描述一个序列的指标愈来愈大时，序列中元素的性质变化的趋势。极限也可以描述函数的自变量接近某一个值的时候，相对应的函数值变化的趋势。作为微积分和数学分析的其他分支最基本的概念之一，连续和导数的概念都是通过极限来定义的。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n## 导数\n\n### 基本求导公式\n\n### 导数四则运算\n\n\n## 微分\n\n## 定积分\n\n## 不定积分\n\n\n<br/>\n\n---\n参考\n","slug":"微积分","published":1,"updated":"2019-11-02T07:12:18.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6w005mt6s6r0cpyc6q","content":"<p>极限是现代数学特别是分析学中的基础概念之一。极限可以用来描述一个序列的指标愈来愈大时，序列中元素的性质变化的趋势。极限也可以描述函数的自变量接近某一个值的时候，相对应的函数值变化的趋势。作为微积分和数学分析的其他分支最基本的概念之一，连续和导数的概念都是通过极限来定义的。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<a id=\"more\"></a>\n<h2 id=\"导数\"><a href=\"#导数\" class=\"headerlink\" title=\"导数\"></a>导数</h2><h3 id=\"基本求导公式\"><a href=\"#基本求导公式\" class=\"headerlink\" title=\"基本求导公式\"></a>基本求导公式</h3><h3 id=\"导数四则运算\"><a href=\"#导数四则运算\" class=\"headerlink\" title=\"导数四则运算\"></a>导数四则运算</h3><h2 id=\"微分\"><a href=\"#微分\" class=\"headerlink\" title=\"微分\"></a>微分</h2><h2 id=\"定积分\"><a href=\"#定积分\" class=\"headerlink\" title=\"定积分\"></a>定积分</h2><h2 id=\"不定积分\"><a href=\"#不定积分\" class=\"headerlink\" title=\"不定积分\"></a>不定积分</h2><p><br></p>\n<hr>\n<p>参考</p>\n","site":{"data":{}},"excerpt":"<p>极限是现代数学特别是分析学中的基础概念之一。极限可以用来描述一个序列的指标愈来愈大时，序列中元素的性质变化的趋势。极限也可以描述函数的自变量接近某一个值的时候，相对应的函数值变化的趋势。作为微积分和数学分析的其他分支最基本的概念之一，连续和导数的概念都是通过极限来定义的。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>","more":"<h2 id=\"导数\"><a href=\"#导数\" class=\"headerlink\" title=\"导数\"></a>导数</h2><h3 id=\"基本求导公式\"><a href=\"#基本求导公式\" class=\"headerlink\" title=\"基本求导公式\"></a>基本求导公式</h3><h3 id=\"导数四则运算\"><a href=\"#导数四则运算\" class=\"headerlink\" title=\"导数四则运算\"></a>导数四则运算</h3><h2 id=\"微分\"><a href=\"#微分\" class=\"headerlink\" title=\"微分\"></a>微分</h2><h2 id=\"定积分\"><a href=\"#定积分\" class=\"headerlink\" title=\"定积分\"></a>定积分</h2><h2 id=\"不定积分\"><a href=\"#不定积分\" class=\"headerlink\" title=\"不定积分\"></a>不定积分</h2><p><br></p>\n<hr>\n<p>参考</p>"},{"title":"感知机算法","date":"2018-11-22T07:34:19.000Z","_content":"\n感知器（英语：Perceptron）是Frank Rosenblatt在1957年就职于康奈尔航空实验室（Cornell Aeronautical Laboratory）时所发明的一种人工神经网络。它可以被视为一种最简单形式的前馈神经网络，是一种`二元线性分类器`。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n<br/>\n### 定义\n感知器使用特征向量来表示的前馈神经网络，它是一种二元分类器，把矩阵上的输入 $x$（实数值向量）映射到输出值 $f(x)$ 上（一个二元的值）。\n\n$$ f(x)={\\begin{cases}1&{\\text{if }} w\\cdot x+b>0 \\\\\\ 0&{\\text{else}}\\end{cases}}$$\n\n<br/>\n### ss\n\n\n\n<br/>\n\n---\n参考\n李航《统计学习方法》\n周志华《机器学习》\n[wikipedia-感知机](https://en.wikipedia.org/wiki/Perceptron)","source":"_posts/感知机算法.md","raw":"---\ntitle: 感知机算法\ndate: 2018-11-22 15:34:19\ncategories: \n    - 机器学习\ntags:\n    - 算法\n    - 机器学习\n    - 监督学习\n---\n\n感知器（英语：Perceptron）是Frank Rosenblatt在1957年就职于康奈尔航空实验室（Cornell Aeronautical Laboratory）时所发明的一种人工神经网络。它可以被视为一种最简单形式的前馈神经网络，是一种`二元线性分类器`。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n<br/>\n### 定义\n感知器使用特征向量来表示的前馈神经网络，它是一种二元分类器，把矩阵上的输入 $x$（实数值向量）映射到输出值 $f(x)$ 上（一个二元的值）。\n\n$$ f(x)={\\begin{cases}1&{\\text{if }} w\\cdot x+b>0 \\\\\\ 0&{\\text{else}}\\end{cases}}$$\n\n<br/>\n### ss\n\n\n\n<br/>\n\n---\n参考\n李航《统计学习方法》\n周志华《机器学习》\n[wikipedia-感知机](https://en.wikipedia.org/wiki/Perceptron)","slug":"感知机算法","published":1,"updated":"2019-11-02T07:12:18.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y6y005nt6s6hjq4bfdq","content":"<p>感知器（英语：Perceptron）是Frank Rosenblatt在1957年就职于康奈尔航空实验室（Cornell Aeronautical Laboratory）时所发明的一种人工神经网络。它可以被视为一种最简单形式的前馈神经网络，是一种<code>二元线性分类器</code>。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>感知器使用特征向量来表示的前馈神经网络，它是一种二元分类器，把矩阵上的输入 $x$（实数值向量）映射到输出值 $f(x)$ 上（一个二元的值）。</p>\n<p>$$ f(x)={\\begin{cases}1&amp;{\\text{if }} w\\cdot x+b&gt;0 \\\\ 0&amp;{\\text{else}}\\end{cases}}$$</p>\n<p><br></p>\n<h3 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h3><p><br></p>\n<hr>\n<p>参考\n李航《统计学习方法》\n周志华《机器学习》\n<a href=\"https://en.wikipedia.org/wiki/Perceptron\" target=\"_blank\" rel=\"noopener\">wikipedia-感知机</a></p>\n","site":{"data":{}},"excerpt":"<p>感知器（英语：Perceptron）是Frank Rosenblatt在1957年就职于康奈尔航空实验室（Cornell Aeronautical Laboratory）时所发明的一种人工神经网络。它可以被视为一种最简单形式的前馈神经网络，是一种<code>二元线性分类器</code>。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>","more":"<p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>感知器使用特征向量来表示的前馈神经网络，它是一种二元分类器，把矩阵上的输入 $x$（实数值向量）映射到输出值 $f(x)$ 上（一个二元的值）。</p>\n<p>$$ f(x)={\\begin{cases}1&amp;{\\text{if }} w\\cdot x+b&gt;0 \\\\ 0&amp;{\\text{else}}\\end{cases}}$$</p>\n<p><br></p>\n<h3 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h3><p><br></p>\n<hr>\n<p>参考\n李航《统计学习方法》\n周志华《机器学习》\n<a href=\"https://en.wikipedia.org/wiki/Perceptron\" target=\"_blank\" rel=\"noopener\">wikipedia-感知机</a></p>"},{"title":"排序算法汇总","date":"2018-12-06T12:09:48.000Z","_content":"\n##\n排序算法|平均|最好|最坏|是否稳定\n---|---| --- | --- | ---\n选择排序| - | - | - | -\n冒泡排序| - | - | - | - \n插入排序| - | - | - | -\n梳排序| - | - | - | -\n希尔排序| - | - | - | -\n快速排序| - | - | - | -\n归并排序| - | - | - | -\n堆排序| - | - | - | -\n计数排序| - | - | - | -\n桶排序| - | - | - | -\n二叉树排序| - | - | -| - \n\n## 排序算法\n### 选择排序\n\n### 冒泡排序\n```\n\n```\n\n### 插入排序\n\n### 梳排序\n```java\n/**\n * 梳排序\n * @param a\n * @return\n */\npublic static int[] combSort(int[] a) {\n    int N = a.length;\n    int step = N;\n    int k;\n    // 第一部分\n    while((step /= 1.3) > 1) {\n        for (int i = N-1; i >= step; i--) {\n            k = i -step;\n            if(a[k]>a[i]){\n                // 交换位置\n                exc(a, k, i);\n            }\n        }\n    }\n    // 第二部分：进行冒泡排序\n    a= bubbleSort2(a);\n    return a;\n}\n```\n\n### 希尔排序\n```java\n/**\n * shell排序\n * @param a\n * @return\n */\npublic static int[] shellSort(int[] a){\n    int N = a.length;\n    int h = 1;\n    // 增量序列\n    while(h < N/3){\n        // h = 1,4,13,40,……\n        h = h*3 + 1; \n    }\n\n    while(h>=1){\n        for (int i = h; i < N; i++) {\n            // 进行插入排序，诺a[j]比a[j-h]小，则向前挪动h\n            for (int j = i; j >= h && a[j-h]>a[j]; j -= h) {\n                exc(a, j, j-h);\n            }\n        }\n        h /= 3;\n    }\n    return a;\n}\n```\n\n\n----\n参考\nhttps://www.cnblogs.com/xiaohuiduan/p/11188304.html\n","source":"_posts/排序算法汇总.md","raw":"---\ntitle: 排序算法汇总\ndate: 2018-12-06 20:09:48\ncategories: \n    - 算法\ntags:\n    - 算法\n    - 排序\n---\n\n##\n排序算法|平均|最好|最坏|是否稳定\n---|---| --- | --- | ---\n选择排序| - | - | - | -\n冒泡排序| - | - | - | - \n插入排序| - | - | - | -\n梳排序| - | - | - | -\n希尔排序| - | - | - | -\n快速排序| - | - | - | -\n归并排序| - | - | - | -\n堆排序| - | - | - | -\n计数排序| - | - | - | -\n桶排序| - | - | - | -\n二叉树排序| - | - | -| - \n\n## 排序算法\n### 选择排序\n\n### 冒泡排序\n```\n\n```\n\n### 插入排序\n\n### 梳排序\n```java\n/**\n * 梳排序\n * @param a\n * @return\n */\npublic static int[] combSort(int[] a) {\n    int N = a.length;\n    int step = N;\n    int k;\n    // 第一部分\n    while((step /= 1.3) > 1) {\n        for (int i = N-1; i >= step; i--) {\n            k = i -step;\n            if(a[k]>a[i]){\n                // 交换位置\n                exc(a, k, i);\n            }\n        }\n    }\n    // 第二部分：进行冒泡排序\n    a= bubbleSort2(a);\n    return a;\n}\n```\n\n### 希尔排序\n```java\n/**\n * shell排序\n * @param a\n * @return\n */\npublic static int[] shellSort(int[] a){\n    int N = a.length;\n    int h = 1;\n    // 增量序列\n    while(h < N/3){\n        // h = 1,4,13,40,……\n        h = h*3 + 1; \n    }\n\n    while(h>=1){\n        for (int i = h; i < N; i++) {\n            // 进行插入排序，诺a[j]比a[j-h]小，则向前挪动h\n            for (int j = i; j >= h && a[j-h]>a[j]; j -= h) {\n                exc(a, j, j-h);\n            }\n        }\n        h /= 3;\n    }\n    return a;\n}\n```\n\n\n----\n参考\nhttps://www.cnblogs.com/xiaohuiduan/p/11188304.html\n","slug":"排序算法汇总","published":1,"updated":"2019-11-02T07:12:18.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y70005rt6s69wgyzhy6","content":"<p>##\n排序算法|平均|最好|最坏|是否稳定\n—|—| — | — | —\n选择排序| - | - | - | -\n冒泡排序| - | - | - | - \n插入排序| - | - | - | -\n梳排序| - | - | - | -\n希尔排序| - | - | - | -\n快速排序| - | - | - | -\n归并排序| - | - | - | -\n堆排序| - | - | - | -\n计数排序| - | - | - | -\n桶排序| - | - | - | -\n二叉树排序| - | - | -| - </p>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><h3 id=\"梳排序\"><a href=\"#梳排序\" class=\"headerlink\" title=\"梳排序\"></a>梳排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 梳排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] combSort(<span class=\"keyword\">int</span>[] a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> step = N;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k;</span><br><span class=\"line\">    <span class=\"comment\">// 第一部分</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((step /= <span class=\"number\">1.3</span>) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = N-<span class=\"number\">1</span>; i &gt;= step; i--) &#123;</span><br><span class=\"line\">            k = i -step;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[k]&gt;a[i])&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 交换位置</span></span><br><span class=\"line\">                exc(a, k, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 第二部分：进行冒泡排序</span></span><br><span class=\"line\">    a= bubbleSort2(a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * shell排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] shellSort(<span class=\"keyword\">int</span>[] a)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 增量序列</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h &lt; N/<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// h = 1,4,13,40,……</span></span><br><span class=\"line\">        h = h*<span class=\"number\">3</span> + <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 进行插入排序，诺a[j]比a[j-h]小，则向前挪动h</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt;= h &amp;&amp; a[j-h]&gt;a[j]; j -= h) &#123;</span><br><span class=\"line\">                exc(a, j, j-h);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        h /= <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考\n<a href=\"https://www.cnblogs.com/xiaohuiduan/p/11188304.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xiaohuiduan/p/11188304.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>##\n排序算法|平均|最好|最坏|是否稳定\n—|—| — | — | —\n选择排序| - | - | - | -\n冒泡排序| - | - | - | - \n插入排序| - | - | - | -\n梳排序| - | - | - | -\n希尔排序| - | - | - | -\n快速排序| - | - | - | -\n归并排序| - | - | - | -\n堆排序| - | - | - | -\n计数排序| - | - | - | -\n桶排序| - | - | - | -\n二叉树排序| - | - | -| - </p>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><h3 id=\"梳排序\"><a href=\"#梳排序\" class=\"headerlink\" title=\"梳排序\"></a>梳排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 梳排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] combSort(<span class=\"keyword\">int</span>[] a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> step = N;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k;</span><br><span class=\"line\">    <span class=\"comment\">// 第一部分</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((step /= <span class=\"number\">1.3</span>) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = N-<span class=\"number\">1</span>; i &gt;= step; i--) &#123;</span><br><span class=\"line\">            k = i -step;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[k]&gt;a[i])&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 交换位置</span></span><br><span class=\"line\">                exc(a, k, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 第二部分：进行冒泡排序</span></span><br><span class=\"line\">    a= bubbleSort2(a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * shell排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] shellSort(<span class=\"keyword\">int</span>[] a)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 增量序列</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h &lt; N/<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// h = 1,4,13,40,……</span></span><br><span class=\"line\">        h = h*<span class=\"number\">3</span> + <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 进行插入排序，诺a[j]比a[j-h]小，则向前挪动h</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt;= h &amp;&amp; a[j-h]&gt;a[j]; j -= h) &#123;</span><br><span class=\"line\">                exc(a, j, j-h);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        h /= <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考\n<a href=\"https://www.cnblogs.com/xiaohuiduan/p/11188304.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xiaohuiduan/p/11188304.html</a></p>\n"},{"title":"支持向量机算法","date":"2018-11-09T07:01:41.000Z","_content":"\n\n<!-- more -->\n","source":"_posts/支持向量机.md","raw":"---\ntitle: 支持向量机算法\ndate: 2018-11-09 15:01:41\ncategories: \n    - 机器学习\ntags:\n    - 算法\n    - 机器学习\n    - 监督学习\n    - SVM\n---\n\n\n<!-- more -->\n","slug":"支持向量机","published":1,"updated":"2019-11-02T07:12:18.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y71005tt6s6yr33o0ac","content":"<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"","more":""},{"title":"方差","date":"2012-10-01T00:01:02.000Z","_content":"\n在概率论和统计学中，一个随机变量的方差描述的是它的离散程度，也就是该变量离其期望值的距离。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n---\n\n\n\n\n<!-- more -->\n\n\n<br/>\n### 定义\n\n设X为服从分布F的随机变量， 如果E[X]是随机变量X的期望值（$μ=E[X]$）\n随机变量X或者分布F的方差為：\n\n$$ Var(X)= E \\left[(X-\\mu)^{2} \\right]$$\n\n- 离散型\n$$Var(X) = \\sum_{i=1}^n p_i\\cdot(x_i - \\mu)^2 = \\sum_{i=1}^n (p_i\\cdot x_i^2) - \\mu^2$$\n此处 $\\mu$ 是其期望值: $ \\mu = \\sum_{i=1}^n p_{i} \\cdot x_{i}$\n \n\n\n- 连续型\n$$Var(X) = \\sigma^2 =\\int (x-\\mu)^2 \\, f(x) \\, dx\\, =\\int x^2 \\, f(x) \\, dx\\, - \\mu^2$$\n此处 $\\mu$ 是其期望值: $ \\mu = \\int x f(x)dx$\n\n\n\n\n<br/>\n### 范例\n\n\n\n---\n参考\n\n[wikipedia-方差](https://en.wikipedia.org/wiki/Variance)\n[baike-方差](https://baike.baidu.com/item/%E6%96%B9%E5%B7%AE)","source":"_posts/方差.md","raw":"---\ntitle: 方差\ndate: 2012-10-01 08:01:02\ncategories: \n    - 概率与统计\ntags: \n    - 数学\n    - 概率与统计\n    - 方差\n---\n\n在概率论和统计学中，一个随机变量的方差描述的是它的离散程度，也就是该变量离其期望值的距离。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n---\n\n\n\n\n<!-- more -->\n\n\n<br/>\n### 定义\n\n设X为服从分布F的随机变量， 如果E[X]是随机变量X的期望值（$μ=E[X]$）\n随机变量X或者分布F的方差為：\n\n$$ Var(X)= E \\left[(X-\\mu)^{2} \\right]$$\n\n- 离散型\n$$Var(X) = \\sum_{i=1}^n p_i\\cdot(x_i - \\mu)^2 = \\sum_{i=1}^n (p_i\\cdot x_i^2) - \\mu^2$$\n此处 $\\mu$ 是其期望值: $ \\mu = \\sum_{i=1}^n p_{i} \\cdot x_{i}$\n \n\n\n- 连续型\n$$Var(X) = \\sigma^2 =\\int (x-\\mu)^2 \\, f(x) \\, dx\\, =\\int x^2 \\, f(x) \\, dx\\, - \\mu^2$$\n此处 $\\mu$ 是其期望值: $ \\mu = \\int x f(x)dx$\n\n\n\n\n<br/>\n### 范例\n\n\n\n---\n参考\n\n[wikipedia-方差](https://en.wikipedia.org/wiki/Variance)\n[baike-方差](https://baike.baidu.com/item/%E6%96%B9%E5%B7%AE)","slug":"方差","published":1,"updated":"2019-11-02T07:12:18.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y73005yt6s63s2im3ah","content":"<p>在概率论和统计学中，一个随机变量的方差描述的是它的离散程度，也就是该变量离其期望值的距离。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>\n<a id=\"more\"></a>\n<p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>设X为服从分布F的随机变量， 如果E[X]是随机变量X的期望值（$μ=E[X]$）\n随机变量X或者分布F的方差為：</p>\n<p>$$ Var(X)= E \\left[(X-\\mu)^{2} \\right]$$</p>\n<ul>\n<li>离散型\n$$Var(X) = \\sum_{i=1}^n p_i\\cdot(x_i - \\mu)^2 = \\sum_{i=1}^n (p_i\\cdot x_i^2) - \\mu^2$$\n此处 $\\mu$ 是其期望值: $ \\mu = \\sum_{i=1}^n p_{i} \\cdot x_{i}$</li>\n</ul>\n<ul>\n<li>连续型\n$$Var(X) = \\sigma^2 =\\int (x-\\mu)^2 \\, f(x) \\, dx\\, =\\int x^2 \\, f(x) \\, dx\\, - \\mu^2$$\n此处 $\\mu$ 是其期望值: $ \\mu = \\int x f(x)dx$</li>\n</ul>\n<p><br></p>\n<h3 id=\"范例\"><a href=\"#范例\" class=\"headerlink\" title=\"范例\"></a>范例</h3><hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Variance\" target=\"_blank\" rel=\"noopener\">wikipedia-方差</a>\n<a href=\"https://baike.baidu.com/item/%E6%96%B9%E5%B7%AE\" target=\"_blank\" rel=\"noopener\">baike-方差</a></p>\n","site":{"data":{}},"excerpt":"<p>在概率论和统计学中，一个随机变量的方差描述的是它的离散程度，也就是该变量离其期望值的距离。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>","more":"<p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>设X为服从分布F的随机变量， 如果E[X]是随机变量X的期望值（$μ=E[X]$）\n随机变量X或者分布F的方差為：</p>\n<p>$$ Var(X)= E \\left[(X-\\mu)^{2} \\right]$$</p>\n<ul>\n<li>离散型\n$$Var(X) = \\sum_{i=1}^n p_i\\cdot(x_i - \\mu)^2 = \\sum_{i=1}^n (p_i\\cdot x_i^2) - \\mu^2$$\n此处 $\\mu$ 是其期望值: $ \\mu = \\sum_{i=1}^n p_{i} \\cdot x_{i}$</li>\n</ul>\n<ul>\n<li>连续型\n$$Var(X) = \\sigma^2 =\\int (x-\\mu)^2 \\, f(x) \\, dx\\, =\\int x^2 \\, f(x) \\, dx\\, - \\mu^2$$\n此处 $\\mu$ 是其期望值: $ \\mu = \\int x f(x)dx$</li>\n</ul>\n<p><br></p>\n<h3 id=\"范例\"><a href=\"#范例\" class=\"headerlink\" title=\"范例\"></a>范例</h3><hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Variance\" target=\"_blank\" rel=\"noopener\">wikipedia-方差</a>\n<a href=\"https://baike.baidu.com/item/%E6%96%B9%E5%B7%AE\" target=\"_blank\" rel=\"noopener\">baike-方差</a></p>"},{"title":"朴素贝叶斯算法","date":"2018-11-13T02:40:46.000Z","_content":"\n\n\n<!-- more -->","source":"_posts/朴素贝叶斯算法.md","raw":"---\ntitle: 朴素贝叶斯算法\ndate: 2018-11-13 10:40:46\ncategories: \n    - 机器学习\ntags: \n    - 算法\n    - 机器学习\n    - 监督学习\n    - 贝叶斯\n---\n\n\n\n<!-- more -->","slug":"朴素贝叶斯算法","published":1,"updated":"2019-11-02T07:12:18.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y740061t6s6cwrohj2y","content":"<a id=\"more\"></a>","site":{"data":{}},"excerpt":"","more":""},{"title":"期望值","date":"2012-10-01T00:01:01.000Z","_content":"\n在概率论和统计学中，一个离散性随机变量的期望值是试验中每次可能的结果乘以其结果概率的总和\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n---\n\n\n<!-- more -->\n\n\n<br/>\n### 定义\n\n如果X是在概率空间（Ω, F, P）中的随机变量，那么它的期望值E[X]的定义是：\n\n$$E[X]=\\int _{\\Omega }X dP$$\n\n\n- 离散型\n如果X 是离散的随机变量，输出值为x1, x2, ...， 和输出值相应的概率为p1, p2, ...（概率和为1）。\n若级数 $\\sum_{i} p_{i}x_{i}$绝对收敛，那么期望值E[X]是一个无限数列的和。\n$$E[X]=\\sum_{i=1}^{k} x_{i}p_{i} = x_{1}p_{1}+x_{2}p_{2} + \\cdots +x_{k}p_{k}$$\n\n\n- 连续性\n如果 $X$ 是连续的随机变量，存在一个相应的概率密度函数 $f(x)$,\n$$E[X]= \\int_{-\\infty}^{\\infty}xf(x)dx$$\n是针对于连续的随机变量的，与离散随机变量的期望值的算法同出一辙，由于输出值是连续的，所以把求和改成了积分。\n\n<br/>\n### 意义\n数学期望可以用于预测一个随机事件的平均预期情况。\n\n<br/>\n### 范例\n1、掷一枚公平的六面骰子，可知没面概率都是$\\frac{1}{6}$ ，计算如下：\n\n$E(X)= 1\\cdot\\frac{1}{6} + 2\\cdot\\frac{1}{6} + 3\\cdot\\frac{1}{6} + 4\\cdot\\frac{1}{6} + 5\\cdot\\frac{1}{6} + 6\\cdot\\frac{1}{6} = (1+2+3+4+5+6)\\cdot\\frac{1}{6} = 3.5$\n\n> 从上面可知，`均值`是期望的特例：每次概率都是一样\n\n\n<br/>\n### 相关阅读\n\n[方差](../方差) [标准差](../标准差) [协方差](../协方差)\n\n<br/>\n\n---\n参考\n\n[wikipedia-期望值](https://en.wikipedia.org/wiki/Expected_value)","source":"_posts/期望值.md","raw":"---\ntitle: 期望值\ndate: 2012-10-01 08:01:01\ncategories: \n    - 概率与统计\ntags: \n    - 数学\n    - 概率与统计\n    - 期望\n---\n\n在概率论和统计学中，一个离散性随机变量的期望值是试验中每次可能的结果乘以其结果概率的总和\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n---\n\n\n<!-- more -->\n\n\n<br/>\n### 定义\n\n如果X是在概率空间（Ω, F, P）中的随机变量，那么它的期望值E[X]的定义是：\n\n$$E[X]=\\int _{\\Omega }X dP$$\n\n\n- 离散型\n如果X 是离散的随机变量，输出值为x1, x2, ...， 和输出值相应的概率为p1, p2, ...（概率和为1）。\n若级数 $\\sum_{i} p_{i}x_{i}$绝对收敛，那么期望值E[X]是一个无限数列的和。\n$$E[X]=\\sum_{i=1}^{k} x_{i}p_{i} = x_{1}p_{1}+x_{2}p_{2} + \\cdots +x_{k}p_{k}$$\n\n\n- 连续性\n如果 $X$ 是连续的随机变量，存在一个相应的概率密度函数 $f(x)$,\n$$E[X]= \\int_{-\\infty}^{\\infty}xf(x)dx$$\n是针对于连续的随机变量的，与离散随机变量的期望值的算法同出一辙，由于输出值是连续的，所以把求和改成了积分。\n\n<br/>\n### 意义\n数学期望可以用于预测一个随机事件的平均预期情况。\n\n<br/>\n### 范例\n1、掷一枚公平的六面骰子，可知没面概率都是$\\frac{1}{6}$ ，计算如下：\n\n$E(X)= 1\\cdot\\frac{1}{6} + 2\\cdot\\frac{1}{6} + 3\\cdot\\frac{1}{6} + 4\\cdot\\frac{1}{6} + 5\\cdot\\frac{1}{6} + 6\\cdot\\frac{1}{6} = (1+2+3+4+5+6)\\cdot\\frac{1}{6} = 3.5$\n\n> 从上面可知，`均值`是期望的特例：每次概率都是一样\n\n\n<br/>\n### 相关阅读\n\n[方差](../方差) [标准差](../标准差) [协方差](../协方差)\n\n<br/>\n\n---\n参考\n\n[wikipedia-期望值](https://en.wikipedia.org/wiki/Expected_value)","slug":"期望值","published":1,"updated":"2019-11-02T07:12:18.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y750065t6s6gb1uhx6u","content":"<p>在概率论和统计学中，一个离散性随机变量的期望值是试验中每次可能的结果乘以其结果概率的总和</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>\n<a id=\"more\"></a>\n<p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>如果X是在概率空间（Ω, F, P）中的随机变量，那么它的期望值E[X]的定义是：</p>\n<p>$$E[X]=\\int _{\\Omega }X dP$$</p>\n<ul>\n<li>离散型\n如果X 是离散的随机变量，输出值为x1, x2, …， 和输出值相应的概率为p1, p2, …（概率和为1）。\n若级数 $\\sum_{i} p_{i}x_{i}$绝对收敛，那么期望值E[X]是一个无限数列的和。\n$$E[X]=\\sum_{i=1}^{k} x_{i}p_{i} = x_{1}p_{1}+x_{2}p_{2} + \\cdots +x_{k}p_{k}$$</li>\n</ul>\n<ul>\n<li>连续性\n如果 $X$ 是连续的随机变量，存在一个相应的概率密度函数 $f(x)$,\n$$E[X]= \\int_{-\\infty}^{\\infty}xf(x)dx$$\n是针对于连续的随机变量的，与离散随机变量的期望值的算法同出一辙，由于输出值是连续的，所以把求和改成了积分。</li>\n</ul>\n<p><br></p>\n<h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>数学期望可以用于预测一个随机事件的平均预期情况。</p>\n<p><br></p>\n<h3 id=\"范例\"><a href=\"#范例\" class=\"headerlink\" title=\"范例\"></a>范例</h3><p>1、掷一枚公平的六面骰子，可知没面概率都是$\\frac{1}{6}$ ，计算如下：</p>\n<p>$E(X)= 1\\cdot\\frac{1}{6} + 2\\cdot\\frac{1}{6} + 3\\cdot\\frac{1}{6} + 4\\cdot\\frac{1}{6} + 5\\cdot\\frac{1}{6} + 6\\cdot\\frac{1}{6} = (1+2+3+4+5+6)\\cdot\\frac{1}{6} = 3.5$</p>\n<blockquote>\n<p>从上面可知，<code>均值</code>是期望的特例：每次概率都是一样</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"相关阅读\"><a href=\"#相关阅读\" class=\"headerlink\" title=\"相关阅读\"></a>相关阅读</h3><p><a href=\"../方差\">方差</a> <a href=\"../标准差\">标准差</a> <a href=\"../协方差\">协方差</a></p>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Expected_value\" target=\"_blank\" rel=\"noopener\">wikipedia-期望值</a></p>\n","site":{"data":{}},"excerpt":"<p>在概率论和统计学中，一个离散性随机变量的期望值是试验中每次可能的结果乘以其结果概率的总和</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>","more":"<p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>如果X是在概率空间（Ω, F, P）中的随机变量，那么它的期望值E[X]的定义是：</p>\n<p>$$E[X]=\\int _{\\Omega }X dP$$</p>\n<ul>\n<li>离散型\n如果X 是离散的随机变量，输出值为x1, x2, …， 和输出值相应的概率为p1, p2, …（概率和为1）。\n若级数 $\\sum_{i} p_{i}x_{i}$绝对收敛，那么期望值E[X]是一个无限数列的和。\n$$E[X]=\\sum_{i=1}^{k} x_{i}p_{i} = x_{1}p_{1}+x_{2}p_{2} + \\cdots +x_{k}p_{k}$$</li>\n</ul>\n<ul>\n<li>连续性\n如果 $X$ 是连续的随机变量，存在一个相应的概率密度函数 $f(x)$,\n$$E[X]= \\int_{-\\infty}^{\\infty}xf(x)dx$$\n是针对于连续的随机变量的，与离散随机变量的期望值的算法同出一辙，由于输出值是连续的，所以把求和改成了积分。</li>\n</ul>\n<p><br></p>\n<h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>数学期望可以用于预测一个随机事件的平均预期情况。</p>\n<p><br></p>\n<h3 id=\"范例\"><a href=\"#范例\" class=\"headerlink\" title=\"范例\"></a>范例</h3><p>1、掷一枚公平的六面骰子，可知没面概率都是$\\frac{1}{6}$ ，计算如下：</p>\n<p>$E(X)= 1\\cdot\\frac{1}{6} + 2\\cdot\\frac{1}{6} + 3\\cdot\\frac{1}{6} + 4\\cdot\\frac{1}{6} + 5\\cdot\\frac{1}{6} + 6\\cdot\\frac{1}{6} = (1+2+3+4+5+6)\\cdot\\frac{1}{6} = 3.5$</p>\n<blockquote>\n<p>从上面可知，<code>均值</code>是期望的特例：每次概率都是一样</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"相关阅读\"><a href=\"#相关阅读\" class=\"headerlink\" title=\"相关阅读\"></a>相关阅读</h3><p><a href=\"../方差\">方差</a> <a href=\"../标准差\">标准差</a> <a href=\"../协方差\">协方差</a></p>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Expected_value\" target=\"_blank\" rel=\"noopener\">wikipedia-期望值</a></p>"},{"title":"机器学习","date":"2018-11-21T12:10:38.000Z","_content":"\n机器学习是人工智能的一个分支。人工智能的研究历史有着一条从以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。很多推论问题属于无程序可循难度，所以部分的机器学习研究是开发容易处理的近似算法。\n\n机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等领域。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n\n---\n\n<!-- more -->\n\n\n<br/>\n### 分类\n- 监督学习\n从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。\n监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。\n训练集中的目标是由人标注的\n监督学习算法：`回归分析`和`统计分类`\n<br/>\n- 无监督学习\n与监督学习相比，训练集没有人为标注的结果\n常见的无监督学习算法：`生成对抗网络（GAN）`、`聚类`\n<br/>\n- 半监督学习\n<br/>\n- 增强学习\n\n\n\n### 算法\n\n[朴素贝叶斯算法]()\n[半朴素贝叶斯算法]()\n[贝叶斯网算法]()\n\n[ID3算法]()\n\n[感知器]()\n[支持向量机]()\n[集成学习AdaBoost]()\n[降维与度量学习]()\n[聚类]()\n\n\n\n\n<br/>\n### 模型评估方法\n\n\n- 过拟合\n- 欠拟合\n\n\n\n\n<br/>\n#### 留出法\n`留出法（hold-out）`：将`样本数据D`划分成两个互斥的集合，其中一个作为`训练集S`，另一个作为`测试集T`。在`S`上训练出模型后，用`T`来评估其测试误差，作为对泛化误差的评估\n\n<br/>\n#### 交叉验证法\n`交叉验证法（）`：将`样本数据划D`划分为k个大小相似的互斥子集。每个子集$D_j$\n\n<br/>\n#### 自助法\n`自助法（）`：\n\n\n\n\n<br/>\n\n---\n参考\n周志华《机器学习》\n[wikipedia-机器学习](https://en.wikipedia.org/wiki/Machine_learning)","source":"_posts/机器学习.md","raw":"---\ntitle: 机器学习\ndate: 2018-11-21 20:10:38\ncategories: \n    - 机器学习\ntags:\n    - 算法\n    - 人工智能\n    - 机器学习\n---\n\n机器学习是人工智能的一个分支。人工智能的研究历史有着一条从以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。很多推论问题属于无程序可循难度，所以部分的机器学习研究是开发容易处理的近似算法。\n\n机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等领域。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n\n---\n\n<!-- more -->\n\n\n<br/>\n### 分类\n- 监督学习\n从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。\n监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。\n训练集中的目标是由人标注的\n监督学习算法：`回归分析`和`统计分类`\n<br/>\n- 无监督学习\n与监督学习相比，训练集没有人为标注的结果\n常见的无监督学习算法：`生成对抗网络（GAN）`、`聚类`\n<br/>\n- 半监督学习\n<br/>\n- 增强学习\n\n\n\n### 算法\n\n[朴素贝叶斯算法]()\n[半朴素贝叶斯算法]()\n[贝叶斯网算法]()\n\n[ID3算法]()\n\n[感知器]()\n[支持向量机]()\n[集成学习AdaBoost]()\n[降维与度量学习]()\n[聚类]()\n\n\n\n\n<br/>\n### 模型评估方法\n\n\n- 过拟合\n- 欠拟合\n\n\n\n\n<br/>\n#### 留出法\n`留出法（hold-out）`：将`样本数据D`划分成两个互斥的集合，其中一个作为`训练集S`，另一个作为`测试集T`。在`S`上训练出模型后，用`T`来评估其测试误差，作为对泛化误差的评估\n\n<br/>\n#### 交叉验证法\n`交叉验证法（）`：将`样本数据划D`划分为k个大小相似的互斥子集。每个子集$D_j$\n\n<br/>\n#### 自助法\n`自助法（）`：\n\n\n\n\n<br/>\n\n---\n参考\n周志华《机器学习》\n[wikipedia-机器学习](https://en.wikipedia.org/wiki/Machine_learning)","slug":"机器学习","published":1,"updated":"2019-11-02T07:12:18.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y790067t6s6ll23wngn","content":"<p>机器学习是人工智能的一个分支。人工智能的研究历史有着一条从以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。很多推论问题属于无程序可循难度，所以部分的机器学习研究是开发容易处理的近似算法。</p>\n<p>机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等领域。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>\n<a id=\"more\"></a>\n<p><br></p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>监督学习\n从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。\n监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。\n训练集中的目标是由人标注的\n监督学习算法：<code>回归分析</code>和<code>统计分类</code>\n<br></li>\n<li>无监督学习\n与监督学习相比，训练集没有人为标注的结果\n常见的无监督学习算法：<code>生成对抗网络（GAN）</code>、<code>聚类</code>\n<br></li>\n<li>半监督学习\n<br></li>\n<li>增强学习</li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p><a href>朴素贝叶斯算法</a>\n<a href>半朴素贝叶斯算法</a>\n<a href>贝叶斯网算法</a></p>\n<p><a href>ID3算法</a></p>\n<p><a href>感知器</a>\n<a href>支持向量机</a>\n<a href>集成学习AdaBoost</a>\n<a href>降维与度量学习</a>\n<a href>聚类</a></p>\n<p><br></p>\n<h3 id=\"模型评估方法\"><a href=\"#模型评估方法\" class=\"headerlink\" title=\"模型评估方法\"></a>模型评估方法</h3><ul>\n<li>过拟合</li>\n<li>欠拟合</li>\n</ul>\n<p><br></p>\n<h4 id=\"留出法\"><a href=\"#留出法\" class=\"headerlink\" title=\"留出法\"></a>留出法</h4><p><code>留出法（hold-out）</code>：将<code>样本数据D</code>划分成两个互斥的集合，其中一个作为<code>训练集S</code>，另一个作为<code>测试集T</code>。在<code>S</code>上训练出模型后，用<code>T</code>来评估其测试误差，作为对泛化误差的评估</p>\n<p><br></p>\n<h4 id=\"交叉验证法\"><a href=\"#交叉验证法\" class=\"headerlink\" title=\"交叉验证法\"></a>交叉验证法</h4><p><code>交叉验证法（）</code>：将<code>样本数据划D</code>划分为k个大小相似的互斥子集。每个子集$D_j$</p>\n<p><br></p>\n<h4 id=\"自助法\"><a href=\"#自助法\" class=\"headerlink\" title=\"自助法\"></a>自助法</h4><p><code>自助法（）</code>：</p>\n<p><br></p>\n<hr>\n<p>参考\n周志华《机器学习》\n<a href=\"https://en.wikipedia.org/wiki/Machine_learning\" target=\"_blank\" rel=\"noopener\">wikipedia-机器学习</a></p>\n","site":{"data":{}},"excerpt":"<p>机器学习是人工智能的一个分支。人工智能的研究历史有着一条从以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。很多推论问题属于无程序可循难度，所以部分的机器学习研究是开发容易处理的近似算法。</p>\n<p>机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等领域。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>","more":"<p><br></p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>监督学习\n从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。\n监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。\n训练集中的目标是由人标注的\n监督学习算法：<code>回归分析</code>和<code>统计分类</code>\n<br></li>\n<li>无监督学习\n与监督学习相比，训练集没有人为标注的结果\n常见的无监督学习算法：<code>生成对抗网络（GAN）</code>、<code>聚类</code>\n<br></li>\n<li>半监督学习\n<br></li>\n<li>增强学习</li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p><a href>朴素贝叶斯算法</a>\n<a href>半朴素贝叶斯算法</a>\n<a href>贝叶斯网算法</a></p>\n<p><a href>ID3算法</a></p>\n<p><a href>感知器</a>\n<a href>支持向量机</a>\n<a href>集成学习AdaBoost</a>\n<a href>降维与度量学习</a>\n<a href>聚类</a></p>\n<p><br></p>\n<h3 id=\"模型评估方法\"><a href=\"#模型评估方法\" class=\"headerlink\" title=\"模型评估方法\"></a>模型评估方法</h3><ul>\n<li>过拟合</li>\n<li>欠拟合</li>\n</ul>\n<p><br></p>\n<h4 id=\"留出法\"><a href=\"#留出法\" class=\"headerlink\" title=\"留出法\"></a>留出法</h4><p><code>留出法（hold-out）</code>：将<code>样本数据D</code>划分成两个互斥的集合，其中一个作为<code>训练集S</code>，另一个作为<code>测试集T</code>。在<code>S</code>上训练出模型后，用<code>T</code>来评估其测试误差，作为对泛化误差的评估</p>\n<p><br></p>\n<h4 id=\"交叉验证法\"><a href=\"#交叉验证法\" class=\"headerlink\" title=\"交叉验证法\"></a>交叉验证法</h4><p><code>交叉验证法（）</code>：将<code>样本数据划D</code>划分为k个大小相似的互斥子集。每个子集$D_j$</p>\n<p><br></p>\n<h4 id=\"自助法\"><a href=\"#自助法\" class=\"headerlink\" title=\"自助法\"></a>自助法</h4><p><code>自助法（）</code>：</p>\n<p><br></p>\n<hr>\n<p>参考\n周志华《机器学习》\n<a href=\"https://en.wikipedia.org/wiki/Machine_learning\" target=\"_blank\" rel=\"noopener\">wikipedia-机器学习</a></p>"},{"title":"条件熵","date":"2018-11-10T01:01:01.000Z","_content":"\n\n熵（英语：entropy）是接收的每条消息中包含的信息的平均量。\n\n熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量\n\n`结论：熵越大不确定性越大，熵最小是0`\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n---\n\n### 公式\n\n$$\nH(X|Y)=- \\sum_{i,j} p(x_{i},y_{j}) \\log \\frac {p(x_{i},y_{j})} {p(y_{j})}\n$$\n\n\n### 范例\n\n\n\n### 应用场景\n[ID3算法](../ID3算法) [C4.5算法](../C4.5算法)\n\n\n\n<br/>\n\n--- \n参考:\n[wikipedia-条件熵](https://en.wikipedia.org/wiki/Conditional_entropy)","source":"_posts/条件熵.md","raw":"---\ntitle: 条件熵\ndate: 2018-11-10 09:01:01\ncategories: \n    - 信息论\ntags:\n    - 算法\n    - 机器学习\n    - 信息论\n    - 信息熵\n---\n\n\n熵（英语：entropy）是接收的每条消息中包含的信息的平均量。\n\n熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量\n\n`结论：熵越大不确定性越大，熵最小是0`\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n---\n\n### 公式\n\n$$\nH(X|Y)=- \\sum_{i,j} p(x_{i},y_{j}) \\log \\frac {p(x_{i},y_{j})} {p(y_{j})}\n$$\n\n\n### 范例\n\n\n\n### 应用场景\n[ID3算法](../ID3算法) [C4.5算法](../C4.5算法)\n\n\n\n<br/>\n\n--- \n参考:\n[wikipedia-条件熵](https://en.wikipedia.org/wiki/Conditional_entropy)","slug":"条件熵","published":1,"updated":"2019-11-02T07:12:18.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y7a006at6s66wsiwl4w","content":"<p>熵（英语：entropy）是接收的每条消息中包含的信息的平均量。</p>\n<p>熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量</p>\n<p><code>结论：熵越大不确定性越大，熵最小是0</code>\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h3><p>$$\nH(X|Y)=- \\sum_{i,j} p(x_{i},y_{j}) \\log \\frac {p(x_{i},y_{j})} {p(y_{j})}\n$$</p>\n<h3 id=\"范例\"><a href=\"#范例\" class=\"headerlink\" title=\"范例\"></a>范例</h3><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p><a href=\"../ID3算法\">ID3算法</a> <a href=\"../C4.5算法\">C4.5算法</a></p>\n<p><br></p>\n<hr>\n<p>参考:\n<a href=\"https://en.wikipedia.org/wiki/Conditional_entropy\" target=\"_blank\" rel=\"noopener\">wikipedia-条件熵</a></p>\n","site":{"data":{}},"excerpt":"<p>熵（英语：entropy）是接收的每条消息中包含的信息的平均量。</p>\n<p>熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是对不确定性的测量</p>\n<p><code>结论：熵越大不确定性越大，熵最小是0</code>\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>","more":"<hr>\n<h3 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h3><p>$$\nH(X|Y)=- \\sum_{i,j} p(x_{i},y_{j}) \\log \\frac {p(x_{i},y_{j})} {p(y_{j})}\n$$</p>\n<h3 id=\"范例\"><a href=\"#范例\" class=\"headerlink\" title=\"范例\"></a>范例</h3><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p><a href=\"../ID3算法\">ID3算法</a> <a href=\"../C4.5算法\">C4.5算法</a></p>\n<p><br></p>\n<hr>\n<p>参考:\n<a href=\"https://en.wikipedia.org/wiki/Conditional_entropy\" target=\"_blank\" rel=\"noopener\">wikipedia-条件熵</a></p>"},{"title":"极限","date":"2008-09-01T00:01:01.000Z","_content":"\n极限是现代数学特别是分析学中的基础概念之一。极限可以用来描述一个序列的指标愈来愈大时，序列中元素的性质变化的趋势。极限也可以描述函数的自变量接近某一个值的时候，相对应的函数值变化的趋势。作为微积分和数学分析的其他分支最基本的概念之一，连续和导数的概念都是通过极限来定义的。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n<br/>\n### 定义\n\n\n<br/>\n### 性质\n\n\n\n\n<br/>\n### 极限计算21种主要方法\n\n<br/>\n#### 1、直接代入法\n\n$【例1】\\lim\\limits_{x \\to 3} x^{2}-x=9-6=3 $\n\n$【例2】\\lim\\limits_{x \\to 2} \\frac{35+x^2}{\\sqrt[3]{16-x^3}}  = \\frac{3}{2}$\n\n\n<br/>\n#### 2、因式分解法\n\n$【例3】\\lim\\limits_{x\\to3} \\frac{x^{2}-9}{x-3}=\\lim\\limits_{x\\to3} (x+3) = 6$\n\n$【例4】\\lim\\limits_{x \\to 2} \\frac{35+x^2}{\\sqrt[3]{16-x^3}}  = \\frac{3}{2}$\n\n\n<br/>\n#### 3、化无穷大计算为无穷小计算法\n\n<br/>\n#### 4、有理化\n\n<br/>\n#### 5、重要极限\n\n<br/>\n#### 6、变量代换法\n\n\n<br/>\n#### 7、三角函数恒等变化法\n\n\n<br/>\n#### 单调有界函数法\n\n\n<br/>\n#### 概念判断法\n\n\n<br/>\n#### 等价无穷小代换法\n\n<br/>\n#### 洛必达求导法则\n\n<br/>\n#### 积分中值定理法\n\n<br/>\n#### \b偏导数法\n\n<br/>\n#### 夹逼法则\n\n<br/>\n#### 定积分法\n\n\n\n\n\n<br/>\n\n---\n参考\n[百度百科-极限](https://baike.baidu.com/item/%E6%9E%81%E9%99%90/3564509)\nhttps://en.wikipedia.org/wiki/Limit_(mathematics)","source":"_posts/极限.md","raw":"---\ntitle: 极限\ndate: 2008-09-01 08:01:01\ncategories:\n    - 数学\ntags:\n    - 数学\n    - 高等数学\n    - 极限\n    - 微积分\n---\n\n极限是现代数学特别是分析学中的基础概念之一。极限可以用来描述一个序列的指标愈来愈大时，序列中元素的性质变化的趋势。极限也可以描述函数的自变量接近某一个值的时候，相对应的函数值变化的趋势。作为微积分和数学分析的其他分支最基本的概念之一，连续和导数的概念都是通过极限来定义的。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n<br/>\n### 定义\n\n\n<br/>\n### 性质\n\n\n\n\n<br/>\n### 极限计算21种主要方法\n\n<br/>\n#### 1、直接代入法\n\n$【例1】\\lim\\limits_{x \\to 3} x^{2}-x=9-6=3 $\n\n$【例2】\\lim\\limits_{x \\to 2} \\frac{35+x^2}{\\sqrt[3]{16-x^3}}  = \\frac{3}{2}$\n\n\n<br/>\n#### 2、因式分解法\n\n$【例3】\\lim\\limits_{x\\to3} \\frac{x^{2}-9}{x-3}=\\lim\\limits_{x\\to3} (x+3) = 6$\n\n$【例4】\\lim\\limits_{x \\to 2} \\frac{35+x^2}{\\sqrt[3]{16-x^3}}  = \\frac{3}{2}$\n\n\n<br/>\n#### 3、化无穷大计算为无穷小计算法\n\n<br/>\n#### 4、有理化\n\n<br/>\n#### 5、重要极限\n\n<br/>\n#### 6、变量代换法\n\n\n<br/>\n#### 7、三角函数恒等变化法\n\n\n<br/>\n#### 单调有界函数法\n\n\n<br/>\n#### 概念判断法\n\n\n<br/>\n#### 等价无穷小代换法\n\n<br/>\n#### 洛必达求导法则\n\n<br/>\n#### 积分中值定理法\n\n<br/>\n#### \b偏导数法\n\n<br/>\n#### 夹逼法则\n\n<br/>\n#### 定积分法\n\n\n\n\n\n<br/>\n\n---\n参考\n[百度百科-极限](https://baike.baidu.com/item/%E6%9E%81%E9%99%90/3564509)\nhttps://en.wikipedia.org/wiki/Limit_(mathematics)","slug":"极限","published":1,"updated":"2019-11-02T07:12:18.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y7c006et6s618wxsum7","content":"<p>极限是现代数学特别是分析学中的基础概念之一。极限可以用来描述一个序列的指标愈来愈大时，序列中元素的性质变化的趋势。极限也可以描述函数的自变量接近某一个值的时候，相对应的函数值变化的趋势。作为微积分和数学分析的其他分支最基本的概念之一，连续和导数的概念都是通过极限来定义的。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><br></p>\n<h3 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h3><p><br></p>\n<h3 id=\"极限计算21种主要方法\"><a href=\"#极限计算21种主要方法\" class=\"headerlink\" title=\"极限计算21种主要方法\"></a>极限计算21种主要方法</h3><p><br></p>\n<h4 id=\"1、直接代入法\"><a href=\"#1、直接代入法\" class=\"headerlink\" title=\"1、直接代入法\"></a>1、直接代入法</h4><p>$【例1】\\lim\\limits_{x \\to 3} x^{2}-x=9-6=3 $</p>\n<p>$【例2】\\lim\\limits_{x \\to 2} \\frac{35+x^2}{\\sqrt[3]{16-x^3}}  = \\frac{3}{2}$</p>\n<p><br></p>\n<h4 id=\"2、因式分解法\"><a href=\"#2、因式分解法\" class=\"headerlink\" title=\"2、因式分解法\"></a>2、因式分解法</h4><p>$【例3】\\lim\\limits_{x\\to3} \\frac{x^{2}-9}{x-3}=\\lim\\limits_{x\\to3} (x+3) = 6$</p>\n<p>$【例4】\\lim\\limits_{x \\to 2} \\frac{35+x^2}{\\sqrt[3]{16-x^3}}  = \\frac{3}{2}$</p>\n<p><br></p>\n<h4 id=\"3、化无穷大计算为无穷小计算法\"><a href=\"#3、化无穷大计算为无穷小计算法\" class=\"headerlink\" title=\"3、化无穷大计算为无穷小计算法\"></a>3、化无穷大计算为无穷小计算法</h4><p><br></p>\n<h4 id=\"4、有理化\"><a href=\"#4、有理化\" class=\"headerlink\" title=\"4、有理化\"></a>4、有理化</h4><p><br></p>\n<h4 id=\"5、重要极限\"><a href=\"#5、重要极限\" class=\"headerlink\" title=\"5、重要极限\"></a>5、重要极限</h4><p><br></p>\n<h4 id=\"6、变量代换法\"><a href=\"#6、变量代换法\" class=\"headerlink\" title=\"6、变量代换法\"></a>6、变量代换法</h4><p><br></p>\n<h4 id=\"7、三角函数恒等变化法\"><a href=\"#7、三角函数恒等变化法\" class=\"headerlink\" title=\"7、三角函数恒等变化法\"></a>7、三角函数恒等变化法</h4><p><br></p>\n<h4 id=\"单调有界函数法\"><a href=\"#单调有界函数法\" class=\"headerlink\" title=\"单调有界函数法\"></a>单调有界函数法</h4><p><br></p>\n<h4 id=\"概念判断法\"><a href=\"#概念判断法\" class=\"headerlink\" title=\"概念判断法\"></a>概念判断法</h4><p><br></p>\n<h4 id=\"等价无穷小代换法\"><a href=\"#等价无穷小代换法\" class=\"headerlink\" title=\"等价无穷小代换法\"></a>等价无穷小代换法</h4><p><br></p>\n<h4 id=\"洛必达求导法则\"><a href=\"#洛必达求导法则\" class=\"headerlink\" title=\"洛必达求导法则\"></a>洛必达求导法则</h4><p><br></p>\n<h4 id=\"积分中值定理法\"><a href=\"#积分中值定理法\" class=\"headerlink\" title=\"积分中值定理法\"></a>积分中值定理法</h4><p><br></p>\n<h4 id=\"偏导数法\"><a href=\"#偏导数法\" class=\"headerlink\" title=\"\b偏导数法\"></a>\b偏导数法</h4><p><br></p>\n<h4 id=\"夹逼法则\"><a href=\"#夹逼法则\" class=\"headerlink\" title=\"夹逼法则\"></a>夹逼法则</h4><p><br></p>\n<h4 id=\"定积分法\"><a href=\"#定积分法\" class=\"headerlink\" title=\"定积分法\"></a>定积分法</h4><p><br></p>\n<hr>\n<p>参考\n<a href=\"https://baike.baidu.com/item/%E6%9E%81%E9%99%90/3564509\" target=\"_blank\" rel=\"noopener\">百度百科-极限</a>\n<a href=\"https://en.wikipedia.org/wiki/Limit_(mathematics)\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Limit_(mathematics)</a></p>\n","site":{"data":{}},"excerpt":"<p>极限是现代数学特别是分析学中的基础概念之一。极限可以用来描述一个序列的指标愈来愈大时，序列中元素的性质变化的趋势。极限也可以描述函数的自变量接近某一个值的时候，相对应的函数值变化的趋势。作为微积分和数学分析的其他分支最基本的概念之一，连续和导数的概念都是通过极限来定义的。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>","more":"<p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><br></p>\n<h3 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h3><p><br></p>\n<h3 id=\"极限计算21种主要方法\"><a href=\"#极限计算21种主要方法\" class=\"headerlink\" title=\"极限计算21种主要方法\"></a>极限计算21种主要方法</h3><p><br></p>\n<h4 id=\"1、直接代入法\"><a href=\"#1、直接代入法\" class=\"headerlink\" title=\"1、直接代入法\"></a>1、直接代入法</h4><p>$【例1】\\lim\\limits_{x \\to 3} x^{2}-x=9-6=3 $</p>\n<p>$【例2】\\lim\\limits_{x \\to 2} \\frac{35+x^2}{\\sqrt[3]{16-x^3}}  = \\frac{3}{2}$</p>\n<p><br></p>\n<h4 id=\"2、因式分解法\"><a href=\"#2、因式分解法\" class=\"headerlink\" title=\"2、因式分解法\"></a>2、因式分解法</h4><p>$【例3】\\lim\\limits_{x\\to3} \\frac{x^{2}-9}{x-3}=\\lim\\limits_{x\\to3} (x+3) = 6$</p>\n<p>$【例4】\\lim\\limits_{x \\to 2} \\frac{35+x^2}{\\sqrt[3]{16-x^3}}  = \\frac{3}{2}$</p>\n<p><br></p>\n<h4 id=\"3、化无穷大计算为无穷小计算法\"><a href=\"#3、化无穷大计算为无穷小计算法\" class=\"headerlink\" title=\"3、化无穷大计算为无穷小计算法\"></a>3、化无穷大计算为无穷小计算法</h4><p><br></p>\n<h4 id=\"4、有理化\"><a href=\"#4、有理化\" class=\"headerlink\" title=\"4、有理化\"></a>4、有理化</h4><p><br></p>\n<h4 id=\"5、重要极限\"><a href=\"#5、重要极限\" class=\"headerlink\" title=\"5、重要极限\"></a>5、重要极限</h4><p><br></p>\n<h4 id=\"6、变量代换法\"><a href=\"#6、变量代换法\" class=\"headerlink\" title=\"6、变量代换法\"></a>6、变量代换法</h4><p><br></p>\n<h4 id=\"7、三角函数恒等变化法\"><a href=\"#7、三角函数恒等变化法\" class=\"headerlink\" title=\"7、三角函数恒等变化法\"></a>7、三角函数恒等变化法</h4><p><br></p>\n<h4 id=\"单调有界函数法\"><a href=\"#单调有界函数法\" class=\"headerlink\" title=\"单调有界函数法\"></a>单调有界函数法</h4><p><br></p>\n<h4 id=\"概念判断法\"><a href=\"#概念判断法\" class=\"headerlink\" title=\"概念判断法\"></a>概念判断法</h4><p><br></p>\n<h4 id=\"等价无穷小代换法\"><a href=\"#等价无穷小代换法\" class=\"headerlink\" title=\"等价无穷小代换法\"></a>等价无穷小代换法</h4><p><br></p>\n<h4 id=\"洛必达求导法则\"><a href=\"#洛必达求导法则\" class=\"headerlink\" title=\"洛必达求导法则\"></a>洛必达求导法则</h4><p><br></p>\n<h4 id=\"积分中值定理法\"><a href=\"#积分中值定理法\" class=\"headerlink\" title=\"积分中值定理法\"></a>积分中值定理法</h4><p><br></p>\n<h4 id=\"偏导数法\"><a href=\"#偏导数法\" class=\"headerlink\" title=\"\b偏导数法\"></a>\b偏导数法</h4><p><br></p>\n<h4 id=\"夹逼法则\"><a href=\"#夹逼法则\" class=\"headerlink\" title=\"夹逼法则\"></a>夹逼法则</h4><p><br></p>\n<h4 id=\"定积分法\"><a href=\"#定积分法\" class=\"headerlink\" title=\"定积分法\"></a>定积分法</h4><p><br></p>\n<hr>\n<p>参考\n<a href=\"https://baike.baidu.com/item/%E6%9E%81%E9%99%90/3564509\" target=\"_blank\" rel=\"noopener\">百度百科-极限</a>\n<a href=\"https://en.wikipedia.org/wiki/Limit_(mathematics)\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Limit_(mathematics)</a></p>"},{"title":"查看class文件的jdk编译版本","date":"2019-02-27T01:55:50.000Z","_content":"\n\n\n   版本号 |\t对应十进制 | jdk版本号\n---- | ---- | -------\n 2E | 46 | jdk1.2\n  2F | 47 | jdk1.3\n 30 | 48 | jdk1.4\n 31 | 49 | jdk1.5\n 32 | 50 | jdk1.6\n  33 | 51 | jdk1.7\n  34 |  52 | jdk1.8\n\n\n$f(x) = sinx +1$\n\nName | Description | Default key binding\n-----|-------------|--------------------\nmd-shortcut.showCommandPalette | Display all commands | ctrl+M ctrl+M\nmd-shortcut.toggleBold | Make **bold** | ctrl+B\nmd-shortcut.toggleItalic | Make _italic_ | ctrl+I | \n\n\n```flow\nst=>start: Start:>http://www.google.com[blank]\ne=>end:>http://www.google.com\nop1=>operation: My Operation\nsub1=>subroutine: My Subroutine\ncond=>condition: Yes\nor No?:>http://www.google.com\nio=>inputoutput: catch something...\npara=>parallel: parallel tasks\n\nst->op1->cond\ncond(yes)->io->e\ncond(no)->para\npara(path1, bottom)->sub1(right)->op1\npara(path2, top)->op1\n```\n\n```sequence{theme=\"hand\"}\nAndrew->China: Says Hello\nNote right of China: China thinks\\nabout it\nChina-->Andrew: How are you?\nAndrew->>China: I am good thanks!\n```","source":"_posts/查看class文件的jdk编译版本.md","raw":"---\ntitle: 查看class文件的jdk编译版本\ndate: 2019-02-27 09:55:50\ncategories: \n    - Java\ntags:\n    - Java\n---\n\n\n\n   版本号 |\t对应十进制 | jdk版本号\n---- | ---- | -------\n 2E | 46 | jdk1.2\n  2F | 47 | jdk1.3\n 30 | 48 | jdk1.4\n 31 | 49 | jdk1.5\n 32 | 50 | jdk1.6\n  33 | 51 | jdk1.7\n  34 |  52 | jdk1.8\n\n\n$f(x) = sinx +1$\n\nName | Description | Default key binding\n-----|-------------|--------------------\nmd-shortcut.showCommandPalette | Display all commands | ctrl+M ctrl+M\nmd-shortcut.toggleBold | Make **bold** | ctrl+B\nmd-shortcut.toggleItalic | Make _italic_ | ctrl+I | \n\n\n```flow\nst=>start: Start:>http://www.google.com[blank]\ne=>end:>http://www.google.com\nop1=>operation: My Operation\nsub1=>subroutine: My Subroutine\ncond=>condition: Yes\nor No?:>http://www.google.com\nio=>inputoutput: catch something...\npara=>parallel: parallel tasks\n\nst->op1->cond\ncond(yes)->io->e\ncond(no)->para\npara(path1, bottom)->sub1(right)->op1\npara(path2, top)->op1\n```\n\n```sequence{theme=\"hand\"}\nAndrew->China: Says Hello\nNote right of China: China thinks\\nabout it\nChina-->Andrew: How are you?\nAndrew->>China: I am good thanks!\n```","slug":"查看class文件的jdk编译版本","published":1,"updated":"2019-11-02T07:12:18.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y7d006ht6s6eneslrn4","content":"<table>\n<thead>\n<tr>\n<th>版本号</th>\n<th>对应十进制</th>\n<th>jdk版本号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 2E</td>\n<td>46</td>\n<td>jdk1.2</td>\n</tr>\n<tr>\n<td>  2F</td>\n<td>47</td>\n<td>jdk1.3</td>\n</tr>\n<tr>\n<td> 30</td>\n<td>48</td>\n<td>jdk1.4</td>\n</tr>\n<tr>\n<td> 31</td>\n<td>49</td>\n<td>jdk1.5</td>\n</tr>\n<tr>\n<td> 32</td>\n<td>50</td>\n<td>jdk1.6</td>\n</tr>\n<tr>\n<td>  33</td>\n<td>51</td>\n<td>jdk1.7</td>\n</tr>\n<tr>\n<td>  34</td>\n<td>52</td>\n<td>jdk1.8</td>\n</tr>\n</tbody>\n</table>\n<p>$f(x) = sinx +1$</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Default key binding</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>md-shortcut.showCommandPalette</td>\n<td>Display all commands</td>\n<td>ctrl+M ctrl+M</td>\n</tr>\n<tr>\n<td>md-shortcut.toggleBold</td>\n<td>Make <strong>bold</strong></td>\n<td>ctrl+B</td>\n</tr>\n<tr>\n<td>md-shortcut.toggleItalic</td>\n<td>Make <em>italic</em></td>\n<td>ctrl+I</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: Start:&gt;http://www.google.com[blank]</span><br><span class=\"line\">e=&gt;end:&gt;http://www.google.com</span><br><span class=\"line\">op1=&gt;operation: My Operation</span><br><span class=\"line\">sub1=&gt;subroutine: My Subroutine</span><br><span class=\"line\">cond=&gt;condition: Yes</span><br><span class=\"line\">or No?:&gt;http://www.google.com</span><br><span class=\"line\">io=&gt;inputoutput: catch something...</span><br><span class=\"line\">para=&gt;parallel: parallel tasks</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op1-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;io-&gt;e</span><br><span class=\"line\">cond(no)-&gt;para</span><br><span class=\"line\">para(path1, bottom)-&gt;sub1(right)-&gt;op1</span><br><span class=\"line\">para(path2, top)-&gt;op1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Andrew-&gt;China: Says Hello</span><br><span class=\"line\">Note right of China: China thinks\\nabout it</span><br><span class=\"line\">China--&gt;Andrew: How are you?</span><br><span class=\"line\">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>版本号</th>\n<th>对应十进制</th>\n<th>jdk版本号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 2E</td>\n<td>46</td>\n<td>jdk1.2</td>\n</tr>\n<tr>\n<td>  2F</td>\n<td>47</td>\n<td>jdk1.3</td>\n</tr>\n<tr>\n<td> 30</td>\n<td>48</td>\n<td>jdk1.4</td>\n</tr>\n<tr>\n<td> 31</td>\n<td>49</td>\n<td>jdk1.5</td>\n</tr>\n<tr>\n<td> 32</td>\n<td>50</td>\n<td>jdk1.6</td>\n</tr>\n<tr>\n<td>  33</td>\n<td>51</td>\n<td>jdk1.7</td>\n</tr>\n<tr>\n<td>  34</td>\n<td>52</td>\n<td>jdk1.8</td>\n</tr>\n</tbody>\n</table>\n<p>$f(x) = sinx +1$</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Default key binding</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>md-shortcut.showCommandPalette</td>\n<td>Display all commands</td>\n<td>ctrl+M ctrl+M</td>\n</tr>\n<tr>\n<td>md-shortcut.toggleBold</td>\n<td>Make <strong>bold</strong></td>\n<td>ctrl+B</td>\n</tr>\n<tr>\n<td>md-shortcut.toggleItalic</td>\n<td>Make <em>italic</em></td>\n<td>ctrl+I</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: Start:&gt;http://www.google.com[blank]</span><br><span class=\"line\">e=&gt;end:&gt;http://www.google.com</span><br><span class=\"line\">op1=&gt;operation: My Operation</span><br><span class=\"line\">sub1=&gt;subroutine: My Subroutine</span><br><span class=\"line\">cond=&gt;condition: Yes</span><br><span class=\"line\">or No?:&gt;http://www.google.com</span><br><span class=\"line\">io=&gt;inputoutput: catch something...</span><br><span class=\"line\">para=&gt;parallel: parallel tasks</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op1-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;io-&gt;e</span><br><span class=\"line\">cond(no)-&gt;para</span><br><span class=\"line\">para(path1, bottom)-&gt;sub1(right)-&gt;op1</span><br><span class=\"line\">para(path2, top)-&gt;op1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Andrew-&gt;China: Says Hello</span><br><span class=\"line\">Note right of China: China thinks\\nabout it</span><br><span class=\"line\">China--&gt;Andrew: How are you?</span><br><span class=\"line\">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure>"},{"title":"标准差","date":"2012-10-01T00:01:03.000Z","_content":"\n标准差（又称标准偏差、均方差，英语：Standard Deviation，缩写SD），数学符号σ（sigma），在概率统计中最常使用作为测量一组数值的离散程度之用\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n---\n\n\n标准差（又称标准偏差、均方差，英语：Standard Deviation，缩写SD），数学符号σ（sigma），在概率统计中最常使用作为测量一组数值的离散程度之用。标准差定义：为方差开算术平方根，反映组内个体间的离散程度；标准差与期望值之比为标准离差率。测量到分布程度的结果，原则上具有两种性质：\n\n为非负数值（因为开平方后再做平方根）；\n与测量资料具有相同单位（这样才能比对）。\n一个总量的标准差或一个随机变量的标准差，及一个子集合样品数的标准差之间，有所差别。其公式如下所列。\n\n标准差的概念由卡尔·皮尔逊引入到统计中。\n\n\n<!-- more -->\n\n\n<br/>\n\n## 总体的标准差\n\n\n\n<br/>\n### 定义\n$$SD= \\sqrt{\\frac{1}{N} \\sum_{i=1}^N (x_i - \\mu)^2}$$\n$\\mu$为期望\n\n\n\n\n<br/>\n## 样本的标准差\n\n\n<br/>\n### 定义\n\n\n<br/>\n\n---\n参考\n\n[wikipedia-标准差](https://en.wikipedia.org/wiki/Standard_deviation)\n[baike-标准差](https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E5%B7%AE)","source":"_posts/标准差.md","raw":"---\ntitle: 标准差\ndate: 2012-10-01 08:01:03\ncategories: \n    - 概率与统计\ntags: \n    - 数学\n    - 概率与统计\n    - 方差\n---\n\n标准差（又称标准偏差、均方差，英语：Standard Deviation，缩写SD），数学符号σ（sigma），在概率统计中最常使用作为测量一组数值的离散程度之用\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n---\n\n\n标准差（又称标准偏差、均方差，英语：Standard Deviation，缩写SD），数学符号σ（sigma），在概率统计中最常使用作为测量一组数值的离散程度之用。标准差定义：为方差开算术平方根，反映组内个体间的离散程度；标准差与期望值之比为标准离差率。测量到分布程度的结果，原则上具有两种性质：\n\n为非负数值（因为开平方后再做平方根）；\n与测量资料具有相同单位（这样才能比对）。\n一个总量的标准差或一个随机变量的标准差，及一个子集合样品数的标准差之间，有所差别。其公式如下所列。\n\n标准差的概念由卡尔·皮尔逊引入到统计中。\n\n\n<!-- more -->\n\n\n<br/>\n\n## 总体的标准差\n\n\n\n<br/>\n### 定义\n$$SD= \\sqrt{\\frac{1}{N} \\sum_{i=1}^N (x_i - \\mu)^2}$$\n$\\mu$为期望\n\n\n\n\n<br/>\n## 样本的标准差\n\n\n<br/>\n### 定义\n\n\n<br/>\n\n---\n参考\n\n[wikipedia-标准差](https://en.wikipedia.org/wiki/Standard_deviation)\n[baike-标准差](https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E5%B7%AE)","slug":"标准差","published":1,"updated":"2019-11-02T07:12:18.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y7e006kt6s6jcn7d24j","content":"<p>标准差（又称标准偏差、均方差，英语：Standard Deviation，缩写SD），数学符号σ（sigma），在概率统计中最常使用作为测量一组数值的离散程度之用</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>\n<p>标准差（又称标准偏差、均方差，英语：Standard Deviation，缩写SD），数学符号σ（sigma），在概率统计中最常使用作为测量一组数值的离散程度之用。标准差定义：为方差开算术平方根，反映组内个体间的离散程度；标准差与期望值之比为标准离差率。测量到分布程度的结果，原则上具有两种性质：</p>\n<p>为非负数值（因为开平方后再做平方根）；\n与测量资料具有相同单位（这样才能比对）。\n一个总量的标准差或一个随机变量的标准差，及一个子集合样品数的标准差之间，有所差别。其公式如下所列。</p>\n<p>标准差的概念由卡尔·皮尔逊引入到统计中。</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h2 id=\"总体的标准差\"><a href=\"#总体的标准差\" class=\"headerlink\" title=\"总体的标准差\"></a>总体的标准差</h2><p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>$$SD= \\sqrt{\\frac{1}{N} \\sum_{i=1}^N (x_i - \\mu)^2}$$\n$\\mu$为期望</p>\n<p><br></p>\n<h2 id=\"样本的标准差\"><a href=\"#样本的标准差\" class=\"headerlink\" title=\"样本的标准差\"></a>样本的标准差</h2><p><br></p>\n<h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Standard_deviation\" target=\"_blank\" rel=\"noopener\">wikipedia-标准差</a>\n<a href=\"https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E5%B7%AE\" target=\"_blank\" rel=\"noopener\">baike-标准差</a></p>\n","site":{"data":{}},"excerpt":"<p>标准差（又称标准偏差、均方差，英语：Standard Deviation，缩写SD），数学符号σ（sigma），在概率统计中最常使用作为测量一组数值的离散程度之用</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>\n<p>标准差（又称标准偏差、均方差，英语：Standard Deviation，缩写SD），数学符号σ（sigma），在概率统计中最常使用作为测量一组数值的离散程度之用。标准差定义：为方差开算术平方根，反映组内个体间的离散程度；标准差与期望值之比为标准离差率。测量到分布程度的结果，原则上具有两种性质：</p>\n<p>为非负数值（因为开平方后再做平方根）；\n与测量资料具有相同单位（这样才能比对）。\n一个总量的标准差或一个随机变量的标准差，及一个子集合样品数的标准差之间，有所差别。其公式如下所列。</p>\n<p>标准差的概念由卡尔·皮尔逊引入到统计中。</p>","more":"<p><br></p>\n<h2 id=\"总体的标准差\"><a href=\"#总体的标准差\" class=\"headerlink\" title=\"总体的标准差\"></a>总体的标准差</h2><p><br></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>$$SD= \\sqrt{\\frac{1}{N} \\sum_{i=1}^N (x_i - \\mu)^2}$$\n$\\mu$为期望</p>\n<p><br></p>\n<h2 id=\"样本的标准差\"><a href=\"#样本的标准差\" class=\"headerlink\" title=\"样本的标准差\"></a>样本的标准差</h2><p><br></p>\n<h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Standard_deviation\" target=\"_blank\" rel=\"noopener\">wikipedia-标准差</a>\n<a href=\"https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E5%B7%AE\" target=\"_blank\" rel=\"noopener\">baike-标准差</a></p>"},{"title":"编译器 vs 解释器：编译器和解释器之间的区别","date":"2019-06-05T11:14:21.000Z","_content":"\n### 编译器(Compiler)\n`编译器`是一种计算机程序，负责把一种编程语言编写的源码转换成`另外一种计算机代码`，往往是`二进制`的形式存在，被称为`目标代码(object code)`。这个转换的过程通常的目的是生成可执行的程序。\n`编译器`的产出是`另外一种代码`，然后这些代码等着被别人拿来执行，如果还不能直接被执行，那么还需要再编译或解释一遍，再交由计算机硬件执行。\n`编译器`往往是在「执行」之前完成，产出是一种可执行或需要再编译或者解释的`代码`。\n\n<!--more-->\n\n<br/>\n### 解释器(Interpreter)\n在计算机科学中，`解释器`是一种计算机程序，它直接执行由编程语言或脚本语言编写的代码，并不会把源代码预编译成机器码。\n一个解释器，通常会用以下的姿势来执行程序代码：\n- 分析源代码，并且直接执行。\n- 把源代码翻译成相对更加高效率的中间码，然后立即执行它。\n- 执行由解释器内部的编译器预编译后保存的代码\n- 可以把解释器看成一个黑盒子，我们输入源码，它就会实时返回结果。\n不同类型的解释器，黑盒子里面的构造不一样，有些还会集成编译器，缓存编译结果，用来提高执行效率（例如 Chrome V8 也是这么做的）。\n解释器通常是工作在「运行时」，并且对于我们输入的源码，是一行一行的解释然后执行，然后返回结果。\n\n\n<br/>\n### 编译器(Compiler) vs 解释器(Interpreter) \n\n | Compiler 编译器 | Interpreter 解释器\n ------- | ------- | -------\n功能 | 对整个程序进行分析，执行输出为另一种代码（一般为机器码，如目标代码，可能需要连接后才能执行），但是不执行该机器码 | 对源代码逐行执行，即包含分析和执行两步\n编程步骤 | 1、创建程序。<br/> 2、【编译】：解析或分析所有代码的正确性。如果不正确，则抛出错误如果没有错误，编译器会将源代码转换为机器代码。<br/> 3、它将不同的代码文件链接到一个可运行的程序（如 .exe） 4、 运行程序 | 1、创建程序 <br/> 2、逐行执行源语句\n优点 | 每次执行的是可运行程序，执行速度较快 | 更容易使用，特别是对于初学者\n缺点 | 只能通过修改源代码改变程序 | 只能在有解释器的计算机上执行\n执行速度 | 每次执行的是可运行程序，执行速度较快 | 每次执行都从源代码开始，且不保存执行过程中的机器代码，执行速度慢\n执行者权限 | 执行者一般得到的是可执行文件，执行者无法对程序进行更改 | 执行者可以对源程序进行更改\n程序运行对象 | CPU | 解释器\n适用环境 | .exe 限定特定CPU| 一份源代码只要有对应版本解释器即可运行<br />对于web环境`，由于代码往往是一部分一部分加载，因此无需对整个程序进行分析，采用逐行编译运行的解释型语言更适合 | \n代码优化 | 对整个代码进行复杂地分析优化，耗时较长，优化效果较好 | 逐行查看，分析和处理耗时较短，优化效果较差\n错误 | 编译之后显示所有错误 | 执行到有错误代码位置\n对应语言举例 | C，C ++，C＃，Scala，Java(既需要编译，又需要解释) | PHP，Perl，Ruby （一般可以认为，不需要编译器，直接通过解释器执行的语言就是脚本语言）\n\n\n---\n\n参考\nhttps://www.guru99.com/difference-compiler-vs-interpreter.html","source":"_posts/编译器-vs-解释器：编译器和解释器之间的区别.md","raw":"---\ntitle: 编译器 vs 解释器：编译器和解释器之间的区别\ndate: 2019-06-05 19:14:21\ncategories: \n    - 编译原理\ntags:\n    - 编译原理\n    - 编译器\n    - 解释器\n---\n\n### 编译器(Compiler)\n`编译器`是一种计算机程序，负责把一种编程语言编写的源码转换成`另外一种计算机代码`，往往是`二进制`的形式存在，被称为`目标代码(object code)`。这个转换的过程通常的目的是生成可执行的程序。\n`编译器`的产出是`另外一种代码`，然后这些代码等着被别人拿来执行，如果还不能直接被执行，那么还需要再编译或解释一遍，再交由计算机硬件执行。\n`编译器`往往是在「执行」之前完成，产出是一种可执行或需要再编译或者解释的`代码`。\n\n<!--more-->\n\n<br/>\n### 解释器(Interpreter)\n在计算机科学中，`解释器`是一种计算机程序，它直接执行由编程语言或脚本语言编写的代码，并不会把源代码预编译成机器码。\n一个解释器，通常会用以下的姿势来执行程序代码：\n- 分析源代码，并且直接执行。\n- 把源代码翻译成相对更加高效率的中间码，然后立即执行它。\n- 执行由解释器内部的编译器预编译后保存的代码\n- 可以把解释器看成一个黑盒子，我们输入源码，它就会实时返回结果。\n不同类型的解释器，黑盒子里面的构造不一样，有些还会集成编译器，缓存编译结果，用来提高执行效率（例如 Chrome V8 也是这么做的）。\n解释器通常是工作在「运行时」，并且对于我们输入的源码，是一行一行的解释然后执行，然后返回结果。\n\n\n<br/>\n### 编译器(Compiler) vs 解释器(Interpreter) \n\n | Compiler 编译器 | Interpreter 解释器\n ------- | ------- | -------\n功能 | 对整个程序进行分析，执行输出为另一种代码（一般为机器码，如目标代码，可能需要连接后才能执行），但是不执行该机器码 | 对源代码逐行执行，即包含分析和执行两步\n编程步骤 | 1、创建程序。<br/> 2、【编译】：解析或分析所有代码的正确性。如果不正确，则抛出错误如果没有错误，编译器会将源代码转换为机器代码。<br/> 3、它将不同的代码文件链接到一个可运行的程序（如 .exe） 4、 运行程序 | 1、创建程序 <br/> 2、逐行执行源语句\n优点 | 每次执行的是可运行程序，执行速度较快 | 更容易使用，特别是对于初学者\n缺点 | 只能通过修改源代码改变程序 | 只能在有解释器的计算机上执行\n执行速度 | 每次执行的是可运行程序，执行速度较快 | 每次执行都从源代码开始，且不保存执行过程中的机器代码，执行速度慢\n执行者权限 | 执行者一般得到的是可执行文件，执行者无法对程序进行更改 | 执行者可以对源程序进行更改\n程序运行对象 | CPU | 解释器\n适用环境 | .exe 限定特定CPU| 一份源代码只要有对应版本解释器即可运行<br />对于web环境`，由于代码往往是一部分一部分加载，因此无需对整个程序进行分析，采用逐行编译运行的解释型语言更适合 | \n代码优化 | 对整个代码进行复杂地分析优化，耗时较长，优化效果较好 | 逐行查看，分析和处理耗时较短，优化效果较差\n错误 | 编译之后显示所有错误 | 执行到有错误代码位置\n对应语言举例 | C，C ++，C＃，Scala，Java(既需要编译，又需要解释) | PHP，Perl，Ruby （一般可以认为，不需要编译器，直接通过解释器执行的语言就是脚本语言）\n\n\n---\n\n参考\nhttps://www.guru99.com/difference-compiler-vs-interpreter.html","slug":"编译器-vs-解释器：编译器和解释器之间的区别","published":1,"updated":"2019-11-02T07:12:18.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y7f006nt6s6n2mohzq8","content":"<h3 id=\"编译器-Compiler\"><a href=\"#编译器-Compiler\" class=\"headerlink\" title=\"编译器(Compiler)\"></a>编译器(Compiler)</h3><p><code>编译器</code>是一种计算机程序，负责把一种编程语言编写的源码转换成<code>另外一种计算机代码</code>，往往是<code>二进制</code>的形式存在，被称为<code>目标代码(object code)</code>。这个转换的过程通常的目的是生成可执行的程序。\n<code>编译器</code>的产出是<code>另外一种代码</code>，然后这些代码等着被别人拿来执行，如果还不能直接被执行，那么还需要再编译或解释一遍，再交由计算机硬件执行。\n<code>编译器</code>往往是在「执行」之前完成，产出是一种可执行或需要再编译或者解释的<code>代码</code>。</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h3 id=\"解释器-Interpreter\"><a href=\"#解释器-Interpreter\" class=\"headerlink\" title=\"解释器(Interpreter)\"></a>解释器(Interpreter)</h3><p>在计算机科学中，<code>解释器</code>是一种计算机程序，它直接执行由编程语言或脚本语言编写的代码，并不会把源代码预编译成机器码。\n一个解释器，通常会用以下的姿势来执行程序代码：</p>\n<ul>\n<li>分析源代码，并且直接执行。</li>\n<li>把源代码翻译成相对更加高效率的中间码，然后立即执行它。</li>\n<li>执行由解释器内部的编译器预编译后保存的代码</li>\n<li>可以把解释器看成一个黑盒子，我们输入源码，它就会实时返回结果。\n不同类型的解释器，黑盒子里面的构造不一样，有些还会集成编译器，缓存编译结果，用来提高执行效率（例如 Chrome V8 也是这么做的）。\n解释器通常是工作在「运行时」，并且对于我们输入的源码，是一行一行的解释然后执行，然后返回结果。</li>\n</ul>\n<p><br></p>\n<h3 id=\"编译器-Compiler-vs-解释器-Interpreter\"><a href=\"#编译器-Compiler-vs-解释器-Interpreter\" class=\"headerlink\" title=\"编译器(Compiler) vs 解释器(Interpreter)\"></a>编译器(Compiler) vs 解释器(Interpreter)</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>Compiler 编译器</th>\n<th>Interpreter 解释器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>功能</td>\n<td>对整个程序进行分析，执行输出为另一种代码（一般为机器码，如目标代码，可能需要连接后才能执行），但是不执行该机器码</td>\n<td>对源代码逐行执行，即包含分析和执行两步</td>\n</tr>\n<tr>\n<td>编程步骤</td>\n<td>1、创建程序。<br> 2、【编译】：解析或分析所有代码的正确性。如果不正确，则抛出错误如果没有错误，编译器会将源代码转换为机器代码。<br> 3、它将不同的代码文件链接到一个可运行的程序（如 .exe） 4、 运行程序</td>\n<td>1、创建程序 <br> 2、逐行执行源语句</td>\n</tr>\n<tr>\n<td>优点</td>\n<td>每次执行的是可运行程序，执行速度较快</td>\n<td>更容易使用，特别是对于初学者</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>只能通过修改源代码改变程序</td>\n<td>只能在有解释器的计算机上执行</td>\n</tr>\n<tr>\n<td>执行速度</td>\n<td>每次执行的是可运行程序，执行速度较快</td>\n<td>每次执行都从源代码开始，且不保存执行过程中的机器代码，执行速度慢</td>\n</tr>\n<tr>\n<td>执行者权限</td>\n<td>执行者一般得到的是可执行文件，执行者无法对程序进行更改</td>\n<td>执行者可以对源程序进行更改</td>\n</tr>\n<tr>\n<td>程序运行对象</td>\n<td>CPU</td>\n<td>解释器</td>\n</tr>\n<tr>\n<td>适用环境</td>\n<td>.exe 限定特定CPU</td>\n<td>一份源代码只要有对应版本解释器即可运行<br>对于web环境`，由于代码往往是一部分一部分加载，因此无需对整个程序进行分析，采用逐行编译运行的解释型语言更适合</td>\n<td></td>\n</tr>\n<tr>\n<td>代码优化</td>\n<td>对整个代码进行复杂地分析优化，耗时较长，优化效果较好</td>\n<td>逐行查看，分析和处理耗时较短，优化效果较差</td>\n</tr>\n<tr>\n<td>错误</td>\n<td>编译之后显示所有错误</td>\n<td>执行到有错误代码位置</td>\n</tr>\n<tr>\n<td>对应语言举例</td>\n<td>C，C ++，C＃，Scala，Java(既需要编译，又需要解释)</td>\n<td>PHP，Perl，Ruby （一般可以认为，不需要编译器，直接通过解释器执行的语言就是脚本语言）</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>参考\n<a href=\"https://www.guru99.com/difference-compiler-vs-interpreter.html\" target=\"_blank\" rel=\"noopener\">https://www.guru99.com/difference-compiler-vs-interpreter.html</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"编译器-Compiler\"><a href=\"#编译器-Compiler\" class=\"headerlink\" title=\"编译器(Compiler)\"></a>编译器(Compiler)</h3><p><code>编译器</code>是一种计算机程序，负责把一种编程语言编写的源码转换成<code>另外一种计算机代码</code>，往往是<code>二进制</code>的形式存在，被称为<code>目标代码(object code)</code>。这个转换的过程通常的目的是生成可执行的程序。\n<code>编译器</code>的产出是<code>另外一种代码</code>，然后这些代码等着被别人拿来执行，如果还不能直接被执行，那么还需要再编译或解释一遍，再交由计算机硬件执行。\n<code>编译器</code>往往是在「执行」之前完成，产出是一种可执行或需要再编译或者解释的<code>代码</code>。</p>","more":"<p><br></p>\n<h3 id=\"解释器-Interpreter\"><a href=\"#解释器-Interpreter\" class=\"headerlink\" title=\"解释器(Interpreter)\"></a>解释器(Interpreter)</h3><p>在计算机科学中，<code>解释器</code>是一种计算机程序，它直接执行由编程语言或脚本语言编写的代码，并不会把源代码预编译成机器码。\n一个解释器，通常会用以下的姿势来执行程序代码：</p>\n<ul>\n<li>分析源代码，并且直接执行。</li>\n<li>把源代码翻译成相对更加高效率的中间码，然后立即执行它。</li>\n<li>执行由解释器内部的编译器预编译后保存的代码</li>\n<li>可以把解释器看成一个黑盒子，我们输入源码，它就会实时返回结果。\n不同类型的解释器，黑盒子里面的构造不一样，有些还会集成编译器，缓存编译结果，用来提高执行效率（例如 Chrome V8 也是这么做的）。\n解释器通常是工作在「运行时」，并且对于我们输入的源码，是一行一行的解释然后执行，然后返回结果。</li>\n</ul>\n<p><br></p>\n<h3 id=\"编译器-Compiler-vs-解释器-Interpreter\"><a href=\"#编译器-Compiler-vs-解释器-Interpreter\" class=\"headerlink\" title=\"编译器(Compiler) vs 解释器(Interpreter)\"></a>编译器(Compiler) vs 解释器(Interpreter)</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>Compiler 编译器</th>\n<th>Interpreter 解释器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>功能</td>\n<td>对整个程序进行分析，执行输出为另一种代码（一般为机器码，如目标代码，可能需要连接后才能执行），但是不执行该机器码</td>\n<td>对源代码逐行执行，即包含分析和执行两步</td>\n</tr>\n<tr>\n<td>编程步骤</td>\n<td>1、创建程序。<br> 2、【编译】：解析或分析所有代码的正确性。如果不正确，则抛出错误如果没有错误，编译器会将源代码转换为机器代码。<br> 3、它将不同的代码文件链接到一个可运行的程序（如 .exe） 4、 运行程序</td>\n<td>1、创建程序 <br> 2、逐行执行源语句</td>\n</tr>\n<tr>\n<td>优点</td>\n<td>每次执行的是可运行程序，执行速度较快</td>\n<td>更容易使用，特别是对于初学者</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>只能通过修改源代码改变程序</td>\n<td>只能在有解释器的计算机上执行</td>\n</tr>\n<tr>\n<td>执行速度</td>\n<td>每次执行的是可运行程序，执行速度较快</td>\n<td>每次执行都从源代码开始，且不保存执行过程中的机器代码，执行速度慢</td>\n</tr>\n<tr>\n<td>执行者权限</td>\n<td>执行者一般得到的是可执行文件，执行者无法对程序进行更改</td>\n<td>执行者可以对源程序进行更改</td>\n</tr>\n<tr>\n<td>程序运行对象</td>\n<td>CPU</td>\n<td>解释器</td>\n</tr>\n<tr>\n<td>适用环境</td>\n<td>.exe 限定特定CPU</td>\n<td>一份源代码只要有对应版本解释器即可运行<br>对于web环境`，由于代码往往是一部分一部分加载，因此无需对整个程序进行分析，采用逐行编译运行的解释型语言更适合</td>\n<td></td>\n</tr>\n<tr>\n<td>代码优化</td>\n<td>对整个代码进行复杂地分析优化，耗时较长，优化效果较好</td>\n<td>逐行查看，分析和处理耗时较短，优化效果较差</td>\n</tr>\n<tr>\n<td>错误</td>\n<td>编译之后显示所有错误</td>\n<td>执行到有错误代码位置</td>\n</tr>\n<tr>\n<td>对应语言举例</td>\n<td>C，C ++，C＃，Scala，Java(既需要编译，又需要解释)</td>\n<td>PHP，Perl，Ruby （一般可以认为，不需要编译器，直接通过解释器执行的语言就是脚本语言）</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>参考\n<a href=\"https://www.guru99.com/difference-compiler-vs-interpreter.html\" target=\"_blank\" rel=\"noopener\">https://www.guru99.com/difference-compiler-vs-interpreter.html</a></p>"},{"title":"设计模式总结","date":"2019-01-02T03:07:32.000Z","_content":"\n\n## 设计模式六大原则\n\n### 单一职责原则\n定义：不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。 \n\n问题由来：类T负责两个不同的职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障。\n\n解决方案：遵循单一职责原则。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。\n\n### 里氏替换原则\n定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。\n\n定义2：所有引用基类的地方必须能透明地使用其子类的对象。\n\n问题由来：有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。\n\n解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。\n\n### 依赖倒置原则\n\n### 接口隔离原则\n\n### 迪米特法则\n\n### 开闭原则\n\n\n\n<br/>\n\n---\n\n参考\n\n","source":"_posts/设计模式总结.md","raw":"---\ntitle: 设计模式总结\ndate: 2019-01-02 11:07:32\ncategories: \n    - 设计模式\ntags:\n    - 设计模式\n---\n\n\n## 设计模式六大原则\n\n### 单一职责原则\n定义：不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。 \n\n问题由来：类T负责两个不同的职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障。\n\n解决方案：遵循单一职责原则。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。\n\n### 里氏替换原则\n定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。\n\n定义2：所有引用基类的地方必须能透明地使用其子类的对象。\n\n问题由来：有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。\n\n解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。\n\n### 依赖倒置原则\n\n### 接口隔离原则\n\n### 迪米特法则\n\n### 开闭原则\n\n\n\n<br/>\n\n---\n\n参考\n\n","slug":"设计模式总结","published":1,"updated":"2019-11-02T07:12:18.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y7g006rt6s6blbhxk3l","content":"<h2 id=\"设计模式六大原则\"><a href=\"#设计模式六大原则\" class=\"headerlink\" title=\"设计模式六大原则\"></a>设计模式六大原则</h2><h3 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h3><p>定义：不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。 </p>\n<p>问题由来：类T负责两个不同的职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障。</p>\n<p>解决方案：遵循单一职责原则。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。</p>\n<h3 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h3><p>定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</p>\n<p>定义2：所有引用基类的地方必须能透明地使用其子类的对象。</p>\n<p>问题由来：有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。</p>\n<p>解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。</p>\n<h3 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h3><h3 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h3><h3 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h3><h3 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h3><p><br></p>\n<hr>\n<p>参考</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设计模式六大原则\"><a href=\"#设计模式六大原则\" class=\"headerlink\" title=\"设计模式六大原则\"></a>设计模式六大原则</h2><h3 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h3><p>定义：不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。 </p>\n<p>问题由来：类T负责两个不同的职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障。</p>\n<p>解决方案：遵循单一职责原则。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。</p>\n<h3 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h3><p>定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</p>\n<p>定义2：所有引用基类的地方必须能透明地使用其子类的对象。</p>\n<p>问题由来：有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。</p>\n<p>解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。</p>\n<h3 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h3><h3 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h3><h3 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h3><h3 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h3><p><br></p>\n<hr>\n<p>参考</p>\n"},{"title":"调用链上下文跨线程传递","date":"2019-10-10T07:48:46.000Z","_content":"\n\n在分布式系统的上下文传递过程中，需要传递的信息一般包括traceID、 spanID以及部分请求参数等,可以分为以下几种场景:\n\n在同一线程内传递\n跨线程传递\n跨应用传递\n在同一个线程内传递比较简单,通过ThreadLocal就能解决上下文传递的问题,如果是跨线程传递,大家可能会想到jdk里的实现java.lang.InheritableThreadLocal,它拥有和线程变量ThreadLocal一样的功能，并且在当前线程上创建一个新的线程实例时，会把这些线程变量从当前线程传递给新的线程实例.但是在实际的应用场景里，绝大多数都是使用线程池来进行多线程编程，线程由线程池创建好，并且线程是池化起来反复使用,这时父子线程关系的ThreadLocal值传递已经没有意义，应用需要的实际上是把任务提交给线程池时的ThreadLocal值传递到任务执行时。所以jdk提供的inheritableThreadLocals类实用性不高,在线程池(ThreadPoolExecutor)中运行一个Runable实例并不会去新建一个线程，而是把Runable实例添加到队列中(在核心线程数已实例化满的时候),让ThreadPoolExecutor的workers去从队列里拿出Runable实例（这是一个典型的生产者消费者模式),然后运行Runable实例.run()方法,故jdk的inheritableThreadLocals这种实现方式没法适用。\n\n这篇文章主要介绍基于字节码修改的方法修改ThreadPoolExecutor和ForkJoinTask的字节码,实现非侵入式的上下文传递,我们先来看一下如果通过侵入式方式定制线程池怎么解决上下文传递,假设我们的调用链通过TraceContext类来保存上下文信息:\n\n```java\npublic class TraceContext {\n    private static final ThreadLocal<Object> CONTEXT = new ThreadLocal<>();\n    public static Object getContext() {\n        return CONTEXT.get();\n    }\n    public static void setContext(Object obj) {\n        CONTEXT.set(obj);\n    }\n    public static void removeContext() {\n        CONTEXT.remove();\n    }\n\n}\n```\n\n我们先定义2个类,分别继承自`Runnable`和`Callable`,目的在于初始化`Runnable`和`Callable`实例时保存调用线程的上下文信息到,在执行`run()`或者`call()`方法时,先把调用线程的上下文信息设置到当前执行的线程中,`run()/call()`方法执行后恢复执行线程的上下文,这2个类分别为`TraceRunnable`和`TraceCallable`:\n\n```java\npublic class TraceRunnable implements Runnable {\n    //在初始化TraceRunnable时会获取调用线程的上下文\n    private final Object context = TraceContext.getContext();\n    private final Runnable runnable;\n\n    public TraceRunnable(Runnable runnable) {\n        this.runnable = runnable;\n    }\n    @Override\n    public void run() {\n        Object backup = TraceContextUtil.backupAndSet(this.context);\n\n        try {\n            this.runnable.run();\n        } finally {\n            TraceContextUtil.restoreBackup(backup);\n        }\n    }\n\n    public Runnable getRunnable() {\n        return this.runnable;\n    }\n\n    public static TraceRunnable get(Runnable runnable) {\n        if (runnable == null) {\n            return null;\n        } else {\n            return runnable instanceof TraceRunnable ? (TraceRunnable)runnable : new TraceRunnable(runnable);\n        }\n    }\n}\n\npublic class TraceCallable<V> implements Callable<V> {\n    //在初始化TraceCallable时会获取调用线程的上下文\n    private final Object context = TraceContext.getContext();\n    private final Callable<V> callable;\n\n    public TraceCallable(Callable<V> callable) {\n        this.callable = callable;\n    }\n\n    @Override\n    public V call() throws Exception {\n        Object backup = TraceContextUtil.backupAndSet(this.context);\n\n        V result;\n        try {\n            result = this.callable.call();\n        } finally {\n            TraceContextUtil.restoreBackup(backup);\n        }\n\n        return result;\n    }\n\n    public Callable<V> getCallable() {\n        return this.callable;\n    }\n    //返回TraceCallable实例\n    public static <T> TraceCallable<T> get(Callable<T> callable) {\n        if (callable == null) {\n            return null;\n        } else {\n            return callable instanceof TraceCallable ? (TraceCallable)callable : new TraceCallable(callable);\n        }\n    }\n\n}\n\npublic class TraceContextUtil {\n    //设置调用线程的上下文到当前执行线程中,并返回执行线程之前的上下文\n    public static Object backupAndSet(Object currentContext) {\n        Object backupContext = TraceContext.getContext();\n        TraceContext.setContext(currentContext);\n        return backupContext;\n    }\n    //恢复执行线程的上下文\n    public static void restoreBackup(Object backup) {\n        TraceContext.setContext(backup);\n    }\n}\n```\n\n\n接下来就是定制线程池,重写`execute`和`submit`方法,把`Runnable/Callable`实例封装成`TraceRunnable/TraceCallable`,这样就把调用线程的上下文信息传递到线程池内部:\n\n```java\npublic class TraceThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor{\n    public void submit(Runnable runnable) {\n        TraceRunnable traceRunnable = new TraceRunnable(runnable);\n        super.execute(traceRunnable);\n    }\n    \n    public Future<?> submit(Runnable task) {\n        TraceRunnable traceRunnable = new TraceRunnable(runnable);\n        return super.submit(traceRunnable);\n    }\n    public <T> Future<T> submit(Callable<T> task) {\n         TraceCallable traceCallable = new TraceCallable(task);\n         return super.submit(traceCallable);\n    }\n```\n\n上面的方法虽然实现了上下文跨线程传递,在Runnable/Callable方法内部可以通过TraceContext.getContext()来获取上下文信息,但前提是异步处理都要使用TraceThreadPoolExecutor来提交任务,这样对代码具有侵入性,需要业务做改造,\n为了减少业务开发人员的工作量，使用 javaagent和instrument技术，利用字节码修改技术修改ThreadPoolExecutor和ScheduledThreadPoolExecutor类的字节码,也就是说,只要在JVM参数里加上了javaagent的配置，不需要直接使用上面的TraceRunnable/TraceCallable包装类，也不需要使用TraceThreadPoolExecutor,即可实现上下文信息的自动传递。\n\n对于`ThreadPoolExecutor`和`ScheduledThreadPoolExecutor`,只需要修改它们的`execute/submit/schedule/scheduleAtFixedRate/scheduleWithFixedDelay`这些方法的字节码,逻辑和前面介绍的一致:\n\n```java\npublic interface TraceTransformer {\n    boolean needTransform(String className);\n\n    void doTransform(CtClass var1) throws NotFoundException, CannotCompileException, IOException;\n}\n\npublic class ThreadPoolTransformer implements TraceTransformer {\n    private static final String TRACE_RUNNABLE_CLASS_NAME = TraceRunnable.class.getName();\n    private static final String TRACE_CALLABLE_CLASS_NAME = TraceCallable.class.getName();\n\n    private static final Set<String> TO_TRANSFORM_METHODS = new HashSet<>();\n\n    static {\n        TO_TRANSFORM_METHODS.add(\"execute\");\n        TO_TRANSFORM_METHODS.add(\"submit\");\n        TO_TRANSFORM_METHODS.add(\"schedule\");\n        TO_TRANSFORM_METHODS.add(\"scheduleAtFixedRate\");\n        TO_TRANSFORM_METHODS.add(\"scheduleWithFixedDelay\");\n    }\n\n    @Override\n    public boolean needTransform(String className) {\n        return \"java.util.concurrent.ThreadPoolExecutor\".equals(className)\n                || \"java.util.concurrent.ScheduledThreadPoolExecutor\".equals(className);\n    }\n\n    @Override\n    public void doTransform(CtClass clazz) throws NotFoundException, CannotCompileException, IOException {\n        CtMethod[] methods = clazz.getDeclaredMethods();\n        int length = methods.length;\n\n        for(int i = 0; i < length; ++i) {\n            CtMethod method = methods[i];\n            transformMethod(clazz, method);\n        }\n\n    }\n\n    static void transformMethod(CtClass clazz, CtMethod method) throws NotFoundException, CannotCompileException {\n        if (TO_TRANSFORM_METHODS.contains(method.getName())) {\n            if (method.getDeclaringClass() == clazz) {\n                int modifiers = method.getModifiers();\n                if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {\n                    CtClass[] parameterTypes = method.getParameterTypes();\n                    StringBuilder insertCode = new StringBuilder();\n\n                    for(int i = 0; i < parameterTypes.length; ++i) {\n                        CtClass parameterType = parameterTypes[i];\n                        String code;\n                        if (\"java.lang.Runnable\".equals(parameterType.getName())) {\n                            //$1 = TraceRunnable.get($1)返回TraceRunnable实例\n                            code = String.format(\"$%d = %s.get($%d);\", i + 1, TRACE_RUNNABLE_CLASS_NAME, i + 1);\n                            System.out.println(\"insert code before method \" + method + \" of class \" + method.getDeclaringClass().getName() + \": \" + code);\n                            insertCode.append(code);\n                        } else if (\"java.util.concurrent.Callable\".equals(parameterType.getName())) {\n                            //$1 = TraceCallable.get($1)返回TraceCallable实例\n                            code = String.format(\"$%d = %s.get($%d);\", i + 1, TRACE_CALLABLE_CLASS_NAME, i + 1);\n                            System.out.println(\"insert code before method \" + method + \" of class \" + method.getDeclaringClass().getName() + \": \" + code);\n                            insertCode.append(code);\n                        }\n                    }\n\n                    if (insertCode.length() > 0) {\n                        method.insertBefore(insertCode.toString());\n                    }\n\n                }\n            }\n        }\n    }\n}\n```\n\n\n对于ForkJoinPool, 做法也类似,这里换一种修改方式,主要为了熟悉下javassist的语法,这次是在ForkJoinTask里添加一个context$field$add$by$trace字段,在初始化ForkJoinTask实例自动获取调用线程的上下文(TraceContext.getContext()),并修改ForkJoinTask的doExec()方法,修改逻辑和前面的一样\n\n```java\npublic class ForkJoinPoolTransformer implements TraceTransformer {\n    private static final String FORK_JOIN_TASK_CLASS_NAME = \"java.util.concurrent.ForkJoinTask\";\n\n    @Override\n    public boolean needTransform(String className) {\n        return FORK_JOIN_TASK_CLASS_NAME.equals(className);\n    }\n\n    @Override\n    public void doTransform(CtClass clazz) throws NotFoundException, CannotCompileException, IOException {\n        String className = clazz.getName();\n        //添加context$field$add$by$trace字段,初始值为TraceContext.getContext(),这样就获取了调用线程的上下文\n        CtField contextField = CtField.make(\"private final java.lang.Object context$field$add$by$trace;\", clazz);\n        clazz.addField(contextField, \"com.ezlippi.trace.agent.context.TraceContext.getContext();\");\n        System.out.println(\"add new field context$field$add$by$trace to class \" + className);\n        CtMethod doExecMethod = clazz.getDeclaredMethod(\"doExec\");\n        CtMethod newDoExecMethod = CtNewMethod.copy(doExecMethod, \"doExec\", clazz, (ClassMap)null);\n        doExecMethod.setName(\"original$doExec$method$renamed$by$trace\");\n        doExecMethod.setModifiers(doExecMethod.getModifiers() & -2 | 2);\n        //java.lang.Object backup = com.ezlippi.trace.agent.context.TraceContextUtil.backupAndSet(this.context$field$add$by$trace);\n        //try {\n        //   return original$doExec$method$renamed$by$trace($$);\n        //} finally {\n        //    TraceContextUtil.restoreBackup(backup);\n        //}\n        newDoExecMethod.setBody(\"{\\njava.lang.Object backup = com.ezlippi.trace.agent.context.TraceContextUtil.backupAndSet(context$field$add$by$trace);\\ntry {\\n    return original$doExec$method$renamed$by$trace($$);\\n} finally {\\n    com.ezlippi.trace.agent.context.TraceContextUtil.restoreBackup(backup);\\n}\\n}\");\n        clazz.addMethod(newDoExecMethod);\n        System.out.println(\"insert code around method \" + doExecMethod + \" of class \" + className);\n\n\n    }\n}\n```\n\n\n接下来就是添加一个ClassFileTransformer,JVM启动时会传递Instrumentation对象给javaagent的preMain()方法,我们只需要往instrumentation中注册一个ClassFileTransformer实例,jvm在加载类时会把解析后的class字节数组传递给\nClassFileTransformer,执行修改逻辑后把字节数组返回给jvm.\n```java\npublic class TlTransformer implements ClassFileTransformer {\n    private List<TraceTransformer> transformers = new ArrayList<>();\n\n    public TlTransformer() {\n        this.transformers.add(new ForkJoinPoolTransformer());\n        this.transformers.add(new ThreadPoolTransformer());\n    }\n\n    @Override\n    public byte[] transform(ClassLoader loader, String classFile, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classFileBuffer) throws IllegalClassFormatException {\n        try {\n            if (classFile == null) {\n                return new byte[0];\n            }\n\n            String className = this.toClassName(classFile);\n            Iterator iterator = this.transformers.iterator();\n\n            while(iterator.hasNext()) {\n                TraceTransformer transformer = (TraceTransformer)iterator.next();\n                if (transformer.needTransform(className)) {\n                    System.out.println(\"Transforming class \" + className);\n                    CtClass clazz = this.getCtClass(classFileBuffer, loader);\n                    transformer.doTransform(clazz);\n                    return clazz.toBytecode();\n                }\n            }\n        } catch (Throwable throwable) {\n            String msg = \"Fail to transform class \" + classFile + \", cause: \" + throwable.toString();\n            System.out.println(msg);\n            throw new IllegalStateException(msg, throwable);\n        }\n\n        return new byte[0];\n    }\n\n    private String toClassName(String classFile) {\n        return classFile.replace('/', '.');\n    }\n\n    private CtClass getCtClass(byte[] classFileBuffer, ClassLoader classLoader) throws IOException {\n        ClassPool classPool = new ClassPool(true);\n        if (null != classLoader) {\n            classPool.appendClassPath(new LoaderClassPath(classLoader));\n        }\n\n        CtClass clazz = classPool.makeClass(new ByteArrayInputStream(classFileBuffer), false);\n        clazz.defrost();\n        return clazz;\n    }\n}\n\npublic class TraceAgent {\n    public static void premain(String agentArgs, Instrumentation instrumentation) {\n        ClassFileTransformer transformer = new TlTransformer();\n        instrumentation.addTransformer(transformer, true);\n    }\n}\n```\n\n\n因为修改了JDK的标准库的类，标准库由bootstrap class loader加载,上面修改后的ThreadPoolExecutor和ForkJoinTask类引用了agent的代码，所以agent的Jar需要加到boot class path上,可以通过maven-jar-plugin在agent jar的manifest添加Boot-Class-Path这个入口.\n\n```xml\n<plugin>\n        <artifactId>maven-jar-plugin</artifactId>\n        <version>3.0.2</version>\n        <configuration>\n            <archive>\n                <manifestEntries>\n                    <Premain-Class>com.ezlippi.trace.agent.TraceAgent</Premain-Class>\n                    <Boot-Class-Path>${project.artifactId}-${project.version}.jar</Boot-Class-Path>\n                    <Can-Redefine-Classes>true</Can-Redefine-Classes>\n                    <Can-Retransform-Classes>true</Can-Retransform-Classes>\n                    <Can-Set-Native-Method-Prefix>false</Can-Set-Native-Method-Prefix>\n                </manifestEntries>\n            </archive>\n        </configuration>\n</plugin>\n```\n\n最后在Java的启动参数加上：-javaagent:path/to/trace-agent-x.x.x.jar后就大功告成了.","source":"_posts/调用链上下文跨线程传递.md","raw":"---\ntitle: 调用链上下文跨线程传递\ndate: 2019-10-10 15:48:46\ncategories: \n    - Java\n    - Trace\ntags:\n    - Java\n    - Trace\n---\n\n\n在分布式系统的上下文传递过程中，需要传递的信息一般包括traceID、 spanID以及部分请求参数等,可以分为以下几种场景:\n\n在同一线程内传递\n跨线程传递\n跨应用传递\n在同一个线程内传递比较简单,通过ThreadLocal就能解决上下文传递的问题,如果是跨线程传递,大家可能会想到jdk里的实现java.lang.InheritableThreadLocal,它拥有和线程变量ThreadLocal一样的功能，并且在当前线程上创建一个新的线程实例时，会把这些线程变量从当前线程传递给新的线程实例.但是在实际的应用场景里，绝大多数都是使用线程池来进行多线程编程，线程由线程池创建好，并且线程是池化起来反复使用,这时父子线程关系的ThreadLocal值传递已经没有意义，应用需要的实际上是把任务提交给线程池时的ThreadLocal值传递到任务执行时。所以jdk提供的inheritableThreadLocals类实用性不高,在线程池(ThreadPoolExecutor)中运行一个Runable实例并不会去新建一个线程，而是把Runable实例添加到队列中(在核心线程数已实例化满的时候),让ThreadPoolExecutor的workers去从队列里拿出Runable实例（这是一个典型的生产者消费者模式),然后运行Runable实例.run()方法,故jdk的inheritableThreadLocals这种实现方式没法适用。\n\n这篇文章主要介绍基于字节码修改的方法修改ThreadPoolExecutor和ForkJoinTask的字节码,实现非侵入式的上下文传递,我们先来看一下如果通过侵入式方式定制线程池怎么解决上下文传递,假设我们的调用链通过TraceContext类来保存上下文信息:\n\n```java\npublic class TraceContext {\n    private static final ThreadLocal<Object> CONTEXT = new ThreadLocal<>();\n    public static Object getContext() {\n        return CONTEXT.get();\n    }\n    public static void setContext(Object obj) {\n        CONTEXT.set(obj);\n    }\n    public static void removeContext() {\n        CONTEXT.remove();\n    }\n\n}\n```\n\n我们先定义2个类,分别继承自`Runnable`和`Callable`,目的在于初始化`Runnable`和`Callable`实例时保存调用线程的上下文信息到,在执行`run()`或者`call()`方法时,先把调用线程的上下文信息设置到当前执行的线程中,`run()/call()`方法执行后恢复执行线程的上下文,这2个类分别为`TraceRunnable`和`TraceCallable`:\n\n```java\npublic class TraceRunnable implements Runnable {\n    //在初始化TraceRunnable时会获取调用线程的上下文\n    private final Object context = TraceContext.getContext();\n    private final Runnable runnable;\n\n    public TraceRunnable(Runnable runnable) {\n        this.runnable = runnable;\n    }\n    @Override\n    public void run() {\n        Object backup = TraceContextUtil.backupAndSet(this.context);\n\n        try {\n            this.runnable.run();\n        } finally {\n            TraceContextUtil.restoreBackup(backup);\n        }\n    }\n\n    public Runnable getRunnable() {\n        return this.runnable;\n    }\n\n    public static TraceRunnable get(Runnable runnable) {\n        if (runnable == null) {\n            return null;\n        } else {\n            return runnable instanceof TraceRunnable ? (TraceRunnable)runnable : new TraceRunnable(runnable);\n        }\n    }\n}\n\npublic class TraceCallable<V> implements Callable<V> {\n    //在初始化TraceCallable时会获取调用线程的上下文\n    private final Object context = TraceContext.getContext();\n    private final Callable<V> callable;\n\n    public TraceCallable(Callable<V> callable) {\n        this.callable = callable;\n    }\n\n    @Override\n    public V call() throws Exception {\n        Object backup = TraceContextUtil.backupAndSet(this.context);\n\n        V result;\n        try {\n            result = this.callable.call();\n        } finally {\n            TraceContextUtil.restoreBackup(backup);\n        }\n\n        return result;\n    }\n\n    public Callable<V> getCallable() {\n        return this.callable;\n    }\n    //返回TraceCallable实例\n    public static <T> TraceCallable<T> get(Callable<T> callable) {\n        if (callable == null) {\n            return null;\n        } else {\n            return callable instanceof TraceCallable ? (TraceCallable)callable : new TraceCallable(callable);\n        }\n    }\n\n}\n\npublic class TraceContextUtil {\n    //设置调用线程的上下文到当前执行线程中,并返回执行线程之前的上下文\n    public static Object backupAndSet(Object currentContext) {\n        Object backupContext = TraceContext.getContext();\n        TraceContext.setContext(currentContext);\n        return backupContext;\n    }\n    //恢复执行线程的上下文\n    public static void restoreBackup(Object backup) {\n        TraceContext.setContext(backup);\n    }\n}\n```\n\n\n接下来就是定制线程池,重写`execute`和`submit`方法,把`Runnable/Callable`实例封装成`TraceRunnable/TraceCallable`,这样就把调用线程的上下文信息传递到线程池内部:\n\n```java\npublic class TraceThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor{\n    public void submit(Runnable runnable) {\n        TraceRunnable traceRunnable = new TraceRunnable(runnable);\n        super.execute(traceRunnable);\n    }\n    \n    public Future<?> submit(Runnable task) {\n        TraceRunnable traceRunnable = new TraceRunnable(runnable);\n        return super.submit(traceRunnable);\n    }\n    public <T> Future<T> submit(Callable<T> task) {\n         TraceCallable traceCallable = new TraceCallable(task);\n         return super.submit(traceCallable);\n    }\n```\n\n上面的方法虽然实现了上下文跨线程传递,在Runnable/Callable方法内部可以通过TraceContext.getContext()来获取上下文信息,但前提是异步处理都要使用TraceThreadPoolExecutor来提交任务,这样对代码具有侵入性,需要业务做改造,\n为了减少业务开发人员的工作量，使用 javaagent和instrument技术，利用字节码修改技术修改ThreadPoolExecutor和ScheduledThreadPoolExecutor类的字节码,也就是说,只要在JVM参数里加上了javaagent的配置，不需要直接使用上面的TraceRunnable/TraceCallable包装类，也不需要使用TraceThreadPoolExecutor,即可实现上下文信息的自动传递。\n\n对于`ThreadPoolExecutor`和`ScheduledThreadPoolExecutor`,只需要修改它们的`execute/submit/schedule/scheduleAtFixedRate/scheduleWithFixedDelay`这些方法的字节码,逻辑和前面介绍的一致:\n\n```java\npublic interface TraceTransformer {\n    boolean needTransform(String className);\n\n    void doTransform(CtClass var1) throws NotFoundException, CannotCompileException, IOException;\n}\n\npublic class ThreadPoolTransformer implements TraceTransformer {\n    private static final String TRACE_RUNNABLE_CLASS_NAME = TraceRunnable.class.getName();\n    private static final String TRACE_CALLABLE_CLASS_NAME = TraceCallable.class.getName();\n\n    private static final Set<String> TO_TRANSFORM_METHODS = new HashSet<>();\n\n    static {\n        TO_TRANSFORM_METHODS.add(\"execute\");\n        TO_TRANSFORM_METHODS.add(\"submit\");\n        TO_TRANSFORM_METHODS.add(\"schedule\");\n        TO_TRANSFORM_METHODS.add(\"scheduleAtFixedRate\");\n        TO_TRANSFORM_METHODS.add(\"scheduleWithFixedDelay\");\n    }\n\n    @Override\n    public boolean needTransform(String className) {\n        return \"java.util.concurrent.ThreadPoolExecutor\".equals(className)\n                || \"java.util.concurrent.ScheduledThreadPoolExecutor\".equals(className);\n    }\n\n    @Override\n    public void doTransform(CtClass clazz) throws NotFoundException, CannotCompileException, IOException {\n        CtMethod[] methods = clazz.getDeclaredMethods();\n        int length = methods.length;\n\n        for(int i = 0; i < length; ++i) {\n            CtMethod method = methods[i];\n            transformMethod(clazz, method);\n        }\n\n    }\n\n    static void transformMethod(CtClass clazz, CtMethod method) throws NotFoundException, CannotCompileException {\n        if (TO_TRANSFORM_METHODS.contains(method.getName())) {\n            if (method.getDeclaringClass() == clazz) {\n                int modifiers = method.getModifiers();\n                if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {\n                    CtClass[] parameterTypes = method.getParameterTypes();\n                    StringBuilder insertCode = new StringBuilder();\n\n                    for(int i = 0; i < parameterTypes.length; ++i) {\n                        CtClass parameterType = parameterTypes[i];\n                        String code;\n                        if (\"java.lang.Runnable\".equals(parameterType.getName())) {\n                            //$1 = TraceRunnable.get($1)返回TraceRunnable实例\n                            code = String.format(\"$%d = %s.get($%d);\", i + 1, TRACE_RUNNABLE_CLASS_NAME, i + 1);\n                            System.out.println(\"insert code before method \" + method + \" of class \" + method.getDeclaringClass().getName() + \": \" + code);\n                            insertCode.append(code);\n                        } else if (\"java.util.concurrent.Callable\".equals(parameterType.getName())) {\n                            //$1 = TraceCallable.get($1)返回TraceCallable实例\n                            code = String.format(\"$%d = %s.get($%d);\", i + 1, TRACE_CALLABLE_CLASS_NAME, i + 1);\n                            System.out.println(\"insert code before method \" + method + \" of class \" + method.getDeclaringClass().getName() + \": \" + code);\n                            insertCode.append(code);\n                        }\n                    }\n\n                    if (insertCode.length() > 0) {\n                        method.insertBefore(insertCode.toString());\n                    }\n\n                }\n            }\n        }\n    }\n}\n```\n\n\n对于ForkJoinPool, 做法也类似,这里换一种修改方式,主要为了熟悉下javassist的语法,这次是在ForkJoinTask里添加一个context$field$add$by$trace字段,在初始化ForkJoinTask实例自动获取调用线程的上下文(TraceContext.getContext()),并修改ForkJoinTask的doExec()方法,修改逻辑和前面的一样\n\n```java\npublic class ForkJoinPoolTransformer implements TraceTransformer {\n    private static final String FORK_JOIN_TASK_CLASS_NAME = \"java.util.concurrent.ForkJoinTask\";\n\n    @Override\n    public boolean needTransform(String className) {\n        return FORK_JOIN_TASK_CLASS_NAME.equals(className);\n    }\n\n    @Override\n    public void doTransform(CtClass clazz) throws NotFoundException, CannotCompileException, IOException {\n        String className = clazz.getName();\n        //添加context$field$add$by$trace字段,初始值为TraceContext.getContext(),这样就获取了调用线程的上下文\n        CtField contextField = CtField.make(\"private final java.lang.Object context$field$add$by$trace;\", clazz);\n        clazz.addField(contextField, \"com.ezlippi.trace.agent.context.TraceContext.getContext();\");\n        System.out.println(\"add new field context$field$add$by$trace to class \" + className);\n        CtMethod doExecMethod = clazz.getDeclaredMethod(\"doExec\");\n        CtMethod newDoExecMethod = CtNewMethod.copy(doExecMethod, \"doExec\", clazz, (ClassMap)null);\n        doExecMethod.setName(\"original$doExec$method$renamed$by$trace\");\n        doExecMethod.setModifiers(doExecMethod.getModifiers() & -2 | 2);\n        //java.lang.Object backup = com.ezlippi.trace.agent.context.TraceContextUtil.backupAndSet(this.context$field$add$by$trace);\n        //try {\n        //   return original$doExec$method$renamed$by$trace($$);\n        //} finally {\n        //    TraceContextUtil.restoreBackup(backup);\n        //}\n        newDoExecMethod.setBody(\"{\\njava.lang.Object backup = com.ezlippi.trace.agent.context.TraceContextUtil.backupAndSet(context$field$add$by$trace);\\ntry {\\n    return original$doExec$method$renamed$by$trace($$);\\n} finally {\\n    com.ezlippi.trace.agent.context.TraceContextUtil.restoreBackup(backup);\\n}\\n}\");\n        clazz.addMethod(newDoExecMethod);\n        System.out.println(\"insert code around method \" + doExecMethod + \" of class \" + className);\n\n\n    }\n}\n```\n\n\n接下来就是添加一个ClassFileTransformer,JVM启动时会传递Instrumentation对象给javaagent的preMain()方法,我们只需要往instrumentation中注册一个ClassFileTransformer实例,jvm在加载类时会把解析后的class字节数组传递给\nClassFileTransformer,执行修改逻辑后把字节数组返回给jvm.\n```java\npublic class TlTransformer implements ClassFileTransformer {\n    private List<TraceTransformer> transformers = new ArrayList<>();\n\n    public TlTransformer() {\n        this.transformers.add(new ForkJoinPoolTransformer());\n        this.transformers.add(new ThreadPoolTransformer());\n    }\n\n    @Override\n    public byte[] transform(ClassLoader loader, String classFile, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classFileBuffer) throws IllegalClassFormatException {\n        try {\n            if (classFile == null) {\n                return new byte[0];\n            }\n\n            String className = this.toClassName(classFile);\n            Iterator iterator = this.transformers.iterator();\n\n            while(iterator.hasNext()) {\n                TraceTransformer transformer = (TraceTransformer)iterator.next();\n                if (transformer.needTransform(className)) {\n                    System.out.println(\"Transforming class \" + className);\n                    CtClass clazz = this.getCtClass(classFileBuffer, loader);\n                    transformer.doTransform(clazz);\n                    return clazz.toBytecode();\n                }\n            }\n        } catch (Throwable throwable) {\n            String msg = \"Fail to transform class \" + classFile + \", cause: \" + throwable.toString();\n            System.out.println(msg);\n            throw new IllegalStateException(msg, throwable);\n        }\n\n        return new byte[0];\n    }\n\n    private String toClassName(String classFile) {\n        return classFile.replace('/', '.');\n    }\n\n    private CtClass getCtClass(byte[] classFileBuffer, ClassLoader classLoader) throws IOException {\n        ClassPool classPool = new ClassPool(true);\n        if (null != classLoader) {\n            classPool.appendClassPath(new LoaderClassPath(classLoader));\n        }\n\n        CtClass clazz = classPool.makeClass(new ByteArrayInputStream(classFileBuffer), false);\n        clazz.defrost();\n        return clazz;\n    }\n}\n\npublic class TraceAgent {\n    public static void premain(String agentArgs, Instrumentation instrumentation) {\n        ClassFileTransformer transformer = new TlTransformer();\n        instrumentation.addTransformer(transformer, true);\n    }\n}\n```\n\n\n因为修改了JDK的标准库的类，标准库由bootstrap class loader加载,上面修改后的ThreadPoolExecutor和ForkJoinTask类引用了agent的代码，所以agent的Jar需要加到boot class path上,可以通过maven-jar-plugin在agent jar的manifest添加Boot-Class-Path这个入口.\n\n```xml\n<plugin>\n        <artifactId>maven-jar-plugin</artifactId>\n        <version>3.0.2</version>\n        <configuration>\n            <archive>\n                <manifestEntries>\n                    <Premain-Class>com.ezlippi.trace.agent.TraceAgent</Premain-Class>\n                    <Boot-Class-Path>${project.artifactId}-${project.version}.jar</Boot-Class-Path>\n                    <Can-Redefine-Classes>true</Can-Redefine-Classes>\n                    <Can-Retransform-Classes>true</Can-Retransform-Classes>\n                    <Can-Set-Native-Method-Prefix>false</Can-Set-Native-Method-Prefix>\n                </manifestEntries>\n            </archive>\n        </configuration>\n</plugin>\n```\n\n最后在Java的启动参数加上：-javaagent:path/to/trace-agent-x.x.x.jar后就大功告成了.","slug":"调用链上下文跨线程传递","published":1,"updated":"2019-11-02T07:12:18.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y7h006tt6s6imdizzkx","content":"<p>在分布式系统的上下文传递过程中，需要传递的信息一般包括traceID、 spanID以及部分请求参数等,可以分为以下几种场景:</p>\n<p>在同一线程内传递\n跨线程传递\n跨应用传递\n在同一个线程内传递比较简单,通过ThreadLocal就能解决上下文传递的问题,如果是跨线程传递,大家可能会想到jdk里的实现java.lang.InheritableThreadLocal,它拥有和线程变量ThreadLocal一样的功能，并且在当前线程上创建一个新的线程实例时，会把这些线程变量从当前线程传递给新的线程实例.但是在实际的应用场景里，绝大多数都是使用线程池来进行多线程编程，线程由线程池创建好，并且线程是池化起来反复使用,这时父子线程关系的ThreadLocal值传递已经没有意义，应用需要的实际上是把任务提交给线程池时的ThreadLocal值传递到任务执行时。所以jdk提供的inheritableThreadLocals类实用性不高,在线程池(ThreadPoolExecutor)中运行一个Runable实例并不会去新建一个线程，而是把Runable实例添加到队列中(在核心线程数已实例化满的时候),让ThreadPoolExecutor的workers去从队列里拿出Runable实例（这是一个典型的生产者消费者模式),然后运行Runable实例.run()方法,故jdk的inheritableThreadLocals这种实现方式没法适用。</p>\n<p>这篇文章主要介绍基于字节码修改的方法修改ThreadPoolExecutor和ForkJoinTask的字节码,实现非侵入式的上下文传递,我们先来看一下如果通过侵入式方式定制线程池怎么解决上下文传递,假设我们的调用链通过TraceContext类来保存上下文信息:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceContext</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Object&gt; CONTEXT = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CONTEXT.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setContext</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        CONTEXT.set(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">removeContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CONTEXT.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先定义2个类,分别继承自<code>Runnable</code>和<code>Callable</code>,目的在于初始化<code>Runnable</code>和<code>Callable</code>实例时保存调用线程的上下文信息到,在执行<code>run()</code>或者<code>call()</code>方法时,先把调用线程的上下文信息设置到当前执行的线程中,<code>run()/call()</code>方法执行后恢复执行线程的上下文,这2个类分别为<code>TraceRunnable</code>和<code>TraceCallable</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在初始化TraceRunnable时会获取调用线程的上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object context = TraceContext.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable runnable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TraceRunnable</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.runnable = runnable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object backup = TraceContextUtil.backupAndSet(<span class=\"keyword\">this</span>.context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.runnable.run();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            TraceContextUtil.restoreBackup(backup);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Runnable <span class=\"title\">getRunnable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.runnable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TraceRunnable <span class=\"title\">get</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runnable == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> runnable <span class=\"keyword\">instanceof</span> TraceRunnable ? (TraceRunnable)runnable : <span class=\"keyword\">new</span> TraceRunnable(runnable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceCallable</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在初始化TraceCallable时会获取调用线程的上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object context = TraceContext.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Callable&lt;V&gt; callable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TraceCallable</span><span class=\"params\">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callable = callable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object backup = TraceContextUtil.backupAndSet(<span class=\"keyword\">this</span>.context);</span><br><span class=\"line\"></span><br><span class=\"line\">        V result;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            result = <span class=\"keyword\">this</span>.callable.call();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            TraceContextUtil.restoreBackup(backup);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Callable&lt;V&gt; <span class=\"title\">getCallable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.callable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回TraceCallable实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">TraceCallable&lt;T&gt; <span class=\"title\">get</span><span class=\"params\">(Callable&lt;T&gt; callable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callable == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callable <span class=\"keyword\">instanceof</span> TraceCallable ? (TraceCallable)callable : <span class=\"keyword\">new</span> TraceCallable(callable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceContextUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置调用线程的上下文到当前执行线程中,并返回执行线程之前的上下文</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">backupAndSet</span><span class=\"params\">(Object currentContext)</span> </span>&#123;</span><br><span class=\"line\">        Object backupContext = TraceContext.getContext();</span><br><span class=\"line\">        TraceContext.setContext(currentContext);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> backupContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//恢复执行线程的上下文</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">restoreBackup</span><span class=\"params\">(Object backup)</span> </span>&#123;</span><br><span class=\"line\">        TraceContext.setContext(backup);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来就是定制线程池,重写<code>execute</code>和<code>submit</code>方法,把<code>Runnable/Callable</code>实例封装成<code>TraceRunnable/TraceCallable</code>,这样就把调用线程的上下文信息传递到线程池内部:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">java</span>.<span class=\"title\">util</span>.<span class=\"title\">concurrent</span>.<span class=\"title\">ThreadPoolExecutor</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">        TraceRunnable traceRunnable = <span class=\"keyword\">new</span> TraceRunnable(runnable);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.execute(traceRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class=\"line\">        TraceRunnable traceRunnable = <span class=\"keyword\">new</span> TraceRunnable(runnable);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.submit(traceRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class=\"line\">         TraceCallable traceCallable = <span class=\"keyword\">new</span> TraceCallable(task);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.submit(traceCallable);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>上面的方法虽然实现了上下文跨线程传递,在Runnable/Callable方法内部可以通过TraceContext.getContext()来获取上下文信息,但前提是异步处理都要使用TraceThreadPoolExecutor来提交任务,这样对代码具有侵入性,需要业务做改造,\n为了减少业务开发人员的工作量，使用 javaagent和instrument技术，利用字节码修改技术修改ThreadPoolExecutor和ScheduledThreadPoolExecutor类的字节码,也就是说,只要在JVM参数里加上了javaagent的配置，不需要直接使用上面的TraceRunnable/TraceCallable包装类，也不需要使用TraceThreadPoolExecutor,即可实现上下文信息的自动传递。</p>\n<p>对于<code>ThreadPoolExecutor</code>和<code>ScheduledThreadPoolExecutor</code>,只需要修改它们的<code>execute/submit/schedule/scheduleAtFixedRate/scheduleWithFixedDelay</code>这些方法的字节码,逻辑和前面介绍的一致:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TraceTransformer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">needTransform</span><span class=\"params\">(String className)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doTransform</span><span class=\"params\">(CtClass var1)</span> <span class=\"keyword\">throws</span> NotFoundException, CannotCompileException, IOException</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">TraceTransformer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TRACE_RUNNABLE_CLASS_NAME = TraceRunnable<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TRACE_CALLABLE_CLASS_NAME = TraceCallable<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Set&lt;String&gt; TO_TRANSFORM_METHODS = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        TO_TRANSFORM_METHODS.add(<span class=\"string\">\"execute\"</span>);</span><br><span class=\"line\">        TO_TRANSFORM_METHODS.add(<span class=\"string\">\"submit\"</span>);</span><br><span class=\"line\">        TO_TRANSFORM_METHODS.add(<span class=\"string\">\"schedule\"</span>);</span><br><span class=\"line\">        TO_TRANSFORM_METHODS.add(<span class=\"string\">\"scheduleAtFixedRate\"</span>);</span><br><span class=\"line\">        TO_TRANSFORM_METHODS.add(<span class=\"string\">\"scheduleWithFixedDelay\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">needTransform</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"java.util.concurrent.ThreadPoolExecutor\"</span>.equals(className)</span><br><span class=\"line\">                || <span class=\"string\">\"java.util.concurrent.ScheduledThreadPoolExecutor\"</span>.equals(className);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doTransform</span><span class=\"params\">(CtClass clazz)</span> <span class=\"keyword\">throws</span> NotFoundException, CannotCompileException, IOException </span>&#123;</span><br><span class=\"line\">        CtMethod[] methods = clazz.getDeclaredMethods();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = methods.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; ++i) &#123;</span><br><span class=\"line\">            CtMethod method = methods[i];</span><br><span class=\"line\">            transformMethod(clazz, method);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">transformMethod</span><span class=\"params\">(CtClass clazz, CtMethod method)</span> <span class=\"keyword\">throws</span> NotFoundException, CannotCompileException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TO_TRANSFORM_METHODS.contains(method.getName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.getDeclaringClass() == clazz) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> modifiers = method.getModifiers();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Modifier.isPublic(modifiers) &amp;&amp; !Modifier.isStatic(modifiers)) &#123;</span><br><span class=\"line\">                    CtClass[] parameterTypes = method.getParameterTypes();</span><br><span class=\"line\">                    StringBuilder insertCode = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parameterTypes.length; ++i) &#123;</span><br><span class=\"line\">                        CtClass parameterType = parameterTypes[i];</span><br><span class=\"line\">                        String code;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"string\">\"java.lang.Runnable\"</span>.equals(parameterType.getName())) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//$1 = TraceRunnable.get($1)返回TraceRunnable实例</span></span><br><span class=\"line\">                            code = String.format(<span class=\"string\">\"$%d = %s.get($%d);\"</span>, i + <span class=\"number\">1</span>, TRACE_RUNNABLE_CLASS_NAME, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"insert code before method \"</span> + method + <span class=\"string\">\" of class \"</span> + method.getDeclaringClass().getName() + <span class=\"string\">\": \"</span> + code);</span><br><span class=\"line\">                            insertCode.append(code);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"java.util.concurrent.Callable\"</span>.equals(parameterType.getName())) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//$1 = TraceCallable.get($1)返回TraceCallable实例</span></span><br><span class=\"line\">                            code = String.format(<span class=\"string\">\"$%d = %s.get($%d);\"</span>, i + <span class=\"number\">1</span>, TRACE_CALLABLE_CLASS_NAME, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"insert code before method \"</span> + method + <span class=\"string\">\" of class \"</span> + method.getDeclaringClass().getName() + <span class=\"string\">\": \"</span> + code);</span><br><span class=\"line\">                            insertCode.append(code);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (insertCode.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        method.insertBefore(insertCode.toString());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于ForkJoinPool, 做法也类似,这里换一种修改方式,主要为了熟悉下javassist的语法,这次是在ForkJoinTask里添加一个context$field$add$by$trace字段,在初始化ForkJoinTask实例自动获取调用线程的上下文(TraceContext.getContext()),并修改ForkJoinTask的doExec()方法,修改逻辑和前面的一样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoinPoolTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">TraceTransformer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FORK_JOIN_TASK_CLASS_NAME = <span class=\"string\">\"java.util.concurrent.ForkJoinTask\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">needTransform</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FORK_JOIN_TASK_CLASS_NAME.equals(className);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doTransform</span><span class=\"params\">(CtClass clazz)</span> <span class=\"keyword\">throws</span> NotFoundException, CannotCompileException, IOException </span>&#123;</span><br><span class=\"line\">        String className = clazz.getName();</span><br><span class=\"line\">        <span class=\"comment\">//添加context$field$add$by$trace字段,初始值为TraceContext.getContext(),这样就获取了调用线程的上下文</span></span><br><span class=\"line\">        CtField contextField = CtField.make(<span class=\"string\">\"private final java.lang.Object context$field$add$by$trace;\"</span>, clazz);</span><br><span class=\"line\">        clazz.addField(contextField, <span class=\"string\">\"com.ezlippi.trace.agent.context.TraceContext.getContext();\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"add new field context$field$add$by$trace to class \"</span> + className);</span><br><span class=\"line\">        CtMethod doExecMethod = clazz.getDeclaredMethod(<span class=\"string\">\"doExec\"</span>);</span><br><span class=\"line\">        CtMethod newDoExecMethod = CtNewMethod.copy(doExecMethod, <span class=\"string\">\"doExec\"</span>, clazz, (ClassMap)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        doExecMethod.setName(<span class=\"string\">\"original$doExec$method$renamed$by$trace\"</span>);</span><br><span class=\"line\">        doExecMethod.setModifiers(doExecMethod.getModifiers() &amp; -<span class=\"number\">2</span> | <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//java.lang.Object backup = com.ezlippi.trace.agent.context.TraceContextUtil.backupAndSet(this.context$field$add$by$trace);</span></span><br><span class=\"line\">        <span class=\"comment\">//try &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//   return original$doExec$method$renamed$by$trace($$);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125; finally &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    TraceContextUtil.restoreBackup(backup);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">        newDoExecMethod.setBody(<span class=\"string\">\"&#123;\\njava.lang.Object backup = com.ezlippi.trace.agent.context.TraceContextUtil.backupAndSet(context$field$add$by$trace);\\ntry &#123;\\n    return original$doExec$method$renamed$by$trace($$);\\n&#125; finally &#123;\\n    com.ezlippi.trace.agent.context.TraceContextUtil.restoreBackup(backup);\\n&#125;\\n&#125;\"</span>);</span><br><span class=\"line\">        clazz.addMethod(newDoExecMethod);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"insert code around method \"</span> + doExecMethod + <span class=\"string\">\" of class \"</span> + className);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来就是添加一个ClassFileTransformer,JVM启动时会传递Instrumentation对象给javaagent的preMain()方法,我们只需要往instrumentation中注册一个ClassFileTransformer实例,jvm在加载类时会把解析后的class字节数组传递给\nClassFileTransformer,执行修改逻辑后把字节数组返回给jvm.\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TlTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ClassFileTransformer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;TraceTransformer&gt; transformers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TlTransformer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transformers.add(<span class=\"keyword\">new</span> ForkJoinPoolTransformer());</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transformers.add(<span class=\"keyword\">new</span> ThreadPoolTransformer());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] transform(ClassLoader loader, String classFile, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"keyword\">byte</span>[] classFileBuffer) <span class=\"keyword\">throws</span> IllegalClassFormatException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classFile == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            String className = <span class=\"keyword\">this</span>.toClassName(classFile);</span><br><span class=\"line\">            Iterator iterator = <span class=\"keyword\">this</span>.transformers.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</span><br><span class=\"line\">                TraceTransformer transformer = (TraceTransformer)iterator.next();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (transformer.needTransform(className)) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Transforming class \"</span> + className);</span><br><span class=\"line\">                    CtClass clazz = <span class=\"keyword\">this</span>.getCtClass(classFileBuffer, loader);</span><br><span class=\"line\">                    transformer.doTransform(clazz);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> clazz.toBytecode();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            String msg = <span class=\"string\">\"Fail to transform class \"</span> + classFile + <span class=\"string\">\", cause: \"</span> + throwable.toString();</span><br><span class=\"line\">            System.out.println(msg);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(msg, throwable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">toClassName</span><span class=\"params\">(String classFile)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> classFile.replace(<span class=\"string\">'/'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> CtClass <span class=\"title\">getCtClass</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] classFileBuffer, ClassLoader classLoader)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ClassPool classPool = <span class=\"keyword\">new</span> ClassPool(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != classLoader) &#123;</span><br><span class=\"line\">            classPool.appendClassPath(<span class=\"keyword\">new</span> LoaderClassPath(classLoader));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        CtClass clazz = classPool.makeClass(<span class=\"keyword\">new</span> ByteArrayInputStream(classFileBuffer), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        clazz.defrost();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceAgent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\">        ClassFileTransformer transformer = <span class=\"keyword\">new</span> TlTransformer();</span><br><span class=\"line\">        instrumentation.addTransformer(transformer, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为修改了JDK的标准库的类，标准库由bootstrap class loader加载,上面修改后的ThreadPoolExecutor和ForkJoinTask类引用了agent的代码，所以agent的Jar需要加到boot class path上,可以通过maven-jar-plugin在agent jar的manifest添加Boot-Class-Path这个入口.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-jar-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Premain-Class</span>&gt;</span>com.ezlippi.trace.agent.TraceAgent<span class=\"tag\">&lt;/<span class=\"name\">Premain-Class</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Boot-Class-Path</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">Boot-Class-Path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Can-Redefine-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Redefine-Classes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Can-Retransform-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Retransform-Classes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Can-Set-Native-Method-Prefix</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">Can-Set-Native-Method-Prefix</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最后在Java的启动参数加上：-javaagent:path/to/trace-agent-x.x.x.jar后就大功告成了.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在分布式系统的上下文传递过程中，需要传递的信息一般包括traceID、 spanID以及部分请求参数等,可以分为以下几种场景:</p>\n<p>在同一线程内传递\n跨线程传递\n跨应用传递\n在同一个线程内传递比较简单,通过ThreadLocal就能解决上下文传递的问题,如果是跨线程传递,大家可能会想到jdk里的实现java.lang.InheritableThreadLocal,它拥有和线程变量ThreadLocal一样的功能，并且在当前线程上创建一个新的线程实例时，会把这些线程变量从当前线程传递给新的线程实例.但是在实际的应用场景里，绝大多数都是使用线程池来进行多线程编程，线程由线程池创建好，并且线程是池化起来反复使用,这时父子线程关系的ThreadLocal值传递已经没有意义，应用需要的实际上是把任务提交给线程池时的ThreadLocal值传递到任务执行时。所以jdk提供的inheritableThreadLocals类实用性不高,在线程池(ThreadPoolExecutor)中运行一个Runable实例并不会去新建一个线程，而是把Runable实例添加到队列中(在核心线程数已实例化满的时候),让ThreadPoolExecutor的workers去从队列里拿出Runable实例（这是一个典型的生产者消费者模式),然后运行Runable实例.run()方法,故jdk的inheritableThreadLocals这种实现方式没法适用。</p>\n<p>这篇文章主要介绍基于字节码修改的方法修改ThreadPoolExecutor和ForkJoinTask的字节码,实现非侵入式的上下文传递,我们先来看一下如果通过侵入式方式定制线程池怎么解决上下文传递,假设我们的调用链通过TraceContext类来保存上下文信息:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceContext</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Object&gt; CONTEXT = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CONTEXT.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setContext</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        CONTEXT.set(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">removeContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CONTEXT.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先定义2个类,分别继承自<code>Runnable</code>和<code>Callable</code>,目的在于初始化<code>Runnable</code>和<code>Callable</code>实例时保存调用线程的上下文信息到,在执行<code>run()</code>或者<code>call()</code>方法时,先把调用线程的上下文信息设置到当前执行的线程中,<code>run()/call()</code>方法执行后恢复执行线程的上下文,这2个类分别为<code>TraceRunnable</code>和<code>TraceCallable</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在初始化TraceRunnable时会获取调用线程的上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object context = TraceContext.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable runnable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TraceRunnable</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.runnable = runnable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object backup = TraceContextUtil.backupAndSet(<span class=\"keyword\">this</span>.context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.runnable.run();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            TraceContextUtil.restoreBackup(backup);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Runnable <span class=\"title\">getRunnable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.runnable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TraceRunnable <span class=\"title\">get</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runnable == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> runnable <span class=\"keyword\">instanceof</span> TraceRunnable ? (TraceRunnable)runnable : <span class=\"keyword\">new</span> TraceRunnable(runnable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceCallable</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在初始化TraceCallable时会获取调用线程的上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object context = TraceContext.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Callable&lt;V&gt; callable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TraceCallable</span><span class=\"params\">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callable = callable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object backup = TraceContextUtil.backupAndSet(<span class=\"keyword\">this</span>.context);</span><br><span class=\"line\"></span><br><span class=\"line\">        V result;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            result = <span class=\"keyword\">this</span>.callable.call();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            TraceContextUtil.restoreBackup(backup);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Callable&lt;V&gt; <span class=\"title\">getCallable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.callable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回TraceCallable实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">TraceCallable&lt;T&gt; <span class=\"title\">get</span><span class=\"params\">(Callable&lt;T&gt; callable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callable == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callable <span class=\"keyword\">instanceof</span> TraceCallable ? (TraceCallable)callable : <span class=\"keyword\">new</span> TraceCallable(callable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceContextUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置调用线程的上下文到当前执行线程中,并返回执行线程之前的上下文</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">backupAndSet</span><span class=\"params\">(Object currentContext)</span> </span>&#123;</span><br><span class=\"line\">        Object backupContext = TraceContext.getContext();</span><br><span class=\"line\">        TraceContext.setContext(currentContext);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> backupContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//恢复执行线程的上下文</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">restoreBackup</span><span class=\"params\">(Object backup)</span> </span>&#123;</span><br><span class=\"line\">        TraceContext.setContext(backup);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来就是定制线程池,重写<code>execute</code>和<code>submit</code>方法,把<code>Runnable/Callable</code>实例封装成<code>TraceRunnable/TraceCallable</code>,这样就把调用线程的上下文信息传递到线程池内部:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">java</span>.<span class=\"title\">util</span>.<span class=\"title\">concurrent</span>.<span class=\"title\">ThreadPoolExecutor</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">        TraceRunnable traceRunnable = <span class=\"keyword\">new</span> TraceRunnable(runnable);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.execute(traceRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class=\"line\">        TraceRunnable traceRunnable = <span class=\"keyword\">new</span> TraceRunnable(runnable);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.submit(traceRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class=\"line\">         TraceCallable traceCallable = <span class=\"keyword\">new</span> TraceCallable(task);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.submit(traceCallable);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>上面的方法虽然实现了上下文跨线程传递,在Runnable/Callable方法内部可以通过TraceContext.getContext()来获取上下文信息,但前提是异步处理都要使用TraceThreadPoolExecutor来提交任务,这样对代码具有侵入性,需要业务做改造,\n为了减少业务开发人员的工作量，使用 javaagent和instrument技术，利用字节码修改技术修改ThreadPoolExecutor和ScheduledThreadPoolExecutor类的字节码,也就是说,只要在JVM参数里加上了javaagent的配置，不需要直接使用上面的TraceRunnable/TraceCallable包装类，也不需要使用TraceThreadPoolExecutor,即可实现上下文信息的自动传递。</p>\n<p>对于<code>ThreadPoolExecutor</code>和<code>ScheduledThreadPoolExecutor</code>,只需要修改它们的<code>execute/submit/schedule/scheduleAtFixedRate/scheduleWithFixedDelay</code>这些方法的字节码,逻辑和前面介绍的一致:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TraceTransformer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">needTransform</span><span class=\"params\">(String className)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doTransform</span><span class=\"params\">(CtClass var1)</span> <span class=\"keyword\">throws</span> NotFoundException, CannotCompileException, IOException</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">TraceTransformer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TRACE_RUNNABLE_CLASS_NAME = TraceRunnable<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TRACE_CALLABLE_CLASS_NAME = TraceCallable<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Set&lt;String&gt; TO_TRANSFORM_METHODS = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        TO_TRANSFORM_METHODS.add(<span class=\"string\">\"execute\"</span>);</span><br><span class=\"line\">        TO_TRANSFORM_METHODS.add(<span class=\"string\">\"submit\"</span>);</span><br><span class=\"line\">        TO_TRANSFORM_METHODS.add(<span class=\"string\">\"schedule\"</span>);</span><br><span class=\"line\">        TO_TRANSFORM_METHODS.add(<span class=\"string\">\"scheduleAtFixedRate\"</span>);</span><br><span class=\"line\">        TO_TRANSFORM_METHODS.add(<span class=\"string\">\"scheduleWithFixedDelay\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">needTransform</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"java.util.concurrent.ThreadPoolExecutor\"</span>.equals(className)</span><br><span class=\"line\">                || <span class=\"string\">\"java.util.concurrent.ScheduledThreadPoolExecutor\"</span>.equals(className);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doTransform</span><span class=\"params\">(CtClass clazz)</span> <span class=\"keyword\">throws</span> NotFoundException, CannotCompileException, IOException </span>&#123;</span><br><span class=\"line\">        CtMethod[] methods = clazz.getDeclaredMethods();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = methods.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; ++i) &#123;</span><br><span class=\"line\">            CtMethod method = methods[i];</span><br><span class=\"line\">            transformMethod(clazz, method);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">transformMethod</span><span class=\"params\">(CtClass clazz, CtMethod method)</span> <span class=\"keyword\">throws</span> NotFoundException, CannotCompileException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TO_TRANSFORM_METHODS.contains(method.getName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.getDeclaringClass() == clazz) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> modifiers = method.getModifiers();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Modifier.isPublic(modifiers) &amp;&amp; !Modifier.isStatic(modifiers)) &#123;</span><br><span class=\"line\">                    CtClass[] parameterTypes = method.getParameterTypes();</span><br><span class=\"line\">                    StringBuilder insertCode = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parameterTypes.length; ++i) &#123;</span><br><span class=\"line\">                        CtClass parameterType = parameterTypes[i];</span><br><span class=\"line\">                        String code;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"string\">\"java.lang.Runnable\"</span>.equals(parameterType.getName())) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//$1 = TraceRunnable.get($1)返回TraceRunnable实例</span></span><br><span class=\"line\">                            code = String.format(<span class=\"string\">\"$%d = %s.get($%d);\"</span>, i + <span class=\"number\">1</span>, TRACE_RUNNABLE_CLASS_NAME, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"insert code before method \"</span> + method + <span class=\"string\">\" of class \"</span> + method.getDeclaringClass().getName() + <span class=\"string\">\": \"</span> + code);</span><br><span class=\"line\">                            insertCode.append(code);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"java.util.concurrent.Callable\"</span>.equals(parameterType.getName())) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//$1 = TraceCallable.get($1)返回TraceCallable实例</span></span><br><span class=\"line\">                            code = String.format(<span class=\"string\">\"$%d = %s.get($%d);\"</span>, i + <span class=\"number\">1</span>, TRACE_CALLABLE_CLASS_NAME, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"insert code before method \"</span> + method + <span class=\"string\">\" of class \"</span> + method.getDeclaringClass().getName() + <span class=\"string\">\": \"</span> + code);</span><br><span class=\"line\">                            insertCode.append(code);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (insertCode.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        method.insertBefore(insertCode.toString());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于ForkJoinPool, 做法也类似,这里换一种修改方式,主要为了熟悉下javassist的语法,这次是在ForkJoinTask里添加一个context$field$add$by$trace字段,在初始化ForkJoinTask实例自动获取调用线程的上下文(TraceContext.getContext()),并修改ForkJoinTask的doExec()方法,修改逻辑和前面的一样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoinPoolTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">TraceTransformer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FORK_JOIN_TASK_CLASS_NAME = <span class=\"string\">\"java.util.concurrent.ForkJoinTask\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">needTransform</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FORK_JOIN_TASK_CLASS_NAME.equals(className);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doTransform</span><span class=\"params\">(CtClass clazz)</span> <span class=\"keyword\">throws</span> NotFoundException, CannotCompileException, IOException </span>&#123;</span><br><span class=\"line\">        String className = clazz.getName();</span><br><span class=\"line\">        <span class=\"comment\">//添加context$field$add$by$trace字段,初始值为TraceContext.getContext(),这样就获取了调用线程的上下文</span></span><br><span class=\"line\">        CtField contextField = CtField.make(<span class=\"string\">\"private final java.lang.Object context$field$add$by$trace;\"</span>, clazz);</span><br><span class=\"line\">        clazz.addField(contextField, <span class=\"string\">\"com.ezlippi.trace.agent.context.TraceContext.getContext();\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"add new field context$field$add$by$trace to class \"</span> + className);</span><br><span class=\"line\">        CtMethod doExecMethod = clazz.getDeclaredMethod(<span class=\"string\">\"doExec\"</span>);</span><br><span class=\"line\">        CtMethod newDoExecMethod = CtNewMethod.copy(doExecMethod, <span class=\"string\">\"doExec\"</span>, clazz, (ClassMap)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        doExecMethod.setName(<span class=\"string\">\"original$doExec$method$renamed$by$trace\"</span>);</span><br><span class=\"line\">        doExecMethod.setModifiers(doExecMethod.getModifiers() &amp; -<span class=\"number\">2</span> | <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//java.lang.Object backup = com.ezlippi.trace.agent.context.TraceContextUtil.backupAndSet(this.context$field$add$by$trace);</span></span><br><span class=\"line\">        <span class=\"comment\">//try &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//   return original$doExec$method$renamed$by$trace($$);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125; finally &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    TraceContextUtil.restoreBackup(backup);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">        newDoExecMethod.setBody(<span class=\"string\">\"&#123;\\njava.lang.Object backup = com.ezlippi.trace.agent.context.TraceContextUtil.backupAndSet(context$field$add$by$trace);\\ntry &#123;\\n    return original$doExec$method$renamed$by$trace($$);\\n&#125; finally &#123;\\n    com.ezlippi.trace.agent.context.TraceContextUtil.restoreBackup(backup);\\n&#125;\\n&#125;\"</span>);</span><br><span class=\"line\">        clazz.addMethod(newDoExecMethod);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"insert code around method \"</span> + doExecMethod + <span class=\"string\">\" of class \"</span> + className);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来就是添加一个ClassFileTransformer,JVM启动时会传递Instrumentation对象给javaagent的preMain()方法,我们只需要往instrumentation中注册一个ClassFileTransformer实例,jvm在加载类时会把解析后的class字节数组传递给\nClassFileTransformer,执行修改逻辑后把字节数组返回给jvm.\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TlTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ClassFileTransformer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;TraceTransformer&gt; transformers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TlTransformer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transformers.add(<span class=\"keyword\">new</span> ForkJoinPoolTransformer());</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transformers.add(<span class=\"keyword\">new</span> ThreadPoolTransformer());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] transform(ClassLoader loader, String classFile, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"keyword\">byte</span>[] classFileBuffer) <span class=\"keyword\">throws</span> IllegalClassFormatException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classFile == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            String className = <span class=\"keyword\">this</span>.toClassName(classFile);</span><br><span class=\"line\">            Iterator iterator = <span class=\"keyword\">this</span>.transformers.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</span><br><span class=\"line\">                TraceTransformer transformer = (TraceTransformer)iterator.next();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (transformer.needTransform(className)) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Transforming class \"</span> + className);</span><br><span class=\"line\">                    CtClass clazz = <span class=\"keyword\">this</span>.getCtClass(classFileBuffer, loader);</span><br><span class=\"line\">                    transformer.doTransform(clazz);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> clazz.toBytecode();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            String msg = <span class=\"string\">\"Fail to transform class \"</span> + classFile + <span class=\"string\">\", cause: \"</span> + throwable.toString();</span><br><span class=\"line\">            System.out.println(msg);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(msg, throwable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">toClassName</span><span class=\"params\">(String classFile)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> classFile.replace(<span class=\"string\">'/'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> CtClass <span class=\"title\">getCtClass</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] classFileBuffer, ClassLoader classLoader)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ClassPool classPool = <span class=\"keyword\">new</span> ClassPool(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != classLoader) &#123;</span><br><span class=\"line\">            classPool.appendClassPath(<span class=\"keyword\">new</span> LoaderClassPath(classLoader));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        CtClass clazz = classPool.makeClass(<span class=\"keyword\">new</span> ByteArrayInputStream(classFileBuffer), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        clazz.defrost();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraceAgent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\">        ClassFileTransformer transformer = <span class=\"keyword\">new</span> TlTransformer();</span><br><span class=\"line\">        instrumentation.addTransformer(transformer, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为修改了JDK的标准库的类，标准库由bootstrap class loader加载,上面修改后的ThreadPoolExecutor和ForkJoinTask类引用了agent的代码，所以agent的Jar需要加到boot class path上,可以通过maven-jar-plugin在agent jar的manifest添加Boot-Class-Path这个入口.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-jar-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Premain-Class</span>&gt;</span>com.ezlippi.trace.agent.TraceAgent<span class=\"tag\">&lt;/<span class=\"name\">Premain-Class</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Boot-Class-Path</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">Boot-Class-Path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Can-Redefine-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Redefine-Classes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Can-Retransform-Classes</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Can-Retransform-Classes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Can-Set-Native-Method-Prefix</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">Can-Set-Native-Method-Prefix</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最后在Java的启动参数加上：-javaagent:path/to/trace-agent-x.x.x.jar后就大功告成了.</p>\n"},{"title":"负载均衡算法","date":"2018-11-20T07:15:05.000Z","_content":"\n负载平衡（Load balancing）是一种计算机技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最优化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。 使用带有负载平衡的多个服务器组件，取代单一的组件，可以通过冗余提高可靠性。负载平衡服务通常是由专用软件和硬件来完成。 主要作用是将大量作业合理地分摊到多个操作单元上进行执行，用于解决互联网架构中的高并发和高可用的问题。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n---\n<!-- more -->\n\n\n<br/>\n### 轮询（Round Robin）\n```java\n\n```\n\n<br/>\n### 加权轮询（Weight Round Robin）\n```java\npublic class RoundRobinLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"roundrobin\";\n\n    private final ConcurrentMap<String, AtomicPositiveInteger> sequences = new ConcurrentHashMap<String, AtomicPositiveInteger>();\n\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        String key = invokers.get(0).getUrl().getServiceKey() + \".\" + invocation.getMethodName();\n        int length = invokers.size(); // 总个数\n        int maxWeight = 0; // 最大权重\n        int minWeight = Integer.MAX_VALUE; // 最小权重\n        final LinkedHashMap<Invoker<T>, IntegerWrapper> invokerToWeightMap = new LinkedHashMap<Invoker<T>, IntegerWrapper>();\n        int weightSum = 0;\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            maxWeight = Math.max(maxWeight, weight); // 累计最大权重\n            minWeight = Math.min(minWeight, weight); // 累计最小权重\n            if (weight > 0) {\n                invokerToWeightMap.put(invokers.get(i), new IntegerWrapper(weight));\n                weightSum += weight;\n            }\n        }\n        AtomicPositiveInteger sequence = sequences.get(key);\n        if (sequence == null) {\n            sequences.putIfAbsent(key, new AtomicPositiveInteger());\n            sequence = sequences.get(key);\n        }\n        int currentSequence = sequence.getAndIncrement();\n        if (maxWeight > 0 && minWeight < maxWeight) { // 权重不一样\n            int mod = currentSequence % weightSum;\n            for (int i = 0; i < maxWeight; i++) {\n                for (Map.Entry<Invoker<T>, IntegerWrapper> each : invokerToWeightMap.entrySet()) {\n                    final Invoker<T> k = each.getKey();\n                    final IntegerWrapper v = each.getValue();\n                    if (mod == 0 && v.getValue() > 0) {\n                        return k;\n                    }\n                    if (v.getValue() > 0) {\n                        v.decrement();\n                        mod--;\n                    }\n                }\n            }\n        }\n        // 取模轮循\n        return invokers.get(currentSequence % length);\n    }\n\n    private static final class IntegerWrapper {\n        private int value;\n\n        public IntegerWrapper(int value) {\n            this.value = value;\n        }\n\n        public int getValue() {\n            return value;\n        }\n\n        public void setValue(int value) {\n            this.value = value;\n        }\n\n        public void decrement() {\n            this.value--;\n        }\n    }\n\n}\n```\n\n\n<br/>\n### 随机（Random）\n```java\n\n```\n\n\n<br/>\n### 加权随机（Weight Random）\n```java\npublic class RandomLoadBalance extends AbstractLoadBalance {\n\n    private final Random random = new Random();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, Invocation invocation) {\n        int length = invokers.size(); // 总个数\n        int totalWeight = 0; // 总权重\n        boolean sameWeight = true; // 权重是否都一样\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            totalWeight += weight; // 累计总权重\n            if (sameWeight && i > 0\n                    && weight != getWeight(invokers.get(i - 1), invocation)) {\n                sameWeight = false; // 计算所有权重是否一样\n            }\n        }\n        if (totalWeight > 0 && !sameWeight) {\n            // 如果权重不相同且权重大于0则按总权重数随机\n            int offset = random.nextInt(totalWeight);\n            // 并确定随机值落在哪个片断上\n            for (int i = 0; i < length; i++) {\n                offset -= getWeight(invokers.get(i), invocation);\n                if (offset < 0) {\n                    return invokers.get(i);\n                }\n            }\n        }\n        // 如果权重相同或权重为0则均等随机\n        return invokers.get(random.nextInt(length));\n    }\n\n}\n```\n\n\n<br/>\n### 源地址哈希（Hash）\n```java\n\n```\n\n<br/>\n### 一致性哈希（ConsistentHash）\n```java\npublic class ConsistentHashLoadBalance extends AbstractLoadBalance {\n\n    private final ConcurrentMap<String, ConsistentHashSelector<?>> selectors = new ConcurrentHashMap<String, ConsistentHashSelector<?>>();\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        String key = invokers.get(0).getUrl().getServiceKey() + \".\" + invocation.getMethodName();\n        int identityHashCode = System.identityHashCode(invokers);\n        ConsistentHashSelector<T> selector = (ConsistentHashSelector<T>) selectors.get(key);\n        if (selector == null || selector.identityHashCode != identityHashCode) {\n            selectors.put(key, new ConsistentHashSelector<T>(invokers, invocation.getMethodName(), identityHashCode));\n            selector = (ConsistentHashSelector<T>) selectors.get(key);\n        }\n        return selector.select(invocation);\n    }\n\n    private static final class ConsistentHashSelector<T> {\n\n        private final TreeMap<Long, Invoker<T>> virtualInvokers;\n\n        private final int replicaNumber;\n\n        private final int identityHashCode;\n\n        private final int[] argumentIndex;\n\n        ConsistentHashSelector(List<Invoker<T>> invokers, String methodName, int identityHashCode) {\n            this.virtualInvokers = new TreeMap<Long, Invoker<T>>();\n            this.identityHashCode = identityHashCode;\n            URL url = invokers.get(0).getUrl();\n            this.replicaNumber = url.getMethodParameter(methodName, \"hash.nodes\", 160);\n            String[] index = Constants.COMMA_SPLIT_PATTERN.split(url.getMethodParameter(methodName, \"hash.arguments\", \"0\"));\n            argumentIndex = new int[index.length];\n            for (int i = 0; i < index.length; i++) {\n                argumentIndex[i] = Integer.parseInt(index[i]);\n            }\n            for (Invoker<T> invoker : invokers) {\n                String address = invoker.getUrl().getAddress();\n                for (int i = 0; i < replicaNumber / 4; i++) {\n                    byte[] digest = md5(address + i);\n                    for (int h = 0; h < 4; h++) {\n                        long m = hash(digest, h);\n                        virtualInvokers.put(m, invoker);\n                    }\n                }\n            }\n        }\n\n        public Invoker<T> select(Invocation invocation) {\n            String key = toKey(invocation.getArguments());\n            byte[] digest = md5(key);\n            return selectForKey(hash(digest, 0));\n        }\n\n        private String toKey(Object[] args) {\n            StringBuilder buf = new StringBuilder();\n            for (int i : argumentIndex) {\n                if (i >= 0 && i < args.length) {\n                    buf.append(args[i]);\n                }\n            }\n            return buf.toString();\n        }\n\n        private Invoker<T> selectForKey(long hash) {\n            Invoker<T> invoker;\n            Long key = hash;\n            if (!virtualInvokers.containsKey(key)) {\n                SortedMap<Long, Invoker<T>> tailMap = virtualInvokers.tailMap(key);\n                if (tailMap.isEmpty()) {\n                    key = virtualInvokers.firstKey();\n                } else {\n                    key = tailMap.firstKey();\n                }\n            }\n            invoker = virtualInvokers.get(key);\n            return invoker;\n        }\n\n        private long hash(byte[] digest, int number) {\n            return (((long) (digest[3 + number * 4] & 0xFF) << 24)\n                    | ((long) (digest[2 + number * 4] & 0xFF) << 16)\n                    | ((long) (digest[1 + number * 4] & 0xFF) << 8)\n                    | (digest[number * 4] & 0xFF))\n                    & 0xFFFFFFFFL;\n        }\n\n        private byte[] md5(String value) {\n            MessageDigest md5;\n            try {\n                md5 = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException e) {\n                throw new IllegalStateException(e.getMessage(), e);\n            }\n            md5.reset();\n            byte[] bytes;\n            try {\n                bytes = value.getBytes(\"UTF-8\");\n            } catch (UnsupportedEncodingException e) {\n                throw new IllegalStateException(e.getMessage(), e);\n            }\n            md5.update(bytes);\n            return md5.digest();\n        }\n\n    }\n\n}\n```\n\n<br/>\n### 最小连接数（Least Connections）\n```java\npublic class LeastActiveLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"leastactive\";\n\n    private final Random random = new Random();\n\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        int length = invokers.size(); // 总个数\n        int leastActive = -1; // 最小的活跃数\n        int leastCount = 0; // 相同最小活跃数的个数\n        int[] leastIndexs = new int[length]; // 相同最小活跃数的下标\n        int totalWeight = 0; // 总权重\n        int firstWeight = 0; // 第一个权重，用于于计算是否相同\n        boolean sameWeight = true; // 是否所有权重相同\n        for (int i = 0; i < length; i++) {\n            Invoker<T> invoker = invokers.get(i);\n            int active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive(); // 活跃数\n            int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); // 权重\n            if (leastActive == -1 || active < leastActive) { // 发现更小的活跃数，重新开始\n                leastActive = active; // 记录最小活跃数\n                leastCount = 1; // 重新统计相同最小活跃数的个数\n                leastIndexs[0] = i; // 重新记录最小活跃数下标\n                totalWeight = weight; // 重新累计总权重\n                firstWeight = weight; // 记录第一个权重\n                sameWeight = true; // 还原权重相同标识\n            } else if (active == leastActive) { // 累计相同最小的活跃数\n                leastIndexs[leastCount++] = i; // 累计相同最小活跃数下标\n                totalWeight += weight; // 累计总权重\n                // 判断所有权重是否一样\n                if (sameWeight && i > 0\n                        && weight != firstWeight) {\n                    sameWeight = false;\n                }\n            }\n        }\n        // assert(leastCount > 0)\n        if (leastCount == 1) {\n            // 如果只有一个最小则直接返回\n            return invokers.get(leastIndexs[0]);\n        }\n        if (!sameWeight && totalWeight > 0) {\n            // 如果权重不相同且权重大于0则按总权重数随机\n            int offsetWeight = random.nextInt(totalWeight);\n            // 并确定随机值落在哪个片断上\n            for (int i = 0; i < leastCount; i++) {\n                int leastIndex = leastIndexs[i];\n                offsetWeight -= getWeight(invokers.get(leastIndex), invocation);\n                if (offsetWeight <= 0)\n                    return invokers.get(leastIndex);\n            }\n        }\n        // 如果权重相同或权重为0则均等随机\n        return invokers.get(leastIndexs[random.nextInt(leastCount)]);\n    }\n}\n```\n\n\n\n<br/>\n<!-- ### 低并发优先（Active Weight）\n```java\n\n``` -->\n\n\n\n\n<br/>\n\n\n\n---\n参考\nwikipedia-负载均衡：https://en.wikipedia.org/wiki/Load_balancing_(computing)\n","source":"_posts/负载均衡算法.md","raw":"---\ntitle: 负载均衡算法\ndate: 2018-11-20 15:15:05\ncategories: \n    - 负载均衡\ntags: \n    - 算法\n    - 负载均衡\n---\n\n负载平衡（Load balancing）是一种计算机技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最优化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。 使用带有负载平衡的多个服务器组件，取代单一的组件，可以通过冗余提高可靠性。负载平衡服务通常是由专用软件和硬件来完成。 主要作用是将大量作业合理地分摊到多个操作单元上进行执行，用于解决互联网架构中的高并发和高可用的问题。\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n---\n<!-- more -->\n\n\n<br/>\n### 轮询（Round Robin）\n```java\n\n```\n\n<br/>\n### 加权轮询（Weight Round Robin）\n```java\npublic class RoundRobinLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"roundrobin\";\n\n    private final ConcurrentMap<String, AtomicPositiveInteger> sequences = new ConcurrentHashMap<String, AtomicPositiveInteger>();\n\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        String key = invokers.get(0).getUrl().getServiceKey() + \".\" + invocation.getMethodName();\n        int length = invokers.size(); // 总个数\n        int maxWeight = 0; // 最大权重\n        int minWeight = Integer.MAX_VALUE; // 最小权重\n        final LinkedHashMap<Invoker<T>, IntegerWrapper> invokerToWeightMap = new LinkedHashMap<Invoker<T>, IntegerWrapper>();\n        int weightSum = 0;\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            maxWeight = Math.max(maxWeight, weight); // 累计最大权重\n            minWeight = Math.min(minWeight, weight); // 累计最小权重\n            if (weight > 0) {\n                invokerToWeightMap.put(invokers.get(i), new IntegerWrapper(weight));\n                weightSum += weight;\n            }\n        }\n        AtomicPositiveInteger sequence = sequences.get(key);\n        if (sequence == null) {\n            sequences.putIfAbsent(key, new AtomicPositiveInteger());\n            sequence = sequences.get(key);\n        }\n        int currentSequence = sequence.getAndIncrement();\n        if (maxWeight > 0 && minWeight < maxWeight) { // 权重不一样\n            int mod = currentSequence % weightSum;\n            for (int i = 0; i < maxWeight; i++) {\n                for (Map.Entry<Invoker<T>, IntegerWrapper> each : invokerToWeightMap.entrySet()) {\n                    final Invoker<T> k = each.getKey();\n                    final IntegerWrapper v = each.getValue();\n                    if (mod == 0 && v.getValue() > 0) {\n                        return k;\n                    }\n                    if (v.getValue() > 0) {\n                        v.decrement();\n                        mod--;\n                    }\n                }\n            }\n        }\n        // 取模轮循\n        return invokers.get(currentSequence % length);\n    }\n\n    private static final class IntegerWrapper {\n        private int value;\n\n        public IntegerWrapper(int value) {\n            this.value = value;\n        }\n\n        public int getValue() {\n            return value;\n        }\n\n        public void setValue(int value) {\n            this.value = value;\n        }\n\n        public void decrement() {\n            this.value--;\n        }\n    }\n\n}\n```\n\n\n<br/>\n### 随机（Random）\n```java\n\n```\n\n\n<br/>\n### 加权随机（Weight Random）\n```java\npublic class RandomLoadBalance extends AbstractLoadBalance {\n\n    private final Random random = new Random();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, Invocation invocation) {\n        int length = invokers.size(); // 总个数\n        int totalWeight = 0; // 总权重\n        boolean sameWeight = true; // 权重是否都一样\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            totalWeight += weight; // 累计总权重\n            if (sameWeight && i > 0\n                    && weight != getWeight(invokers.get(i - 1), invocation)) {\n                sameWeight = false; // 计算所有权重是否一样\n            }\n        }\n        if (totalWeight > 0 && !sameWeight) {\n            // 如果权重不相同且权重大于0则按总权重数随机\n            int offset = random.nextInt(totalWeight);\n            // 并确定随机值落在哪个片断上\n            for (int i = 0; i < length; i++) {\n                offset -= getWeight(invokers.get(i), invocation);\n                if (offset < 0) {\n                    return invokers.get(i);\n                }\n            }\n        }\n        // 如果权重相同或权重为0则均等随机\n        return invokers.get(random.nextInt(length));\n    }\n\n}\n```\n\n\n<br/>\n### 源地址哈希（Hash）\n```java\n\n```\n\n<br/>\n### 一致性哈希（ConsistentHash）\n```java\npublic class ConsistentHashLoadBalance extends AbstractLoadBalance {\n\n    private final ConcurrentMap<String, ConsistentHashSelector<?>> selectors = new ConcurrentHashMap<String, ConsistentHashSelector<?>>();\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        String key = invokers.get(0).getUrl().getServiceKey() + \".\" + invocation.getMethodName();\n        int identityHashCode = System.identityHashCode(invokers);\n        ConsistentHashSelector<T> selector = (ConsistentHashSelector<T>) selectors.get(key);\n        if (selector == null || selector.identityHashCode != identityHashCode) {\n            selectors.put(key, new ConsistentHashSelector<T>(invokers, invocation.getMethodName(), identityHashCode));\n            selector = (ConsistentHashSelector<T>) selectors.get(key);\n        }\n        return selector.select(invocation);\n    }\n\n    private static final class ConsistentHashSelector<T> {\n\n        private final TreeMap<Long, Invoker<T>> virtualInvokers;\n\n        private final int replicaNumber;\n\n        private final int identityHashCode;\n\n        private final int[] argumentIndex;\n\n        ConsistentHashSelector(List<Invoker<T>> invokers, String methodName, int identityHashCode) {\n            this.virtualInvokers = new TreeMap<Long, Invoker<T>>();\n            this.identityHashCode = identityHashCode;\n            URL url = invokers.get(0).getUrl();\n            this.replicaNumber = url.getMethodParameter(methodName, \"hash.nodes\", 160);\n            String[] index = Constants.COMMA_SPLIT_PATTERN.split(url.getMethodParameter(methodName, \"hash.arguments\", \"0\"));\n            argumentIndex = new int[index.length];\n            for (int i = 0; i < index.length; i++) {\n                argumentIndex[i] = Integer.parseInt(index[i]);\n            }\n            for (Invoker<T> invoker : invokers) {\n                String address = invoker.getUrl().getAddress();\n                for (int i = 0; i < replicaNumber / 4; i++) {\n                    byte[] digest = md5(address + i);\n                    for (int h = 0; h < 4; h++) {\n                        long m = hash(digest, h);\n                        virtualInvokers.put(m, invoker);\n                    }\n                }\n            }\n        }\n\n        public Invoker<T> select(Invocation invocation) {\n            String key = toKey(invocation.getArguments());\n            byte[] digest = md5(key);\n            return selectForKey(hash(digest, 0));\n        }\n\n        private String toKey(Object[] args) {\n            StringBuilder buf = new StringBuilder();\n            for (int i : argumentIndex) {\n                if (i >= 0 && i < args.length) {\n                    buf.append(args[i]);\n                }\n            }\n            return buf.toString();\n        }\n\n        private Invoker<T> selectForKey(long hash) {\n            Invoker<T> invoker;\n            Long key = hash;\n            if (!virtualInvokers.containsKey(key)) {\n                SortedMap<Long, Invoker<T>> tailMap = virtualInvokers.tailMap(key);\n                if (tailMap.isEmpty()) {\n                    key = virtualInvokers.firstKey();\n                } else {\n                    key = tailMap.firstKey();\n                }\n            }\n            invoker = virtualInvokers.get(key);\n            return invoker;\n        }\n\n        private long hash(byte[] digest, int number) {\n            return (((long) (digest[3 + number * 4] & 0xFF) << 24)\n                    | ((long) (digest[2 + number * 4] & 0xFF) << 16)\n                    | ((long) (digest[1 + number * 4] & 0xFF) << 8)\n                    | (digest[number * 4] & 0xFF))\n                    & 0xFFFFFFFFL;\n        }\n\n        private byte[] md5(String value) {\n            MessageDigest md5;\n            try {\n                md5 = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException e) {\n                throw new IllegalStateException(e.getMessage(), e);\n            }\n            md5.reset();\n            byte[] bytes;\n            try {\n                bytes = value.getBytes(\"UTF-8\");\n            } catch (UnsupportedEncodingException e) {\n                throw new IllegalStateException(e.getMessage(), e);\n            }\n            md5.update(bytes);\n            return md5.digest();\n        }\n\n    }\n\n}\n```\n\n<br/>\n### 最小连接数（Least Connections）\n```java\npublic class LeastActiveLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"leastactive\";\n\n    private final Random random = new Random();\n\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        int length = invokers.size(); // 总个数\n        int leastActive = -1; // 最小的活跃数\n        int leastCount = 0; // 相同最小活跃数的个数\n        int[] leastIndexs = new int[length]; // 相同最小活跃数的下标\n        int totalWeight = 0; // 总权重\n        int firstWeight = 0; // 第一个权重，用于于计算是否相同\n        boolean sameWeight = true; // 是否所有权重相同\n        for (int i = 0; i < length; i++) {\n            Invoker<T> invoker = invokers.get(i);\n            int active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive(); // 活跃数\n            int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); // 权重\n            if (leastActive == -1 || active < leastActive) { // 发现更小的活跃数，重新开始\n                leastActive = active; // 记录最小活跃数\n                leastCount = 1; // 重新统计相同最小活跃数的个数\n                leastIndexs[0] = i; // 重新记录最小活跃数下标\n                totalWeight = weight; // 重新累计总权重\n                firstWeight = weight; // 记录第一个权重\n                sameWeight = true; // 还原权重相同标识\n            } else if (active == leastActive) { // 累计相同最小的活跃数\n                leastIndexs[leastCount++] = i; // 累计相同最小活跃数下标\n                totalWeight += weight; // 累计总权重\n                // 判断所有权重是否一样\n                if (sameWeight && i > 0\n                        && weight != firstWeight) {\n                    sameWeight = false;\n                }\n            }\n        }\n        // assert(leastCount > 0)\n        if (leastCount == 1) {\n            // 如果只有一个最小则直接返回\n            return invokers.get(leastIndexs[0]);\n        }\n        if (!sameWeight && totalWeight > 0) {\n            // 如果权重不相同且权重大于0则按总权重数随机\n            int offsetWeight = random.nextInt(totalWeight);\n            // 并确定随机值落在哪个片断上\n            for (int i = 0; i < leastCount; i++) {\n                int leastIndex = leastIndexs[i];\n                offsetWeight -= getWeight(invokers.get(leastIndex), invocation);\n                if (offsetWeight <= 0)\n                    return invokers.get(leastIndex);\n            }\n        }\n        // 如果权重相同或权重为0则均等随机\n        return invokers.get(leastIndexs[random.nextInt(leastCount)]);\n    }\n}\n```\n\n\n\n<br/>\n<!-- ### 低并发优先（Active Weight）\n```java\n\n``` -->\n\n\n\n\n<br/>\n\n\n\n---\n参考\nwikipedia-负载均衡：https://en.wikipedia.org/wiki/Load_balancing_(computing)\n","slug":"负载均衡算法","published":1,"updated":"2019-11-02T07:12:18.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y7i006xt6s6q7sijwqg","content":"<p>负载平衡（Load balancing）是一种计算机技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最优化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。 使用带有负载平衡的多个服务器组件，取代单一的组件，可以通过冗余提高可靠性。负载平衡服务通常是由专用软件和硬件来完成。 主要作用是将大量作业合理地分摊到多个操作单元上进行执行，用于解决互联网架构中的高并发和高可用的问题。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>\n<a id=\"more\"></a>\n<p><br></p>\n<h3 id=\"轮询（Round-Robin）\"><a href=\"#轮询（Round-Robin）\" class=\"headerlink\" title=\"轮询（Round Robin）\"></a>轮询（Round Robin）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"加权轮询（Weight-Round-Robin）\"><a href=\"#加权轮询（Weight-Round-Robin）\" class=\"headerlink\" title=\"加权轮询（Weight Round Robin）\"></a>加权轮询（Weight Round Robin）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoundRobinLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"roundrobin\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentMap&lt;String, AtomicPositiveInteger&gt; sequences = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, AtomicPositiveInteger&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class=\"line\">        String key = invokers.get(<span class=\"number\">0</span>).getUrl().getServiceKey() + <span class=\"string\">\".\"</span> + invocation.getMethodName();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size(); <span class=\"comment\">// 总个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxWeight = <span class=\"number\">0</span>; <span class=\"comment\">// 最大权重</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> minWeight = Integer.MAX_VALUE; <span class=\"comment\">// 最小权重</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; invokerToWeightMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> weightSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> weight = getWeight(invokers.get(i), invocation);</span><br><span class=\"line\">            maxWeight = Math.max(maxWeight, weight); <span class=\"comment\">// 累计最大权重</span></span><br><span class=\"line\">            minWeight = Math.min(minWeight, weight); <span class=\"comment\">// 累计最小权重</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                invokerToWeightMap.put(invokers.get(i), <span class=\"keyword\">new</span> IntegerWrapper(weight));</span><br><span class=\"line\">                weightSum += weight;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        AtomicPositiveInteger sequence = sequences.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sequence == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            sequences.putIfAbsent(key, <span class=\"keyword\">new</span> AtomicPositiveInteger());</span><br><span class=\"line\">            sequence = sequences.get(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> currentSequence = sequence.getAndIncrement();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxWeight &gt; <span class=\"number\">0</span> &amp;&amp; minWeight &lt; maxWeight) &#123; <span class=\"comment\">// 权重不一样</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> mod = currentSequence % weightSum;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxWeight; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Map.Entry&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; each : invokerToWeightMap.entrySet()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> Invoker&lt;T&gt; k = each.getKey();</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> IntegerWrapper v = each.getValue();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mod == <span class=\"number\">0</span> &amp;&amp; v.getValue() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v.getValue() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        v.decrement();</span><br><span class=\"line\">                        mod--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取模轮循</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> invokers.get(currentSequence % length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerWrapper</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IntegerWrapper</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrement</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"随机（Random）\"><a href=\"#随机（Random）\" class=\"headerlink\" title=\"随机（Random）\"></a>随机（Random）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"加权随机（Weight-Random）\"><a href=\"#加权随机（Weight-Random）\" class=\"headerlink\" title=\"加权随机（Weight Random）\"></a>加权随机（Weight Random）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, Invocation invocation)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size(); <span class=\"comment\">// 总个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalWeight = <span class=\"number\">0</span>; <span class=\"comment\">// 总权重</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> sameWeight = <span class=\"keyword\">true</span>; <span class=\"comment\">// 权重是否都一样</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> weight = getWeight(invokers.get(i), invocation);</span><br><span class=\"line\">            totalWeight += weight; <span class=\"comment\">// 累计总权重</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sameWeight &amp;&amp; i &gt; <span class=\"number\">0</span></span><br><span class=\"line\">                    &amp;&amp; weight != getWeight(invokers.get(i - <span class=\"number\">1</span>), invocation)) &#123;</span><br><span class=\"line\">                sameWeight = <span class=\"keyword\">false</span>; <span class=\"comment\">// 计算所有权重是否一样</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (totalWeight &gt; <span class=\"number\">0</span> &amp;&amp; !sameWeight) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果权重不相同且权重大于0则按总权重数随机</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> offset = random.nextInt(totalWeight);</span><br><span class=\"line\">            <span class=\"comment\">// 并确定随机值落在哪个片断上</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">                offset -= getWeight(invokers.get(i), invocation);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (offset &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> invokers.get(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果权重相同或权重为0则均等随机</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> invokers.get(random.nextInt(length));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"源地址哈希（Hash）\"><a href=\"#源地址哈希（Hash）\" class=\"headerlink\" title=\"源地址哈希（Hash）\"></a>源地址哈希（Hash）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"一致性哈希（ConsistentHash）\"><a href=\"#一致性哈希（ConsistentHash）\" class=\"headerlink\" title=\"一致性哈希（ConsistentHash）\"></a>一致性哈希（ConsistentHash）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsistentHashLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt; selectors = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class=\"line\">        String key = invokers.get(<span class=\"number\">0</span>).getUrl().getServiceKey() + <span class=\"string\">\".\"</span> + invocation.getMethodName();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> identityHashCode = System.identityHashCode(invokers);</span><br><span class=\"line\">        ConsistentHashSelector&lt;T&gt; selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selector == <span class=\"keyword\">null</span> || selector.identityHashCode != identityHashCode) &#123;</span><br><span class=\"line\">            selectors.put(key, <span class=\"keyword\">new</span> ConsistentHashSelector&lt;T&gt;(invokers, invocation.getMethodName(), identityHashCode));</span><br><span class=\"line\">            selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> selector.select(invocation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsistentHashSelector</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TreeMap&lt;Long, Invoker&lt;T&gt;&gt; virtualInvokers;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> replicaNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> identityHashCode;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] argumentIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">        ConsistentHashSelector(List&lt;Invoker&lt;T&gt;&gt; invokers, String methodName, <span class=\"keyword\">int</span> identityHashCode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.virtualInvokers = <span class=\"keyword\">new</span> TreeMap&lt;Long, Invoker&lt;T&gt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.identityHashCode = identityHashCode;</span><br><span class=\"line\">            URL url = invokers.get(<span class=\"number\">0</span>).getUrl();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.replicaNumber = url.getMethodParameter(methodName, <span class=\"string\">\"hash.nodes\"</span>, <span class=\"number\">160</span>);</span><br><span class=\"line\">            String[] index = Constants.COMMA_SPLIT_PATTERN.split(url.getMethodParameter(methodName, <span class=\"string\">\"hash.arguments\"</span>, <span class=\"string\">\"0\"</span>));</span><br><span class=\"line\">            argumentIndex = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[index.length];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index.length; i++) &#123;</span><br><span class=\"line\">                argumentIndex[i] = Integer.parseInt(index[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class=\"line\">                String address = invoker.getUrl().getAddress();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; replicaNumber / <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">byte</span>[] digest = md5(address + i);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; h &lt; <span class=\"number\">4</span>; h++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">long</span> m = hash(digest, h);</span><br><span class=\"line\">                        virtualInvokers.put(m, invoker);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Invoker&lt;T&gt; <span class=\"title\">select</span><span class=\"params\">(Invocation invocation)</span> </span>&#123;</span><br><span class=\"line\">            String key = toKey(invocation.getArguments());</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] digest = md5(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> selectForKey(hash(digest, <span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">toKey</span><span class=\"params\">(Object[] args)</span> </span>&#123;</span><br><span class=\"line\">            StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : argumentIndex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; args.length) &#123;</span><br><span class=\"line\">                    buf.append(args[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> buf.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Invoker&lt;T&gt; <span class=\"title\">selectForKey</span><span class=\"params\">(<span class=\"keyword\">long</span> hash)</span> </span>&#123;</span><br><span class=\"line\">            Invoker&lt;T&gt; invoker;</span><br><span class=\"line\">            Long key = hash;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!virtualInvokers.containsKey(key)) &#123;</span><br><span class=\"line\">                SortedMap&lt;Long, Invoker&lt;T&gt;&gt; tailMap = virtualInvokers.tailMap(key);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tailMap.isEmpty()) &#123;</span><br><span class=\"line\">                    key = virtualInvokers.firstKey();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    key = tailMap.firstKey();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            invoker = virtualInvokers.get(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> invoker;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">hash</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] digest, <span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (((<span class=\"keyword\">long</span>) (digest[<span class=\"number\">3</span> + number * <span class=\"number\">4</span>] &amp; <span class=\"number\">0xFF</span>) &lt;&lt; <span class=\"number\">24</span>)</span><br><span class=\"line\">                    | ((<span class=\"keyword\">long</span>) (digest[<span class=\"number\">2</span> + number * <span class=\"number\">4</span>] &amp; <span class=\"number\">0xFF</span>) &lt;&lt; <span class=\"number\">16</span>)</span><br><span class=\"line\">                    | ((<span class=\"keyword\">long</span>) (digest[<span class=\"number\">1</span> + number * <span class=\"number\">4</span>] &amp; <span class=\"number\">0xFF</span>) &lt;&lt; <span class=\"number\">8</span>)</span><br><span class=\"line\">                    | (digest[number * <span class=\"number\">4</span>] &amp; <span class=\"number\">0xFF</span>))</span><br><span class=\"line\">                    &amp; <span class=\"number\">0xFFFFFFFFL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] md5(String value) &#123;</span><br><span class=\"line\">            MessageDigest md5;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                md5 = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            md5.reset();</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                bytes = value.getBytes(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            md5.update(bytes);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> md5.digest();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"最小连接数（Least-Connections）\"><a href=\"#最小连接数（Least-Connections）\" class=\"headerlink\" title=\"最小连接数（Least Connections）\"></a>最小连接数（Least Connections）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeastActiveLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"leastactive\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size(); <span class=\"comment\">// 总个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> leastActive = -<span class=\"number\">1</span>; <span class=\"comment\">// 最小的活跃数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> leastCount = <span class=\"number\">0</span>; <span class=\"comment\">// 相同最小活跃数的个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] leastIndexs = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length]; <span class=\"comment\">// 相同最小活跃数的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalWeight = <span class=\"number\">0</span>; <span class=\"comment\">// 总权重</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> firstWeight = <span class=\"number\">0</span>; <span class=\"comment\">// 第一个权重，用于于计算是否相同</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> sameWeight = <span class=\"keyword\">true</span>; <span class=\"comment\">// 是否所有权重相同</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            Invoker&lt;T&gt; invoker = invokers.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive(); <span class=\"comment\">// 活跃数</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); <span class=\"comment\">// 权重</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (leastActive == -<span class=\"number\">1</span> || active &lt; leastActive) &#123; <span class=\"comment\">// 发现更小的活跃数，重新开始</span></span><br><span class=\"line\">                leastActive = active; <span class=\"comment\">// 记录最小活跃数</span></span><br><span class=\"line\">                leastCount = <span class=\"number\">1</span>; <span class=\"comment\">// 重新统计相同最小活跃数的个数</span></span><br><span class=\"line\">                leastIndexs[<span class=\"number\">0</span>] = i; <span class=\"comment\">// 重新记录最小活跃数下标</span></span><br><span class=\"line\">                totalWeight = weight; <span class=\"comment\">// 重新累计总权重</span></span><br><span class=\"line\">                firstWeight = weight; <span class=\"comment\">// 记录第一个权重</span></span><br><span class=\"line\">                sameWeight = <span class=\"keyword\">true</span>; <span class=\"comment\">// 还原权重相同标识</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (active == leastActive) &#123; <span class=\"comment\">// 累计相同最小的活跃数</span></span><br><span class=\"line\">                leastIndexs[leastCount++] = i; <span class=\"comment\">// 累计相同最小活跃数下标</span></span><br><span class=\"line\">                totalWeight += weight; <span class=\"comment\">// 累计总权重</span></span><br><span class=\"line\">                <span class=\"comment\">// 判断所有权重是否一样</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sameWeight &amp;&amp; i &gt; <span class=\"number\">0</span></span><br><span class=\"line\">                        &amp;&amp; weight != firstWeight) &#123;</span><br><span class=\"line\">                    sameWeight = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// assert(leastCount &gt; 0)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leastCount == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果只有一个最小则直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> invokers.get(leastIndexs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!sameWeight &amp;&amp; totalWeight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果权重不相同且权重大于0则按总权重数随机</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> offsetWeight = random.nextInt(totalWeight);</span><br><span class=\"line\">            <span class=\"comment\">// 并确定随机值落在哪个片断上</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; leastCount; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> leastIndex = leastIndexs[i];</span><br><span class=\"line\">                offsetWeight -= getWeight(invokers.get(leastIndex), invocation);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (offsetWeight &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> invokers.get(leastIndex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果权重相同或权重为0则均等随机</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> invokers.get(leastIndexs[random.nextInt(leastCount)]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br>\n&lt;!– ### 低并发优先（Active Weight）\n<code>`</code>java</p>\n<p><code>`</code> –&gt;</p>\n<p><br></p>\n<hr>\n<p>参考\nwikipedia-负载均衡：<a href=\"https://en.wikipedia.org/wiki/Load_balancing_(computing)\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Load_balancing_(computing)</a></p>\n","site":{"data":{}},"excerpt":"<p>负载平衡（Load balancing）是一种计算机技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最优化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。 使用带有负载平衡的多个服务器组件，取代单一的组件，可以通过冗余提高可靠性。负载平衡服务通常是由专用软件和硬件来完成。 主要作用是将大量作业合理地分摊到多个操作单元上进行执行，用于解决互联网架构中的高并发和高可用的问题。</p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<hr>","more":"<p><br></p>\n<h3 id=\"轮询（Round-Robin）\"><a href=\"#轮询（Round-Robin）\" class=\"headerlink\" title=\"轮询（Round Robin）\"></a>轮询（Round Robin）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"加权轮询（Weight-Round-Robin）\"><a href=\"#加权轮询（Weight-Round-Robin）\" class=\"headerlink\" title=\"加权轮询（Weight Round Robin）\"></a>加权轮询（Weight Round Robin）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoundRobinLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"roundrobin\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentMap&lt;String, AtomicPositiveInteger&gt; sequences = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, AtomicPositiveInteger&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class=\"line\">        String key = invokers.get(<span class=\"number\">0</span>).getUrl().getServiceKey() + <span class=\"string\">\".\"</span> + invocation.getMethodName();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size(); <span class=\"comment\">// 总个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxWeight = <span class=\"number\">0</span>; <span class=\"comment\">// 最大权重</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> minWeight = Integer.MAX_VALUE; <span class=\"comment\">// 最小权重</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; invokerToWeightMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> weightSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> weight = getWeight(invokers.get(i), invocation);</span><br><span class=\"line\">            maxWeight = Math.max(maxWeight, weight); <span class=\"comment\">// 累计最大权重</span></span><br><span class=\"line\">            minWeight = Math.min(minWeight, weight); <span class=\"comment\">// 累计最小权重</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                invokerToWeightMap.put(invokers.get(i), <span class=\"keyword\">new</span> IntegerWrapper(weight));</span><br><span class=\"line\">                weightSum += weight;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        AtomicPositiveInteger sequence = sequences.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sequence == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            sequences.putIfAbsent(key, <span class=\"keyword\">new</span> AtomicPositiveInteger());</span><br><span class=\"line\">            sequence = sequences.get(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> currentSequence = sequence.getAndIncrement();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxWeight &gt; <span class=\"number\">0</span> &amp;&amp; minWeight &lt; maxWeight) &#123; <span class=\"comment\">// 权重不一样</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> mod = currentSequence % weightSum;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxWeight; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Map.Entry&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; each : invokerToWeightMap.entrySet()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> Invoker&lt;T&gt; k = each.getKey();</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> IntegerWrapper v = each.getValue();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mod == <span class=\"number\">0</span> &amp;&amp; v.getValue() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v.getValue() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        v.decrement();</span><br><span class=\"line\">                        mod--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取模轮循</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> invokers.get(currentSequence % length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerWrapper</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IntegerWrapper</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrement</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"随机（Random）\"><a href=\"#随机（Random）\" class=\"headerlink\" title=\"随机（Random）\"></a>随机（Random）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"加权随机（Weight-Random）\"><a href=\"#加权随机（Weight-Random）\" class=\"headerlink\" title=\"加权随机（Weight Random）\"></a>加权随机（Weight Random）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, Invocation invocation)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size(); <span class=\"comment\">// 总个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalWeight = <span class=\"number\">0</span>; <span class=\"comment\">// 总权重</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> sameWeight = <span class=\"keyword\">true</span>; <span class=\"comment\">// 权重是否都一样</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> weight = getWeight(invokers.get(i), invocation);</span><br><span class=\"line\">            totalWeight += weight; <span class=\"comment\">// 累计总权重</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sameWeight &amp;&amp; i &gt; <span class=\"number\">0</span></span><br><span class=\"line\">                    &amp;&amp; weight != getWeight(invokers.get(i - <span class=\"number\">1</span>), invocation)) &#123;</span><br><span class=\"line\">                sameWeight = <span class=\"keyword\">false</span>; <span class=\"comment\">// 计算所有权重是否一样</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (totalWeight &gt; <span class=\"number\">0</span> &amp;&amp; !sameWeight) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果权重不相同且权重大于0则按总权重数随机</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> offset = random.nextInt(totalWeight);</span><br><span class=\"line\">            <span class=\"comment\">// 并确定随机值落在哪个片断上</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">                offset -= getWeight(invokers.get(i), invocation);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (offset &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> invokers.get(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果权重相同或权重为0则均等随机</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> invokers.get(random.nextInt(length));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"源地址哈希（Hash）\"><a href=\"#源地址哈希（Hash）\" class=\"headerlink\" title=\"源地址哈希（Hash）\"></a>源地址哈希（Hash）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"一致性哈希（ConsistentHash）\"><a href=\"#一致性哈希（ConsistentHash）\" class=\"headerlink\" title=\"一致性哈希（ConsistentHash）\"></a>一致性哈希（ConsistentHash）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsistentHashLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt; selectors = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class=\"line\">        String key = invokers.get(<span class=\"number\">0</span>).getUrl().getServiceKey() + <span class=\"string\">\".\"</span> + invocation.getMethodName();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> identityHashCode = System.identityHashCode(invokers);</span><br><span class=\"line\">        ConsistentHashSelector&lt;T&gt; selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selector == <span class=\"keyword\">null</span> || selector.identityHashCode != identityHashCode) &#123;</span><br><span class=\"line\">            selectors.put(key, <span class=\"keyword\">new</span> ConsistentHashSelector&lt;T&gt;(invokers, invocation.getMethodName(), identityHashCode));</span><br><span class=\"line\">            selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> selector.select(invocation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsistentHashSelector</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TreeMap&lt;Long, Invoker&lt;T&gt;&gt; virtualInvokers;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> replicaNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> identityHashCode;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] argumentIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">        ConsistentHashSelector(List&lt;Invoker&lt;T&gt;&gt; invokers, String methodName, <span class=\"keyword\">int</span> identityHashCode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.virtualInvokers = <span class=\"keyword\">new</span> TreeMap&lt;Long, Invoker&lt;T&gt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.identityHashCode = identityHashCode;</span><br><span class=\"line\">            URL url = invokers.get(<span class=\"number\">0</span>).getUrl();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.replicaNumber = url.getMethodParameter(methodName, <span class=\"string\">\"hash.nodes\"</span>, <span class=\"number\">160</span>);</span><br><span class=\"line\">            String[] index = Constants.COMMA_SPLIT_PATTERN.split(url.getMethodParameter(methodName, <span class=\"string\">\"hash.arguments\"</span>, <span class=\"string\">\"0\"</span>));</span><br><span class=\"line\">            argumentIndex = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[index.length];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index.length; i++) &#123;</span><br><span class=\"line\">                argumentIndex[i] = Integer.parseInt(index[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class=\"line\">                String address = invoker.getUrl().getAddress();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; replicaNumber / <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">byte</span>[] digest = md5(address + i);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; h &lt; <span class=\"number\">4</span>; h++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">long</span> m = hash(digest, h);</span><br><span class=\"line\">                        virtualInvokers.put(m, invoker);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Invoker&lt;T&gt; <span class=\"title\">select</span><span class=\"params\">(Invocation invocation)</span> </span>&#123;</span><br><span class=\"line\">            String key = toKey(invocation.getArguments());</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] digest = md5(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> selectForKey(hash(digest, <span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">toKey</span><span class=\"params\">(Object[] args)</span> </span>&#123;</span><br><span class=\"line\">            StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : argumentIndex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; args.length) &#123;</span><br><span class=\"line\">                    buf.append(args[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> buf.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Invoker&lt;T&gt; <span class=\"title\">selectForKey</span><span class=\"params\">(<span class=\"keyword\">long</span> hash)</span> </span>&#123;</span><br><span class=\"line\">            Invoker&lt;T&gt; invoker;</span><br><span class=\"line\">            Long key = hash;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!virtualInvokers.containsKey(key)) &#123;</span><br><span class=\"line\">                SortedMap&lt;Long, Invoker&lt;T&gt;&gt; tailMap = virtualInvokers.tailMap(key);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tailMap.isEmpty()) &#123;</span><br><span class=\"line\">                    key = virtualInvokers.firstKey();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    key = tailMap.firstKey();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            invoker = virtualInvokers.get(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> invoker;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">hash</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] digest, <span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (((<span class=\"keyword\">long</span>) (digest[<span class=\"number\">3</span> + number * <span class=\"number\">4</span>] &amp; <span class=\"number\">0xFF</span>) &lt;&lt; <span class=\"number\">24</span>)</span><br><span class=\"line\">                    | ((<span class=\"keyword\">long</span>) (digest[<span class=\"number\">2</span> + number * <span class=\"number\">4</span>] &amp; <span class=\"number\">0xFF</span>) &lt;&lt; <span class=\"number\">16</span>)</span><br><span class=\"line\">                    | ((<span class=\"keyword\">long</span>) (digest[<span class=\"number\">1</span> + number * <span class=\"number\">4</span>] &amp; <span class=\"number\">0xFF</span>) &lt;&lt; <span class=\"number\">8</span>)</span><br><span class=\"line\">                    | (digest[number * <span class=\"number\">4</span>] &amp; <span class=\"number\">0xFF</span>))</span><br><span class=\"line\">                    &amp; <span class=\"number\">0xFFFFFFFFL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] md5(String value) &#123;</span><br><span class=\"line\">            MessageDigest md5;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                md5 = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            md5.reset();</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                bytes = value.getBytes(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            md5.update(bytes);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> md5.digest();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"最小连接数（Least-Connections）\"><a href=\"#最小连接数（Least-Connections）\" class=\"headerlink\" title=\"最小连接数（Least Connections）\"></a>最小连接数（Least Connections）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeastActiveLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"leastactive\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size(); <span class=\"comment\">// 总个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> leastActive = -<span class=\"number\">1</span>; <span class=\"comment\">// 最小的活跃数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> leastCount = <span class=\"number\">0</span>; <span class=\"comment\">// 相同最小活跃数的个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] leastIndexs = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length]; <span class=\"comment\">// 相同最小活跃数的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalWeight = <span class=\"number\">0</span>; <span class=\"comment\">// 总权重</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> firstWeight = <span class=\"number\">0</span>; <span class=\"comment\">// 第一个权重，用于于计算是否相同</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> sameWeight = <span class=\"keyword\">true</span>; <span class=\"comment\">// 是否所有权重相同</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            Invoker&lt;T&gt; invoker = invokers.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive(); <span class=\"comment\">// 活跃数</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); <span class=\"comment\">// 权重</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (leastActive == -<span class=\"number\">1</span> || active &lt; leastActive) &#123; <span class=\"comment\">// 发现更小的活跃数，重新开始</span></span><br><span class=\"line\">                leastActive = active; <span class=\"comment\">// 记录最小活跃数</span></span><br><span class=\"line\">                leastCount = <span class=\"number\">1</span>; <span class=\"comment\">// 重新统计相同最小活跃数的个数</span></span><br><span class=\"line\">                leastIndexs[<span class=\"number\">0</span>] = i; <span class=\"comment\">// 重新记录最小活跃数下标</span></span><br><span class=\"line\">                totalWeight = weight; <span class=\"comment\">// 重新累计总权重</span></span><br><span class=\"line\">                firstWeight = weight; <span class=\"comment\">// 记录第一个权重</span></span><br><span class=\"line\">                sameWeight = <span class=\"keyword\">true</span>; <span class=\"comment\">// 还原权重相同标识</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (active == leastActive) &#123; <span class=\"comment\">// 累计相同最小的活跃数</span></span><br><span class=\"line\">                leastIndexs[leastCount++] = i; <span class=\"comment\">// 累计相同最小活跃数下标</span></span><br><span class=\"line\">                totalWeight += weight; <span class=\"comment\">// 累计总权重</span></span><br><span class=\"line\">                <span class=\"comment\">// 判断所有权重是否一样</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sameWeight &amp;&amp; i &gt; <span class=\"number\">0</span></span><br><span class=\"line\">                        &amp;&amp; weight != firstWeight) &#123;</span><br><span class=\"line\">                    sameWeight = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// assert(leastCount &gt; 0)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leastCount == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果只有一个最小则直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> invokers.get(leastIndexs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!sameWeight &amp;&amp; totalWeight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果权重不相同且权重大于0则按总权重数随机</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> offsetWeight = random.nextInt(totalWeight);</span><br><span class=\"line\">            <span class=\"comment\">// 并确定随机值落在哪个片断上</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; leastCount; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> leastIndex = leastIndexs[i];</span><br><span class=\"line\">                offsetWeight -= getWeight(invokers.get(leastIndex), invocation);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (offsetWeight &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> invokers.get(leastIndex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果权重相同或权重为0则均等随机</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> invokers.get(leastIndexs[random.nextInt(leastCount)]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br>\n&lt;!– ### 低并发优先（Active Weight）\n<code>`</code>java</p>\n<p><code>`</code> –&gt;</p>\n<p><br></p>\n<hr>\n<p>参考\nwikipedia-负载均衡：<a href=\"https://en.wikipedia.org/wiki/Load_balancing_(computing)\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Load_balancing_(computing)</a></p>"},{"title":"贝叶斯网算法","date":"2018-11-13T02:41:33.000Z","_content":"\n\n\n\n<!-- more -->","source":"_posts/贝叶斯网算法.md","raw":"---\ntitle: 贝叶斯网算法\ndate: 2018-11-13 10:41:33\ncategories: \n    - 机器学习\ntags: \n    - 算法\n    - 机器学习\n    - 监督学习\n    - 贝叶斯\n---\n\n\n\n\n<!-- more -->","slug":"贝叶斯网算法","published":1,"updated":"2019-11-02T07:12:18.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y7j0070t6s6n55b2hv4","content":"<a id=\"more\"></a>","site":{"data":{}},"excerpt":"","more":""},{"title":"递归神经网络","date":"2018-12-01T07:24:03.000Z","_content":"\n\n\n\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n<br/>\n\n---\n参考\n\n[wikipedia-人工神经网络](https://en.wikipedia.org/wiki/Artificial_neural_network)\n周志华《机器学习》\n","source":"_posts/递归神经网络.md","raw":"---\ntitle: 递归神经网络\ndate: 2018-12-01 15:24:03\ncategories: \n    - 神经网络\ntags:\n    - 人工智能\n    - 神经网络\n---\n\n\n\n\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》\n\n<!-- more -->\n\n\n<br/>\n\n---\n参考\n\n[wikipedia-人工神经网络](https://en.wikipedia.org/wiki/Artificial_neural_network)\n周志华《机器学习》\n","slug":"递归神经网络","published":1,"updated":"2019-11-02T07:12:18.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ri9y7l0075t6s67dhr8k4z","content":"<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>\n<a id=\"more\"></a>\n<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\" target=\"_blank\" rel=\"noopener\">wikipedia-人工神经网络</a>\n周志华《机器学习》</p>\n","site":{"data":{}},"excerpt":"<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———摘自《维基百科》</p>","more":"<p><br></p>\n<hr>\n<p>参考</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\" target=\"_blank\" rel=\"noopener\">wikipedia-人工神经网络</a>\n周志华《机器学习》</p>"}],"PostAsset":[{"_id":"source/_posts/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的/16a7950217b3f0f4ed02db5db59562a7.png","slug":"16a7950217b3f0f4ed02db5db59562a7.png","post":"ck3ri9y420003t6s6whhmpoai","modified":1,"renderable":0},{"_id":"source/_posts/Github搭建Hexo/1542073066701.jpg","slug":"1542073066701.jpg","post":"ck3ri9y500019t6s6fduft0zf","modified":1,"renderable":0},{"_id":"source/_posts/Java-Agent详解/1565784207465.jpg","slug":"1565784207465.jpg","post":"ck3ri9y53001ht6s6ky4bobhc","modified":1,"renderable":0},{"_id":"source/_posts/MongoDB安装/adminMongo_connections.png","slug":"adminMongo_connections.png","post":"ck3ri9y5h002ct6s6elu57cmx","modified":1,"renderable":0},{"_id":"source/_posts/tensorflow教程/tensors_flowing.gif","slug":"tensors_flowing.gif","post":"ck3ri9y6e004jt6s6lal46zmh","modified":1,"renderable":0},{"_id":"source/_posts/thrift教程/thrift-layers.png","post":"ck3ri9y6h004nt6s6wvhtm2xl","slug":"thrift-layers.png","modified":1,"renderable":1},{"_id":"source/_posts/人工神经网络/1543648111947.jpg","post":"ck3ri9y6m004vt6s6edwdj5yi","slug":"1543648111947.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02-MySQL实战45讲-日志系统：一条SQL更新语句是如何执行的/0d2070e8f84c4801adbfa03bda1f98d9.png","slug":"0d2070e8f84c4801adbfa03bda1f98d9.png","post":"ck3ri9y420003t6s6whhmpoai","modified":1,"renderable":0},{"_id":"source/_posts/Java-Agent详解/1565786297241.jpg","post":"ck3ri9y53001ht6s6ky4bobhc","slug":"1565786297241.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Mac-使用rz、sz-远程上传、下载文件/122150034707951.png","post":"ck3ri9y5e0026t6s6ytxvowqi","slug":"122150034707951.png","modified":1,"renderable":1},{"_id":"source/_posts/Mac-使用rz、sz-远程上传、下载文件/x_engine_paper.pdf","slug":"x_engine_paper.pdf","post":"ck3ri9y5e0026t6s6ytxvowqi","modified":1,"renderable":0},{"_id":"source/_posts/Github搭建Hexo/1542037823098.jpg","post":"ck3ri9y500019t6s6fduft0zf","slug":"1542037823098.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Github搭建Hexo/1542074055382.jpg","post":"ck3ri9y500019t6s6fduft0zf","slug":"1542074055382.jpg","modified":1,"renderable":1},{"_id":"source/_posts/iterm2总结/1543202719106.jpg","slug":"1543202719106.jpg","post":"ck3ri9y6b004ct6s6s8yk22id","modified":1,"renderable":0},{"_id":"source/_posts/iterm2总结/1543213263217.jpg","slug":"1543213263217.jpg","post":"ck3ri9y6b004ct6s6s8yk22id","modified":1,"renderable":0},{"_id":"source/_posts/iterm2总结/logo2x.jpg","post":"ck3ri9y6b004ct6s6s8yk22id","slug":"logo2x.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Redis设计与实现/graphviz-167adfc2e52e078d4c0e3c8a9eddec54551602fb.png","post":"ck3ri9y62003st6s6cqxzrh81","slug":"graphviz-167adfc2e52e078d4c0e3c8a9eddec54551602fb.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis设计与实现/graphviz-5f4d8b6177061ac52d0ae05ef357fceb52e9cb90.png","post":"ck3ri9y62003st6s6cqxzrh81","slug":"graphviz-5f4d8b6177061ac52d0ae05ef357fceb52e9cb90.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis设计与实现/graphviz-72760f6945c3742eca0df91a91cc379168eda82d.png","post":"ck3ri9y62003st6s6cqxzrh81","slug":"graphviz-72760f6945c3742eca0df91a91cc379168eda82d.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis设计与实现/graphviz-8fc5de396a5b52c3d0b1991a1e09558ad055dd86.png","post":"ck3ri9y62003st6s6cqxzrh81","slug":"graphviz-8fc5de396a5b52c3d0b1991a1e09558ad055dd86.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis设计与实现/graphviz-acf7fe010d7b09c5d2500c72eb555863e67ad74f.png","post":"ck3ri9y62003st6s6cqxzrh81","slug":"graphviz-acf7fe010d7b09c5d2500c72eb555863e67ad74f.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis设计与实现/graphviz-bd3eecd927a4d8fc33b4a1c7f5957c52d67c5021.png","post":"ck3ri9y62003st6s6cqxzrh81","slug":"graphviz-bd3eecd927a4d8fc33b4a1c7f5957c52d67c5021.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis设计与实现/lru_comparison.png","slug":"lru_comparison.png","post":"ck3ri9y62003st6s6cqxzrh81","modified":1,"renderable":0}],"PostCategory":[{"post_id":"ck3ri9y490009t6s6q7cqu36i","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y4h000ft6s64di1d5os"},{"post_id":"ck3ri9y3z0001t6s68ks3sqeq","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y4j000kt6s6qlraldcn"},{"post_id":"ck3ri9y4b000at6s6nx3xytxx","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y4n000nt6s697k8hhnn"},{"post_id":"ck3ri9y4e000dt6s6dppqlgb9","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y4r000rt6s6exmyz80p"},{"post_id":"ck3ri9y420003t6s6whhmpoai","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y4u000ut6s63w2ylpno"},{"post_id":"ck3ri9y4g000et6s6vp0vskma","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y4x000zt6s64f6laa0v"},{"post_id":"ck3ri9y4i000jt6s6bwaw2ant","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y4y0012t6s6b7724q2e"},{"post_id":"ck3ri9y470007t6s605mpb1ia","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y4z0017t6s6s75oi0x4"},{"post_id":"ck3ri9y4m000mt6s6203322vy","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y51001at6s6d7soe9iy"},{"post_id":"ck3ri9y4q000qt6s6oi0tiuxp","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y53001ft6s6m0cbwup6"},{"post_id":"ck3ri9y4u000tt6s6lrpisqty","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y56001mt6s651lkjsh9"},{"post_id":"ck3ri9y52001dt6s6zxst7yvp","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y57001pt6s6qrz0ppmu"},{"post_id":"ck3ri9y4w000yt6s6f2hb48lj","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y59001tt6s6y5kg9hf2"},{"post_id":"ck3ri9y4x0011t6s6rvw8crqd","category_id":"ck3ri9y56001lt6s6mdh6x87v","_id":"ck3ri9y5c0020t6s6ugartxwh"},{"post_id":"ck3ri9y59001wt6s6mudpvusf","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y5f0027t6s6kmtaqtbe"},{"post_id":"ck3ri9y4z0015t6s663n8hfqb","category_id":"ck3ri9y59001ut6s62cjetxg6","_id":"ck3ri9y5g002bt6s62ounltaj"},{"post_id":"ck3ri9y500019t6s6fduft0zf","category_id":"ck3ri9y5c0021t6s64qxievsz","_id":"ck3ri9y5i002et6s69hw7las0"},{"post_id":"ck3ri9y5e0026t6s6ytxvowqi","category_id":"ck3ri9y59001ut6s62cjetxg6","_id":"ck3ri9y5k002it6s6e03emtsc"},{"post_id":"ck3ri9y55001kt6s6udmyruhz","category_id":"ck3ri9y5j002ht6s6ndg6b0hv","_id":"ck3ri9y5q002ut6s6lrl9lmuh"},{"post_id":"ck3ri9y5m002nt6s6u67psajl","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y5r002yt6s6m2rt6u4k"},{"post_id":"ck3ri9y5n002pt6s6eo142vtw","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y5s0031t6s6vvjdtxr7"},{"post_id":"ck3ri9y56001ot6s6g9kyg77z","category_id":"ck3ri9y5f0028t6s6lupa2ctt","_id":"ck3ri9y5u0036t6s60riqod4x"},{"post_id":"ck3ri9y5p002st6s651d3pwi9","category_id":"ck3ri9y440004t6s6o3qvopyy","_id":"ck3ri9y5v0039t6s6b0q66gsl"},{"post_id":"ck3ri9y58001st6s6pdp165s8","category_id":"ck3ri9y5p002tt6s6zthmnotu","_id":"ck3ri9y5x003et6s6f8pn99p4"},{"post_id":"ck3ri9y5d0023t6s6g9qcxdca","category_id":"ck3ri9y5t0032t6s65tffp5lx","_id":"ck3ri9y5y003it6s6s62jllfb"},{"post_id":"ck3ri9y5g002at6s6z1epzh86","category_id":"ck3ri9y5v003bt6s6qlr1isgt","_id":"ck3ri9y61003pt6s692albwvo"},{"post_id":"ck3ri9y5y003jt6s6ssv07rw2","category_id":"ck3ri9y5j002ht6s6ndg6b0hv","_id":"ck3ri9y63003tt6s63162kk81"},{"post_id":"ck3ri9y5z003nt6s6l4jf6g5y","category_id":"ck3ri9y5j002ht6s6ndg6b0hv","_id":"ck3ri9y64003wt6s68hpqar2k"},{"post_id":"ck3ri9y53001ht6s6ky4bobhc","category_id":"ck3ri9y5f0028t6s6lupa2ctt","_id":"ck3ri9y660041t6s6wgtvhy99"},{"post_id":"ck3ri9y53001ht6s6ky4bobhc","category_id":"ck3ri9y5z003kt6s6q4wkvt02","_id":"ck3ri9y670043t6s6kn0tiqyv"},{"post_id":"ck3ri9y61003ot6s6upzwelp5","category_id":"ck3ri9y5j002ht6s6ndg6b0hv","_id":"ck3ri9y690046t6s61xxkcuju"},{"post_id":"ck3ri9y62003st6s6cqxzrh81","category_id":"ck3ri9y5j002ht6s6ndg6b0hv","_id":"ck3ri9y6a004at6s6zu6xksa1"},{"post_id":"ck3ri9y660040t6s6i66fvw1k","category_id":"ck3ri9y61003qt6s6bxc3giv8","_id":"ck3ri9y6c004et6s6vsbo1h6i"},{"post_id":"ck3ri9y5s0030t6s6eq3q9x6d","category_id":"ck3ri9y65003yt6s6bqdjvhs5","_id":"ck3ri9y6e004ht6s6dyhhci9m"},{"post_id":"ck3ri9y680045t6s6yc4oacjh","category_id":"ck3ri9y56001lt6s6mdh6x87v","_id":"ck3ri9y6g004lt6s6ns0x64yx"},{"post_id":"ck3ri9y5t0034t6s69ci2qgr0","category_id":"ck3ri9y680044t6s60lqvlieh","_id":"ck3ri9y6h004ot6s6rgef6e9f"},{"post_id":"ck3ri9y6b004ct6s6s8yk22id","category_id":"ck3ri9y59001ut6s62cjetxg6","_id":"ck3ri9y6j004rt6s61oba5r5c"},{"post_id":"ck3ri9y5u0038t6s65snebbmt","category_id":"ck3ri9y65003yt6s6bqdjvhs5","_id":"ck3ri9y6l004ut6s62g77whf9"},{"post_id":"ck3ri9y5w003ct6s60848luxv","category_id":"ck3ri9y65003yt6s6bqdjvhs5","_id":"ck3ri9y6m004wt6s64eyclwjg"},{"post_id":"ck3ri9y5x003gt6s6nl3khmak","category_id":"ck3ri9y6i004qt6s6825550z5","_id":"ck3ri9y6p0053t6s6a10siwfd"},{"post_id":"ck3ri9y5q002wt6s6qnmx3e1v","category_id":"ck3ri9y61003qt6s6bxc3giv8","_id":"ck3ri9y6r0059t6s6ubgieo6w"},{"post_id":"ck3ri9y5q002wt6s6qnmx3e1v","category_id":"ck3ri9y6m004xt6s61s1t2eof","_id":"ck3ri9y6t005dt6s6v6j9fibt"},{"post_id":"ck3ri9y63003vt6s6p0o7kbs1","category_id":"ck3ri9y6p0054t6s68wj7uof9","_id":"ck3ri9y6u005ht6s6ajx9hlh5"},{"post_id":"ck3ri9y6q0058t6s6sya61n5h","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y6w005lt6s6smy7zioa"},{"post_id":"ck3ri9y670042t6s6tckshw0c","category_id":"ck3ri9y6r005at6s689l9mtfh","_id":"ck3ri9y6z005ot6s6idq29pse"},{"post_id":"ck3ri9y690049t6s6vhrli18u","category_id":"ck3ri9y6v005jt6s6nyg2mk8e","_id":"ck3ri9y72005vt6s6amj0jt9r"},{"post_id":"ck3ri9y6y005nt6s6hjq4bfdq","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y730060t6s6e3q8749x"},{"post_id":"ck3ri9y6d004gt6s6wgxwsjrc","category_id":"ck3ri9y6z005pt6s6bdkgask6","_id":"ck3ri9y750062t6s62oqiz6gc"},{"post_id":"ck3ri9y71005tt6s6yr33o0ac","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y790066t6s6znkljuko"},{"post_id":"ck3ri9y6e004jt6s6lal46zmh","category_id":"ck3ri9y72005xt6s6q6g95f2w","_id":"ck3ri9y7a0068t6s60ahcrmp1"},{"post_id":"ck3ri9y740061t6s6cwrohj2y","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y7c006dt6s6enjfn4ih"},{"post_id":"ck3ri9y790067t6s6ll23wngn","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y7e006it6s69keif417"},{"post_id":"ck3ri9y6h004nt6s6wvhtm2xl","category_id":"ck3ri9y750064t6s6fhwkzxgj","_id":"ck3ri9y7f006lt6s6hwv43ylm"},{"post_id":"ck3ri9y6i004pt6s66o03qisf","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y7g006pt6s6052zjduz"},{"post_id":"ck3ri9y6i004pt6s66o03qisf","category_id":"ck3ri9y7b006bt6s6l17fck9r","_id":"ck3ri9y7h006st6s6hefdf8o5"},{"post_id":"ck3ri9y7d006ht6s6eneslrn4","category_id":"ck3ri9y5f0028t6s6lupa2ctt","_id":"ck3ri9y7i006ut6s6wufbl08y"},{"post_id":"ck3ri9y6k004tt6s6gmkm28b9","category_id":"ck3ri9y7e006jt6s6px8eea1q","_id":"ck3ri9y7j006zt6s67ssxfil5"},{"post_id":"ck3ri9y6m004vt6s6edwdj5yi","category_id":"ck3ri9y7g006qt6s6c0vip8mt","_id":"ck3ri9y7l0074t6s643edwfze"},{"post_id":"ck3ri9y6n004zt6s6tkm7eia2","category_id":"ck3ri9y7e006jt6s6px8eea1q","_id":"ck3ri9y7n0078t6s6htkpinrx"},{"post_id":"ck3ri9y7j0070t6s6n55b2hv4","category_id":"ck3ri9y4v000wt6s6yf0pjyap","_id":"ck3ri9y7o007ct6s6syq8wcne"},{"post_id":"ck3ri9y7l0075t6s67dhr8k4z","category_id":"ck3ri9y7g006qt6s6c0vip8mt","_id":"ck3ri9y7o007et6s6ar7zq49p"},{"post_id":"ck3ri9y6o0051t6s6q1sawkej","category_id":"ck3ri9y7l0073t6s6j8mxihwe","_id":"ck3ri9y7o007it6s6attsyayu"},{"post_id":"ck3ri9y6p0056t6s619td3va4","category_id":"ck3ri9y7g006qt6s6c0vip8mt","_id":"ck3ri9y7p007jt6s6azaoc89h"},{"post_id":"ck3ri9y6s005ct6s6y2ms3u8c","category_id":"ck3ri9y7o007gt6s6s8o6a085","_id":"ck3ri9y7p007ot6s6vwn4z95u"},{"post_id":"ck3ri9y6t005ft6s6e9gqzegv","category_id":"ck3ri9y7g006qt6s6c0vip8mt","_id":"ck3ri9y7q007st6s6r8emtppn"},{"post_id":"ck3ri9y6u005it6s6a1ji0vbe","category_id":"ck3ri9y7p007nt6s6az03gwam","_id":"ck3ri9y7q007wt6s6fzjnlsxs"},{"post_id":"ck3ri9y6w005mt6s6r0cpyc6q","category_id":"ck3ri9y7q007tt6s6zokmvgek","_id":"ck3ri9y7r0080t6s6l669hokk"},{"post_id":"ck3ri9y70005rt6s69wgyzhy6","category_id":"ck3ri9y7q007xt6s6qw51ikb6","_id":"ck3ri9y7s0086t6s6yjzc1vci"},{"post_id":"ck3ri9y73005yt6s63s2im3ah","category_id":"ck3ri9y7o007gt6s6s8o6a085","_id":"ck3ri9y7t0089t6s61r4floxy"},{"post_id":"ck3ri9y750065t6s6gb1uhx6u","category_id":"ck3ri9y7o007gt6s6s8o6a085","_id":"ck3ri9y7u008ct6s6con6vn68"},{"post_id":"ck3ri9y7a006at6s66wsiwl4w","category_id":"ck3ri9y7e006jt6s6px8eea1q","_id":"ck3ri9y7u008ft6s6vvow7x76"},{"post_id":"ck3ri9y7c006et6s618wxsum7","category_id":"ck3ri9y7q007tt6s6zokmvgek","_id":"ck3ri9y7v008jt6s6bxc5qejd"},{"post_id":"ck3ri9y7e006kt6s6jcn7d24j","category_id":"ck3ri9y7o007gt6s6s8o6a085","_id":"ck3ri9y7w008nt6s68c7n62oi"},{"post_id":"ck3ri9y7f006nt6s6n2mohzq8","category_id":"ck3ri9y7v008it6s6lq22wxwn","_id":"ck3ri9y7x008st6s6el42509y"},{"post_id":"ck3ri9y7g006rt6s6blbhxk3l","category_id":"ck3ri9y7w008ot6s6qfugzxmj","_id":"ck3ri9y7y008wt6s6w5e4i27e"},{"post_id":"ck3ri9y7h006tt6s6imdizzkx","category_id":"ck3ri9y5f0028t6s6lupa2ctt","_id":"ck3ri9y7z0092t6s6inptozgf"},{"post_id":"ck3ri9y7h006tt6s6imdizzkx","category_id":"ck3ri9y7x008ut6s6vfthq1ja","_id":"ck3ri9y7z0093t6s6g6x9jgzl"},{"post_id":"ck3ri9y7i006xt6s6q7sijwqg","category_id":"ck3ri9y7y008yt6s6os1rdjg5","_id":"ck3ri9y800095t6s6wfryya2p"}],"PostTag":[{"post_id":"ck3ri9y4e000dt6s6dppqlgb9","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y4i000it6s69qvkn0jj"},{"post_id":"ck3ri9y4e000dt6s6dppqlgb9","tag_id":"ck3ri9y4c000ct6s6v29zsf9l","_id":"ck3ri9y4l000lt6s6e7bnojdw"},{"post_id":"ck3ri9y3z0001t6s68ks3sqeq","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y4q000pt6s6u6r11l7m"},{"post_id":"ck3ri9y3z0001t6s68ks3sqeq","tag_id":"ck3ri9y4c000ct6s6v29zsf9l","_id":"ck3ri9y4u000st6s6kxfglsgx"},{"post_id":"ck3ri9y4g000et6s6vp0vskma","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y4w000xt6s6upv0r6pr"},{"post_id":"ck3ri9y4g000et6s6vp0vskma","tag_id":"ck3ri9y4c000ct6s6v29zsf9l","_id":"ck3ri9y4x0010t6s6jkrxrom3"},{"post_id":"ck3ri9y4i000jt6s6bwaw2ant","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y4y0014t6s6aew78gxf"},{"post_id":"ck3ri9y4i000jt6s6bwaw2ant","tag_id":"ck3ri9y4c000ct6s6v29zsf9l","_id":"ck3ri9y500018t6s6ydre1njn"},{"post_id":"ck3ri9y4m000mt6s6203322vy","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y52001ct6s6uf0l17bn"},{"post_id":"ck3ri9y4m000mt6s6203322vy","tag_id":"ck3ri9y4c000ct6s6v29zsf9l","_id":"ck3ri9y53001gt6s6zj659bz7"},{"post_id":"ck3ri9y420003t6s6whhmpoai","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y55001jt6s6odlxs6t1"},{"post_id":"ck3ri9y420003t6s6whhmpoai","tag_id":"ck3ri9y4c000ct6s6v29zsf9l","_id":"ck3ri9y56001nt6s6ngqf0o2a"},{"post_id":"ck3ri9y470007t6s605mpb1ia","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y58001rt6s6a2fn14d7"},{"post_id":"ck3ri9y470007t6s605mpb1ia","tag_id":"ck3ri9y4c000ct6s6v29zsf9l","_id":"ck3ri9y59001vt6s6dseutouy"},{"post_id":"ck3ri9y490009t6s6q7cqu36i","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y5b001yt6s6e7ouiu17"},{"post_id":"ck3ri9y490009t6s6q7cqu36i","tag_id":"ck3ri9y4c000ct6s6v29zsf9l","_id":"ck3ri9y5d0022t6s6fqw27xg5"},{"post_id":"ck3ri9y4b000at6s6nx3xytxx","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y5e0024t6s62z3pw6n5"},{"post_id":"ck3ri9y4b000at6s6nx3xytxx","tag_id":"ck3ri9y4c000ct6s6v29zsf9l","_id":"ck3ri9y5g0029t6s61yhdi5y2"},{"post_id":"ck3ri9y4q000qt6s6oi0tiuxp","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y5i002ft6s617atr2qw"},{"post_id":"ck3ri9y4q000qt6s6oi0tiuxp","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y5k002jt6s6aehl5492"},{"post_id":"ck3ri9y4q000qt6s6oi0tiuxp","tag_id":"ck3ri9y5e0025t6s6mvt2x01t","_id":"ck3ri9y5l002mt6s6obk5j85e"},{"post_id":"ck3ri9y5m002nt6s6u67psajl","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y5o002rt6s60whcd5fb"},{"post_id":"ck3ri9y5m002nt6s6u67psajl","tag_id":"ck3ri9y4c000ct6s6v29zsf9l","_id":"ck3ri9y5q002vt6s6wfjeuib5"},{"post_id":"ck3ri9y5n002pt6s6eo142vtw","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y5r002zt6s6svtee2hg"},{"post_id":"ck3ri9y5p002st6s651d3pwi9","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y5t0033t6s6bklmspjp"},{"post_id":"ck3ri9y4u000tt6s6lrpisqty","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y5u0037t6s6qnx6yao4"},{"post_id":"ck3ri9y4u000tt6s6lrpisqty","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y5v003at6s6lwsdlydv"},{"post_id":"ck3ri9y4u000tt6s6lrpisqty","tag_id":"ck3ri9y5e0025t6s6mvt2x01t","_id":"ck3ri9y5x003ft6s66xv2pxo1"},{"post_id":"ck3ri9y4w000yt6s6f2hb48lj","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y5y003ht6s6pxctusuj"},{"post_id":"ck3ri9y4w000yt6s6f2hb48lj","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y5z003mt6s6ydnyffj0"},{"post_id":"ck3ri9y4x0011t6s6rvw8crqd","tag_id":"ck3ri9y5x003dt6s698lp2h99","_id":"ck3ri9y63003ut6s6aog4pdnw"},{"post_id":"ck3ri9y4x0011t6s6rvw8crqd","tag_id":"ck3ri9y5z003lt6s6jjwfyhrt","_id":"ck3ri9y65003xt6s69fzc39kc"},{"post_id":"ck3ri9y4z0015t6s663n8hfqb","tag_id":"ck3ri9y62003rt6s6o3ekuouk","_id":"ck3ri9y690048t6s6apv7gfwg"},{"post_id":"ck3ri9y4z0015t6s663n8hfqb","tag_id":"ck3ri9y65003zt6s6ngoc7yft","_id":"ck3ri9y6b004bt6s6zmm93olz"},{"post_id":"ck3ri9y500019t6s6fduft0zf","tag_id":"ck3ri9y690047t6s6yry8naj3","_id":"ck3ri9y6e004it6s6qa6lz85x"},{"post_id":"ck3ri9y52001dt6s6zxst7yvp","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y6o0050t6s6m363s5yu"},{"post_id":"ck3ri9y52001dt6s6zxst7yvp","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y6p0052t6s6wgvsp3fi"},{"post_id":"ck3ri9y52001dt6s6zxst7yvp","tag_id":"ck3ri9y5e0025t6s6mvt2x01t","_id":"ck3ri9y6q0057t6s668ww5dy7"},{"post_id":"ck3ri9y53001ht6s6ky4bobhc","tag_id":"ck3ri9y6n004yt6s66ry0eb67","_id":"ck3ri9y6t005et6s6z7kolom9"},{"post_id":"ck3ri9y53001ht6s6ky4bobhc","tag_id":"ck3ri9y6p0055t6s6zv0gkeso","_id":"ck3ri9y6u005gt6s6ghpysgln"},{"post_id":"ck3ri9y55001kt6s6udmyruhz","tag_id":"ck3ri9y6s005bt6s66em30y0t","_id":"ck3ri9y71005st6s6iiapwn0b"},{"post_id":"ck3ri9y55001kt6s6udmyruhz","tag_id":"ck3ri9y6v005kt6s644nf0dmn","_id":"ck3ri9y72005ut6s66t5b0raz"},{"post_id":"ck3ri9y56001ot6s6g9kyg77z","tag_id":"ck3ri9y6n004yt6s66ry0eb67","_id":"ck3ri9y73005zt6s6in9k8seu"},{"post_id":"ck3ri9y58001st6s6pdp165s8","tag_id":"ck3ri9y72005wt6s6wh0sz74e","_id":"ck3ri9y7c006ct6s6n1gm64x4"},{"post_id":"ck3ri9y58001st6s6pdp165s8","tag_id":"ck3ri9y750063t6s6n6j3mzhw","_id":"ck3ri9y7d006ft6s6yo01foz4"},{"post_id":"ck3ri9y7d006ht6s6eneslrn4","tag_id":"ck3ri9y6n004yt6s66ry0eb67","_id":"ck3ri9y7f006mt6s6cidyobiq"},{"post_id":"ck3ri9y59001wt6s6mudpvusf","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y7j006yt6s61tkrhubx"},{"post_id":"ck3ri9y59001wt6s6mudpvusf","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y7k0071t6s6nye1i1e8"},{"post_id":"ck3ri9y59001wt6s6mudpvusf","tag_id":"ck3ri9y7d006gt6s6vk4zipkf","_id":"ck3ri9y7m0076t6s6qw4r6upx"},{"post_id":"ck3ri9y59001wt6s6mudpvusf","tag_id":"ck3ri9y7g006ot6s64ctseo61","_id":"ck3ri9y7m0077t6s6751y4ij4"},{"post_id":"ck3ri9y5d0023t6s6g9qcxdca","tag_id":"ck3ri9y7i006vt6s65ljv9ex2","_id":"ck3ri9y7n007bt6s6lrq057lz"},{"post_id":"ck3ri9y5d0023t6s6g9qcxdca","tag_id":"ck3ri9y7l0072t6s6u935nsja","_id":"ck3ri9y7o007dt6s6ddr7yacr"},{"post_id":"ck3ri9y5e0026t6s6ytxvowqi","tag_id":"ck3ri9y62003rt6s6o3ekuouk","_id":"ck3ri9y7o007ht6s65t5chy74"},{"post_id":"ck3ri9y5g002at6s6z1epzh86","tag_id":"ck3ri9y7o007ft6s6g8wtgr7i","_id":"ck3ri9y7p007mt6s6awkgukuu"},{"post_id":"ck3ri9y5q002wt6s6qnmx3e1v","tag_id":"ck3ri9y7p007kt6s69dk5ds99","_id":"ck3ri9y7q007qt6s6kt1xrjch"},{"post_id":"ck3ri9y5q002wt6s6qnmx3e1v","tag_id":"ck3ri9y460005t6s64bikkycq","_id":"ck3ri9y7q007rt6s6b0fggqd9"},{"post_id":"ck3ri9y5s0030t6s6eq3q9x6d","tag_id":"ck3ri9y7p007pt6s6jnlqjxhm","_id":"ck3ri9y7q007vt6s6f44f0ll6"},{"post_id":"ck3ri9y5t0034t6s69ci2qgr0","tag_id":"ck3ri9y7q007ut6s6a55d8sg5","_id":"ck3ri9y7r007zt6s60gxcd4bu"},{"post_id":"ck3ri9y5u0038t6s65snebbmt","tag_id":"ck3ri9y7p007pt6s6jnlqjxhm","_id":"ck3ri9y7s0083t6s6hj2fk63e"},{"post_id":"ck3ri9y5w003ct6s60848luxv","tag_id":"ck3ri9y7p007pt6s6jnlqjxhm","_id":"ck3ri9y7t0087t6s6f6pzrljv"},{"post_id":"ck3ri9y5x003gt6s6nl3khmak","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y7v008ht6s6e4mok8hr"},{"post_id":"ck3ri9y5x003gt6s6nl3khmak","tag_id":"ck3ri9y7s0084t6s6uddh2zkm","_id":"ck3ri9y7v008kt6s6vxed3gpr"},{"post_id":"ck3ri9y5x003gt6s6nl3khmak","tag_id":"ck3ri9y7t008at6s644w5y15z","_id":"ck3ri9y7w008mt6s6ry595fyn"},{"post_id":"ck3ri9y5x003gt6s6nl3khmak","tag_id":"ck3ri9y7u008dt6s6lx5lv8ui","_id":"ck3ri9y7w008pt6s69atuptbm"},{"post_id":"ck3ri9y5y003jt6s6ssv07rw2","tag_id":"ck3ri9y6s005bt6s66em30y0t","_id":"ck3ri9y7x008rt6s62u5mz32v"},{"post_id":"ck3ri9y5y003jt6s6ssv07rw2","tag_id":"ck3ri9y6v005kt6s644nf0dmn","_id":"ck3ri9y7x008tt6s6vyxs5v5m"},{"post_id":"ck3ri9y5z003nt6s6l4jf6g5y","tag_id":"ck3ri9y6s005bt6s66em30y0t","_id":"ck3ri9y7z008zt6s66umw3vyr"},{"post_id":"ck3ri9y5z003nt6s6l4jf6g5y","tag_id":"ck3ri9y6v005kt6s644nf0dmn","_id":"ck3ri9y7z0090t6s6em929kqw"},{"post_id":"ck3ri9y61003ot6s6upzwelp5","tag_id":"ck3ri9y6s005bt6s66em30y0t","_id":"ck3ri9y810096t6s6c7y3cu5l"},{"post_id":"ck3ri9y61003ot6s6upzwelp5","tag_id":"ck3ri9y6v005kt6s644nf0dmn","_id":"ck3ri9y810097t6s6050n4n8f"},{"post_id":"ck3ri9y62003st6s6cqxzrh81","tag_id":"ck3ri9y6s005bt6s66em30y0t","_id":"ck3ri9y81009at6s686k240bg"},{"post_id":"ck3ri9y62003st6s6cqxzrh81","tag_id":"ck3ri9y6v005kt6s644nf0dmn","_id":"ck3ri9y81009bt6s643oy7tgw"},{"post_id":"ck3ri9y63003vt6s6p0o7kbs1","tag_id":"ck3ri9y810099t6s6yxyzfnat","_id":"ck3ri9y82009dt6s6efq56ueq"},{"post_id":"ck3ri9y660040t6s6i66fvw1k","tag_id":"ck3ri9y7p007kt6s69dk5ds99","_id":"ck3ri9y82009ft6s66438cybc"},{"post_id":"ck3ri9y670042t6s6tckshw0c","tag_id":"ck3ri9y82009et6s6284fi9r6","_id":"ck3ri9y83009ht6s6rfvyxo9z"},{"post_id":"ck3ri9y680045t6s6yc4oacjh","tag_id":"ck3ri9y5x003dt6s698lp2h99","_id":"ck3ri9y83009jt6s6ceu8pqr1"},{"post_id":"ck3ri9y680045t6s6yc4oacjh","tag_id":"ck3ri9y82009et6s6284fi9r6","_id":"ck3ri9y83009kt6s62kd58vnh"},{"post_id":"ck3ri9y680045t6s6yc4oacjh","tag_id":"ck3ri9y5z003lt6s6jjwfyhrt","_id":"ck3ri9y83009mt6s6is6efkxt"},{"post_id":"ck3ri9y690049t6s6vhrli18u","tag_id":"ck3ri9y83009it6s6ejctrl8x","_id":"ck3ri9y84009nt6s6fy1xu6q8"},{"post_id":"ck3ri9y6b004ct6s6s8yk22id","tag_id":"ck3ri9y62003rt6s6o3ekuouk","_id":"ck3ri9y84009pt6s6154gc7v8"},{"post_id":"ck3ri9y6b004ct6s6s8yk22id","tag_id":"ck3ri9y83009lt6s65bkpu32t","_id":"ck3ri9y84009qt6s6xh5w38ws"},{"post_id":"ck3ri9y6d004gt6s6wgxwsjrc","tag_id":"ck3ri9y84009ot6s6ji16r51s","_id":"ck3ri9y85009st6s6r8rlv20e"},{"post_id":"ck3ri9y6e004jt6s6lal46zmh","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y86009wt6s6wsyuyg6f"},{"post_id":"ck3ri9y6e004jt6s6lal46zmh","tag_id":"ck3ri9y7s0084t6s6uddh2zkm","_id":"ck3ri9y86009xt6s6v1vklbg2"},{"post_id":"ck3ri9y6e004jt6s6lal46zmh","tag_id":"ck3ri9y7t008at6s644w5y15z","_id":"ck3ri9y86009zt6s6kz4vhxv0"},{"post_id":"ck3ri9y6e004jt6s6lal46zmh","tag_id":"ck3ri9y85009ut6s6c7xn21qj","_id":"ck3ri9y8600a0t6s6hotxstfk"},{"post_id":"ck3ri9y6h004nt6s6wvhtm2xl","tag_id":"ck3ri9y86009vt6s62jg8pbe5","_id":"ck3ri9y8700a2t6s6wfqbnubn"},{"post_id":"ck3ri9y6h004nt6s6wvhtm2xl","tag_id":"ck3ri9y86009yt6s6p8a2u74w","_id":"ck3ri9y8700a3t6s6sau5vgtw"},{"post_id":"ck3ri9y6i004pt6s66o03qisf","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y8800a7t6s6ehirigoh"},{"post_id":"ck3ri9y6i004pt6s66o03qisf","tag_id":"ck3ri9y8600a1t6s6o3gqd44u","_id":"ck3ri9y8800a8t6s6cfe4meda"},{"post_id":"ck3ri9y6i004pt6s66o03qisf","tag_id":"ck3ri9y8700a4t6s6pbvzauyp","_id":"ck3ri9y8800aat6s6tqksg8xb"},{"post_id":"ck3ri9y6i004pt6s66o03qisf","tag_id":"ck3ri9y7s0084t6s6uddh2zkm","_id":"ck3ri9y8800abt6s6xwjbcqn1"},{"post_id":"ck3ri9y6k004tt6s6gmkm28b9","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y8800adt6s61cml5hma"},{"post_id":"ck3ri9y6k004tt6s6gmkm28b9","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y8800aet6s6ns5jqtuj"},{"post_id":"ck3ri9y6k004tt6s6gmkm28b9","tag_id":"ck3ri9y8700a6t6s68kj9paxg","_id":"ck3ri9y8800agt6s6o0khmo15"},{"post_id":"ck3ri9y6k004tt6s6gmkm28b9","tag_id":"ck3ri9y8800a9t6s6gaoou4vj","_id":"ck3ri9y8900aht6s6v68dgysc"},{"post_id":"ck3ri9y6m004vt6s6edwdj5yi","tag_id":"ck3ri9y8800act6s6wah8hzwq","_id":"ck3ri9y8900ajt6s65qi06th8"},{"post_id":"ck3ri9y6m004vt6s6edwdj5yi","tag_id":"ck3ri9y8800aft6s6e7qr5fql","_id":"ck3ri9y8900akt6s6lt80ou8b"},{"post_id":"ck3ri9y6n004zt6s6tkm7eia2","tag_id":"ck3ri9y8900ait6s6rf1cczm9","_id":"ck3ri9y8a00aot6s6d76r4dht"},{"post_id":"ck3ri9y6n004zt6s6tkm7eia2","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y8a00apt6s69iujw9pa"},{"post_id":"ck3ri9y6n004zt6s6tkm7eia2","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y8a00art6s63ymvqny4"},{"post_id":"ck3ri9y6n004zt6s6tkm7eia2","tag_id":"ck3ri9y8700a6t6s68kj9paxg","_id":"ck3ri9y8a00ast6s67f8g8e7p"},{"post_id":"ck3ri9y6n004zt6s6tkm7eia2","tag_id":"ck3ri9y8800a9t6s6gaoou4vj","_id":"ck3ri9y8b00aut6s6r73g0ris"},{"post_id":"ck3ri9y6o0051t6s6q1sawkej","tag_id":"ck3ri9y6n004yt6s66ry0eb67","_id":"ck3ri9y8b00avt6s6pp5zzhyt"},{"post_id":"ck3ri9y6o0051t6s6q1sawkej","tag_id":"ck3ri9y8a00ant6s6kjtf2gpu","_id":"ck3ri9y8b00axt6s62b82iwbu"},{"post_id":"ck3ri9y6o0051t6s6q1sawkej","tag_id":"ck3ri9y8a00aqt6s6slx99dr7","_id":"ck3ri9y8b00ayt6s61iafo55a"},{"post_id":"ck3ri9y6p0056t6s619td3va4","tag_id":"ck3ri9y8800act6s6wah8hzwq","_id":"ck3ri9y8c00b0t6s6vfgs464s"},{"post_id":"ck3ri9y6p0056t6s619td3va4","tag_id":"ck3ri9y8800aft6s6e7qr5fql","_id":"ck3ri9y8c00b1t6s69k62q1ju"},{"post_id":"ck3ri9y6q0058t6s6sya61n5h","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y8d00b4t6s6jby2keg9"},{"post_id":"ck3ri9y6q0058t6s6sya61n5h","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y8d00b5t6s61azfhps1"},{"post_id":"ck3ri9y6q0058t6s6sya61n5h","tag_id":"ck3ri9y7d006gt6s6vk4zipkf","_id":"ck3ri9y8d00b7t6s6bjumlz9p"},{"post_id":"ck3ri9y6q0058t6s6sya61n5h","tag_id":"ck3ri9y8c00b2t6s6g9v44bli","_id":"ck3ri9y8d00b8t6s6eunzrnpa"},{"post_id":"ck3ri9y6s005ct6s6y2ms3u8c","tag_id":"ck3ri9y8900ait6s6rf1cczm9","_id":"ck3ri9y8e00bbt6s6rfcotp4i"},{"post_id":"ck3ri9y6s005ct6s6y2ms3u8c","tag_id":"ck3ri9y8d00b6t6s660xsdsj1","_id":"ck3ri9y8e00bct6s69g3f8h5p"},{"post_id":"ck3ri9y6s005ct6s6y2ms3u8c","tag_id":"ck3ri9y8d00b9t6s67vaiwqd7","_id":"ck3ri9y8e00bet6s61th5dabe"},{"post_id":"ck3ri9y6t005ft6s6e9gqzegv","tag_id":"ck3ri9y8800act6s6wah8hzwq","_id":"ck3ri9y8f00bit6s6o7z8zwuc"},{"post_id":"ck3ri9y6t005ft6s6e9gqzegv","tag_id":"ck3ri9y8800aft6s6e7qr5fql","_id":"ck3ri9y8f00bjt6s69eqp4of2"},{"post_id":"ck3ri9y6t005ft6s6e9gqzegv","tag_id":"ck3ri9y8f00bft6s68ogj8aev","_id":"ck3ri9y8g00blt6s632xzb9kg"},{"post_id":"ck3ri9y6t005ft6s6e9gqzegv","tag_id":"ck3ri9y8f00bgt6s6c2pufcdb","_id":"ck3ri9y8g00bmt6s6by912nbz"},{"post_id":"ck3ri9y6u005it6s6a1ji0vbe","tag_id":"ck3ri9y8f00bht6s6msh48cxl","_id":"ck3ri9y8g00bot6s6faxr7b9y"},{"post_id":"ck3ri9y6u005it6s6a1ji0vbe","tag_id":"ck3ri9y8f00bkt6s6ousufc6e","_id":"ck3ri9y8g00bpt6s6x44tfqdo"},{"post_id":"ck3ri9y6w005mt6s6r0cpyc6q","tag_id":"ck3ri9y8900ait6s6rf1cczm9","_id":"ck3ri9y8h00but6s6w59vhxgg"},{"post_id":"ck3ri9y6w005mt6s6r0cpyc6q","tag_id":"ck3ri9y8g00bqt6s6aeub1mig","_id":"ck3ri9y8h00bvt6s6jzz90c32"},{"post_id":"ck3ri9y6w005mt6s6r0cpyc6q","tag_id":"ck3ri9y8g00brt6s6vmskmb5d","_id":"ck3ri9y8i00bxt6s6r9zrnnzk"},{"post_id":"ck3ri9y6w005mt6s6r0cpyc6q","tag_id":"ck3ri9y8h00bst6s6ywmpydf3","_id":"ck3ri9y8i00byt6s6e5zk3t9l"},{"post_id":"ck3ri9y6y005nt6s6hjq4bfdq","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y8i00c0t6s6xx979m20"},{"post_id":"ck3ri9y6y005nt6s6hjq4bfdq","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y8i00c1t6s6k5i1jeoo"},{"post_id":"ck3ri9y6y005nt6s6hjq4bfdq","tag_id":"ck3ri9y7d006gt6s6vk4zipkf","_id":"ck3ri9y8j00c3t6s6gd9lwyu5"},{"post_id":"ck3ri9y70005rt6s69wgyzhy6","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y8j00c4t6s6vqq52g5q"},{"post_id":"ck3ri9y70005rt6s69wgyzhy6","tag_id":"ck3ri9y8h00bwt6s6uyqfj32l","_id":"ck3ri9y8j00c6t6s6hdcwprdk"},{"post_id":"ck3ri9y71005tt6s6yr33o0ac","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y8j00c7t6s6jekrd8lg"},{"post_id":"ck3ri9y71005tt6s6yr33o0ac","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y8k00c9t6s6rk3jcisl"},{"post_id":"ck3ri9y71005tt6s6yr33o0ac","tag_id":"ck3ri9y7d006gt6s6vk4zipkf","_id":"ck3ri9y8k00cat6s6j3mpnjjh"},{"post_id":"ck3ri9y71005tt6s6yr33o0ac","tag_id":"ck3ri9y8i00c2t6s65zq33wem","_id":"ck3ri9y8k00cct6s6j06bieet"},{"post_id":"ck3ri9y73005yt6s63s2im3ah","tag_id":"ck3ri9y8900ait6s6rf1cczm9","_id":"ck3ri9y8l00cet6s6assa3o4h"},{"post_id":"ck3ri9y73005yt6s63s2im3ah","tag_id":"ck3ri9y8d00b6t6s660xsdsj1","_id":"ck3ri9y8l00cft6s65hctsllf"},{"post_id":"ck3ri9y73005yt6s63s2im3ah","tag_id":"ck3ri9y8d00b9t6s67vaiwqd7","_id":"ck3ri9y8l00cht6s67pv87ifp"},{"post_id":"ck3ri9y740061t6s6cwrohj2y","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y8m00cjt6s6lal5bpe6"},{"post_id":"ck3ri9y740061t6s6cwrohj2y","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y8m00ckt6s66muksr8n"},{"post_id":"ck3ri9y740061t6s6cwrohj2y","tag_id":"ck3ri9y7d006gt6s6vk4zipkf","_id":"ck3ri9y8n00cmt6s6apquuw54"},{"post_id":"ck3ri9y740061t6s6cwrohj2y","tag_id":"ck3ri9y8c00b2t6s6g9v44bli","_id":"ck3ri9y8n00cnt6s6yfa26y28"},{"post_id":"ck3ri9y750065t6s6gb1uhx6u","tag_id":"ck3ri9y8900ait6s6rf1cczm9","_id":"ck3ri9y8n00cqt6s6gwmeiqpi"},{"post_id":"ck3ri9y750065t6s6gb1uhx6u","tag_id":"ck3ri9y8d00b6t6s660xsdsj1","_id":"ck3ri9y8o00crt6s6d09a3nod"},{"post_id":"ck3ri9y750065t6s6gb1uhx6u","tag_id":"ck3ri9y8n00cot6s6rn1q1v21","_id":"ck3ri9y8o00ctt6s6be6l06pr"},{"post_id":"ck3ri9y790067t6s6ll23wngn","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y8o00cut6s6a5zv9g74"},{"post_id":"ck3ri9y790067t6s6ll23wngn","tag_id":"ck3ri9y8800act6s6wah8hzwq","_id":"ck3ri9y8p00cwt6s686uedrqt"},{"post_id":"ck3ri9y790067t6s6ll23wngn","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y8p00cxt6s6iu71lwzc"},{"post_id":"ck3ri9y7a006at6s66wsiwl4w","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y8q00czt6s69121f3ra"},{"post_id":"ck3ri9y7a006at6s66wsiwl4w","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y8q00d0t6s6helspm3a"},{"post_id":"ck3ri9y7a006at6s66wsiwl4w","tag_id":"ck3ri9y8700a6t6s68kj9paxg","_id":"ck3ri9y8q00d2t6s62f0zgb5a"},{"post_id":"ck3ri9y7a006at6s66wsiwl4w","tag_id":"ck3ri9y8800a9t6s6gaoou4vj","_id":"ck3ri9y8q00d3t6s6bvxycs2h"},{"post_id":"ck3ri9y7c006et6s618wxsum7","tag_id":"ck3ri9y8900ait6s6rf1cczm9","_id":"ck3ri9y8s00d7t6s6j7thxj62"},{"post_id":"ck3ri9y7c006et6s618wxsum7","tag_id":"ck3ri9y8g00bqt6s6aeub1mig","_id":"ck3ri9y8s00d8t6s6x9knmcgx"},{"post_id":"ck3ri9y7c006et6s618wxsum7","tag_id":"ck3ri9y8g00brt6s6vmskmb5d","_id":"ck3ri9y8t00dat6s6oif4rv0b"},{"post_id":"ck3ri9y7c006et6s618wxsum7","tag_id":"ck3ri9y8h00bst6s6ywmpydf3","_id":"ck3ri9y8t00dbt6s6z09qa5i2"},{"post_id":"ck3ri9y7e006kt6s6jcn7d24j","tag_id":"ck3ri9y8900ait6s6rf1cczm9","_id":"ck3ri9y8u00det6s6zdzahusc"},{"post_id":"ck3ri9y7e006kt6s6jcn7d24j","tag_id":"ck3ri9y8d00b6t6s660xsdsj1","_id":"ck3ri9y8u00dft6s63h3r054t"},{"post_id":"ck3ri9y7e006kt6s6jcn7d24j","tag_id":"ck3ri9y8d00b9t6s67vaiwqd7","_id":"ck3ri9y8u00dht6s6ak4c140g"},{"post_id":"ck3ri9y7f006nt6s6n2mohzq8","tag_id":"ck3ri9y8u00ddt6s6ea43dui2","_id":"ck3ri9y8v00dkt6s6j1jwaqut"},{"post_id":"ck3ri9y7f006nt6s6n2mohzq8","tag_id":"ck3ri9y8u00dgt6s6sx1bxjxc","_id":"ck3ri9y8v00dlt6s65d3mo32c"},{"post_id":"ck3ri9y7f006nt6s6n2mohzq8","tag_id":"ck3ri9y8u00dit6s69wdn2bqs","_id":"ck3ri9y8v00dnt6s6k4735srv"},{"post_id":"ck3ri9y7g006rt6s6blbhxk3l","tag_id":"ck3ri9y8v00djt6s6soimd8lz","_id":"ck3ri9y8v00dot6s6yoeaw37r"},{"post_id":"ck3ri9y7h006tt6s6imdizzkx","tag_id":"ck3ri9y6n004yt6s66ry0eb67","_id":"ck3ri9y8w00dqt6s6aeeam5uk"},{"post_id":"ck3ri9y7h006tt6s6imdizzkx","tag_id":"ck3ri9y8v00dmt6s6m33nlh92","_id":"ck3ri9y8w00drt6s6t4505y4m"},{"post_id":"ck3ri9y7i006xt6s6q7sijwqg","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y8w00dtt6s6gx5i9dbz"},{"post_id":"ck3ri9y7i006xt6s6q7sijwqg","tag_id":"ck3ri9y8v00dpt6s6ew0xpkhc","_id":"ck3ri9y8w00dut6s6iko1qhwv"},{"post_id":"ck3ri9y7j0070t6s6n55b2hv4","tag_id":"ck3ri9y57001qt6s69uw6ex2s","_id":"ck3ri9y8x00dwt6s6o46b2xlj"},{"post_id":"ck3ri9y7j0070t6s6n55b2hv4","tag_id":"ck3ri9y5b001xt6s6et295btq","_id":"ck3ri9y8x00dxt6s6am2mcpvw"},{"post_id":"ck3ri9y7j0070t6s6n55b2hv4","tag_id":"ck3ri9y7d006gt6s6vk4zipkf","_id":"ck3ri9y8y00dzt6s6ojmivw6a"},{"post_id":"ck3ri9y7j0070t6s6n55b2hv4","tag_id":"ck3ri9y8c00b2t6s6g9v44bli","_id":"ck3ri9y8y00e0t6s674yeb6kg"},{"post_id":"ck3ri9y7l0075t6s67dhr8k4z","tag_id":"ck3ri9y8800act6s6wah8hzwq","_id":"ck3ri9y8y00e1t6s6mts9jhi1"},{"post_id":"ck3ri9y7l0075t6s67dhr8k4z","tag_id":"ck3ri9y8800aft6s6e7qr5fql","_id":"ck3ri9y8y00e2t6s6j30qzo5j"}],"Tag":[{"name":"MySQL","_id":"ck3ri9y460005t6s64bikkycq"},{"name":"MySQL实战45讲","_id":"ck3ri9y4c000ct6s6v29zsf9l"},{"name":"算法","_id":"ck3ri9y57001qt6s69uw6ex2s"},{"name":"机器学习","_id":"ck3ri9y5b001xt6s6et295btq"},{"name":"决策树","_id":"ck3ri9y5e0025t6s6mvt2x01t"},{"name":"全文搜索","_id":"ck3ri9y5x003dt6s698lp2h99"},{"name":"Elasticsearch","_id":"ck3ri9y5z003lt6s6jjwfyhrt"},{"name":"Mac","_id":"ck3ri9y62003rt6s6o3ekuouk"},{"name":"Homebrew","_id":"ck3ri9y65003zt6s6ngoc7yft"},{"name":"Hexo","_id":"ck3ri9y690047t6s6yry8naj3"},{"name":"Java","_id":"ck3ri9y6n004yt6s66ry0eb67"},{"name":"JavaAgent","_id":"ck3ri9y6p0055t6s6zv0gkeso"},{"name":"NoSQL","_id":"ck3ri9y6s005bt6s66em30y0t"},{"name":"Redis","_id":"ck3ri9y6v005kt6s644nf0dmn"},{"name":"消息队列","_id":"ck3ri9y72005wt6s6wh0sz74e"},{"name":"Kafka","_id":"ck3ri9y750063t6s6n6j3mzhw"},{"name":"监督学习","_id":"ck3ri9y7d006gt6s6vk4zipkf"},{"name":"KNN","_id":"ck3ri9y7g006ot6s64ctseo61"},{"name":"LaTeX","_id":"ck3ri9y7i006vt6s65ljv9ex2"},{"name":"公式","_id":"ck3ri9y7l0072t6s6u935nsja"},{"name":"Git","_id":"ck3ri9y7o007ft6s6g8wtgr7i"},{"name":"SQL","_id":"ck3ri9y7p007kt6s69dk5ds99"},{"name":"SQL转换","_id":"ck3ri9y7p007pt6s6jnlqjxhm"},{"name":"Markdown","_id":"ck3ri9y7q007ut6s6a55d8sg5"},{"name":"深度学习","_id":"ck3ri9y7s0084t6s6uddh2zkm"},{"name":"深度学习框架","_id":"ck3ri9y7t008at6s644w5y15z"},{"name":"PyTorch","_id":"ck3ri9y7u008dt6s6lx5lv8ui"},{"name":"词法分析","_id":"ck3ri9y810099t6s6yxyzfnat"},{"name":"SpringBoot","_id":"ck3ri9y82009et6s6284fi9r6"},{"name":"ZooKeeper","_id":"ck3ri9y83009it6s6ejctrl8x"},{"name":"Iterm2","_id":"ck3ri9y83009lt6s65bkpu32t"},{"name":"Python","_id":"ck3ri9y84009ot6s6ji16r51s"},{"name":"Tensorflow","_id":"ck3ri9y85009ut6s6c7xn21qj"},{"name":"RPC","_id":"ck3ri9y86009vt6s62jg8pbe5"},{"name":"Thrift","_id":"ck3ri9y86009yt6s6p8a2u74w"},{"name":"自然语言处理","_id":"ck3ri9y8600a1t6s6o3gqd44u"},{"name":"中文分词","_id":"ck3ri9y8700a4t6s6pbvzauyp"},{"name":"信息论","_id":"ck3ri9y8700a6t6s68kj9paxg"},{"name":"信息熵","_id":"ck3ri9y8800a9t6s6gaoou4vj"},{"name":"人工智能","_id":"ck3ri9y8800act6s6wah8hzwq"},{"name":"神经网络","_id":"ck3ri9y8800aft6s6e7qr5fql"},{"name":"数学","_id":"ck3ri9y8900ait6s6rf1cczm9"},{"name":"Tomcat","_id":"ck3ri9y8a00ant6s6kjtf2gpu"},{"name":"Slow","_id":"ck3ri9y8a00aqt6s6slx99dr7"},{"name":"贝叶斯","_id":"ck3ri9y8c00b2t6s6g9v44bli"},{"name":"概率与统计","_id":"ck3ri9y8d00b6t6s660xsdsj1"},{"name":"方差","_id":"ck3ri9y8d00b9t6s67vaiwqd7"},{"name":"前馈神经网络","_id":"ck3ri9y8f00bft6s68ogj8aev"},{"name":"卷积神经网络","_id":"ck3ri9y8f00bgt6s6c2pufcdb"},{"name":"Algorithm","_id":"ck3ri9y8f00bht6s6msh48cxl"},{"name":"Hash","_id":"ck3ri9y8f00bkt6s6ousufc6e"},{"name":"高等数学","_id":"ck3ri9y8g00bqt6s6aeub1mig"},{"name":"极限","_id":"ck3ri9y8g00brt6s6vmskmb5d"},{"name":"微积分","_id":"ck3ri9y8h00bst6s6ywmpydf3"},{"name":"排序","_id":"ck3ri9y8h00bwt6s6uyqfj32l"},{"name":"SVM","_id":"ck3ri9y8i00c2t6s65zq33wem"},{"name":"期望","_id":"ck3ri9y8n00cot6s6rn1q1v21"},{"name":"编译原理","_id":"ck3ri9y8u00ddt6s6ea43dui2"},{"name":"编译器","_id":"ck3ri9y8u00dgt6s6sx1bxjxc"},{"name":"解释器","_id":"ck3ri9y8u00dit6s69wdn2bqs"},{"name":"设计模式","_id":"ck3ri9y8v00djt6s6soimd8lz"},{"name":"Trace","_id":"ck3ri9y8v00dmt6s6m33nlh92"},{"name":"负载均衡","_id":"ck3ri9y8v00dpt6s6ew0xpkhc"}]}}